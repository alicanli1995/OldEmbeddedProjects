
004_LED_WITH_BUTTON_NOTIFY_SEGGER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005060  08005060  00015060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005168  08005168  00015168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  0800516c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  7 .bss          000154c8  20000028  20000028  00020028  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200154f0  200154f0  00020028  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012259  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000025dd  00000000  00000000  000322b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000f58  00000000  00000000  00034890  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e20  00000000  00000000  000357e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000079e6  00000000  00000000  00036608  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000057a1  00000000  00000000  0003dfee  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004378f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000040ac  00000000  00000000  0004380c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000478b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000028 	.word	0x20000028
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005048 	.word	0x08005048

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	08005048 	.word	0x08005048

080001d0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	460b      	mov	r3, r1
 80001da:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80001e0:	4b08      	ldr	r3, [pc, #32]	; (8000204 <DAC_SetChannel1Data+0x34>)
 80001e2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80001e4:	68fa      	ldr	r2, [r7, #12]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4413      	add	r3, r2
 80001ea:	3308      	adds	r3, #8
 80001ec:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	461a      	mov	r2, r3
 80001f2:	887b      	ldrh	r3, [r7, #2]
 80001f4:	6013      	str	r3, [r2, #0]
}
 80001f6:	bf00      	nop
 80001f8:	3714      	adds	r7, #20
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	40007400 	.word	0x40007400

08000208 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800021c:	68fa      	ldr	r2, [r7, #12]
 800021e:	4b25      	ldr	r3, [pc, #148]	; (80002b4 <DMA_Init+0xac>)
 8000220:	4013      	ands	r3, r2
 8000222:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000232:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800023e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	6a1b      	ldr	r3, [r3, #32]
 8000244:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800024a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000250:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000256:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800025c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	4313      	orrs	r3, r2
 8000262:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	68fa      	ldr	r2, [r7, #12]
 8000268:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	f023 0307 	bic.w	r3, r3, #7
 8000276:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000280:	4313      	orrs	r3, r2
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	4313      	orrs	r3, r2
 8000286:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	68fa      	ldr	r2, [r7, #12]
 800028c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	691a      	ldr	r2, [r3, #16]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	685a      	ldr	r2, [r3, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	689a      	ldr	r2, [r3, #8]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60da      	str	r2, [r3, #12]
}
 80002a6:	bf00      	nop
 80002a8:	3714      	adds	r7, #20
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	f01c803f 	.word	0xf01c803f

080002b8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	460b      	mov	r3, r1
 80002c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80002c4:	78fb      	ldrb	r3, [r7, #3]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d006      	beq.n	80002d8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 0201 	orr.w	r2, r3, #1
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80002d6:	e005      	b.n	80002e4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f023 0201 	bic.w	r2, r3, #1
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	601a      	str	r2, [r3, #0]
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80002f8:	2300      	movs	r3, #0
 80002fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f003 0301 	and.w	r3, r3, #1
 8000304:	2b00      	cmp	r3, #0
 8000306:	d002      	beq.n	800030e <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000308:	2301      	movs	r3, #1
 800030a:	73fb      	strb	r3, [r7, #15]
 800030c:	e001      	b.n	8000312 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800030e:	2300      	movs	r3, #0
 8000310:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000312:	7bfb      	ldrb	r3, [r7, #15]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr

08000320 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000320:	b480      	push	{r7}
 8000322:	b087      	sub	sp, #28
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800032a:	2300      	movs	r3, #0
 800032c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a15      	ldr	r2, [pc, #84]	; (800038c <DMA_GetFlagStatus+0x6c>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d802      	bhi.n	8000340 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800033a:	4b15      	ldr	r3, [pc, #84]	; (8000390 <DMA_GetFlagStatus+0x70>)
 800033c:	613b      	str	r3, [r7, #16]
 800033e:	e001      	b.n	8000344 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000340:	4b14      	ldr	r3, [pc, #80]	; (8000394 <DMA_GetFlagStatus+0x74>)
 8000342:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800034a:	2b00      	cmp	r3, #0
 800034c:	d003      	beq.n	8000356 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e002      	b.n	800035c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000356:	693b      	ldr	r3, [r7, #16]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000362:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000366:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000368:	68fa      	ldr	r2, [r7, #12]
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	4013      	ands	r3, r2
 800036e:	2b00      	cmp	r3, #0
 8000370:	d002      	beq.n	8000378 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000372:	2301      	movs	r3, #1
 8000374:	75fb      	strb	r3, [r7, #23]
 8000376:	e001      	b.n	800037c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000378:	2300      	movs	r3, #0
 800037a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800037c:	7dfb      	ldrb	r3, [r7, #23]
}
 800037e:	4618      	mov	r0, r3
 8000380:	371c      	adds	r7, #28
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	4002640f 	.word	0x4002640f
 8000390:	40026000 	.word	0x40026000
 8000394:	40026400 	.word	0x40026400

08000398 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a10      	ldr	r2, [pc, #64]	; (80003e8 <DMA_ClearFlag+0x50>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d802      	bhi.n	80003b0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <DMA_ClearFlag+0x54>)
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	e001      	b.n	80003b4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <DMA_ClearFlag+0x58>)
 80003b2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d007      	beq.n	80003ce <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003c4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80003cc:	e006      	b.n	80003dc <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003d4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	6093      	str	r3, [r2, #8]
}
 80003dc:	bf00      	nop
 80003de:	3714      	adds	r7, #20
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	4002640f 	.word	0x4002640f
 80003ec:	40026000 	.word	0x40026000
 80003f0:	40026400 	.word	0x40026400

080003f4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b087      	sub	sp, #28
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800040a:	2300      	movs	r3, #0
 800040c:	617b      	str	r3, [r7, #20]
 800040e:	e076      	b.n	80004fe <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000410:	2201      	movs	r2, #1
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	fa02 f303 	lsl.w	r3, r2, r3
 8000418:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	4013      	ands	r3, r2
 8000422:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000424:	68fa      	ldr	r2, [r7, #12]
 8000426:	693b      	ldr	r3, [r7, #16]
 8000428:	429a      	cmp	r2, r3
 800042a:	d165      	bne.n	80004f8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	2103      	movs	r1, #3
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	43db      	mvns	r3, r3
 800043c:	401a      	ands	r2, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	791b      	ldrb	r3, [r3, #4]
 800044a:	4619      	mov	r1, r3
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	431a      	orrs	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d003      	beq.n	800046a <GPIO_Init+0x76>
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	791b      	ldrb	r3, [r3, #4]
 8000466:	2b02      	cmp	r3, #2
 8000468:	d12e      	bne.n	80004c8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	689a      	ldr	r2, [r3, #8]
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	2103      	movs	r1, #3
 8000474:	fa01 f303 	lsl.w	r3, r1, r3
 8000478:	43db      	mvns	r3, r3
 800047a:	401a      	ands	r2, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	689a      	ldr	r2, [r3, #8]
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	795b      	ldrb	r3, [r3, #5]
 8000488:	4619      	mov	r1, r3
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	fa01 f303 	lsl.w	r3, r1, r3
 8000492:	431a      	orrs	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	685a      	ldr	r2, [r3, #4]
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	b29b      	uxth	r3, r3
 80004a0:	4619      	mov	r1, r3
 80004a2:	2301      	movs	r3, #1
 80004a4:	408b      	lsls	r3, r1
 80004a6:	43db      	mvns	r3, r3
 80004a8:	401a      	ands	r2, r3
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	683a      	ldr	r2, [r7, #0]
 80004b4:	7992      	ldrb	r2, [r2, #6]
 80004b6:	4611      	mov	r1, r2
 80004b8:	697a      	ldr	r2, [r7, #20]
 80004ba:	b292      	uxth	r2, r2
 80004bc:	fa01 f202 	lsl.w	r2, r1, r2
 80004c0:	b292      	uxth	r2, r2
 80004c2:	431a      	orrs	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	68da      	ldr	r2, [r3, #12]
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	2103      	movs	r1, #3
 80004d4:	fa01 f303 	lsl.w	r3, r1, r3
 80004d8:	43db      	mvns	r3, r3
 80004da:	401a      	ands	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	68da      	ldr	r2, [r3, #12]
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	79db      	ldrb	r3, [r3, #7]
 80004e8:	4619      	mov	r1, r3
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	431a      	orrs	r2, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	3301      	adds	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	2b0f      	cmp	r3, #15
 8000502:	d985      	bls.n	8000410 <GPIO_Init+0x1c>
    }
  }
}
 8000504:	bf00      	nop
 8000506:	371c      	adds	r7, #28
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800051c:	2300      	movs	r3, #0
 800051e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	691a      	ldr	r2, [r3, #16]
 8000524:	887b      	ldrh	r3, [r7, #2]
 8000526:	4013      	ands	r3, r2
 8000528:	2b00      	cmp	r3, #0
 800052a:	d002      	beq.n	8000532 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800052c:	2301      	movs	r3, #1
 800052e:	73fb      	strb	r3, [r7, #15]
 8000530:	e001      	b.n	8000536 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000532:	2300      	movs	r3, #0
 8000534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000536:	7bfb      	ldrb	r3, [r7, #15]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	887b      	ldrh	r3, [r7, #2]
 8000556:	405a      	eors	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	615a      	str	r2, [r3, #20]
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800056c:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <RCC_DeInit+0x50>)
 800056e:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <RCC_DeInit+0x50>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <RCC_DeInit+0x50>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <RCC_DeInit+0x50>)
 8000580:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <RCC_DeInit+0x50>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8000588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800058c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <RCC_DeInit+0x50>)
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <RCC_DeInit+0x54>)
 8000592:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <RCC_DeInit+0x50>)
 8000596:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <RCC_DeInit+0x58>)
 8000598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <RCC_DeInit+0x50>)
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <RCC_DeInit+0x50>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <RCC_DeInit+0x50>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40023800 	.word	0x40023800
 80005bc:	24003010 	.word	0x24003010
 80005c0:	20003000 	.word	0x20003000

080005c4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005d0:	78fb      	ldrb	r3, [r7, #3]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d006      	beq.n	80005e4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80005d6:	490a      	ldr	r1, [pc, #40]	; (8000600 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4313      	orrs	r3, r2
 80005e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80005e2:	e006      	b.n	80005f2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80005e4:	4906      	ldr	r1, [pc, #24]	; (8000600 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	43db      	mvns	r3, r3
 80005ee:	4013      	ands	r3, r2
 80005f0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800

08000604 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	887a      	ldrh	r2, [r7, #2]
 8000614:	819a      	strh	r2, [r3, #12]
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000622:	b480      	push	{r7}
 8000624:	b085      	sub	sp, #20
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	460b      	mov	r3, r1
 800062c:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800062e:	2300      	movs	r3, #0
 8000630:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	891b      	ldrh	r3, [r3, #8]
 8000636:	b29a      	uxth	r2, r3
 8000638:	887b      	ldrh	r3, [r7, #2]
 800063a:	4013      	ands	r3, r2
 800063c:	b29b      	uxth	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d002      	beq.n	8000648 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000642:	2301      	movs	r3, #1
 8000644:	73fb      	strb	r3, [r7, #15]
 8000646:	e001      	b.n	800064c <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800064c:	7bfb      	ldrb	r3, [r7, #15]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f103 0208 	add.w	r2, r3, #8
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f04f 32ff 	mov.w	r2, #4294967295
 8000672:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f103 0208 	add.w	r2, r3, #8
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f103 0208 	add.w	r2, r3, #8
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	689a      	ldr	r2, [r3, #8]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	683a      	ldr	r2, [r7, #0]
 80006de:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	1c5a      	adds	r2, r3, #1
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000712:	d103      	bne.n	800071c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	691b      	ldr	r3, [r3, #16]
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	e00c      	b.n	8000736 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3308      	adds	r3, #8
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	e002      	b.n	800072a <vListInsert+0x2e>
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	429a      	cmp	r2, r3
 8000734:	d9f6      	bls.n	8000724 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	685a      	ldr	r2, [r3, #4]
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	683a      	ldr	r2, [r7, #0]
 8000744:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	601a      	str	r2, [r3, #0]
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800076e:	b480      	push	{r7}
 8000770:	b085      	sub	sp, #20
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	691b      	ldr	r3, [r3, #16]
 800077a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	6892      	ldr	r2, [r2, #8]
 8000784:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	6852      	ldr	r2, [r2, #4]
 800078e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	685a      	ldr	r2, [r3, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	429a      	cmp	r2, r3
 8000798:	d103      	bne.n	80007a2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	689a      	ldr	r2, [r3, #8]
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	1e5a      	subs	r2, r3, #1
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	681b      	ldr	r3, [r3, #0]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3b04      	subs	r3, #4
 80007d4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	3b04      	subs	r3, #4
 80007e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	f023 0201 	bic.w	r2, r3, #1
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	3b04      	subs	r3, #4
 80007f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80007f4:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <pxPortInitialiseStack+0x64>)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3b14      	subs	r3, #20
 80007fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3b04      	subs	r3, #4
 800080a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f06f 0202 	mvn.w	r2, #2
 8000812:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3b20      	subs	r3, #32
 8000818:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800081a:	68fb      	ldr	r3, [r7, #12]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	0800082d 	.word	0x0800082d

0800082c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <prvTaskExitError+0x50>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800083e:	d009      	beq.n	8000854 <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000844:	f383 8811 	msr	BASEPRI, r3
 8000848:	f3bf 8f6f 	isb	sy
 800084c:	f3bf 8f4f 	dsb	sy
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	e7fe      	b.n	8000852 <prvTaskExitError+0x26>
 8000854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000858:	f383 8811 	msr	BASEPRI, r3
 800085c:	f3bf 8f6f 	isb	sy
 8000860:	f3bf 8f4f 	dsb	sy
 8000864:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000866:	bf00      	nop
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0fc      	beq.n	8000868 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	20000000 	.word	0x20000000

08000880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <pxCurrentTCBConst2>)
 8000882:	6819      	ldr	r1, [r3, #0]
 8000884:	6808      	ldr	r0, [r1, #0]
 8000886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800088a:	f380 8809 	msr	PSP, r0
 800088e:	f3bf 8f6f 	isb	sy
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	f380 8811 	msr	BASEPRI, r0
 800089a:	4770      	bx	lr
 800089c:	f3af 8000 	nop.w

080008a0 <pxCurrentTCBConst2>:
 80008a0:	20012c6c 	.word	0x20012c6c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop

080008a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80008a8:	4808      	ldr	r0, [pc, #32]	; (80008cc <prvPortStartFirstTask+0x24>)
 80008aa:	6800      	ldr	r0, [r0, #0]
 80008ac:	6800      	ldr	r0, [r0, #0]
 80008ae:	f380 8808 	msr	MSP, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	f380 8814 	msr	CONTROL, r0
 80008ba:	b662      	cpsie	i
 80008bc:	b661      	cpsie	f
 80008be:	f3bf 8f4f 	dsb	sy
 80008c2:	f3bf 8f6f 	isb	sy
 80008c6:	df00      	svc	0
 80008c8:	bf00      	nop
 80008ca:	0000      	.short	0x0000
 80008cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop

080008d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80008da:	4b44      	ldr	r3, [pc, #272]	; (80009ec <xPortStartScheduler+0x118>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a44      	ldr	r2, [pc, #272]	; (80009f0 <xPortStartScheduler+0x11c>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d109      	bne.n	80008f8 <xPortStartScheduler+0x24>
 80008e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e8:	f383 8811 	msr	BASEPRI, r3
 80008ec:	f3bf 8f6f 	isb	sy
 80008f0:	f3bf 8f4f 	dsb	sy
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	e7fe      	b.n	80008f6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80008f8:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <xPortStartScheduler+0x118>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a3d      	ldr	r2, [pc, #244]	; (80009f4 <xPortStartScheduler+0x120>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d109      	bne.n	8000916 <xPortStartScheduler+0x42>
 8000902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000906:	f383 8811 	msr	BASEPRI, r3
 800090a:	f3bf 8f6f 	isb	sy
 800090e:	f3bf 8f4f 	dsb	sy
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	e7fe      	b.n	8000914 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000916:	4b38      	ldr	r3, [pc, #224]	; (80009f8 <xPortStartScheduler+0x124>)
 8000918:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	22ff      	movs	r2, #255	; 0xff
 8000926:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b30      	ldr	r3, [pc, #192]	; (80009fc <xPortStartScheduler+0x128>)
 800093c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800093e:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <xPortStartScheduler+0x12c>)
 8000940:	2207      	movs	r2, #7
 8000942:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000944:	e009      	b.n	800095a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8000946:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <xPortStartScheduler+0x12c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3b01      	subs	r3, #1
 800094c:	4a2c      	ldr	r2, [pc, #176]	; (8000a00 <xPortStartScheduler+0x12c>)
 800094e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000950:	78fb      	ldrb	r3, [r7, #3]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	b2db      	uxtb	r3, r3
 8000958:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800095a:	78fb      	ldrb	r3, [r7, #3]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000962:	2b80      	cmp	r3, #128	; 0x80
 8000964:	d0ef      	beq.n	8000946 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <xPortStartScheduler+0x12c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f1c3 0307 	rsb	r3, r3, #7
 800096e:	2b04      	cmp	r3, #4
 8000970:	d009      	beq.n	8000986 <xPortStartScheduler+0xb2>
 8000972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000976:	f383 8811 	msr	BASEPRI, r3
 800097a:	f3bf 8f6f 	isb	sy
 800097e:	f3bf 8f4f 	dsb	sy
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	e7fe      	b.n	8000984 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000986:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <xPortStartScheduler+0x12c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <xPortStartScheduler+0x12c>)
 800098e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000990:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <xPortStartScheduler+0x12c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <xPortStartScheduler+0x12c>)
 800099a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80009a4:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <xPortStartScheduler+0x130>)
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <xPortStartScheduler+0x130>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ae:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80009b0:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <xPortStartScheduler+0x130>)
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <xPortStartScheduler+0x130>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80009ba:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80009bc:	f000 f8d4 	bl	8000b68 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <xPortStartScheduler+0x134>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80009c6:	f000 f8f3 	bl	8000bb0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80009ca:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <xPortStartScheduler+0x138>)
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <xPortStartScheduler+0x138>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80009d4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80009d6:	f7ff ff67 	bl	80008a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80009da:	f001 fba9 	bl	8002130 <vTaskSwitchContext>
    prvTaskExitError();
 80009de:	f7ff ff25 	bl	800082c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	e000ed00 	.word	0xe000ed00
 80009f0:	410fc271 	.word	0x410fc271
 80009f4:	410fc270 	.word	0x410fc270
 80009f8:	e000e400 	.word	0xe000e400
 80009fc:	20000044 	.word	0x20000044
 8000a00:	20000048 	.word	0x20000048
 8000a04:	e000ed20 	.word	0xe000ed20
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	e000ef34 	.word	0xe000ef34

08000a10 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a1a:	f383 8811 	msr	BASEPRI, r3
 8000a1e:	f3bf 8f6f 	isb	sy
 8000a22:	f3bf 8f4f 	dsb	sy
 8000a26:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <vPortEnterCritical+0x54>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <vPortEnterCritical+0x54>)
 8000a30:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <vPortEnterCritical+0x54>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d10e      	bne.n	8000a58 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <vPortEnterCritical+0x58>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d009      	beq.n	8000a58 <vPortEnterCritical+0x48>
 8000a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a48:	f383 8811 	msr	BASEPRI, r3
 8000a4c:	f3bf 8f6f 	isb	sy
 8000a50:	f3bf 8f4f 	dsb	sy
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	e7fe      	b.n	8000a56 <vPortEnterCritical+0x46>
    }
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	20000000 	.word	0x20000000
 8000a68:	e000ed04 	.word	0xe000ed04

08000a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <vPortExitCritical+0x4c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d109      	bne.n	8000a8e <vPortExitCritical+0x22>
 8000a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a7e:	f383 8811 	msr	BASEPRI, r3
 8000a82:	f3bf 8f6f 	isb	sy
 8000a86:	f3bf 8f4f 	dsb	sy
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	e7fe      	b.n	8000a8c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <vPortExitCritical+0x4c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <vPortExitCritical+0x4c>)
 8000a96:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <vPortExitCritical+0x4c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d104      	bne.n	8000aaa <vPortExitCritical+0x3e>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	00000000 	.word	0x00000000

08000ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000ac0:	f3ef 8009 	mrs	r0, PSP
 8000ac4:	f3bf 8f6f 	isb	sy
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <pxCurrentTCBConst>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	f01e 0f10 	tst.w	lr, #16
 8000ad0:	bf08      	it	eq
 8000ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ada:	6010      	str	r0, [r2, #0]
 8000adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000ae4:	f380 8811 	msr	BASEPRI, r0
 8000ae8:	f3bf 8f4f 	dsb	sy
 8000aec:	f3bf 8f6f 	isb	sy
 8000af0:	f001 fb1e 	bl	8002130 <vTaskSwitchContext>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	f380 8811 	msr	BASEPRI, r0
 8000afc:	bc09      	pop	{r0, r3}
 8000afe:	6819      	ldr	r1, [r3, #0]
 8000b00:	6808      	ldr	r0, [r1, #0]
 8000b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b06:	f01e 0f10 	tst.w	lr, #16
 8000b0a:	bf08      	it	eq
 8000b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000b10:	f380 8809 	msr	PSP, r0
 8000b14:	f3bf 8f6f 	isb	sy
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	f3af 8000 	nop.w

08000b20 <pxCurrentTCBConst>:
 8000b20:	20012c6c 	.word	0x20012c6c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop

08000b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
        __asm volatile
 8000b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b32:	f383 8811 	msr	BASEPRI, r3
 8000b36:	f3bf 8f6f 	isb	sy
 8000b3a:	f3bf 8f4f 	dsb	sy
 8000b3e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000b40:	f001 fa3a 	bl	8001fb8 <xTaskIncrementTick>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <SysTick_Handler+0x3c>)
 8000b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	e000ed04 	.word	0xe000ed04

08000b68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <vPortSetupTimerInterrupt+0x34>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <vPortSetupTimerInterrupt+0x38>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <vPortSetupTimerInterrupt+0x3c>)
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <vPortSetupTimerInterrupt+0x40>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	490b      	ldr	r1, [pc, #44]	; (8000bac <vPortSetupTimerInterrupt+0x44>)
 8000b80:	fba1 1303 	umull	r1, r3, r1, r3
 8000b84:	099b      	lsrs	r3, r3, #6
 8000b86:	3b01      	subs	r3, #1
 8000b88:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000b8a:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <vPortSetupTimerInterrupt+0x34>)
 8000b8c:	2207      	movs	r2, #7
 8000b8e:	601a      	str	r2, [r3, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e010 	.word	0xe000e010
 8000ba0:	e000e018 	.word	0xe000e018
 8000ba4:	e000e014 	.word	0xe000e014
 8000ba8:	20000014 	.word	0x20000014
 8000bac:	10624dd3 	.word	0x10624dd3

08000bb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8000bb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000bc0 <vPortEnableVFP+0x10>
 8000bb4:	6801      	ldr	r1, [r0, #0]
 8000bb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000bba:	6001      	str	r1, [r0, #0]
 8000bbc:	4770      	bx	lr
 8000bbe:	0000      	.short	0x0000
 8000bc0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop

08000bc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8000bce:	f3ef 8305 	mrs	r3, IPSR
 8000bd2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2b0f      	cmp	r3, #15
 8000bd8:	d913      	bls.n	8000c02 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000bda:	4a16      	ldr	r2, [pc, #88]	; (8000c34 <vPortValidateInterruptPriority+0x6c>)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <vPortValidateInterruptPriority+0x70>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	7afa      	ldrb	r2, [r7, #11]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d209      	bcs.n	8000c02 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8000bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bf2:	f383 8811 	msr	BASEPRI, r3
 8000bf6:	f3bf 8f6f 	isb	sy
 8000bfa:	f3bf 8f4f 	dsb	sy
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	e7fe      	b.n	8000c00 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <vPortValidateInterruptPriority+0x74>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <vPortValidateInterruptPriority+0x78>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d909      	bls.n	8000c26 <vPortValidateInterruptPriority+0x5e>
 8000c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c16:	f383 8811 	msr	BASEPRI, r3
 8000c1a:	f3bf 8f6f 	isb	sy
 8000c1e:	f3bf 8f4f 	dsb	sy
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	e7fe      	b.n	8000c24 <vPortValidateInterruptPriority+0x5c>
    }
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000e3f0 	.word	0xe000e3f0
 8000c38:	20000044 	.word	0x20000044
 8000c3c:	e000ed0c 	.word	0xe000ed0c
 8000c40:	20000048 	.word	0x20000048

08000c44 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8000c50:	f001 f8e2 	bl	8001e18 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8000c54:	4b59      	ldr	r3, [pc, #356]	; (8000dbc <pvPortMalloc+0x178>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d101      	bne.n	8000c60 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8000c5c:	f000 f91a 	bl	8000e94 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000c60:	4b57      	ldr	r3, [pc, #348]	; (8000dc0 <pvPortMalloc+0x17c>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4013      	ands	r3, r2
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f040 8091 	bne.w	8000d90 <pvPortMalloc+0x14c>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d01c      	beq.n	8000cae <pvPortMalloc+0x6a>
            {
                xWantedSize += xHeapStructSize;
 8000c74:	2208      	movs	r2, #8
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d013      	beq.n	8000cae <pvPortMalloc+0x6a>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f023 0307 	bic.w	r3, r3, #7
 8000c8c:	3308      	adds	r3, #8
 8000c8e:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d009      	beq.n	8000cae <pvPortMalloc+0x6a>
 8000c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c9e:	f383 8811 	msr	BASEPRI, r3
 8000ca2:	f3bf 8f6f 	isb	sy
 8000ca6:	f3bf 8f4f 	dsb	sy
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	e7fe      	b.n	8000cac <pvPortMalloc+0x68>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d06d      	beq.n	8000d90 <pvPortMalloc+0x14c>
 8000cb4:	4b43      	ldr	r3, [pc, #268]	; (8000dc4 <pvPortMalloc+0x180>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d868      	bhi.n	8000d90 <pvPortMalloc+0x14c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 8000cbe:	4b42      	ldr	r3, [pc, #264]	; (8000dc8 <pvPortMalloc+0x184>)
 8000cc0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8000cc2:	4b41      	ldr	r3, [pc, #260]	; (8000dc8 <pvPortMalloc+0x184>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000cc8:	e004      	b.n	8000cd4 <pvPortMalloc+0x90>
                {
                    pxPreviousBlock = pxBlock;
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d203      	bcs.n	8000ce6 <pvPortMalloc+0xa2>
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f1      	bne.n	8000cca <pvPortMalloc+0x86>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8000ce6:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <pvPortMalloc+0x178>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d04f      	beq.n	8000d90 <pvPortMalloc+0x14c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2208      	movs	r2, #8
 8000cf6:	4413      	add	r3, r2
 8000cf8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	1ad2      	subs	r2, r2, r3
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d91e      	bls.n	8000d50 <pvPortMalloc+0x10c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4413      	add	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	f003 0307 	and.w	r3, r3, #7
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d009      	beq.n	8000d38 <pvPortMalloc+0xf4>
 8000d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d28:	f383 8811 	msr	BASEPRI, r3
 8000d2c:	f3bf 8f6f 	isb	sy
 8000d30:	f3bf 8f4f 	dsb	sy
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	e7fe      	b.n	8000d36 <pvPortMalloc+0xf2>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	1ad2      	subs	r2, r2, r3
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000d4a:	69b8      	ldr	r0, [r7, #24]
 8000d4c:	f000 f904 	bl	8000f58 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <pvPortMalloc+0x180>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	4a1a      	ldr	r2, [pc, #104]	; (8000dc4 <pvPortMalloc+0x180>)
 8000d5c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <pvPortMalloc+0x180>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <pvPortMalloc+0x188>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d203      	bcs.n	8000d72 <pvPortMalloc+0x12e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <pvPortMalloc+0x180>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <pvPortMalloc+0x188>)
 8000d70:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <pvPortMalloc+0x17c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <pvPortMalloc+0x18c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	4a10      	ldr	r2, [pc, #64]	; (8000dd0 <pvPortMalloc+0x18c>)
 8000d8e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000d90:	f001 f850 	bl	8001e34 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d009      	beq.n	8000db2 <pvPortMalloc+0x16e>
 8000d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000da2:	f383 8811 	msr	BASEPRI, r3
 8000da6:	f3bf 8f6f 	isb	sy
 8000daa:	f3bf 8f4f 	dsb	sy
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	e7fe      	b.n	8000db0 <pvPortMalloc+0x16c>
    return pvReturn;
 8000db2:	69fb      	ldr	r3, [r7, #28]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20012c54 	.word	0x20012c54
 8000dc0:	20012c68 	.word	0x20012c68
 8000dc4:	20012c58 	.word	0x20012c58
 8000dc8:	20012c4c 	.word	0x20012c4c
 8000dcc:	20012c5c 	.word	0x20012c5c
 8000dd0:	20012c60 	.word	0x20012c60

08000dd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d04b      	beq.n	8000e7e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8000de6:	2308      	movs	r3, #8
 8000de8:	425b      	negs	r3, r3
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	4413      	add	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <vPortFree+0xb4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d109      	bne.n	8000e16 <vPortFree+0x42>
 8000e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e06:	f383 8811 	msr	BASEPRI, r3
 8000e0a:	f3bf 8f6f 	isb	sy
 8000e0e:	f3bf 8f4f 	dsb	sy
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	e7fe      	b.n	8000e14 <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d009      	beq.n	8000e32 <vPortFree+0x5e>
 8000e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e22:	f383 8811 	msr	BASEPRI, r3
 8000e26:	f3bf 8f6f 	isb	sy
 8000e2a:	f3bf 8f4f 	dsb	sy
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	e7fe      	b.n	8000e30 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <vPortFree+0xb4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d01e      	beq.n	8000e7e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d11a      	bne.n	8000e7e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <vPortFree+0xb4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	401a      	ands	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8000e58:	f000 ffde 	bl	8001e18 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <vPortFree+0xb8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <vPortFree+0xb8>)
 8000e68:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000e6a:	6938      	ldr	r0, [r7, #16]
 8000e6c:	f000 f874 	bl	8000f58 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <vPortFree+0xbc>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <vPortFree+0xbc>)
 8000e78:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8000e7a:	f000 ffdb 	bl	8001e34 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20012c68 	.word	0x20012c68
 8000e8c:	20012c58 	.word	0x20012c58
 8000e90:	20012c64 	.word	0x20012c64

08000e94 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000e9a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000e9e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8000ea0:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <prvHeapInit+0xac>)
 8000ea2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d00c      	beq.n	8000ec8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3307      	adds	r3, #7
 8000eb2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f023 0307 	bic.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000ebc:	68ba      	ldr	r2, [r7, #8]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	4a1f      	ldr	r2, [pc, #124]	; (8000f40 <prvHeapInit+0xac>)
 8000ec4:	4413      	add	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000ecc:	4a1d      	ldr	r2, [pc, #116]	; (8000f44 <prvHeapInit+0xb0>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <prvHeapInit+0xb0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	4413      	add	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8000ee0:	2208      	movs	r2, #8
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	1a9b      	subs	r3, r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f023 0307 	bic.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4a15      	ldr	r2, [pc, #84]	; (8000f48 <prvHeapInit+0xb4>)
 8000ef4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <prvHeapInit+0xb4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <prvHeapInit+0xb4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	1ad2      	subs	r2, r2, r3
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <prvHeapInit+0xb4>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <prvHeapInit+0xb8>)
 8000f22:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <prvHeapInit+0xbc>)
 8000f2a:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <prvHeapInit+0xc0>)
 8000f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f32:	601a      	str	r2, [r3, #0]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	2000004c 	.word	0x2000004c
 8000f44:	20012c4c 	.word	0x20012c4c
 8000f48:	20012c54 	.word	0x20012c54
 8000f4c:	20012c5c 	.word	0x20012c5c
 8000f50:	20012c58 	.word	0x20012c58
 8000f54:	20012c68 	.word	0x20012c68

08000f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <prvInsertBlockIntoFreeList+0xac>)
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	e002      	b.n	8000f6c <prvInsertBlockIntoFreeList+0x14>
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d3f7      	bcc.n	8000f66 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	441a      	add	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d108      	bne.n	8000f9a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	441a      	add	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	441a      	add	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d118      	bne.n	8000fe0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <prvInsertBlockIntoFreeList+0xb0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d00d      	beq.n	8000fd6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	441a      	add	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	e008      	b.n	8000fe8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <prvInsertBlockIntoFreeList+0xb0>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e003      	b.n	8000fe8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d002      	beq.n	8000ff6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20012c4c 	.word	0x20012c4c
 8001008:	20012c54 	.word	0x20012c54

0800100c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d109      	bne.n	8001034 <xQueueGenericReset+0x28>
 8001020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001024:	f383 8811 	msr	BASEPRI, r3
 8001028:	f3bf 8f6f 	isb	sy
 800102c:	f3bf 8f4f 	dsb	sy
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	e7fe      	b.n	8001032 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8001034:	f7ff fcec 	bl	8000a10 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001040:	68f9      	ldr	r1, [r7, #12]
 8001042:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001044:	fb01 f303 	mul.w	r3, r1, r3
 8001048:	441a      	add	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2200      	movs	r2, #0
 8001052:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001064:	3b01      	subs	r3, #1
 8001066:	68f9      	ldr	r1, [r7, #12]
 8001068:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800106a:	fb01 f303 	mul.w	r3, r1, r3
 800106e:	441a      	add	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	22ff      	movs	r2, #255	; 0xff
 8001078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	22ff      	movs	r2, #255	; 0xff
 8001080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d114      	bne.n	80010b4 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d01a      	beq.n	80010c8 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3310      	adds	r3, #16
 8001096:	4618      	mov	r0, r3
 8001098:	f001 f90a 	bl	80022b0 <xTaskRemoveFromEventList>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d012      	beq.n	80010c8 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <xQueueGenericReset+0xcc>)
 80010a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	f3bf 8f4f 	dsb	sy
 80010ae:	f3bf 8f6f 	isb	sy
 80010b2:	e009      	b.n	80010c8 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3310      	adds	r3, #16
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff face 	bl	800065a <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	3324      	adds	r3, #36	; 0x24
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fac9 	bl	800065a <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80010c8:	f7ff fcd0 	bl	8000a6c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80010cc:	2301      	movs	r3, #1
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000ed04 	.word	0xe000ed04

080010dc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	4613      	mov	r3, r2
 80010e8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d109      	bne.n	8001104 <xQueueGenericCreate+0x28>
 80010f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010f4:	f383 8811 	msr	BASEPRI, r3
 80010f8:	f3bf 8f6f 	isb	sy
 80010fc:	f3bf 8f4f 	dsb	sy
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	e7fe      	b.n	8001102 <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	fb02 f303 	mul.w	r3, r2, r3
 800110c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <xQueueGenericCreate+0x46>
 8001114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	fbb2 f2f3 	udiv	r2, r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	429a      	cmp	r2, r3
 8001120:	d101      	bne.n	8001126 <xQueueGenericCreate+0x4a>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <xQueueGenericCreate+0x4c>
 8001126:	2300      	movs	r3, #0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d109      	bne.n	8001140 <xQueueGenericCreate+0x64>
 800112c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001130:	f383 8811 	msr	BASEPRI, r3
 8001134:	f3bf 8f6f 	isb	sy
 8001138:	f3bf 8f4f 	dsb	sy
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	e7fe      	b.n	800113e <xQueueGenericCreate+0x62>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	3350      	adds	r3, #80	; 0x50
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fd7d 	bl	8000c44 <pvPortMalloc>
 800114a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00d      	beq.n	800116e <xQueueGenericCreate+0x92>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3350      	adds	r3, #80	; 0x50
 800115a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800115c:	79fa      	ldrb	r2, [r7, #7]
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	4613      	mov	r3, r2
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	68b9      	ldr	r1, [r7, #8]
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f000 f805 	bl	8001178 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800116e:	6a3b      	ldr	r3, [r7, #32]
    }
 8001170:	4618      	mov	r0, r3
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d103      	bne.n	8001194 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	e002      	b.n	800119a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80011a6:	2101      	movs	r1, #1
 80011a8:	69b8      	ldr	r0, [r7, #24]
 80011aa:	f7ff ff2f 	bl	800100c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	78fa      	ldrb	r2, [r7, #3]
 80011b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80011b6:	78fb      	ldrb	r3, [r7, #3]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	68f9      	ldr	r1, [r7, #12]
 80011bc:	2073      	movs	r0, #115	; 0x73
 80011be:	f002 fdf9 	bl	8003db4 <SEGGER_SYSVIEW_RecordU32x3>
}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b090      	sub	sp, #64	; 0x40
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80011da:	2300      	movs	r3, #0
 80011dc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80011e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d109      	bne.n	80011fc <xQueueGenericSend+0x30>
 80011e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ec:	f383 8811 	msr	BASEPRI, r3
 80011f0:	f3bf 8f6f 	isb	sy
 80011f4:	f3bf 8f4f 	dsb	sy
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80011fa:	e7fe      	b.n	80011fa <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d103      	bne.n	800120a <xQueueGenericSend+0x3e>
 8001202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <xQueueGenericSend+0x42>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <xQueueGenericSend+0x44>
 800120e:	2300      	movs	r3, #0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d109      	bne.n	8001228 <xQueueGenericSend+0x5c>
 8001214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001218:	f383 8811 	msr	BASEPRI, r3
 800121c:	f3bf 8f6f 	isb	sy
 8001220:	f3bf 8f4f 	dsb	sy
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
 8001226:	e7fe      	b.n	8001226 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d103      	bne.n	8001236 <xQueueGenericSend+0x6a>
 800122e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001232:	2b01      	cmp	r3, #1
 8001234:	d101      	bne.n	800123a <xQueueGenericSend+0x6e>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <xQueueGenericSend+0x70>
 800123a:	2300      	movs	r3, #0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d109      	bne.n	8001254 <xQueueGenericSend+0x88>
 8001240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001244:	f383 8811 	msr	BASEPRI, r3
 8001248:	f3bf 8f6f 	isb	sy
 800124c:	f3bf 8f4f 	dsb	sy
 8001250:	623b      	str	r3, [r7, #32]
 8001252:	e7fe      	b.n	8001252 <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001254:	f001 f9c8 	bl	80025e8 <xTaskGetSchedulerState>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <xQueueGenericSend+0x98>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <xQueueGenericSend+0x9c>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <xQueueGenericSend+0x9e>
 8001268:	2300      	movs	r3, #0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d109      	bne.n	8001282 <xQueueGenericSend+0xb6>
 800126e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001272:	f383 8811 	msr	BASEPRI, r3
 8001276:	f3bf 8f6f 	isb	sy
 800127a:	f3bf 8f4f 	dsb	sy
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	e7fe      	b.n	8001280 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001282:	f7ff fbc5 	bl	8000a10 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001288:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800128e:	429a      	cmp	r2, r3
 8001290:	d302      	bcc.n	8001298 <xQueueGenericSend+0xcc>
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2b02      	cmp	r3, #2
 8001296:	d136      	bne.n	8001306 <xQueueGenericSend+0x13a>
            {
                traceQUEUE_SEND( pxQueue );
 8001298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800129a:	4618      	mov	r0, r3
 800129c:	f003 fa40 	bl	8004720 <SEGGER_SYSVIEW_ShrinkId>
 80012a0:	68ba      	ldr	r2, [r7, #8]
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	460b      	mov	r3, r1
 80012aa:	4601      	mov	r1, r0
 80012ac:	205a      	movs	r0, #90	; 0x5a
 80012ae:	f002 fdf7 	bl	8003ea0 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80012b2:	683a      	ldr	r2, [r7, #0]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012b8:	f000 fa78 	bl	80017ac <prvCopyDataToQueue>
 80012bc:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80012be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d010      	beq.n	80012e8 <xQueueGenericSend+0x11c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80012c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c8:	3324      	adds	r3, #36	; 0x24
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fff0 	bl	80022b0 <xTaskRemoveFromEventList>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d013      	beq.n	80012fe <xQueueGenericSend+0x132>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80012d6:	4b4d      	ldr	r3, [pc, #308]	; (800140c <xQueueGenericSend+0x240>)
 80012d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	f3bf 8f4f 	dsb	sy
 80012e2:	f3bf 8f6f 	isb	sy
 80012e6:	e00a      	b.n	80012fe <xQueueGenericSend+0x132>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80012e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d007      	beq.n	80012fe <xQueueGenericSend+0x132>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80012ee:	4b47      	ldr	r3, [pc, #284]	; (800140c <xQueueGenericSend+0x240>)
 80012f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	f3bf 8f4f 	dsb	sy
 80012fa:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80012fe:	f7ff fbb5 	bl	8000a6c <vPortExitCritical>
                return pdPASS;
 8001302:	2301      	movs	r3, #1
 8001304:	e07d      	b.n	8001402 <xQueueGenericSend+0x236>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d110      	bne.n	800132e <xQueueGenericSend+0x162>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800130c:	f7ff fbae 	bl	8000a6c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8001310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001312:	4618      	mov	r0, r3
 8001314:	f003 fa04 	bl	8004720 <SEGGER_SYSVIEW_ShrinkId>
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	460b      	mov	r3, r1
 8001322:	4601      	mov	r1, r0
 8001324:	205a      	movs	r0, #90	; 0x5a
 8001326:	f002 fdbb 	bl	8003ea0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800132a:	2300      	movs	r3, #0
 800132c:	e069      	b.n	8001402 <xQueueGenericSend+0x236>
                }
                else if( xEntryTimeSet == pdFALSE )
 800132e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001330:	2b00      	cmp	r3, #0
 8001332:	d106      	bne.n	8001342 <xQueueGenericSend+0x176>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4618      	mov	r0, r3
 800133a:	f001 f81f 	bl	800237c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800133e:	2301      	movs	r3, #1
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001342:	f7ff fb93 	bl	8000a6c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001346:	f000 fd67 	bl	8001e18 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800134a:	f7ff fb61 	bl	8000a10 <vPortEnterCritical>
 800134e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001354:	b25b      	sxtb	r3, r3
 8001356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135a:	d103      	bne.n	8001364 <xQueueGenericSend+0x198>
 800135c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800136a:	b25b      	sxtb	r3, r3
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001370:	d103      	bne.n	800137a <xQueueGenericSend+0x1ae>
 8001372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800137a:	f7ff fb77 	bl	8000a6c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800137e:	1d3a      	adds	r2, r7, #4
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f001 f80e 	bl	80023a8 <xTaskCheckForTimeOut>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d124      	bne.n	80013dc <xQueueGenericSend+0x210>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001392:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001394:	f000 fb02 	bl	800199c <prvIsQueueFull>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d018      	beq.n	80013d0 <xQueueGenericSend+0x204>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800139e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a0:	3310      	adds	r3, #16
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	4611      	mov	r1, r2
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 ff30 	bl	800220c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80013ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013ae:	f000 fa8d 	bl	80018cc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80013b2:	f000 fd3f 	bl	8001e34 <xTaskResumeAll>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f47f af62 	bne.w	8001282 <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 80013be:	4b13      	ldr	r3, [pc, #76]	; (800140c <xQueueGenericSend+0x240>)
 80013c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	f3bf 8f4f 	dsb	sy
 80013ca:	f3bf 8f6f 	isb	sy
 80013ce:	e758      	b.n	8001282 <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80013d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013d2:	f000 fa7b 	bl	80018cc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80013d6:	f000 fd2d 	bl	8001e34 <xTaskResumeAll>
 80013da:	e752      	b.n	8001282 <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80013dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013de:	f000 fa75 	bl	80018cc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80013e2:	f000 fd27 	bl	8001e34 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80013e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 f999 	bl	8004720 <SEGGER_SYSVIEW_ShrinkId>
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	460b      	mov	r3, r1
 80013f8:	4601      	mov	r1, r0
 80013fa:	205a      	movs	r0, #90	; 0x5a
 80013fc:	f002 fd50 	bl	8003ea0 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8001400:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001402:	4618      	mov	r0, r3
 8001404:	3738      	adds	r7, #56	; 0x38
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	e000ed04 	.word	0xe000ed04

08001410 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b090      	sub	sp, #64	; 0x40
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
 800141c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8001422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001424:	2b00      	cmp	r3, #0
 8001426:	d109      	bne.n	800143c <xQueueGenericSendFromISR+0x2c>
 8001428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800142c:	f383 8811 	msr	BASEPRI, r3
 8001430:	f3bf 8f6f 	isb	sy
 8001434:	f3bf 8f4f 	dsb	sy
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
 800143a:	e7fe      	b.n	800143a <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d103      	bne.n	800144a <xQueueGenericSendFromISR+0x3a>
 8001442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <xQueueGenericSendFromISR+0x3e>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <xQueueGenericSendFromISR+0x40>
 800144e:	2300      	movs	r3, #0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d109      	bne.n	8001468 <xQueueGenericSendFromISR+0x58>
 8001454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001458:	f383 8811 	msr	BASEPRI, r3
 800145c:	f3bf 8f6f 	isb	sy
 8001460:	f3bf 8f4f 	dsb	sy
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
 8001466:	e7fe      	b.n	8001466 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	2b02      	cmp	r3, #2
 800146c:	d103      	bne.n	8001476 <xQueueGenericSendFromISR+0x66>
 800146e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001472:	2b01      	cmp	r3, #1
 8001474:	d101      	bne.n	800147a <xQueueGenericSendFromISR+0x6a>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <xQueueGenericSendFromISR+0x6c>
 800147a:	2300      	movs	r3, #0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d109      	bne.n	8001494 <xQueueGenericSendFromISR+0x84>
 8001480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001484:	f383 8811 	msr	BASEPRI, r3
 8001488:	f3bf 8f6f 	isb	sy
 800148c:	f3bf 8f4f 	dsb	sy
 8001490:	623b      	str	r3, [r7, #32]
 8001492:	e7fe      	b.n	8001492 <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001494:	f7ff fb98 	bl	8000bc8 <vPortValidateInterruptPriority>
        __asm volatile
 8001498:	f3ef 8211 	mrs	r2, BASEPRI
 800149c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014a0:	f383 8811 	msr	BASEPRI, r3
 80014a4:	f3bf 8f6f 	isb	sy
 80014a8:	f3bf 8f4f 	dsb	sy
 80014ac:	61fa      	str	r2, [r7, #28]
 80014ae:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 80014b0:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80014b2:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80014b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014bc:	429a      	cmp	r2, r3
 80014be:	d302      	bcc.n	80014c6 <xQueueGenericSendFromISR+0xb6>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d147      	bne.n	8001556 <xQueueGenericSendFromISR+0x146>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80014c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80014d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d4:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80014d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014d8:	4618      	mov	r0, r3
 80014da:	f003 f921 	bl	8004720 <SEGGER_SYSVIEW_ShrinkId>
 80014de:	4601      	mov	r1, r0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	461a      	mov	r2, r3
 80014e4:	2060      	movs	r0, #96	; 0x60
 80014e6:	f002 fc0b 	bl	8003d00 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	68b9      	ldr	r1, [r7, #8]
 80014ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80014f0:	f000 f95c 	bl	80017ac <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80014f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fc:	d112      	bne.n	8001524 <xQueueGenericSendFromISR+0x114>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	2b00      	cmp	r3, #0
 8001504:	d024      	beq.n	8001550 <xQueueGenericSendFromISR+0x140>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001508:	3324      	adds	r3, #36	; 0x24
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fed0 	bl	80022b0 <xTaskRemoveFromEventList>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d01c      	beq.n	8001550 <xQueueGenericSendFromISR+0x140>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d019      	beq.n	8001550 <xQueueGenericSendFromISR+0x140>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	e015      	b.n	8001550 <xQueueGenericSendFromISR+0x140>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8001524:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001528:	2b7f      	cmp	r3, #127	; 0x7f
 800152a:	d109      	bne.n	8001540 <xQueueGenericSendFromISR+0x130>
        __asm volatile
 800152c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001530:	f383 8811 	msr	BASEPRI, r3
 8001534:	f3bf 8f6f 	isb	sy
 8001538:	f3bf 8f4f 	dsb	sy
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	e7fe      	b.n	800153e <xQueueGenericSendFromISR+0x12e>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001540:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001544:	3301      	adds	r3, #1
 8001546:	b2db      	uxtb	r3, r3
 8001548:	b25a      	sxtb	r2, r3
 800154a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800154c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001550:	2301      	movs	r3, #1
 8001552:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8001554:	e00b      	b.n	800156e <xQueueGenericSendFromISR+0x15e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8001556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001558:	4618      	mov	r0, r3
 800155a:	f003 f8e1 	bl	8004720 <SEGGER_SYSVIEW_ShrinkId>
 800155e:	4601      	mov	r1, r0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	461a      	mov	r2, r3
 8001564:	2060      	movs	r0, #96	; 0x60
 8001566:	f002 fbcb 	bl	8003d00 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800156a:	2300      	movs	r3, #0
 800156c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800156e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001570:	613b      	str	r3, [r7, #16]
        __asm volatile
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800157a:	4618      	mov	r0, r3
 800157c:	3740      	adds	r7, #64	; 0x40
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b08f      	sub	sp, #60	; 0x3c
 8001588:	af02      	add	r7, sp, #8
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159a:	2b00      	cmp	r3, #0
 800159c:	d109      	bne.n	80015b2 <xQueueReceive+0x2e>
        __asm volatile
 800159e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a2:	f383 8811 	msr	BASEPRI, r3
 80015a6:	f3bf 8f6f 	isb	sy
 80015aa:	f3bf 8f4f 	dsb	sy
 80015ae:	623b      	str	r3, [r7, #32]
 80015b0:	e7fe      	b.n	80015b0 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d103      	bne.n	80015c0 <xQueueReceive+0x3c>
 80015b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <xQueueReceive+0x40>
 80015c0:	2301      	movs	r3, #1
 80015c2:	e000      	b.n	80015c6 <xQueueReceive+0x42>
 80015c4:	2300      	movs	r3, #0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d109      	bne.n	80015de <xQueueReceive+0x5a>
 80015ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ce:	f383 8811 	msr	BASEPRI, r3
 80015d2:	f3bf 8f6f 	isb	sy
 80015d6:	f3bf 8f4f 	dsb	sy
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	e7fe      	b.n	80015dc <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80015de:	f001 f803 	bl	80025e8 <xTaskGetSchedulerState>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <xQueueReceive+0x6a>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <xQueueReceive+0x6e>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <xQueueReceive+0x70>
 80015f2:	2300      	movs	r3, #0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d109      	bne.n	800160c <xQueueReceive+0x88>
 80015f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015fc:	f383 8811 	msr	BASEPRI, r3
 8001600:	f3bf 8f6f 	isb	sy
 8001604:	f3bf 8f4f 	dsb	sy
 8001608:	61bb      	str	r3, [r7, #24]
 800160a:	e7fe      	b.n	800160a <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800160c:	f7ff fa00 	bl	8000a10 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001614:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	2b00      	cmp	r3, #0
 800161a:	d031      	beq.n	8001680 <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001620:	f000 f92e 	bl	8001880 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8001624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001626:	4618      	mov	r0, r3
 8001628:	f003 f87a 	bl	8004720 <SEGGER_SYSVIEW_ShrinkId>
 800162c:	4604      	mov	r4, r0
 800162e:	2000      	movs	r0, #0
 8001630:	f003 f876 	bl	8004720 <SEGGER_SYSVIEW_ShrinkId>
 8001634:	4601      	mov	r1, r0
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	2301      	movs	r3, #1
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	4613      	mov	r3, r2
 800163e:	460a      	mov	r2, r1
 8001640:	4621      	mov	r1, r4
 8001642:	205c      	movs	r0, #92	; 0x5c
 8001644:	f002 fc2c 	bl	8003ea0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	1e5a      	subs	r2, r3, #1
 800164c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00f      	beq.n	8001678 <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165a:	3310      	adds	r3, #16
 800165c:	4618      	mov	r0, r3
 800165e:	f000 fe27 	bl	80022b0 <xTaskRemoveFromEventList>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d007      	beq.n	8001678 <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001668:	4b4f      	ldr	r3, [pc, #316]	; (80017a8 <xQueueReceive+0x224>)
 800166a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	f3bf 8f4f 	dsb	sy
 8001674:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001678:	f7ff f9f8 	bl	8000a6c <vPortExitCritical>
                return pdPASS;
 800167c:	2301      	movs	r3, #1
 800167e:	e08e      	b.n	800179e <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d115      	bne.n	80016b2 <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001686:	f7ff f9f1 	bl	8000a6c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800168a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168c:	4618      	mov	r0, r3
 800168e:	f003 f847 	bl	8004720 <SEGGER_SYSVIEW_ShrinkId>
 8001692:	4604      	mov	r4, r0
 8001694:	2000      	movs	r0, #0
 8001696:	f003 f843 	bl	8004720 <SEGGER_SYSVIEW_ShrinkId>
 800169a:	4601      	mov	r1, r0
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	2301      	movs	r3, #1
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	4613      	mov	r3, r2
 80016a4:	460a      	mov	r2, r1
 80016a6:	4621      	mov	r1, r4
 80016a8:	205c      	movs	r0, #92	; 0x5c
 80016aa:	f002 fbf9 	bl	8003ea0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e075      	b.n	800179e <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80016b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d106      	bne.n	80016c6 <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 fe5d 	bl	800237c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80016c2:	2301      	movs	r3, #1
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80016c6:	f7ff f9d1 	bl	8000a6c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80016ca:	f000 fba5 	bl	8001e18 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80016ce:	f7ff f99f 	bl	8000a10 <vPortEnterCritical>
 80016d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016de:	d103      	bne.n	80016e8 <xQueueReceive+0x164>
 80016e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f4:	d103      	bne.n	80016fe <xQueueReceive+0x17a>
 80016f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016fe:	f7ff f9b5 	bl	8000a6c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001702:	1d3a      	adds	r2, r7, #4
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	4611      	mov	r1, r2
 800170a:	4618      	mov	r0, r3
 800170c:	f000 fe4c 	bl	80023a8 <xTaskCheckForTimeOut>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d124      	bne.n	8001760 <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001718:	f000 f92a 	bl	8001970 <prvIsQueueEmpty>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d018      	beq.n	8001754 <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001724:	3324      	adds	r3, #36	; 0x24
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f000 fd6e 	bl	800220c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001732:	f000 f8cb 	bl	80018cc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001736:	f000 fb7d 	bl	8001e34 <xTaskResumeAll>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	f47f af65 	bne.w	800160c <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <xQueueReceive+0x224>)
 8001744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	f3bf 8f4f 	dsb	sy
 800174e:	f3bf 8f6f 	isb	sy
 8001752:	e75b      	b.n	800160c <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001756:	f000 f8b9 	bl	80018cc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800175a:	f000 fb6b 	bl	8001e34 <xTaskResumeAll>
 800175e:	e755      	b.n	800160c <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001762:	f000 f8b3 	bl	80018cc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001766:	f000 fb65 	bl	8001e34 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800176a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800176c:	f000 f900 	bl	8001970 <prvIsQueueEmpty>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	f43f af4a 	beq.w	800160c <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800177a:	4618      	mov	r0, r3
 800177c:	f002 ffd0 	bl	8004720 <SEGGER_SYSVIEW_ShrinkId>
 8001780:	4604      	mov	r4, r0
 8001782:	2000      	movs	r0, #0
 8001784:	f002 ffcc 	bl	8004720 <SEGGER_SYSVIEW_ShrinkId>
 8001788:	4601      	mov	r1, r0
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	2301      	movs	r3, #1
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	4613      	mov	r3, r2
 8001792:	460a      	mov	r2, r1
 8001794:	4621      	mov	r1, r4
 8001796:	205c      	movs	r0, #92	; 0x5c
 8001798:	f002 fb82 	bl	8003ea0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800179c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3734      	adds	r7, #52	; 0x34
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd90      	pop	{r4, r7, pc}
 80017a6:	bf00      	nop
 80017a8:	e000ed04 	.word	0xe000ed04

080017ac <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10d      	bne.n	80017e6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d14d      	bne.n	800186e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 ff24 	bl	8002624 <xTaskPriorityDisinherit>
 80017dc:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	e043      	b.n	800186e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d119      	bne.n	8001820 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6858      	ldr	r0, [r3, #4]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	461a      	mov	r2, r3
 80017f6:	68b9      	ldr	r1, [r7, #8]
 80017f8:	f003 fc13 	bl	8005022 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	441a      	add	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	429a      	cmp	r2, r3
 8001814:	d32b      	bcc.n	800186e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	e026      	b.n	800186e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	68d8      	ldr	r0, [r3, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	461a      	mov	r2, r3
 800182a:	68b9      	ldr	r1, [r7, #8]
 800182c:	f003 fbf9 	bl	8005022 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	425b      	negs	r3, r3
 800183a:	441a      	add	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	429a      	cmp	r2, r3
 800184a:	d207      	bcs.n	800185c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	425b      	negs	r3, r3
 8001856:	441a      	add	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d105      	bne.n	800186e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	3b01      	subs	r3, #1
 800186c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001876:	697b      	ldr	r3, [r7, #20]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	2b00      	cmp	r3, #0
 8001890:	d018      	beq.n	80018c4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	441a      	add	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d303      	bcc.n	80018b4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68d9      	ldr	r1, [r3, #12]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	461a      	mov	r2, r3
 80018be:	6838      	ldr	r0, [r7, #0]
 80018c0:	f003 fbaf 	bl	8005022 <memcpy>
    }
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80018d4:	f7ff f89c 	bl	8000a10 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018de:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80018e0:	e011      	b.n	8001906 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d012      	beq.n	8001910 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3324      	adds	r3, #36	; 0x24
 80018ee:	4618      	mov	r0, r3
 80018f0:	f000 fcde 	bl	80022b0 <xTaskRemoveFromEventList>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80018fa:	f000 fdb9 	bl	8002470 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	3b01      	subs	r3, #1
 8001902:	b2db      	uxtb	r3, r3
 8001904:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190a:	2b00      	cmp	r3, #0
 800190c:	dce9      	bgt.n	80018e2 <prvUnlockQueue+0x16>
 800190e:	e000      	b.n	8001912 <prvUnlockQueue+0x46>
                        break;
 8001910:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	22ff      	movs	r2, #255	; 0xff
 8001916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800191a:	f7ff f8a7 	bl	8000a6c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800191e:	f7ff f877 	bl	8000a10 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001928:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800192a:	e011      	b.n	8001950 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d012      	beq.n	800195a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3310      	adds	r3, #16
 8001938:	4618      	mov	r0, r3
 800193a:	f000 fcb9 	bl	80022b0 <xTaskRemoveFromEventList>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001944:	f000 fd94 	bl	8002470 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001948:	7bbb      	ldrb	r3, [r7, #14]
 800194a:	3b01      	subs	r3, #1
 800194c:	b2db      	uxtb	r3, r3
 800194e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001950:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001954:	2b00      	cmp	r3, #0
 8001956:	dce9      	bgt.n	800192c <prvUnlockQueue+0x60>
 8001958:	e000      	b.n	800195c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800195a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	22ff      	movs	r2, #255	; 0xff
 8001960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001964:	f7ff f882 	bl	8000a6c <vPortExitCritical>
}
 8001968:	bf00      	nop
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001978:	f7ff f84a 	bl	8000a10 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001984:	2301      	movs	r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	e001      	b.n	800198e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800198e:	f7ff f86d 	bl	8000a6c <vPortExitCritical>

    return xReturn;
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80019a4:	f7ff f834 	bl	8000a10 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d102      	bne.n	80019ba <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80019b4:	2301      	movs	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	e001      	b.n	80019be <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80019be:	f7ff f855 	bl	8000a6c <vPortExitCritical>

    return xReturn;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	e01e      	b.n	8001a1a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80019dc:	4a12      	ldr	r2, [pc, #72]	; (8001a28 <vQueueAddToRegistry+0x5c>)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d115      	bne.n	8001a14 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80019e8:	490f      	ldr	r1, [pc, #60]	; (8001a28 <vQueueAddToRegistry+0x5c>)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80019f2:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <vQueueAddToRegistry+0x5c>)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4413      	add	r3, r2
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f002 fe8d 	bl	8004720 <SEGGER_SYSVIEW_ShrinkId>
 8001a06:	4601      	mov	r1, r0
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2071      	movs	r0, #113	; 0x71
 8001a0e:	f002 f977 	bl	8003d00 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8001a12:	e005      	b.n	8001a20 <vQueueAddToRegistry+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3301      	adds	r3, #1
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2b07      	cmp	r3, #7
 8001a1e:	d9dd      	bls.n	80019dc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	2001537c 	.word	0x2001537c

08001a2c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001a3c:	f7fe ffe8 	bl	8000a10 <vPortEnterCritical>
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d103      	bne.n	8001a56 <vQueueWaitForMessageRestricted+0x2a>
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a5c:	b25b      	sxtb	r3, r3
 8001a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a62:	d103      	bne.n	8001a6c <vQueueWaitForMessageRestricted+0x40>
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a6c:	f7fe fffe 	bl	8000a6c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d106      	bne.n	8001a86 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	3324      	adds	r3, #36	; 0x24
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	68b9      	ldr	r1, [r7, #8]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 fbe7 	bl	8002254 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001a86:	6978      	ldr	r0, [r7, #20]
 8001a88:	f7ff ff20 	bl	80018cc <prvUnlockQueue>
    }
 8001a8c:	bf00      	nop
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08c      	sub	sp, #48	; 0x30
 8001a98:	af04      	add	r7, sp, #16
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001aa4:	88fb      	ldrh	r3, [r7, #6]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff f8cb 	bl	8000c44 <pvPortMalloc>
 8001aae:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00e      	beq.n	8001ad4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001ab6:	2058      	movs	r0, #88	; 0x58
 8001ab8:	f7ff f8c4 	bl	8000c44 <pvPortMalloc>
 8001abc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	631a      	str	r2, [r3, #48]	; 0x30
 8001aca:	e005      	b.n	8001ad8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001acc:	6978      	ldr	r0, [r7, #20]
 8001ace:	f7ff f981 	bl	8000dd4 <vPortFree>
 8001ad2:	e001      	b.n	8001ad8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d013      	beq.n	8001b06 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001ade:	88fa      	ldrh	r2, [r7, #6]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	9303      	str	r3, [sp, #12]
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	9302      	str	r3, [sp, #8]
 8001ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 f80e 	bl	8001b16 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001afa:	69f8      	ldr	r0, [r7, #28]
 8001afc:	f000 f8a0 	bl	8001c40 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001b00:	2301      	movs	r3, #1
 8001b02:	61bb      	str	r3, [r7, #24]
 8001b04:	e002      	b.n	8001b0c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001b0c:	69bb      	ldr	r3, [r7, #24]
    }
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b088      	sub	sp, #32
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b26:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	21a5      	movs	r1, #165	; 0xa5
 8001b30:	f003 fa82 	bl	8005038 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4413      	add	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	f023 0307 	bic.w	r3, r3, #7
 8001b4c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d009      	beq.n	8001b6c <prvInitialiseNewTask+0x56>
 8001b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5c:	f383 8811 	msr	BASEPRI, r3
 8001b60:	f3bf 8f6f 	isb	sy
 8001b64:	f3bf 8f4f 	dsb	sy
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e7fe      	b.n	8001b6a <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d01f      	beq.n	8001bb2 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	e012      	b.n	8001b9e <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	7819      	ldrb	r1, [r3, #0]
 8001b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	4413      	add	r3, r2
 8001b86:	3334      	adds	r3, #52	; 0x34
 8001b88:	460a      	mov	r2, r1
 8001b8a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	4413      	add	r3, r2
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	2b09      	cmp	r3, #9
 8001ba2:	d9e9      	bls.n	8001b78 <prvInitialiseNewTask+0x62>
 8001ba4:	e000      	b.n	8001ba8 <prvInitialiseNewTask+0x92>
            {
                break;
 8001ba6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001bb0:	e003      	b.n	8001bba <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d901      	bls.n	8001bc4 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bc8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bce:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd8:	3304      	adds	r3, #4
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fd5d 	bl	800069a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be2:	3318      	adds	r3, #24
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fd58 	bl	800069a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bee:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf2:	f1c3 0205 	rsb	r2, r3, #5
 8001bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c02:	3350      	adds	r3, #80	; 0x50
 8001c04:	2204      	movs	r2, #4
 8001c06:	2100      	movs	r1, #0
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f003 fa15 	bl	8005038 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c10:	3354      	adds	r3, #84	; 0x54
 8001c12:	2201      	movs	r2, #1
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fa0e 	bl	8005038 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	68f9      	ldr	r1, [r7, #12]
 8001c20:	69b8      	ldr	r0, [r7, #24]
 8001c22:	f7fe fdcf 	bl	80007c4 <pxPortInitialiseStack>
 8001c26:	4602      	mov	r2, r0
 8001c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c2a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d002      	beq.n	8001c38 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c36:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001c38:	bf00      	nop
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001c48:	f7fe fee2 	bl	8000a10 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001c4c:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <prvAddNewTaskToReadyList+0xfc>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	4a3a      	ldr	r2, [pc, #232]	; (8001d3c <prvAddNewTaskToReadyList+0xfc>)
 8001c54:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001c56:	4b3a      	ldr	r3, [pc, #232]	; (8001d40 <prvAddNewTaskToReadyList+0x100>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001c5e:	4a38      	ldr	r2, [pc, #224]	; (8001d40 <prvAddNewTaskToReadyList+0x100>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c64:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <prvAddNewTaskToReadyList+0xfc>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d110      	bne.n	8001c8e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001c6c:	f000 fc24 	bl	80024b8 <prvInitialiseTaskLists>
 8001c70:	e00d      	b.n	8001c8e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001c72:	4b34      	ldr	r3, [pc, #208]	; (8001d44 <prvAddNewTaskToReadyList+0x104>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d109      	bne.n	8001c8e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c7a:	4b31      	ldr	r3, [pc, #196]	; (8001d40 <prvAddNewTaskToReadyList+0x100>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d802      	bhi.n	8001c8e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001c88:	4a2d      	ldr	r2, [pc, #180]	; (8001d40 <prvAddNewTaskToReadyList+0x100>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001c8e:	4b2e      	ldr	r3, [pc, #184]	; (8001d48 <prvAddNewTaskToReadyList+0x108>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	4a2c      	ldr	r2, [pc, #176]	; (8001d48 <prvAddNewTaskToReadyList+0x108>)
 8001c96:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001c98:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <prvAddNewTaskToReadyList+0x108>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d016      	beq.n	8001cd4 <prvAddNewTaskToReadyList+0x94>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f002 fc6d 	bl	8004588 <SEGGER_SYSVIEW_OnTaskCreate>
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	461d      	mov	r5, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	461c      	mov	r4, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	1ae3      	subs	r3, r4, r3
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	462b      	mov	r3, r5
 8001cd0:	f001 fab6 	bl	8003240 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f002 fcde 	bl	8004698 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <prvAddNewTaskToReadyList+0x10c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <prvAddNewTaskToReadyList+0x10c>)
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4a15      	ldr	r2, [pc, #84]	; (8001d50 <prvAddNewTaskToReadyList+0x110>)
 8001cfc:	441a      	add	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3304      	adds	r3, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	4610      	mov	r0, r2
 8001d06:	f7fe fcd5 	bl	80006b4 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001d0a:	f7fe feaf 	bl	8000a6c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <prvAddNewTaskToReadyList+0x104>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00e      	beq.n	8001d34 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <prvAddNewTaskToReadyList+0x100>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d207      	bcs.n	8001d34 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <prvAddNewTaskToReadyList+0x114>)
 8001d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	f3bf 8f4f 	dsb	sy
 8001d30:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d3c:	20012d44 	.word	0x20012d44
 8001d40:	20012c6c 	.word	0x20012c6c
 8001d44:	20012d50 	.word	0x20012d50
 8001d48:	20012d60 	.word	0x20012d60
 8001d4c:	20012d4c 	.word	0x20012d4c
 8001d50:	20012c70 	.word	0x20012c70
 8001d54:	e000ed04 	.word	0xe000ed04

08001d58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001d5e:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <vTaskStartScheduler+0xa4>)
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	2300      	movs	r3, #0
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2300      	movs	r3, #0
 8001d68:	2282      	movs	r2, #130	; 0x82
 8001d6a:	4925      	ldr	r1, [pc, #148]	; (8001e00 <vTaskStartScheduler+0xa8>)
 8001d6c:	4825      	ldr	r0, [pc, #148]	; (8001e04 <vTaskStartScheduler+0xac>)
 8001d6e:	f7ff fe91 	bl	8001a94 <xTaskCreate>
 8001d72:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d102      	bne.n	8001d80 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001d7a:	f000 feb1 	bl	8002ae0 <xTimerCreateTimerTask>
 8001d7e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d128      	bne.n	8001dd8 <vTaskStartScheduler+0x80>
 8001d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d8a:	f383 8811 	msr	BASEPRI, r3
 8001d8e:	f3bf 8f6f 	isb	sy
 8001d92:	f3bf 8f4f 	dsb	sy
 8001d96:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <vTaskStartScheduler+0xb0>)
 8001d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d9e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <vTaskStartScheduler+0xb4>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001da6:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <vTaskStartScheduler+0xb8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <vTaskStartScheduler+0xbc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	3334      	adds	r3, #52	; 0x34
 8001db2:	2205      	movs	r2, #5
 8001db4:	4912      	ldr	r1, [pc, #72]	; (8001e00 <vTaskStartScheduler+0xa8>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	f003 f924 	bl	8005004 <memcmp>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <vTaskStartScheduler+0x76>
 8001dc2:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <vTaskStartScheduler+0xbc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f002 fc22 	bl	8004610 <SEGGER_SYSVIEW_OnTaskStartExec>
 8001dcc:	e001      	b.n	8001dd2 <vTaskStartScheduler+0x7a>
 8001dce:	f002 fbbf 	bl	8004550 <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001dd2:	f7fe fd7f 	bl	80008d4 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;
}
 8001dd6:	e00d      	b.n	8001df4 <vTaskStartScheduler+0x9c>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dde:	d109      	bne.n	8001df4 <vTaskStartScheduler+0x9c>
 8001de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de4:	f383 8811 	msr	BASEPRI, r3
 8001de8:	f3bf 8f6f 	isb	sy
 8001dec:	f3bf 8f4f 	dsb	sy
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	e7fe      	b.n	8001df2 <vTaskStartScheduler+0x9a>
}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20012d68 	.word	0x20012d68
 8001e00:	08005060 	.word	0x08005060
 8001e04:	08002489 	.word	0x08002489
 8001e08:	20012d64 	.word	0x20012d64
 8001e0c:	20012d50 	.word	0x20012d50
 8001e10:	20012d48 	.word	0x20012d48
 8001e14:	20012c6c 	.word	0x20012c6c

08001e18 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001e1c:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <vTaskSuspendAll+0x18>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	4a03      	ldr	r2, [pc, #12]	; (8001e30 <vTaskSuspendAll+0x18>)
 8001e24:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	20012d6c 	.word	0x20012d6c

08001e34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001e42:	4b43      	ldr	r3, [pc, #268]	; (8001f50 <xTaskResumeAll+0x11c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <xTaskResumeAll+0x2a>
 8001e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e4e:	f383 8811 	msr	BASEPRI, r3
 8001e52:	f3bf 8f6f 	isb	sy
 8001e56:	f3bf 8f4f 	dsb	sy
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	e7fe      	b.n	8001e5c <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001e5e:	f7fe fdd7 	bl	8000a10 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001e62:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <xTaskResumeAll+0x11c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	4a39      	ldr	r2, [pc, #228]	; (8001f50 <xTaskResumeAll+0x11c>)
 8001e6a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e6c:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <xTaskResumeAll+0x11c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d165      	bne.n	8001f40 <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e74:	4b37      	ldr	r3, [pc, #220]	; (8001f54 <xTaskResumeAll+0x120>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d061      	beq.n	8001f40 <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e7c:	e032      	b.n	8001ee4 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e7e:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <xTaskResumeAll+0x124>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3318      	adds	r3, #24
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fc6f 	bl	800076e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3304      	adds	r3, #4
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fc6a 	bl	800076e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 fbfb 	bl	8004698 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <xTaskResumeAll+0x128>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	4a2a      	ldr	r2, [pc, #168]	; (8001f5c <xTaskResumeAll+0x128>)
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4a27      	ldr	r2, [pc, #156]	; (8001f60 <xTaskResumeAll+0x12c>)
 8001ec2:	441a      	add	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4610      	mov	r0, r2
 8001ecc:	f7fe fbf2 	bl	80006b4 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed4:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <xTaskResumeAll+0x130>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d302      	bcc.n	8001ee4 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 8001ede:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <xTaskResumeAll+0x134>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <xTaskResumeAll+0x124>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1c8      	bne.n	8001e7e <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001ef2:	f000 fb5d 	bl	80025b0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <xTaskResumeAll+0x138>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d010      	beq.n	8001f24 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001f02:	f000 f859 	bl	8001fb8 <xTaskIncrementTick>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d002      	beq.n	8001f12 <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 8001f0c:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <xTaskResumeAll+0x134>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3b01      	subs	r3, #1
 8001f16:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f1      	bne.n	8001f02 <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <xTaskResumeAll+0x138>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001f24:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <xTaskResumeAll+0x134>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d009      	beq.n	8001f40 <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <xTaskResumeAll+0x13c>)
 8001f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	f3bf 8f4f 	dsb	sy
 8001f3c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001f40:	f7fe fd94 	bl	8000a6c <vPortExitCritical>

    return xAlreadyYielded;
 8001f44:	68bb      	ldr	r3, [r7, #8]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20012d6c 	.word	0x20012d6c
 8001f54:	20012d44 	.word	0x20012d44
 8001f58:	20012d04 	.word	0x20012d04
 8001f5c:	20012d4c 	.word	0x20012d4c
 8001f60:	20012c70 	.word	0x20012c70
 8001f64:	20012c6c 	.word	0x20012c6c
 8001f68:	20012d58 	.word	0x20012d58
 8001f6c:	20012d54 	.word	0x20012d54
 8001f70:	e000ed04 	.word	0xe000ed04

08001f74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <xTaskGetTickCount+0x1c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001f80:	687b      	ldr	r3, [r7, #4]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	20012d48 	.word	0x20012d48

08001f94 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f9a:	f7fe fe15 	bl	8000bc8 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <xTaskGetTickCountFromISR+0x20>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001fa8:	683b      	ldr	r3, [r7, #0]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20012d48 	.word	0x20012d48

08001fb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fc2:	4b50      	ldr	r3, [pc, #320]	; (8002104 <xTaskIncrementTick+0x14c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 8091 	bne.w	80020ee <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001fcc:	4b4e      	ldr	r3, [pc, #312]	; (8002108 <xTaskIncrementTick+0x150>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001fd4:	4a4c      	ldr	r2, [pc, #304]	; (8002108 <xTaskIncrementTick+0x150>)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d11f      	bne.n	8002020 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8001fe0:	4b4a      	ldr	r3, [pc, #296]	; (800210c <xTaskIncrementTick+0x154>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d009      	beq.n	8001ffe <xTaskIncrementTick+0x46>
 8001fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fee:	f383 8811 	msr	BASEPRI, r3
 8001ff2:	f3bf 8f6f 	isb	sy
 8001ff6:	f3bf 8f4f 	dsb	sy
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	e7fe      	b.n	8001ffc <xTaskIncrementTick+0x44>
 8001ffe:	4b43      	ldr	r3, [pc, #268]	; (800210c <xTaskIncrementTick+0x154>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	4b42      	ldr	r3, [pc, #264]	; (8002110 <xTaskIncrementTick+0x158>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a40      	ldr	r2, [pc, #256]	; (800210c <xTaskIncrementTick+0x154>)
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4a40      	ldr	r2, [pc, #256]	; (8002110 <xTaskIncrementTick+0x158>)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b40      	ldr	r3, [pc, #256]	; (8002114 <xTaskIncrementTick+0x15c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3301      	adds	r3, #1
 8002018:	4a3e      	ldr	r2, [pc, #248]	; (8002114 <xTaskIncrementTick+0x15c>)
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	f000 fac8 	bl	80025b0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002020:	4b3d      	ldr	r3, [pc, #244]	; (8002118 <xTaskIncrementTick+0x160>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	429a      	cmp	r2, r3
 8002028:	d34c      	bcc.n	80020c4 <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800202a:	4b38      	ldr	r3, [pc, #224]	; (800210c <xTaskIncrementTick+0x154>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d104      	bne.n	800203e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002034:	4b38      	ldr	r3, [pc, #224]	; (8002118 <xTaskIncrementTick+0x160>)
 8002036:	f04f 32ff 	mov.w	r2, #4294967295
 800203a:	601a      	str	r2, [r3, #0]
                    break;
 800203c:	e042      	b.n	80020c4 <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800203e:	4b33      	ldr	r3, [pc, #204]	; (800210c <xTaskIncrementTick+0x154>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	d203      	bcs.n	800205e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002056:	4a30      	ldr	r2, [pc, #192]	; (8002118 <xTaskIncrementTick+0x160>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800205c:	e032      	b.n	80020c4 <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	3304      	adds	r3, #4
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fb83 	bl	800076e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	2b00      	cmp	r3, #0
 800206e:	d004      	beq.n	800207a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	3318      	adds	r3, #24
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fb7a 	bl	800076e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	4618      	mov	r0, r3
 800207e:	f002 fb0b 	bl	8004698 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002086:	2201      	movs	r2, #1
 8002088:	409a      	lsls	r2, r3
 800208a:	4b24      	ldr	r3, [pc, #144]	; (800211c <xTaskIncrementTick+0x164>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	4a22      	ldr	r2, [pc, #136]	; (800211c <xTaskIncrementTick+0x164>)
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4a1f      	ldr	r2, [pc, #124]	; (8002120 <xTaskIncrementTick+0x168>)
 80020a2:	441a      	add	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	3304      	adds	r3, #4
 80020a8:	4619      	mov	r1, r3
 80020aa:	4610      	mov	r0, r2
 80020ac:	f7fe fb02 	bl	80006b4 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b4:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <xTaskIncrementTick+0x16c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3b5      	bcc.n	800202a <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 80020be:	2301      	movs	r3, #1
 80020c0:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020c2:	e7b2      	b.n	800202a <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80020c4:	4b17      	ldr	r3, [pc, #92]	; (8002124 <xTaskIncrementTick+0x16c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ca:	4915      	ldr	r1, [pc, #84]	; (8002120 <xTaskIncrementTick+0x168>)
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d901      	bls.n	80020e0 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 80020dc:	2301      	movs	r3, #1
 80020de:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <xTaskIncrementTick+0x170>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 80020e8:	2301      	movs	r3, #1
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	e004      	b.n	80020f8 <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <xTaskIncrementTick+0x174>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	3301      	adds	r3, #1
 80020f4:	4a0d      	ldr	r2, [pc, #52]	; (800212c <xTaskIncrementTick+0x174>)
 80020f6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80020f8:	697b      	ldr	r3, [r7, #20]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20012d6c 	.word	0x20012d6c
 8002108:	20012d48 	.word	0x20012d48
 800210c:	20012cfc 	.word	0x20012cfc
 8002110:	20012d00 	.word	0x20012d00
 8002114:	20012d5c 	.word	0x20012d5c
 8002118:	20012d64 	.word	0x20012d64
 800211c:	20012d4c 	.word	0x20012d4c
 8002120:	20012c70 	.word	0x20012c70
 8002124:	20012c6c 	.word	0x20012c6c
 8002128:	20012d58 	.word	0x20012d58
 800212c:	20012d54 	.word	0x20012d54

08002130 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002136:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <vTaskSwitchContext+0xc4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800213e:	4b2e      	ldr	r3, [pc, #184]	; (80021f8 <vTaskSwitchContext+0xc8>)
 8002140:	2201      	movs	r2, #1
 8002142:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002144:	e051      	b.n	80021ea <vTaskSwitchContext+0xba>
        xYieldPending = pdFALSE;
 8002146:	4b2c      	ldr	r3, [pc, #176]	; (80021f8 <vTaskSwitchContext+0xc8>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800214c:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <vTaskSwitchContext+0xcc>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800215a:	7afb      	ldrb	r3, [r7, #11]
 800215c:	f1c3 031f 	rsb	r3, r3, #31
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	4927      	ldr	r1, [pc, #156]	; (8002200 <vTaskSwitchContext+0xd0>)
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	440b      	add	r3, r1
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d109      	bne.n	800218a <vTaskSwitchContext+0x5a>
        __asm volatile
 8002176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217a:	f383 8811 	msr	BASEPRI, r3
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	f3bf 8f4f 	dsb	sy
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	e7fe      	b.n	8002188 <vTaskSwitchContext+0x58>
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4a1a      	ldr	r2, [pc, #104]	; (8002200 <vTaskSwitchContext+0xd0>)
 8002196:	4413      	add	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	3308      	adds	r3, #8
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d104      	bne.n	80021ba <vTaskSwitchContext+0x8a>
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	4a10      	ldr	r2, [pc, #64]	; (8002204 <vTaskSwitchContext+0xd4>)
 80021c2:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <vTaskSwitchContext+0xd4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3334      	adds	r3, #52	; 0x34
 80021ca:	2205      	movs	r2, #5
 80021cc:	490e      	ldr	r1, [pc, #56]	; (8002208 <vTaskSwitchContext+0xd8>)
 80021ce:	4618      	mov	r0, r3
 80021d0:	f002 ff18 	bl	8005004 <memcmp>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d005      	beq.n	80021e6 <vTaskSwitchContext+0xb6>
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <vTaskSwitchContext+0xd4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f002 fa16 	bl	8004610 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80021e4:	e001      	b.n	80021ea <vTaskSwitchContext+0xba>
        traceTASK_SWITCHED_IN();
 80021e6:	f002 f9b3 	bl	8004550 <SEGGER_SYSVIEW_OnIdle>
}
 80021ea:	bf00      	nop
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20012d6c 	.word	0x20012d6c
 80021f8:	20012d58 	.word	0x20012d58
 80021fc:	20012d4c 	.word	0x20012d4c
 8002200:	20012c70 	.word	0x20012c70
 8002204:	20012c6c 	.word	0x20012c6c
 8002208:	08005060 	.word	0x08005060

0800220c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d109      	bne.n	8002230 <vTaskPlaceOnEventList+0x24>
 800221c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002220:	f383 8811 	msr	BASEPRI, r3
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e7fe      	b.n	800222e <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <vTaskPlaceOnEventList+0x44>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	3318      	adds	r3, #24
 8002236:	4619      	mov	r1, r3
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7fe fa5f 	bl	80006fc <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800223e:	2101      	movs	r1, #1
 8002240:	6838      	ldr	r0, [r7, #0]
 8002242:	f000 fbe7 	bl	8002a14 <prvAddCurrentTaskToDelayedList>
}
 8002246:	bf00      	nop
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20012c6c 	.word	0x20012c6c

08002254 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <vTaskPlaceOnEventListRestricted+0x26>
 8002266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226a:	f383 8811 	msr	BASEPRI, r3
 800226e:	f3bf 8f6f 	isb	sy
 8002272:	f3bf 8f4f 	dsb	sy
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	e7fe      	b.n	8002278 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800227a:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <vTaskPlaceOnEventListRestricted+0x58>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3318      	adds	r3, #24
 8002280:	4619      	mov	r1, r3
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f7fe fa16 	bl	80006b4 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 800228e:	f04f 33ff 	mov.w	r3, #4294967295
 8002292:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002294:	2024      	movs	r0, #36	; 0x24
 8002296:	f001 fcd9 	bl	8003c4c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	68b8      	ldr	r0, [r7, #8]
 800229e:	f000 fbb9 	bl	8002a14 <prvAddCurrentTaskToDelayedList>
    }
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20012c6c 	.word	0x20012c6c

080022b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d109      	bne.n	80022da <xTaskRemoveFromEventList+0x2a>
 80022c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ca:	f383 8811 	msr	BASEPRI, r3
 80022ce:	f3bf 8f6f 	isb	sy
 80022d2:	f3bf 8f4f 	dsb	sy
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	e7fe      	b.n	80022d8 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	3318      	adds	r3, #24
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe fa45 	bl	800076e <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022e4:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <xTaskRemoveFromEventList+0xb4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d120      	bne.n	800232e <xTaskRemoveFromEventList+0x7e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	3304      	adds	r3, #4
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe fa3c 	bl	800076e <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f002 f9cd 	bl	8004698 <SEGGER_SYSVIEW_OnTaskStartReady>
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	2201      	movs	r2, #1
 8002304:	409a      	lsls	r2, r3
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <xTaskRemoveFromEventList+0xb8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4313      	orrs	r3, r2
 800230c:	4a16      	ldr	r2, [pc, #88]	; (8002368 <xTaskRemoveFromEventList+0xb8>)
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4a13      	ldr	r2, [pc, #76]	; (800236c <xTaskRemoveFromEventList+0xbc>)
 800231e:	441a      	add	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	3304      	adds	r3, #4
 8002324:	4619      	mov	r1, r3
 8002326:	4610      	mov	r0, r2
 8002328:	f7fe f9c4 	bl	80006b4 <vListInsertEnd>
 800232c:	e005      	b.n	800233a <xTaskRemoveFromEventList+0x8a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	3318      	adds	r3, #24
 8002332:	4619      	mov	r1, r3
 8002334:	480e      	ldr	r0, [pc, #56]	; (8002370 <xTaskRemoveFromEventList+0xc0>)
 8002336:	f7fe f9bd 	bl	80006b4 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <xTaskRemoveFromEventList+0xc4>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	429a      	cmp	r2, r3
 8002346:	d905      	bls.n	8002354 <xTaskRemoveFromEventList+0xa4>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002348:	2301      	movs	r3, #1
 800234a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <xTaskRemoveFromEventList+0xc8>)
 800234e:	2201      	movs	r2, #1
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	e001      	b.n	8002358 <xTaskRemoveFromEventList+0xa8>
    }
    else
    {
        xReturn = pdFALSE;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002358:	697b      	ldr	r3, [r7, #20]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20012d6c 	.word	0x20012d6c
 8002368:	20012d4c 	.word	0x20012d4c
 800236c:	20012c70 	.word	0x20012c70
 8002370:	20012d04 	.word	0x20012d04
 8002374:	20012c6c 	.word	0x20012c6c
 8002378:	20012d58 	.word	0x20012d58

0800237c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <vTaskInternalSetTimeOutState+0x24>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <vTaskInternalSetTimeOutState+0x28>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	605a      	str	r2, [r3, #4]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	20012d5c 	.word	0x20012d5c
 80023a4:	20012d48 	.word	0x20012d48

080023a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d109      	bne.n	80023cc <xTaskCheckForTimeOut+0x24>
 80023b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023bc:	f383 8811 	msr	BASEPRI, r3
 80023c0:	f3bf 8f6f 	isb	sy
 80023c4:	f3bf 8f4f 	dsb	sy
 80023c8:	613b      	str	r3, [r7, #16]
 80023ca:	e7fe      	b.n	80023ca <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <xTaskCheckForTimeOut+0x3e>
 80023d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d6:	f383 8811 	msr	BASEPRI, r3
 80023da:	f3bf 8f6f 	isb	sy
 80023de:	f3bf 8f4f 	dsb	sy
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e7fe      	b.n	80023e4 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 80023e6:	f7fe fb13 	bl	8000a10 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80023ea:	4b1f      	ldr	r3, [pc, #124]	; (8002468 <xTaskCheckForTimeOut+0xc0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002402:	d102      	bne.n	800240a <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	e026      	b.n	8002458 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <xTaskCheckForTimeOut+0xc4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d00a      	beq.n	800242c <xTaskCheckForTimeOut+0x84>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	429a      	cmp	r2, r3
 800241e:	d805      	bhi.n	800242c <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002420:	2301      	movs	r3, #1
 8002422:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	e015      	b.n	8002458 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	429a      	cmp	r2, r3
 8002434:	d90b      	bls.n	800244e <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	1ad2      	subs	r2, r2, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ff9a 	bl	800237c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
 800244c:	e004      	b.n	8002458 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002454:	2301      	movs	r3, #1
 8002456:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002458:	f7fe fb08 	bl	8000a6c <vPortExitCritical>

    return xReturn;
 800245c:	69fb      	ldr	r3, [r7, #28]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20012d48 	.word	0x20012d48
 800246c:	20012d5c 	.word	0x20012d5c

08002470 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <vTaskMissedYield+0x14>)
 8002476:	2201      	movs	r2, #1
 8002478:	601a      	str	r2, [r3, #0]
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	20012d58 	.word	0x20012d58

08002488 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002490:	f000 f852 	bl	8002538 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <prvIdleTask+0x28>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d9f9      	bls.n	8002490 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <prvIdleTask+0x2c>)
 800249e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80024ac:	e7f0      	b.n	8002490 <prvIdleTask+0x8>
 80024ae:	bf00      	nop
 80024b0:	20012c70 	.word	0x20012c70
 80024b4:	e000ed04 	.word	0xe000ed04

080024b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	e00c      	b.n	80024de <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4a12      	ldr	r2, [pc, #72]	; (8002518 <prvInitialiseTaskLists+0x60>)
 80024d0:	4413      	add	r3, r2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe f8c1 	bl	800065a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3301      	adds	r3, #1
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d9ef      	bls.n	80024c4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80024e4:	480d      	ldr	r0, [pc, #52]	; (800251c <prvInitialiseTaskLists+0x64>)
 80024e6:	f7fe f8b8 	bl	800065a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80024ea:	480d      	ldr	r0, [pc, #52]	; (8002520 <prvInitialiseTaskLists+0x68>)
 80024ec:	f7fe f8b5 	bl	800065a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80024f0:	480c      	ldr	r0, [pc, #48]	; (8002524 <prvInitialiseTaskLists+0x6c>)
 80024f2:	f7fe f8b2 	bl	800065a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80024f6:	480c      	ldr	r0, [pc, #48]	; (8002528 <prvInitialiseTaskLists+0x70>)
 80024f8:	f7fe f8af 	bl	800065a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80024fc:	480b      	ldr	r0, [pc, #44]	; (800252c <prvInitialiseTaskLists+0x74>)
 80024fe:	f7fe f8ac 	bl	800065a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <prvInitialiseTaskLists+0x78>)
 8002504:	4a05      	ldr	r2, [pc, #20]	; (800251c <prvInitialiseTaskLists+0x64>)
 8002506:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <prvInitialiseTaskLists+0x7c>)
 800250a:	4a05      	ldr	r2, [pc, #20]	; (8002520 <prvInitialiseTaskLists+0x68>)
 800250c:	601a      	str	r2, [r3, #0]
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20012c70 	.word	0x20012c70
 800251c:	20012cd4 	.word	0x20012cd4
 8002520:	20012ce8 	.word	0x20012ce8
 8002524:	20012d04 	.word	0x20012d04
 8002528:	20012d18 	.word	0x20012d18
 800252c:	20012d30 	.word	0x20012d30
 8002530:	20012cfc 	.word	0x20012cfc
 8002534:	20012d00 	.word	0x20012d00

08002538 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800253e:	e019      	b.n	8002574 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002540:	f7fe fa66 	bl	8000a10 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002544:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <prvCheckTasksWaitingTermination+0x4c>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3304      	adds	r3, #4
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe f90c 	bl	800076e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <prvCheckTasksWaitingTermination+0x50>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3b01      	subs	r3, #1
 800255c:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <prvCheckTasksWaitingTermination+0x50>)
 800255e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002560:	4b0a      	ldr	r3, [pc, #40]	; (800258c <prvCheckTasksWaitingTermination+0x54>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3b01      	subs	r3, #1
 8002566:	4a09      	ldr	r2, [pc, #36]	; (800258c <prvCheckTasksWaitingTermination+0x54>)
 8002568:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800256a:	f7fe fa7f 	bl	8000a6c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f80e 	bl	8002590 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <prvCheckTasksWaitingTermination+0x54>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e1      	bne.n	8002540 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	20012d18 	.word	0x20012d18
 8002588:	20012d44 	.word	0x20012d44
 800258c:	20012d2c 	.word	0x20012d2c

08002590 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	4618      	mov	r0, r3
 800259e:	f7fe fc19 	bl	8000dd4 <vPortFree>
                vPortFree( pxTCB );
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7fe fc16 	bl	8000dd4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80025b4:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <prvResetNextTaskUnblockTime+0x30>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d104      	bne.n	80025c8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <prvResetNextTaskUnblockTime+0x34>)
 80025c0:	f04f 32ff 	mov.w	r2, #4294967295
 80025c4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80025c6:	e005      	b.n	80025d4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <prvResetNextTaskUnblockTime+0x30>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <prvResetNextTaskUnblockTime+0x34>)
 80025d2:	6013      	str	r3, [r2, #0]
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20012cfc 	.word	0x20012cfc
 80025e4:	20012d64 	.word	0x20012d64

080025e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80025ee:	4b0b      	ldr	r3, [pc, #44]	; (800261c <xTaskGetSchedulerState+0x34>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d102      	bne.n	80025fc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80025f6:	2301      	movs	r3, #1
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	e008      	b.n	800260e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <xTaskGetSchedulerState+0x38>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002604:	2302      	movs	r3, #2
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	e001      	b.n	800260e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800260e:	687b      	ldr	r3, [r7, #4]
    }
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	20012d50 	.word	0x20012d50
 8002620:	20012d6c 	.word	0x20012d6c

08002624 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d06a      	beq.n	8002710 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800263a:	4b38      	ldr	r3, [pc, #224]	; (800271c <xTaskPriorityDisinherit+0xf8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	429a      	cmp	r2, r3
 8002642:	d009      	beq.n	8002658 <xTaskPriorityDisinherit+0x34>
 8002644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	e7fe      	b.n	8002656 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <xTaskPriorityDisinherit+0x50>
 8002660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002664:	f383 8811 	msr	BASEPRI, r3
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	e7fe      	b.n	8002672 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002678:	1e5a      	subs	r2, r3, #1
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002686:	429a      	cmp	r2, r3
 8002688:	d042      	beq.n	8002710 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268e:	2b00      	cmp	r3, #0
 8002690:	d13e      	bne.n	8002710 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	3304      	adds	r3, #4
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe f869 	bl	800076e <uxListRemove>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10a      	bne.n	80026b8 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	2201      	movs	r2, #1
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43da      	mvns	r2, r3
 80026ae:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <xTaskPriorityDisinherit+0xfc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4013      	ands	r3, r2
 80026b4:	4a1a      	ldr	r2, [pc, #104]	; (8002720 <xTaskPriorityDisinherit+0xfc>)
 80026b6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	4619      	mov	r1, r3
 80026bc:	204a      	movs	r0, #74	; 0x4a
 80026be:	f001 fae3 	bl	8003c88 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ce:	f1c3 0205 	rsb	r2, r3, #5
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4618      	mov	r0, r3
 80026da:	f001 ffdd 	bl	8004698 <SEGGER_SYSVIEW_OnTaskStartReady>
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e2:	2201      	movs	r2, #1
 80026e4:	409a      	lsls	r2, r3
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <xTaskPriorityDisinherit+0xfc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	4a0c      	ldr	r2, [pc, #48]	; (8002720 <xTaskPriorityDisinherit+0xfc>)
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4a09      	ldr	r2, [pc, #36]	; (8002724 <xTaskPriorityDisinherit+0x100>)
 80026fe:	441a      	add	r2, r3
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	3304      	adds	r3, #4
 8002704:	4619      	mov	r1, r3
 8002706:	4610      	mov	r0, r2
 8002708:	f7fd ffd4 	bl	80006b4 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800270c:	2301      	movs	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002710:	697b      	ldr	r3, [r7, #20]
    }
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20012c6c 	.word	0x20012c6c
 8002720:	20012d4c 	.word	0x20012d4c
 8002724:	20012c70 	.word	0x20012c70

08002728 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d009      	beq.n	8002750 <xTaskGenericNotifyWait+0x28>
 800273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	e7fe      	b.n	800274e <xTaskGenericNotifyWait+0x26>

        taskENTER_CRITICAL();
 8002750:	f7fe f95e 	bl	8000a10 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002754:	4b36      	ldr	r3, [pc, #216]	; (8002830 <xTaskGenericNotifyWait+0x108>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4413      	add	r3, r2
 800275c:	3354      	adds	r3, #84	; 0x54
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d022      	beq.n	80027ac <xTaskGenericNotifyWait+0x84>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002766:	4b32      	ldr	r3, [pc, #200]	; (8002830 <xTaskGenericNotifyWait+0x108>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	3214      	adds	r2, #20
 800276e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	43d2      	mvns	r2, r2
 8002776:	4011      	ands	r1, r2
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	3214      	adds	r2, #20
 800277c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002780:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <xTaskGenericNotifyWait+0x108>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	3354      	adds	r3, #84	; 0x54
 800278a:	2201      	movs	r2, #1
 800278c:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00b      	beq.n	80027ac <xTaskGenericNotifyWait+0x84>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002794:	2101      	movs	r1, #1
 8002796:	6a38      	ldr	r0, [r7, #32]
 8002798:	f000 f93c 	bl	8002a14 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800279c:	4b25      	ldr	r3, [pc, #148]	; (8002834 <xTaskGenericNotifyWait+0x10c>)
 800279e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80027ac:	f7fe f95e 	bl	8000a6c <vPortExitCritical>

        taskENTER_CRITICAL();
 80027b0:	f7fe f92e 	bl	8000a10 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	4613      	mov	r3, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	2040      	movs	r0, #64	; 0x40
 80027c2:	f001 fb6d 	bl	8003ea0 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <xTaskGenericNotifyWait+0xb4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80027cc:	4b18      	ldr	r3, [pc, #96]	; (8002830 <xTaskGenericNotifyWait+0x108>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	3214      	adds	r2, #20
 80027d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80027dc:	4b14      	ldr	r3, [pc, #80]	; (8002830 <xTaskGenericNotifyWait+0x108>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4413      	add	r3, r2
 80027e4:	3354      	adds	r3, #84	; 0x54
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d002      	beq.n	80027f4 <xTaskGenericNotifyWait+0xcc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e00e      	b.n	8002812 <xTaskGenericNotifyWait+0xea>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <xTaskGenericNotifyWait+0x108>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	3214      	adds	r2, #20
 80027fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	43d2      	mvns	r2, r2
 8002804:	4011      	ands	r1, r2
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	3214      	adds	r2, #20
 800280a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800280e:	2301      	movs	r3, #1
 8002810:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002812:	4b07      	ldr	r3, [pc, #28]	; (8002830 <xTaskGenericNotifyWait+0x108>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4413      	add	r3, r2
 800281a:	3354      	adds	r3, #84	; 0x54
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002820:	f7fe f924 	bl	8000a6c <vPortExitCritical>

        return xReturn;
 8002824:	697b      	ldr	r3, [r7, #20]
    }
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20012c6c 	.word	0x20012c6c
 8002834:	e000ed04 	.word	0xe000ed04

08002838 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002838:	b580      	push	{r7, lr}
 800283a:	b08e      	sub	sp, #56	; 0x38
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
 8002844:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002846:	2301      	movs	r3, #1
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d009      	beq.n	8002864 <xTaskGenericNotify+0x2c>
 8002850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002854:	f383 8811 	msr	BASEPRI, r3
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	623b      	str	r3, [r7, #32]
 8002862:	e7fe      	b.n	8002862 <xTaskGenericNotify+0x2a>
        configASSERT( xTaskToNotify );
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d109      	bne.n	800287e <xTaskGenericNotify+0x46>
 800286a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	61fb      	str	r3, [r7, #28]
 800287c:	e7fe      	b.n	800287c <xTaskGenericNotify+0x44>
        pxTCB = xTaskToNotify;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8002882:	f7fe f8c5 	bl	8000a10 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8002886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002888:	2b00      	cmp	r3, #0
 800288a:	d006      	beq.n	800289a <xTaskGenericNotify+0x62>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	3214      	adds	r2, #20
 8002892:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002898:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800289a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4413      	add	r3, r2
 80028a0:	3354      	adds	r3, #84	; 0x54
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80028a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4413      	add	r3, r2
 80028ae:	3354      	adds	r3, #84	; 0x54
 80028b0:	2202      	movs	r2, #2
 80028b2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d83b      	bhi.n	8002932 <xTaskGenericNotify+0xfa>
 80028ba:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <xTaskGenericNotify+0x88>)
 80028bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c0:	0800294f 	.word	0x0800294f
 80028c4:	080028d5 	.word	0x080028d5
 80028c8:	080028f1 	.word	0x080028f1
 80028cc:	08002909 	.word	0x08002909
 80028d0:	08002917 	.word	0x08002917
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80028d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	3214      	adds	r2, #20
 80028da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	ea42 0103 	orr.w	r1, r2, r3
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	3214      	adds	r2, #20
 80028ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80028ee:	e031      	b.n	8002954 <xTaskGenericNotify+0x11c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	3214      	adds	r2, #20
 80028f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028fa:	1c59      	adds	r1, r3, #1
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	3214      	adds	r2, #20
 8002902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002906:	e025      	b.n	8002954 <xTaskGenericNotify+0x11c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8002908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	3214      	adds	r2, #20
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002914:	e01e      	b.n	8002954 <xTaskGenericNotify+0x11c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800291a:	2b02      	cmp	r3, #2
 800291c:	d006      	beq.n	800292c <xTaskGenericNotify+0xf4>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	3214      	adds	r2, #20
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800292a:	e013      	b.n	8002954 <xTaskGenericNotify+0x11c>
                        xReturn = pdFAIL;
 800292c:	2300      	movs	r3, #0
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8002930:	e010      	b.n	8002954 <xTaskGenericNotify+0x11c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8002932:	4b33      	ldr	r3, [pc, #204]	; (8002a00 <xTaskGenericNotify+0x1c8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00b      	beq.n	8002952 <xTaskGenericNotify+0x11a>
 800293a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293e:	f383 8811 	msr	BASEPRI, r3
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	61bb      	str	r3, [r7, #24]
 800294c:	e7fe      	b.n	800294c <xTaskGenericNotify+0x114>
                    break;
 800294e:	bf00      	nop
 8002950:	e000      	b.n	8002954 <xTaskGenericNotify+0x11c>

                    break;
 8002952:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002956:	4618      	mov	r0, r3
 8002958:	f001 fee2 	bl	8004720 <SEGGER_SYSVIEW_ShrinkId>
 800295c:	4601      	mov	r1, r0
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	4613      	mov	r3, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	203e      	movs	r0, #62	; 0x3e
 800296a:	f001 fa99 	bl	8003ea0 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800296e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002972:	2b01      	cmp	r3, #1
 8002974:	d13c      	bne.n	80029f0 <xTaskGenericNotify+0x1b8>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	3304      	adds	r3, #4
 800297a:	4618      	mov	r0, r3
 800297c:	f7fd fef7 	bl	800076e <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8002980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002982:	4618      	mov	r0, r3
 8002984:	f001 fe88 	bl	8004698 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	2201      	movs	r2, #1
 800298e:	409a      	lsls	r2, r3
 8002990:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <xTaskGenericNotify+0x1cc>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4313      	orrs	r3, r2
 8002996:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <xTaskGenericNotify+0x1cc>)
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800299e:	4613      	mov	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4413      	add	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <xTaskGenericNotify+0x1d0>)
 80029a8:	441a      	add	r2, r3
 80029aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ac:	3304      	adds	r3, #4
 80029ae:	4619      	mov	r1, r3
 80029b0:	4610      	mov	r0, r2
 80029b2:	f7fd fe7f 	bl	80006b4 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d009      	beq.n	80029d2 <xTaskGenericNotify+0x19a>
 80029be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	e7fe      	b.n	80029d0 <xTaskGenericNotify+0x198>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80029d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d6:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <xTaskGenericNotify+0x1d4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	429a      	cmp	r2, r3
 80029de:	d907      	bls.n	80029f0 <xTaskGenericNotify+0x1b8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <xTaskGenericNotify+0x1d8>)
 80029e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	f3bf 8f4f 	dsb	sy
 80029ec:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80029f0:	f7fe f83c 	bl	8000a6c <vPortExitCritical>

        return xReturn;
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80029f6:	4618      	mov	r0, r3
 80029f8:	3730      	adds	r7, #48	; 0x30
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20012d48 	.word	0x20012d48
 8002a04:	20012d4c 	.word	0x20012d4c
 8002a08:	20012c70 	.word	0x20012c70
 8002a0c:	20012c6c 	.word	0x20012c6c
 8002a10:	e000ed04 	.word	0xe000ed04

08002a14 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002a1e:	4b29      	ldr	r3, [pc, #164]	; (8002ac4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a24:	4b28      	ldr	r3, [pc, #160]	; (8002ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd fe9f 	bl	800076e <uxListRemove>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10b      	bne.n	8002a4e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002a36:	4b24      	ldr	r3, [pc, #144]	; (8002ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43da      	mvns	r2, r3
 8002a44:	4b21      	ldr	r3, [pc, #132]	; (8002acc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	4a20      	ldr	r2, [pc, #128]	; (8002acc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002a4c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a54:	d10a      	bne.n	8002a6c <prvAddCurrentTaskToDelayedList+0x58>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a5c:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	3304      	adds	r3, #4
 8002a62:	4619      	mov	r1, r3
 8002a64:	481a      	ldr	r0, [pc, #104]	; (8002ad0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002a66:	f7fd fe25 	bl	80006b4 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002a6a:	e026      	b.n	8002aba <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4413      	add	r3, r2
 8002a72:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002a74:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d209      	bcs.n	8002a98 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a84:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4610      	mov	r0, r2
 8002a92:	f7fd fe33 	bl	80006fc <vListInsert>
}
 8002a96:	e010      	b.n	8002aba <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	f7fd fe29 	bl	80006fc <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d202      	bcs.n	8002aba <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8002ab4:	4a09      	ldr	r2, [pc, #36]	; (8002adc <prvAddCurrentTaskToDelayedList+0xc8>)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	6013      	str	r3, [r2, #0]
}
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	20012d48 	.word	0x20012d48
 8002ac8:	20012c6c 	.word	0x20012c6c
 8002acc:	20012d4c 	.word	0x20012d4c
 8002ad0:	20012d30 	.word	0x20012d30
 8002ad4:	20012d00 	.word	0x20012d00
 8002ad8:	20012cfc 	.word	0x20012cfc
 8002adc:	20012d64 	.word	0x20012d64

08002ae0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002aea:	f000 fad1 	bl	8003090 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <xTimerCreateTimerTask+0x54>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00b      	beq.n	8002b0e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002af6:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <xTimerCreateTimerTask+0x58>)
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	2302      	movs	r3, #2
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	2300      	movs	r3, #0
 8002b00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b04:	490d      	ldr	r1, [pc, #52]	; (8002b3c <xTimerCreateTimerTask+0x5c>)
 8002b06:	480e      	ldr	r0, [pc, #56]	; (8002b40 <xTimerCreateTimerTask+0x60>)
 8002b08:	f7fe ffc4 	bl	8001a94 <xTaskCreate>
 8002b0c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <xTimerCreateTimerTask+0x48>
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	603b      	str	r3, [r7, #0]
 8002b26:	e7fe      	b.n	8002b26 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8002b28:	687b      	ldr	r3, [r7, #4]
    }
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20012da0 	.word	0x20012da0
 8002b38:	20012da4 	.word	0x20012da4
 8002b3c:	08005068 	.word	0x08005068
 8002b40:	08002c75 	.word	0x08002c75

08002b44 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	; 0x28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <xTimerGenericCommand+0x2c>
 8002b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b60:	f383 8811 	msr	BASEPRI, r3
 8002b64:	f3bf 8f6f 	isb	sy
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	623b      	str	r3, [r7, #32]
 8002b6e:	e7fe      	b.n	8002b6e <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002b70:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <xTimerGenericCommand+0x94>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d02a      	beq.n	8002bce <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b05      	cmp	r3, #5
 8002b88:	dc18      	bgt.n	8002bbc <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002b8a:	f7ff fd2d 	bl	80025e8 <xTaskGetSchedulerState>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d109      	bne.n	8002ba8 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <xTimerGenericCommand+0x94>)
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	f107 0114 	add.w	r1, r7, #20
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba0:	f7fe fb14 	bl	80011cc <xQueueGenericSend>
 8002ba4:	6278      	str	r0, [r7, #36]	; 0x24
 8002ba6:	e012      	b.n	8002bce <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <xTimerGenericCommand+0x94>)
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	f107 0114 	add.w	r1, r7, #20
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f7fe fb0a 	bl	80011cc <xQueueGenericSend>
 8002bb8:	6278      	str	r0, [r7, #36]	; 0x24
 8002bba:	e008      	b.n	8002bce <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002bbc:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <xTimerGenericCommand+0x94>)
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	f107 0114 	add.w	r1, r7, #20
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	f7fe fc22 	bl	8001410 <xQueueGenericSendFromISR>
 8002bcc:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3728      	adds	r7, #40	; 0x28
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20012da0 	.word	0x20012da0

08002bdc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002be6:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <prvProcessExpiredTimer+0x94>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fd fdba 	bl	800076e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d021      	beq.n	8002c4c <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	18d1      	adds	r1, r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	6978      	ldr	r0, [r7, #20]
 8002c16:	f000 f8d1 	bl	8002dbc <prvInsertTimerInActiveList>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d01e      	beq.n	8002c5e <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002c20:	2300      	movs	r3, #0
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	2300      	movs	r3, #0
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	2100      	movs	r1, #0
 8002c2a:	6978      	ldr	r0, [r7, #20]
 8002c2c:	f7ff ff8a 	bl	8002b44 <xTimerGenericCommand>
 8002c30:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d112      	bne.n	8002c5e <prvProcessExpiredTimer+0x82>
 8002c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3c:	f383 8811 	msr	BASEPRI, r3
 8002c40:	f3bf 8f6f 	isb	sy
 8002c44:	f3bf 8f4f 	dsb	sy
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	e7fe      	b.n	8002c4a <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	6978      	ldr	r0, [r7, #20]
 8002c64:	4798      	blx	r3
    }
 8002c66:	bf00      	nop
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20012d98 	.word	0x20012d98

08002c74 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002c7c:	f107 0308 	add.w	r3, r7, #8
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f857 	bl	8002d34 <prvGetNextExpireTime>
 8002c86:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f803 	bl	8002c98 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002c92:	f000 f8d5 	bl	8002e40 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002c96:	e7f1      	b.n	8002c7c <prvTimerTask+0x8>

08002c98 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002ca2:	f7ff f8b9 	bl	8001e18 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002ca6:	f107 0308 	add.w	r3, r7, #8
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f866 	bl	8002d7c <prvSampleTimeNow>
 8002cb0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d130      	bne.n	8002d1a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10a      	bne.n	8002cd4 <prvProcessTimerOrBlockTask+0x3c>
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d806      	bhi.n	8002cd4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002cc6:	f7ff f8b5 	bl	8001e34 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002cca:	68f9      	ldr	r1, [r7, #12]
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ff85 	bl	8002bdc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002cd2:	e024      	b.n	8002d1e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d008      	beq.n	8002cec <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002cda:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <prvProcessTimerOrBlockTask+0x90>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <prvProcessTimerOrBlockTask+0x50>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <prvProcessTimerOrBlockTask+0x52>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002cec:	4b0f      	ldr	r3, [pc, #60]	; (8002d2c <prvProcessTimerOrBlockTask+0x94>)
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f7fe fe97 	bl	8001a2c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002cfe:	f7ff f899 	bl	8001e34 <xTaskResumeAll>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10a      	bne.n	8002d1e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <prvProcessTimerOrBlockTask+0x98>)
 8002d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	f3bf 8f4f 	dsb	sy
 8002d14:	f3bf 8f6f 	isb	sy
    }
 8002d18:	e001      	b.n	8002d1e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002d1a:	f7ff f88b 	bl	8001e34 <xTaskResumeAll>
    }
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20012d9c 	.word	0x20012d9c
 8002d2c:	20012da0 	.word	0x20012da0
 8002d30:	e000ed04 	.word	0xe000ed04

08002d34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <prvGetNextExpireTime+0x44>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <prvGetNextExpireTime+0x16>
 8002d46:	2201      	movs	r2, #1
 8002d48:	e000      	b.n	8002d4c <prvGetNextExpireTime+0x18>
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d105      	bne.n	8002d64 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <prvGetNextExpireTime+0x44>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	e001      	b.n	8002d68 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002d68:	68fb      	ldr	r3, [r7, #12]
    }
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3714      	adds	r7, #20
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	20012d98 	.word	0x20012d98

08002d7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002d84:	f7ff f8f6 	bl	8001f74 <xTaskGetTickCount>
 8002d88:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002d8a:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <prvSampleTimeNow+0x3c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d205      	bcs.n	8002da0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002d94:	f000 f918 	bl	8002fc8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e002      	b.n	8002da6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002da6:	4a04      	ldr	r2, [pc, #16]	; (8002db8 <prvSampleTimeNow+0x3c>)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002dac:	68fb      	ldr	r3, [r7, #12]
    }
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20012da8 	.word	0x20012da8

08002dbc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
 8002dc8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d812      	bhi.n	8002e08 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	1ad2      	subs	r2, r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d302      	bcc.n	8002df6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002df0:	2301      	movs	r3, #1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	e01b      	b.n	8002e2e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002df6:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <prvInsertTimerInActiveList+0x7c>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4610      	mov	r0, r2
 8002e02:	f7fd fc7b 	bl	80006fc <vListInsert>
 8002e06:	e012      	b.n	8002e2e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d206      	bcs.n	8002e1e <prvInsertTimerInActiveList+0x62>
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d302      	bcc.n	8002e1e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	e007      	b.n	8002e2e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e1e:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <prvInsertTimerInActiveList+0x80>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	3304      	adds	r3, #4
 8002e26:	4619      	mov	r1, r3
 8002e28:	4610      	mov	r0, r2
 8002e2a:	f7fd fc67 	bl	80006fc <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002e2e:	697b      	ldr	r3, [r7, #20]
    }
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20012d9c 	.word	0x20012d9c
 8002e3c:	20012d98 	.word	0x20012d98

08002e40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08c      	sub	sp, #48	; 0x30
 8002e44:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002e46:	e0ac      	b.n	8002fa2 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f2c0 80a9 	blt.w	8002fa2 <prvProcessReceivedCommands+0x162>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d004      	beq.n	8002e66 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	3304      	adds	r3, #4
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd fc84 	bl	800076e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ff87 	bl	8002d7c <prvSampleTimeNow>
 8002e6e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b09      	cmp	r3, #9
 8002e74:	f200 8094 	bhi.w	8002fa0 <prvProcessReceivedCommands+0x160>
 8002e78:	a201      	add	r2, pc, #4	; (adr r2, 8002e80 <prvProcessReceivedCommands+0x40>)
 8002e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7e:	bf00      	nop
 8002e80:	08002ea9 	.word	0x08002ea9
 8002e84:	08002ea9 	.word	0x08002ea9
 8002e88:	08002ea9 	.word	0x08002ea9
 8002e8c:	08002f1b 	.word	0x08002f1b
 8002e90:	08002f2f 	.word	0x08002f2f
 8002e94:	08002f77 	.word	0x08002f77
 8002e98:	08002ea9 	.word	0x08002ea9
 8002e9c:	08002ea9 	.word	0x08002ea9
 8002ea0:	08002f1b 	.word	0x08002f1b
 8002ea4:	08002f2f 	.word	0x08002f2f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	18d1      	adds	r1, r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a3a      	ldr	r2, [r7, #32]
 8002ec6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ec8:	f7ff ff78 	bl	8002dbc <prvInsertTimerInActiveList>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d067      	beq.n	8002fa2 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
 8002ed6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ed8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ee0:	f003 0304 	and.w	r3, r3, #4
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d05c      	beq.n	8002fa2 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	441a      	add	r2, r3
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002efa:	f7ff fe23 	bl	8002b44 <xTimerGenericCommand>
 8002efe:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d14d      	bne.n	8002fa2 <prvProcessReceivedCommands+0x162>
 8002f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0a:	f383 8811 	msr	BASEPRI, r3
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	f3bf 8f4f 	dsb	sy
 8002f16:	61bb      	str	r3, [r7, #24]
 8002f18:	e7fe      	b.n	8002f18 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002f2c:	e039      	b.n	8002fa2 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d109      	bne.n	8002f62 <prvProcessReceivedCommands+0x122>
 8002f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	e7fe      	b.n	8002f60 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	18d1      	adds	r1, r2, r3
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	6a3a      	ldr	r2, [r7, #32]
 8002f6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f70:	f7ff ff24 	bl	8002dbc <prvInsertTimerInActiveList>
                        break;
 8002f74:	e015      	b.n	8002fa2 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d103      	bne.n	8002f8c <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8002f84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f86:	f7fd ff25 	bl	8000dd4 <vPortFree>
 8002f8a:	e00a      	b.n	8002fa2 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002f9e:	e000      	b.n	8002fa2 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002fa0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002fa2:	4b08      	ldr	r3, [pc, #32]	; (8002fc4 <prvProcessReceivedCommands+0x184>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f107 0108 	add.w	r1, r7, #8
 8002faa:	2200      	movs	r2, #0
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fe fae9 	bl	8001584 <xQueueReceive>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f47f af47 	bne.w	8002e48 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002fba:	bf00      	nop
 8002fbc:	3728      	adds	r7, #40	; 0x28
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20012da0 	.word	0x20012da0

08002fc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002fce:	e047      	b.n	8003060 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002fd0:	4b2d      	ldr	r3, [pc, #180]	; (8003088 <prvSwitchTimerLists+0xc0>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	617b      	str	r3, [r7, #20]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fda:	4b2b      	ldr	r3, [pc, #172]	; (8003088 <prvSwitchTimerLists+0xc0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	613b      	str	r3, [r7, #16]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fbc0 	bl	800076e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	6938      	ldr	r0, [r7, #16]
 8002ff4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d02d      	beq.n	8003060 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	699a      	ldr	r2, [r3, #24]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	4413      	add	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

                if( xReloadTime > xNextExpireTime )
 800300e:	68fa      	ldr	r2, [r7, #12]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	429a      	cmp	r2, r3
 8003014:	d90e      	bls.n	8003034 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003022:	4b19      	ldr	r3, [pc, #100]	; (8003088 <prvSwitchTimerLists+0xc0>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	3304      	adds	r3, #4
 800302a:	4619      	mov	r1, r3
 800302c:	4610      	mov	r0, r2
 800302e:	f7fd fb65 	bl	80006fc <vListInsert>
 8003032:	e015      	b.n	8003060 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003034:	2300      	movs	r3, #0
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	2300      	movs	r3, #0
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	2100      	movs	r1, #0
 800303e:	6938      	ldr	r0, [r7, #16]
 8003040:	f7ff fd80 	bl	8002b44 <xTimerGenericCommand>
 8003044:	60b8      	str	r0, [r7, #8]
                    configASSERT( xResult );
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <prvSwitchTimerLists+0x98>
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	e7fe      	b.n	800305e <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003060:	4b09      	ldr	r3, [pc, #36]	; (8003088 <prvSwitchTimerLists+0xc0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1b2      	bne.n	8002fd0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <prvSwitchTimerLists+0xc0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <prvSwitchTimerLists+0xc4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a04      	ldr	r2, [pc, #16]	; (8003088 <prvSwitchTimerLists+0xc0>)
 8003076:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003078:	4a04      	ldr	r2, [pc, #16]	; (800308c <prvSwitchTimerLists+0xc4>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6013      	str	r3, [r2, #0]
    }
 800307e:	bf00      	nop
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20012d98 	.word	0x20012d98
 800308c:	20012d9c 	.word	0x20012d9c

08003090 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003094:	f7fd fcbc 	bl	8000a10 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003098:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <prvCheckForValidListAndQueue+0x54>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d11d      	bne.n	80030dc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80030a0:	4811      	ldr	r0, [pc, #68]	; (80030e8 <prvCheckForValidListAndQueue+0x58>)
 80030a2:	f7fd fada 	bl	800065a <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80030a6:	4811      	ldr	r0, [pc, #68]	; (80030ec <prvCheckForValidListAndQueue+0x5c>)
 80030a8:	f7fd fad7 	bl	800065a <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80030ac:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <prvCheckForValidListAndQueue+0x60>)
 80030ae:	4a0e      	ldr	r2, [pc, #56]	; (80030e8 <prvCheckForValidListAndQueue+0x58>)
 80030b0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80030b2:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <prvCheckForValidListAndQueue+0x64>)
 80030b4:	4a0d      	ldr	r2, [pc, #52]	; (80030ec <prvCheckForValidListAndQueue+0x5c>)
 80030b6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80030b8:	2200      	movs	r2, #0
 80030ba:	210c      	movs	r1, #12
 80030bc:	200a      	movs	r0, #10
 80030be:	f7fe f80d 	bl	80010dc <xQueueGenericCreate>
 80030c2:	4602      	mov	r2, r0
 80030c4:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <prvCheckForValidListAndQueue+0x54>)
 80030c6:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <prvCheckForValidListAndQueue+0x54>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80030d0:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <prvCheckForValidListAndQueue+0x54>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4908      	ldr	r1, [pc, #32]	; (80030f8 <prvCheckForValidListAndQueue+0x68>)
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe fc78 	bl	80019cc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80030dc:	f7fd fcc6 	bl	8000a6c <vPortExitCritical>
    }
 80030e0:	bf00      	nop
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	20012da0 	.word	0x20012da0
 80030e8:	20012d70 	.word	0x20012d70
 80030ec:	20012d84 	.word	0x20012d84
 80030f0:	20012d98 	.word	0x20012d98
 80030f4:	20012d9c 	.word	0x20012d9c
 80030f8:	08005070 	.word	0x08005070

080030fc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003100:	4803      	ldr	r0, [pc, #12]	; (8003110 <_cbSendSystemDesc+0x14>)
 8003102:	f001 f9d5 	bl	80044b0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003106:	4803      	ldr	r0, [pc, #12]	; (8003114 <_cbSendSystemDesc+0x18>)
 8003108:	f001 f9d2 	bl	80044b0 <SEGGER_SYSVIEW_SendSysDesc>
}
 800310c:	bf00      	nop
 800310e:	bd80      	pop	{r7, pc}
 8003110:	08005078 	.word	0x08005078
 8003114:	080050ac 	.word	0x080050ac

08003118 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <SEGGER_SYSVIEW_Conf+0x20>)
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <SEGGER_SYSVIEW_Conf+0x20>)
 8003122:	6819      	ldr	r1, [r3, #0]
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <SEGGER_SYSVIEW_Conf+0x24>)
 8003126:	4a06      	ldr	r2, [pc, #24]	; (8003140 <SEGGER_SYSVIEW_Conf+0x28>)
 8003128:	f000 fd42 	bl	8003bb0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800312c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003130:	f000 fd7c 	bl	8003c2c <SEGGER_SYSVIEW_SetRAMBase>
}
 8003134:	bf00      	nop
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000014 	.word	0x20000014
 800313c:	080030fd 	.word	0x080030fd
 8003140:	08005150 	.word	0x08005150

08003144 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003146:	b085      	sub	sp, #20
 8003148:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	e034      	b.n	80031ba <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003150:	491e      	ldr	r1, [pc, #120]	; (80031cc <_cbSendTaskList+0x88>)
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	491a      	ldr	r1, [pc, #104]	; (80031cc <_cbSendTaskList+0x88>)
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	3304      	adds	r3, #4
 8003170:	681c      	ldr	r4, [r3, #0]
 8003172:	4916      	ldr	r1, [pc, #88]	; (80031cc <_cbSendTaskList+0x88>)
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	3308      	adds	r3, #8
 8003182:	681d      	ldr	r5, [r3, #0]
 8003184:	4911      	ldr	r1, [pc, #68]	; (80031cc <_cbSendTaskList+0x88>)
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	330c      	adds	r3, #12
 8003194:	681e      	ldr	r6, [r3, #0]
 8003196:	490d      	ldr	r1, [pc, #52]	; (80031cc <_cbSendTaskList+0x88>)
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	3310      	adds	r3, #16
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	4633      	mov	r3, r6
 80031ac:	462a      	mov	r2, r5
 80031ae:	4621      	mov	r1, r4
 80031b0:	f000 f8ae 	bl	8003310 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3301      	adds	r3, #1
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <_cbSendTaskList+0x8c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d3c5      	bcc.n	8003150 <_cbSendTaskList+0xc>
  }
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031cc:	20012dac 	.word	0x20012dac
 80031d0:	20012e4c 	.word	0x20012e4c

080031d4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80031d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80031dc:	f7fe feda 	bl	8001f94 <xTaskGetTickCountFromISR>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f04f 0400 	mov.w	r4, #0
 80031e6:	e887 0018 	stmia.w	r7, {r3, r4}
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80031ea:	e897 0006 	ldmia.w	r7, {r1, r2}
 80031ee:	460b      	mov	r3, r1
 80031f0:	4614      	mov	r4, r2
 80031f2:	ea4f 1b44 	mov.w	fp, r4, lsl #5
 80031f6:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
 80031fa:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 80031fe:	4653      	mov	r3, sl
 8003200:	465c      	mov	r4, fp
 8003202:	1a5b      	subs	r3, r3, r1
 8003204:	eb64 0402 	sbc.w	r4, r4, r2
 8003208:	ea4f 0984 	mov.w	r9, r4, lsl #2
 800320c:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
 8003210:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8003214:	4643      	mov	r3, r8
 8003216:	464c      	mov	r4, r9
 8003218:	185b      	adds	r3, r3, r1
 800321a:	eb44 0402 	adc.w	r4, r4, r2
 800321e:	00e6      	lsls	r6, r4, #3
 8003220:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 8003224:	00dd      	lsls	r5, r3, #3
 8003226:	462b      	mov	r3, r5
 8003228:	4634      	mov	r4, r6
 800322a:	e887 0018 	stmia.w	r7, {r3, r4}
  return Time;
 800322e:	e897 0018 	ldmia.w	r7, {r3, r4}
}
 8003232:	4618      	mov	r0, r3
 8003234:	4621      	mov	r1, r4
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003240 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800324e:	2205      	movs	r2, #5
 8003250:	492b      	ldr	r1, [pc, #172]	; (8003300 <SYSVIEW_AddTask+0xc0>)
 8003252:	68b8      	ldr	r0, [r7, #8]
 8003254:	f001 fed6 	bl	8005004 <memcmp>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d04b      	beq.n	80032f6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800325e:	4b29      	ldr	r3, [pc, #164]	; (8003304 <SYSVIEW_AddTask+0xc4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b07      	cmp	r3, #7
 8003264:	d903      	bls.n	800326e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003266:	4828      	ldr	r0, [pc, #160]	; (8003308 <SYSVIEW_AddTask+0xc8>)
 8003268:	f001 fb48 	bl	80048fc <SEGGER_SYSVIEW_Warn>
    return;
 800326c:	e044      	b.n	80032f8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800326e:	4b25      	ldr	r3, [pc, #148]	; (8003304 <SYSVIEW_AddTask+0xc4>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	4926      	ldr	r1, [pc, #152]	; (800330c <SYSVIEW_AddTask+0xcc>)
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003282:	4b20      	ldr	r3, [pc, #128]	; (8003304 <SYSVIEW_AddTask+0xc4>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4921      	ldr	r1, [pc, #132]	; (800330c <SYSVIEW_AddTask+0xcc>)
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	3304      	adds	r3, #4
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003298:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <SYSVIEW_AddTask+0xc4>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	491b      	ldr	r1, [pc, #108]	; (800330c <SYSVIEW_AddTask+0xcc>)
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	3308      	adds	r3, #8
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80032ae:	4b15      	ldr	r3, [pc, #84]	; (8003304 <SYSVIEW_AddTask+0xc4>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4916      	ldr	r1, [pc, #88]	; (800330c <SYSVIEW_AddTask+0xcc>)
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	330c      	adds	r3, #12
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80032c4:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <SYSVIEW_AddTask+0xc4>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4910      	ldr	r1, [pc, #64]	; (800330c <SYSVIEW_AddTask+0xcc>)
 80032ca:	4613      	mov	r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	3310      	adds	r3, #16
 80032d6:	69ba      	ldr	r2, [r7, #24]
 80032d8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80032da:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <SYSVIEW_AddTask+0xc4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	3301      	adds	r3, #1
 80032e0:	4a08      	ldr	r2, [pc, #32]	; (8003304 <SYSVIEW_AddTask+0xc4>)
 80032e2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	68b9      	ldr	r1, [r7, #8]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f80e 	bl	8003310 <SYSVIEW_SendTaskInfo>
 80032f4:	e000      	b.n	80032f8 <SYSVIEW_AddTask+0xb8>
    return;
 80032f6:	bf00      	nop

}
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	080050bc 	.word	0x080050bc
 8003304:	20012e4c 	.word	0x20012e4c
 8003308:	080050c4 	.word	0x080050c4
 800330c:	20012dac 	.word	0x20012dac

08003310 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	; 0x28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800331e:	f107 0314 	add.w	r3, r7, #20
 8003322:	2214      	movs	r2, #20
 8003324:	2100      	movs	r1, #0
 8003326:	4618      	mov	r0, r3
 8003328:	f001 fe86 	bl	8005038 <memset>
  TaskInfo.TaskID     = TaskID;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800333c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003340:	f107 0314 	add.w	r3, r7, #20
 8003344:	4618      	mov	r0, r3
 8003346:	f000 ffb9 	bl	80042bc <SEGGER_SYSVIEW_SendTaskInfo>
}
 800334a:	bf00      	nop
 800334c:	3728      	adds	r7, #40	; 0x28
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 800335a:	4b21      	ldr	r3, [pc, #132]	; (80033e0 <_DoInit+0x8c>)
 800335c:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2203      	movs	r2, #3
 8003362:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2203      	movs	r2, #3
 8003368:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a1d      	ldr	r2, [pc, #116]	; (80033e4 <_DoInit+0x90>)
 800336e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <_DoInit+0x94>)
 8003374:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800337c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a14      	ldr	r2, [pc, #80]	; (80033e4 <_DoInit+0x90>)
 8003394:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a14      	ldr	r2, [pc, #80]	; (80033ec <_DoInit+0x98>)
 800339a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2210      	movs	r2, #16
 80033a0:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3307      	adds	r3, #7
 80033b8:	4a0d      	ldr	r2, [pc, #52]	; (80033f0 <_DoInit+0x9c>)
 80033ba:	6810      	ldr	r0, [r2, #0]
 80033bc:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a0c      	ldr	r2, [pc, #48]	; (80033f4 <_DoInit+0xa0>)
 80033c2:	6810      	ldr	r0, [r2, #0]
 80033c4:	6018      	str	r0, [r3, #0]
 80033c6:	8891      	ldrh	r1, [r2, #4]
 80033c8:	7992      	ldrb	r2, [r2, #6]
 80033ca:	8099      	strh	r1, [r3, #4]
 80033cc:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2220      	movs	r2, #32
 80033d2:	719a      	strb	r2, [r3, #6]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	200153bc 	.word	0x200153bc
 80033e4:	08005114 	.word	0x08005114
 80033e8:	20012e50 	.word	0x20012e50
 80033ec:	20013250 	.word	0x20013250
 80033f0:	08005120 	.word	0x08005120
 80033f4:	08005124 	.word	0x08005124

080033f8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	; 0x28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 8003404:	4b3c      	ldr	r3, [pc, #240]	; (80034f8 <SEGGER_RTT_ReadNoLock+0x100>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <SEGGER_RTT_ReadNoLock+0x18>
 800340c:	f7ff ffa2 	bl	8003354 <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	3360      	adds	r3, #96	; 0x60
 800341c:	4a36      	ldr	r2, [pc, #216]	; (80034f8 <SEGGER_RTT_ReadNoLock+0x100>)
 800341e:	4413      	add	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 8003432:	2300      	movs	r3, #0
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003436:	6a3a      	ldr	r2, [r7, #32]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	429a      	cmp	r2, r3
 800343c:	d92a      	bls.n	8003494 <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4293      	cmp	r3, r2
 800344e:	bf28      	it	cs
 8003450:	4613      	movcs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	4413      	add	r3, r2
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4619      	mov	r1, r3
 8003460:	69f8      	ldr	r0, [r7, #28]
 8003462:	f001 fdde 	bl	8005022 <memcpy>
    NumBytesRead += NumBytesRem;
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4413      	add	r3, r2
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4413      	add	r3, r2
 8003474:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800347e:	6a3a      	ldr	r2, [r7, #32]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4413      	add	r3, r2
 8003484:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	429a      	cmp	r2, r3
 800348e:	d101      	bne.n	8003494 <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 8003490:	2300      	movs	r3, #0
 8003492:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4293      	cmp	r3, r2
 80034a2:	bf28      	it	cs
 80034a4:	4613      	movcs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d018      	beq.n	80034e0 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	4413      	add	r3, r2
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4619      	mov	r1, r3
 80034ba:	69f8      	ldr	r0, [r7, #28]
 80034bc:	f001 fdb1 	bl	8005022 <memcpy>
    NumBytesRead += NumBytesRem;
 80034c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	4413      	add	r3, r2
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4413      	add	r3, r2
 80034ce:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80034d8:	6a3a      	ldr	r2, [r7, #32]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4413      	add	r3, r2
 80034de:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	6a3a      	ldr	r2, [r7, #32]
 80034ea:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3728      	adds	r7, #40	; 0x28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	200153bc 	.word	0x200153bc

080034fc <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	; 0x28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	4613      	mov	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4413      	add	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4a3f      	ldr	r2, [pc, #252]	; (8003618 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 800351a:	4413      	add	r3, r2
 800351c:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 800352a:	69fa      	ldr	r2, [r7, #28]
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	429a      	cmp	r2, r3
 8003530:	d854      	bhi.n	80035dc <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	429a      	cmp	r2, r3
 8003544:	d30f      	bcc.n	8003566 <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	4413      	add	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003552:	4618      	mov	r0, r3
 8003554:	f001 fd65 	bl	8005022 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	441a      	add	r2, r3
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8003562:	2301      	movs	r3, #1
 8003564:	e054      	b.n	8003610 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	4413      	add	r3, r2
 800356c:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	429a      	cmp	r2, r3
 8003574:	d34b      	bcc.n	800360e <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	429a      	cmp	r2, r3
 8003586:	d90e      	bls.n	80035a6 <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	4413      	add	r3, r2
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003594:	4618      	mov	r0, r3
 8003596:	f001 fd44 	bl	8005022 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	441a      	add	r2, r3
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	60da      	str	r2, [r3, #12]
 80035a4:	e018      	b.n	80035d8 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	4413      	add	r3, r2
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 fd35 	bl	8005022 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	6858      	ldr	r0, [r3, #4]
 80035bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	18d1      	adds	r1, r2, r3
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	461a      	mov	r2, r3
 80035ca:	f001 fd2a 	bl	8005022 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad2      	subs	r2, r2, r3
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 80035d8:	2301      	movs	r3, #1
 80035da:	e019      	b.n	8003610 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d30f      	bcc.n	800360e <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	4413      	add	r3, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035fa:	4618      	mov	r0, r3
 80035fc:	f001 fd11 	bl	8005022 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	441a      	add	r2, r3
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3728      	adds	r7, #40	; 0x28
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	200153bc 	.word	0x200153bc

0800361c <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 800362a:	4b30      	ldr	r3, [pc, #192]	; (80036ec <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <SEGGER_RTT_ConfigUpBuffer+0x1a>
 8003632:	f7ff fe8f 	bl	8003354 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 8003636:	4b2d      	ldr	r3, [pc, #180]	; (80036ec <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	461a      	mov	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	429a      	cmp	r2, r3
 8003640:	d94c      	bls.n	80036dc <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 8003642:	f3ef 8311 	mrs	r3, BASEPRI
 8003646:	f04f 0120 	mov.w	r1, #32
 800364a:	f381 8811 	msr	BASEPRI, r1
 800364e:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d032      	beq.n	80036bc <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 8003656:	4925      	ldr	r1, [pc, #148]	; (80036ec <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	4613      	mov	r3, r2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	4413      	add	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	440b      	add	r3, r1
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800366a:	4920      	ldr	r1, [pc, #128]	; (80036ec <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1c5a      	adds	r2, r3, #1
 8003670:	4613      	mov	r3, r2
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	4413      	add	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	440b      	add	r3, r1
 800367a:	3304      	adds	r3, #4
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003680:	491a      	ldr	r1, [pc, #104]	; (80036ec <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	4613      	mov	r3, r2
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	4413      	add	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	440b      	add	r3, r1
 800368e:	3320      	adds	r3, #32
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 8003694:	4915      	ldr	r1, [pc, #84]	; (80036ec <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4613      	mov	r3, r2
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	4413      	add	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	440b      	add	r3, r1
 80036a2:	3328      	adds	r3, #40	; 0x28
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 80036a8:	4910      	ldr	r1, [pc, #64]	; (80036ec <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4613      	mov	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	4413      	add	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	440b      	add	r3, r1
 80036b6:	3324      	adds	r3, #36	; 0x24
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 80036bc:	490b      	ldr	r1, [pc, #44]	; (80036ec <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	4613      	mov	r3, r2
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	4413      	add	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	440b      	add	r3, r1
 80036ca:	332c      	adds	r3, #44	; 0x2c
 80036cc:	6a3a      	ldr	r2, [r7, #32]
 80036ce:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
 80036da:	e002      	b.n	80036e2 <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 80036dc:	f04f 33ff 	mov.w	r3, #4294967295
 80036e0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80036e2:	697b      	ldr	r3, [r7, #20]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	200153bc 	.word	0x200153bc

080036f0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 80036fe:	4b30      	ldr	r3, [pc, #192]	; (80037c0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <SEGGER_RTT_ConfigDownBuffer+0x1a>
 8003706:	f7ff fe25 	bl	8003354 <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 800370a:	4b2d      	ldr	r3, [pc, #180]	; (80037c0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	461a      	mov	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	429a      	cmp	r2, r3
 8003714:	d94b      	bls.n	80037ae <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 8003716:	f3ef 8311 	mrs	r3, BASEPRI
 800371a:	f04f 0120 	mov.w	r1, #32
 800371e:	f381 8811 	msr	BASEPRI, r1
 8003722:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d031      	beq.n	800378e <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 800372a:	4925      	ldr	r1, [pc, #148]	; (80037c0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4613      	mov	r3, r2
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4413      	add	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	440b      	add	r3, r1
 8003738:	3360      	adds	r3, #96	; 0x60
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 800373e:	4920      	ldr	r1, [pc, #128]	; (80037c0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4613      	mov	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	4413      	add	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	440b      	add	r3, r1
 800374c:	3364      	adds	r3, #100	; 0x64
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003752:	491b      	ldr	r1, [pc, #108]	; (80037c0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	440b      	add	r3, r1
 8003760:	3368      	adds	r3, #104	; 0x68
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 8003766:	4916      	ldr	r1, [pc, #88]	; (80037c0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	4613      	mov	r3, r2
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	4413      	add	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	440b      	add	r3, r1
 8003774:	3370      	adds	r3, #112	; 0x70
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 800377a:	4911      	ldr	r1, [pc, #68]	; (80037c0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4613      	mov	r3, r2
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	4413      	add	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	440b      	add	r3, r1
 8003788:	336c      	adds	r3, #108	; 0x6c
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 800378e:	490c      	ldr	r1, [pc, #48]	; (80037c0 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	440b      	add	r3, r1
 800379c:	3374      	adds	r3, #116	; 0x74
 800379e:	6a3a      	ldr	r2, [r7, #32]
 80037a0:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	e002      	b.n	80037b4 <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 80037ae:	f04f 33ff 	mov.w	r3, #4294967295
 80037b2:	617b      	str	r3, [r7, #20]
  }
  return r;
 80037b4:	697b      	ldr	r3, [r7, #20]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	200153bc 	.word	0x200153bc

080037c4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80037d4:	e002      	b.n	80037dc <_EncodeStr+0x18>
    Len++;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	3301      	adds	r3, #1
 80037da:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4413      	add	r3, r2
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1f6      	bne.n	80037d6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d901      	bls.n	80037f4 <_EncodeStr+0x30>
    Len = Limit;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	2bfe      	cmp	r3, #254	; 0xfe
 80037f8:	d806      	bhi.n	8003808 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	60fa      	str	r2, [r7, #12]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	e011      	b.n	800382c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	1c5a      	adds	r2, r3, #1
 800380c:	60fa      	str	r2, [r7, #12]
 800380e:	22ff      	movs	r2, #255	; 0xff
 8003810:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	60fa      	str	r2, [r7, #12]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1c5a      	adds	r2, r3, #1
 8003822:	60fa      	str	r2, [r7, #12]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	0a12      	lsrs	r2, r2, #8
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003830:	e00a      	b.n	8003848 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	60fa      	str	r2, [r7, #12]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	1c51      	adds	r1, r2, #1
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	7812      	ldrb	r2, [r2, #0]
 8003840:	701a      	strb	r2, [r3, #0]
    n++;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	3301      	adds	r3, #1
 8003846:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	429a      	cmp	r2, r3
 800384e:	d3f0      	bcc.n	8003832 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003850:	68fb      	ldr	r3, [r7, #12]
}
 8003852:	4618      	mov	r0, r3
 8003854:	371c      	adds	r7, #28
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3304      	adds	r3, #4
}
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800387c:	1cfb      	adds	r3, r7, #3
 800387e:	2201      	movs	r2, #1
 8003880:	4619      	mov	r1, r3
 8003882:	2001      	movs	r0, #1
 8003884:	f7ff fdb8 	bl	80033f8 <SEGGER_RTT_ReadNoLock>
 8003888:	4603      	mov	r3, r0
 800388a:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	dd47      	ble.n	8003922 <_HandleIncomingPacket+0xac>
    switch (Cmd) {
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	2b04      	cmp	r3, #4
 8003896:	d01a      	beq.n	80038ce <_HandleIncomingPacket+0x58>
 8003898:	2b04      	cmp	r3, #4
 800389a:	dc06      	bgt.n	80038aa <_HandleIncomingPacket+0x34>
 800389c:	2b02      	cmp	r3, #2
 800389e:	d010      	beq.n	80038c2 <_HandleIncomingPacket+0x4c>
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	dc11      	bgt.n	80038c8 <_HandleIncomingPacket+0x52>
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d009      	beq.n	80038bc <_HandleIncomingPacket+0x46>
 80038a8:	e02d      	b.n	8003906 <_HandleIncomingPacket+0x90>
 80038aa:	2b06      	cmp	r3, #6
 80038ac:	d015      	beq.n	80038da <_HandleIncomingPacket+0x64>
 80038ae:	2b06      	cmp	r3, #6
 80038b0:	db10      	blt.n	80038d4 <_HandleIncomingPacket+0x5e>
 80038b2:	2b07      	cmp	r3, #7
 80038b4:	d014      	beq.n	80038e0 <_HandleIncomingPacket+0x6a>
 80038b6:	2b80      	cmp	r3, #128	; 0x80
 80038b8:	d015      	beq.n	80038e6 <_HandleIncomingPacket+0x70>
 80038ba:	e024      	b.n	8003906 <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80038bc:	f000 fb82 	bl	8003fc4 <SEGGER_SYSVIEW_Start>
      break;
 80038c0:	e02f      	b.n	8003922 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80038c2:	f000 fc3b 	bl	800413c <SEGGER_SYSVIEW_Stop>
      break;
 80038c6:	e02c      	b.n	8003922 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80038c8:	f000 fe16 	bl	80044f8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80038cc:	e029      	b.n	8003922 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80038ce:	f000 fddb 	bl	8004488 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80038d2:	e026      	b.n	8003922 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80038d4:	f000 fc58 	bl	8004188 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80038d8:	e023      	b.n	8003922 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80038da:	f000 ffd1 	bl	8004880 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80038de:	e020      	b.n	8003922 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80038e0:	f000 ffb0 	bl	8004844 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80038e4:	e01d      	b.n	8003922 <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80038e6:	1cfb      	adds	r3, r7, #3
 80038e8:	2201      	movs	r2, #1
 80038ea:	4619      	mov	r1, r3
 80038ec:	2001      	movs	r0, #1
 80038ee:	f7ff fd83 	bl	80033f8 <SEGGER_RTT_ReadNoLock>
 80038f2:	4603      	mov	r3, r0
 80038f4:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	dd0f      	ble.n	800391c <_HandleIncomingPacket+0xa6>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80038fc:	78fb      	ldrb	r3, [r7, #3]
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 ff20 	bl	8004744 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003904:	e00a      	b.n	800391c <_HandleIncomingPacket+0xa6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003906:	78fb      	ldrb	r3, [r7, #3]
 8003908:	b25b      	sxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	da08      	bge.n	8003920 <_HandleIncomingPacket+0xaa>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800390e:	1cfb      	adds	r3, r7, #3
 8003910:	2201      	movs	r2, #1
 8003912:	4619      	mov	r1, r3
 8003914:	2001      	movs	r0, #1
 8003916:	f7ff fd6f 	bl	80033f8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800391a:	e001      	b.n	8003920 <_HandleIncomingPacket+0xaa>
      break;
 800391c:	bf00      	nop
 800391e:	e000      	b.n	8003922 <_HandleIncomingPacket+0xac>
      break;
 8003920:	bf00      	nop
    }
  }
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b08c      	sub	sp, #48	; 0x30
 8003930:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003932:	2301      	movs	r3, #1
 8003934:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003936:	1d3b      	adds	r3, r7, #4
 8003938:	3301      	adds	r3, #1
 800393a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003940:	4b30      	ldr	r3, [pc, #192]	; (8003a04 <_TrySendOverflowPacket+0xd8>)
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	62bb      	str	r3, [r7, #40]	; 0x28
 8003946:	e00b      	b.n	8003960 <_TrySendOverflowPacket+0x34>
 8003948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800394e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395c:	09db      	lsrs	r3, r3, #7
 800395e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	2b7f      	cmp	r3, #127	; 0x7f
 8003964:	d8f0      	bhi.n	8003948 <_TrySendOverflowPacket+0x1c>
 8003966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800396c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	701a      	strb	r2, [r3, #0]
 8003972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003974:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003976:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <_TrySendOverflowPacket+0xdc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800397c:	4b21      	ldr	r3, [pc, #132]	; (8003a04 <_TrySendOverflowPacket+0xd8>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	623b      	str	r3, [r7, #32]
 800398e:	e00b      	b.n	80039a8 <_TrySendOverflowPacket+0x7c>
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	627a      	str	r2, [r7, #36]	; 0x24
 8003996:	6a3a      	ldr	r2, [r7, #32]
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	701a      	strb	r2, [r3, #0]
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	09db      	lsrs	r3, r3, #7
 80039a6:	623b      	str	r3, [r7, #32]
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	2b7f      	cmp	r3, #127	; 0x7f
 80039ac:	d8f0      	bhi.n	8003990 <_TrySendOverflowPacket+0x64>
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	627a      	str	r2, [r7, #36]	; 0x24
 80039b4:	6a3a      	ldr	r2, [r7, #32]
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80039be:	69fa      	ldr	r2, [r7, #28]
 80039c0:	1d3b      	adds	r3, r7, #4
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	1d3b      	adds	r3, r7, #4
 80039c8:	4619      	mov	r1, r3
 80039ca:	2001      	movs	r0, #1
 80039cc:	f7ff fd96 	bl	80034fc <SEGGER_RTT_WriteSkipNoLock>
 80039d0:	4603      	mov	r3, r0
 80039d2:	613b      	str	r3, [r7, #16]
  if (Status) {
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80039da:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <_TrySendOverflowPacket+0xd8>)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80039e0:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <_TrySendOverflowPacket+0xd8>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <_TrySendOverflowPacket+0xd8>)
 80039ea:	701a      	strb	r2, [r3, #0]
 80039ec:	e004      	b.n	80039f8 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80039ee:	4b05      	ldr	r3, [pc, #20]	; (8003a04 <_TrySendOverflowPacket+0xd8>)
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	3301      	adds	r3, #1
 80039f4:	4a03      	ldr	r2, [pc, #12]	; (8003a04 <_TrySendOverflowPacket+0xd8>)
 80039f6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80039f8:	693b      	ldr	r3, [r7, #16]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3730      	adds	r7, #48	; 0x30
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20015268 	.word	0x20015268
 8003a08:	e0001004 	.word	0xe0001004

08003a0c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08a      	sub	sp, #40	; 0x28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003a18:	4b62      	ldr	r3, [pc, #392]	; (8003ba4 <_SendPacket+0x198>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d010      	beq.n	8003a42 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003a20:	4b60      	ldr	r3, [pc, #384]	; (8003ba4 <_SendPacket+0x198>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 809f 	beq.w	8003b68 <_SendPacket+0x15c>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003a2a:	4b5e      	ldr	r3, [pc, #376]	; (8003ba4 <_SendPacket+0x198>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d108      	bne.n	8003a44 <_SendPacket+0x38>
    _TrySendOverflowPacket();
 8003a32:	f7ff ff7b 	bl	800392c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003a36:	4b5b      	ldr	r3, [pc, #364]	; (8003ba4 <_SendPacket+0x198>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	f040 8096 	bne.w	8003b6c <_SendPacket+0x160>
 8003a40:	e000      	b.n	8003a44 <_SendPacket+0x38>
    goto Send;
 8003a42:	bf00      	nop
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b1f      	cmp	r3, #31
 8003a48:	d809      	bhi.n	8003a5e <_SendPacket+0x52>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003a4a:	4b56      	ldr	r3, [pc, #344]	; (8003ba4 <_SendPacket+0x198>)
 8003a4c:	69da      	ldr	r2, [r3, #28]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	fa22 f303 	lsr.w	r3, r2, r3
 8003a54:	f003 0301 	and.w	r3, r3, #1
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f040 8089 	bne.w	8003b70 <_SendPacket+0x164>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b17      	cmp	r3, #23
 8003a62:	d807      	bhi.n	8003a74 <_SendPacket+0x68>
    *--pStartPacket = EventId;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	b2da      	uxtb	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	701a      	strb	r2, [r3, #0]
 8003a72:	e03d      	b.n	8003af0 <_SendPacket+0xe4>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8003a80:	d912      	bls.n	8003aa8 <_SendPacket+0x9c>
      *--pStartPacket = (NumBytes >> 7);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	09db      	lsrs	r3, r3, #7
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	e006      	b.n	8003ab6 <_SendPacket+0xaa>
    } else {
      *--pStartPacket = NumBytes;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b7f      	cmp	r3, #127	; 0x7f
 8003aba:	d912      	bls.n	8003ae2 <_SendPacket+0xd6>
      *--pStartPacket = (EventId >> 7);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	09db      	lsrs	r3, r3, #7
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	701a      	strb	r2, [r3, #0]
 8003ae0:	e006      	b.n	8003af0 <_SendPacket+0xe4>
    } else {
      *--pStartPacket = EventId;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003af0:	4b2d      	ldr	r3, [pc, #180]	; (8003ba8 <_SendPacket+0x19c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003af6:	4b2b      	ldr	r3, [pc, #172]	; (8003ba4 <_SendPacket+0x198>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	623b      	str	r3, [r7, #32]
 8003b08:	e00b      	b.n	8003b22 <_SendPacket+0x116>
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	627a      	str	r2, [r7, #36]	; 0x24
 8003b10:	6a3a      	ldr	r2, [r7, #32]
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	701a      	strb	r2, [r3, #0]
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	09db      	lsrs	r3, r3, #7
 8003b20:	623b      	str	r3, [r7, #32]
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	2b7f      	cmp	r3, #127	; 0x7f
 8003b26:	d8f0      	bhi.n	8003b0a <_SendPacket+0xfe>
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	627a      	str	r2, [r7, #36]	; 0x24
 8003b2e:	6a3a      	ldr	r2, [r7, #32]
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	701a      	strb	r2, [r3, #0]
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68f9      	ldr	r1, [r7, #12]
 8003b42:	2001      	movs	r0, #1
 8003b44:	f7ff fcda 	bl	80034fc <SEGGER_RTT_WriteSkipNoLock>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	613b      	str	r3, [r7, #16]
  if (Status) {
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <_SendPacket+0x14e>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003b52:	4a14      	ldr	r2, [pc, #80]	; (8003ba4 <_SendPacket+0x198>)
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	60d3      	str	r3, [r2, #12]
 8003b58:	e00b      	b.n	8003b72 <_SendPacket+0x166>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003b5a:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <_SendPacket+0x198>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <_SendPacket+0x198>)
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	e004      	b.n	8003b72 <_SendPacket+0x166>
    goto SendDone;
 8003b68:	bf00      	nop
 8003b6a:	e002      	b.n	8003b72 <_SendPacket+0x166>
      goto SendDone;
 8003b6c:	bf00      	nop
 8003b6e:	e000      	b.n	8003b72 <_SendPacket+0x166>
      goto SendDone;
 8003b70:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003b72:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <_SendPacket+0x1a0>)
 8003b74:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <_SendPacket+0x1a0>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d00b      	beq.n	8003b9a <_SendPacket+0x18e>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003b82:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <_SendPacket+0x198>)
 8003b84:	789b      	ldrb	r3, [r3, #2]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d107      	bne.n	8003b9a <_SendPacket+0x18e>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <_SendPacket+0x198>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003b90:	f7ff fe71 	bl	8003876 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003b94:	4b03      	ldr	r3, [pc, #12]	; (8003ba4 <_SendPacket+0x198>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003b9a:	bf00      	nop
 8003b9c:	3728      	adds	r7, #40	; 0x28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20015268 	.word	0x20015268
 8003ba8:	e0001004 	.word	0xe0001004
 8003bac:	200153bc 	.word	0x200153bc

08003bb0 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bc6:	4a14      	ldr	r2, [pc, #80]	; (8003c18 <SEGGER_SYSVIEW_Init+0x68>)
 8003bc8:	4914      	ldr	r1, [pc, #80]	; (8003c1c <SEGGER_SYSVIEW_Init+0x6c>)
 8003bca:	2001      	movs	r0, #1
 8003bcc:	f7ff fd26 	bl	800361c <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2308      	movs	r3, #8
 8003bd6:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <SEGGER_SYSVIEW_Init+0x70>)
 8003bd8:	4910      	ldr	r1, [pc, #64]	; (8003c1c <SEGGER_SYSVIEW_Init+0x6c>)
 8003bda:	2001      	movs	r0, #1
 8003bdc:	f7ff fd88 	bl	80036f0 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003be0:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <SEGGER_SYSVIEW_Init+0x74>)
 8003be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be6:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <SEGGER_SYSVIEW_Init+0x78>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a0d      	ldr	r2, [pc, #52]	; (8003c24 <SEGGER_SYSVIEW_Init+0x74>)
 8003bee:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003bf0:	4a0c      	ldr	r2, [pc, #48]	; (8003c24 <SEGGER_SYSVIEW_Init+0x74>)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003bf6:	4a0b      	ldr	r2, [pc, #44]	; (8003c24 <SEGGER_SYSVIEW_Init+0x74>)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003bfc:	4a09      	ldr	r2, [pc, #36]	; (8003c24 <SEGGER_SYSVIEW_Init+0x74>)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003c02:	4a08      	ldr	r2, [pc, #32]	; (8003c24 <SEGGER_SYSVIEW_Init+0x74>)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003c08:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <SEGGER_SYSVIEW_Init+0x74>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003c0e:	bf00      	nop
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	20013260 	.word	0x20013260
 8003c1c:	0800512c 	.word	0x0800512c
 8003c20:	20015260 	.word	0x20015260
 8003c24:	20015268 	.word	0x20015268
 8003c28:	e0001004 	.word	0xe0001004

08003c2c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003c34:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6113      	str	r3, [r2, #16]
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	20015268 	.word	0x20015268

08003c4c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003c54:	f3ef 8311 	mrs	r3, BASEPRI
 8003c58:	f04f 0120 	mov.w	r1, #32
 8003c5c:	f381 8811 	msr	BASEPRI, r1
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	4808      	ldr	r0, [pc, #32]	; (8003c84 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003c64:	f7ff fdfb 	bl	800385e <_PreparePacket>
 8003c68:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	68b8      	ldr	r0, [r7, #8]
 8003c70:	f7ff fecc 	bl	8003a0c <_SendPacket>
  RECORD_END();
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f383 8811 	msr	BASEPRI, r3
}
 8003c7a:	bf00      	nop
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20015298 	.word	0x20015298

08003c88 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003c92:	f3ef 8311 	mrs	r3, BASEPRI
 8003c96:	f04f 0120 	mov.w	r1, #32
 8003c9a:	f381 8811 	msr	BASEPRI, r1
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	4816      	ldr	r0, [pc, #88]	; (8003cfc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003ca2:	f7ff fddc 	bl	800385e <_PreparePacket>
 8003ca6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	61fb      	str	r3, [r7, #28]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	e00b      	b.n	8003cce <SEGGER_SYSVIEW_RecordU32+0x46>
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	61fa      	str	r2, [r7, #28]
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	701a      	strb	r2, [r3, #0]
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	09db      	lsrs	r3, r3, #7
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b7f      	cmp	r3, #127	; 0x7f
 8003cd2:	d8f0      	bhi.n	8003cb6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	61fa      	str	r2, [r7, #28]
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	701a      	strb	r2, [r3, #0]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	68f9      	ldr	r1, [r7, #12]
 8003ce8:	6938      	ldr	r0, [r7, #16]
 8003cea:	f7ff fe8f 	bl	8003a0c <_SendPacket>
  RECORD_END();
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f383 8811 	msr	BASEPRI, r3
}
 8003cf4:	bf00      	nop
 8003cf6:	3720      	adds	r7, #32
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	20015298 	.word	0x20015298

08003d00 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08c      	sub	sp, #48	; 0x30
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003d0c:	f3ef 8311 	mrs	r3, BASEPRI
 8003d10:	f04f 0120 	mov.w	r1, #32
 8003d14:	f381 8811 	msr	BASEPRI, r1
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	4825      	ldr	r0, [pc, #148]	; (8003db0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003d1c:	f7ff fd9f 	bl	800385e <_PreparePacket>
 8003d20:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d2e:	e00b      	b.n	8003d48 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	09db      	lsrs	r3, r3, #7
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	2b7f      	cmp	r3, #127	; 0x7f
 8003d4c:	d8f0      	bhi.n	8003d30 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]
 8003d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	623b      	str	r3, [r7, #32]
 8003d66:	e00b      	b.n	8003d80 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	627a      	str	r2, [r7, #36]	; 0x24
 8003d6e:	6a3a      	ldr	r2, [r7, #32]
 8003d70:	b2d2      	uxtb	r2, r2
 8003d72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]
 8003d7a:	6a3b      	ldr	r3, [r7, #32]
 8003d7c:	09db      	lsrs	r3, r3, #7
 8003d7e:	623b      	str	r3, [r7, #32]
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	2b7f      	cmp	r3, #127	; 0x7f
 8003d84:	d8f0      	bhi.n	8003d68 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	627a      	str	r2, [r7, #36]	; 0x24
 8003d8c:	6a3a      	ldr	r2, [r7, #32]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	6979      	ldr	r1, [r7, #20]
 8003d9a:	69b8      	ldr	r0, [r7, #24]
 8003d9c:	f7ff fe36 	bl	8003a0c <_SendPacket>
  RECORD_END();
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f383 8811 	msr	BASEPRI, r3
}
 8003da6:	bf00      	nop
 8003da8:	3730      	adds	r7, #48	; 0x30
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20015298 	.word	0x20015298

08003db4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08e      	sub	sp, #56	; 0x38
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	607a      	str	r2, [r7, #4]
 8003dc0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8003dc2:	f3ef 8311 	mrs	r3, BASEPRI
 8003dc6:	f04f 0120 	mov.w	r1, #32
 8003dca:	f381 8811 	msr	BASEPRI, r1
 8003dce:	61fb      	str	r3, [r7, #28]
 8003dd0:	4832      	ldr	r0, [pc, #200]	; (8003e9c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8003dd2:	f7ff fd44 	bl	800385e <_PreparePacket>
 8003dd6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	637b      	str	r3, [r7, #52]	; 0x34
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	633b      	str	r3, [r7, #48]	; 0x30
 8003de4:	e00b      	b.n	8003dfe <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	637a      	str	r2, [r7, #52]	; 0x34
 8003dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	701a      	strb	r2, [r3, #0]
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	09db      	lsrs	r3, r3, #7
 8003dfc:	633b      	str	r3, [r7, #48]	; 0x30
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e00:	2b7f      	cmp	r3, #127	; 0x7f
 8003e02:	d8f0      	bhi.n	8003de6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	637a      	str	r2, [r7, #52]	; 0x34
 8003e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e0c:	b2d2      	uxtb	r2, r2
 8003e0e:	701a      	strb	r2, [r3, #0]
 8003e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e12:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e1c:	e00b      	b.n	8003e36 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	1c5a      	adds	r2, r3, #1
 8003e22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e26:	b2d2      	uxtb	r2, r2
 8003e28:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e2c:	b2d2      	uxtb	r2, r2
 8003e2e:	701a      	strb	r2, [r3, #0]
 8003e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e32:	09db      	lsrs	r3, r3, #7
 8003e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e38:	2b7f      	cmp	r3, #127	; 0x7f
 8003e3a:	d8f0      	bhi.n	8003e1e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	701a      	strb	r2, [r3, #0]
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	623b      	str	r3, [r7, #32]
 8003e54:	e00b      	b.n	8003e6e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	627a      	str	r2, [r7, #36]	; 0x24
 8003e5c:	6a3a      	ldr	r2, [r7, #32]
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	701a      	strb	r2, [r3, #0]
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	09db      	lsrs	r3, r3, #7
 8003e6c:	623b      	str	r3, [r7, #32]
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	2b7f      	cmp	r3, #127	; 0x7f
 8003e72:	d8f0      	bhi.n	8003e56 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	627a      	str	r2, [r7, #36]	; 0x24
 8003e7a:	6a3a      	ldr	r2, [r7, #32]
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	6979      	ldr	r1, [r7, #20]
 8003e88:	69b8      	ldr	r0, [r7, #24]
 8003e8a:	f7ff fdbf 	bl	8003a0c <_SendPacket>
  RECORD_END();
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f383 8811 	msr	BASEPRI, r3
}
 8003e94:	bf00      	nop
 8003e96:	3738      	adds	r7, #56	; 0x38
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20015298 	.word	0x20015298

08003ea0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b090      	sub	sp, #64	; 0x40
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
 8003eac:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003eae:	f3ef 8311 	mrs	r3, BASEPRI
 8003eb2:	f04f 0120 	mov.w	r1, #32
 8003eb6:	f381 8811 	msr	BASEPRI, r1
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	4840      	ldr	r0, [pc, #256]	; (8003fc0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003ebe:	f7ff fcce 	bl	800385e <_PreparePacket>
 8003ec2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ed0:	e00b      	b.n	8003eea <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ed8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee6:	09db      	lsrs	r3, r3, #7
 8003ee8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	2b7f      	cmp	r3, #127	; 0x7f
 8003eee:	d8f0      	bhi.n	8003ed2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ef6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003efe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	637b      	str	r3, [r7, #52]	; 0x34
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	633b      	str	r3, [r7, #48]	; 0x30
 8003f08:	e00b      	b.n	8003f22 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	637a      	str	r2, [r7, #52]	; 0x34
 8003f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	701a      	strb	r2, [r3, #0]
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1e:	09db      	lsrs	r3, r3, #7
 8003f20:	633b      	str	r3, [r7, #48]	; 0x30
 8003f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f24:	2b7f      	cmp	r3, #127	; 0x7f
 8003f26:	d8f0      	bhi.n	8003f0a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	637a      	str	r2, [r7, #52]	; 0x34
 8003f2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	701a      	strb	r2, [r3, #0]
 8003f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f36:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f40:	e00b      	b.n	8003f5a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	701a      	strb	r2, [r3, #0]
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	09db      	lsrs	r3, r3, #7
 8003f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5c:	2b7f      	cmp	r3, #127	; 0x7f
 8003f5e:	d8f0      	bhi.n	8003f42 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	701a      	strb	r2, [r3, #0]
 8003f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
 8003f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f76:	623b      	str	r3, [r7, #32]
 8003f78:	e00b      	b.n	8003f92 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	627a      	str	r2, [r7, #36]	; 0x24
 8003f80:	6a3a      	ldr	r2, [r7, #32]
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	09db      	lsrs	r3, r3, #7
 8003f90:	623b      	str	r3, [r7, #32]
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	2b7f      	cmp	r3, #127	; 0x7f
 8003f96:	d8f0      	bhi.n	8003f7a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	1c5a      	adds	r2, r3, #1
 8003f9c:	627a      	str	r2, [r7, #36]	; 0x24
 8003f9e:	6a3a      	ldr	r2, [r7, #32]
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	6979      	ldr	r1, [r7, #20]
 8003fac:	69b8      	ldr	r0, [r7, #24]
 8003fae:	f7ff fd2d 	bl	8003a0c <_SendPacket>
  RECORD_END();
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f383 8811 	msr	BASEPRI, r3
}
 8003fb8:	bf00      	nop
 8003fba:	3740      	adds	r7, #64	; 0x40
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20015298 	.word	0x20015298

08003fc4 <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b08c      	sub	sp, #48	; 0x30
 8003fc8:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003fca:	4b59      	ldr	r3, [pc, #356]	; (8004130 <SEGGER_SYSVIEW_Start+0x16c>)
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f040 80aa 	bne.w	8004128 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8003fd4:	4b56      	ldr	r3, [pc, #344]	; (8004130 <SEGGER_SYSVIEW_Start+0x16c>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003fda:	f3ef 8311 	mrs	r3, BASEPRI
 8003fde:	f04f 0120 	mov.w	r1, #32
 8003fe2:	f381 8811 	msr	BASEPRI, r1
 8003fe6:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003fe8:	220a      	movs	r2, #10
 8003fea:	4952      	ldr	r1, [pc, #328]	; (8004134 <SEGGER_SYSVIEW_Start+0x170>)
 8003fec:	2001      	movs	r0, #1
 8003fee:	f7ff fa85 	bl	80034fc <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003ff8:	200a      	movs	r0, #10
 8003ffa:	f7ff fe27 	bl	8003c4c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003ffe:	f3ef 8311 	mrs	r3, BASEPRI
 8004002:	f04f 0120 	mov.w	r1, #32
 8004006:	f381 8811 	msr	BASEPRI, r1
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	484a      	ldr	r0, [pc, #296]	; (8004138 <SEGGER_SYSVIEW_Start+0x174>)
 800400e:	f7ff fc26 	bl	800385e <_PreparePacket>
 8004012:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800401c:	4b44      	ldr	r3, [pc, #272]	; (8004130 <SEGGER_SYSVIEW_Start+0x16c>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	62bb      	str	r3, [r7, #40]	; 0x28
 8004022:	e00b      	b.n	800403c <SEGGER_SYSVIEW_Start+0x78>
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	62fa      	str	r2, [r7, #44]	; 0x2c
 800402a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004038:	09db      	lsrs	r3, r3, #7
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28
 800403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403e:	2b7f      	cmp	r3, #127	; 0x7f
 8004040:	d8f0      	bhi.n	8004024 <SEGGER_SYSVIEW_Start+0x60>
 8004042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]
 800404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004050:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
 8004056:	4b36      	ldr	r3, [pc, #216]	; (8004130 <SEGGER_SYSVIEW_Start+0x16c>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	623b      	str	r3, [r7, #32]
 800405c:	e00b      	b.n	8004076 <SEGGER_SYSVIEW_Start+0xb2>
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	627a      	str	r2, [r7, #36]	; 0x24
 8004064:	6a3a      	ldr	r2, [r7, #32]
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	09db      	lsrs	r3, r3, #7
 8004074:	623b      	str	r3, [r7, #32]
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	2b7f      	cmp	r3, #127	; 0x7f
 800407a:	d8f0      	bhi.n	800405e <SEGGER_SYSVIEW_Start+0x9a>
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	627a      	str	r2, [r7, #36]	; 0x24
 8004082:	6a3a      	ldr	r2, [r7, #32]
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	701a      	strb	r2, [r3, #0]
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	4b27      	ldr	r3, [pc, #156]	; (8004130 <SEGGER_SYSVIEW_Start+0x16c>)
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	61bb      	str	r3, [r7, #24]
 8004096:	e00b      	b.n	80040b0 <SEGGER_SYSVIEW_Start+0xec>
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	61fa      	str	r2, [r7, #28]
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	09db      	lsrs	r3, r3, #7
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2b7f      	cmp	r3, #127	; 0x7f
 80040b4:	d8f0      	bhi.n	8004098 <SEGGER_SYSVIEW_Start+0xd4>
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	61fa      	str	r2, [r7, #28]
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	2302      	movs	r3, #2
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	e00b      	b.n	80040e8 <SEGGER_SYSVIEW_Start+0x124>
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	617a      	str	r2, [r7, #20]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	09db      	lsrs	r3, r3, #7
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	2b7f      	cmp	r3, #127	; 0x7f
 80040ec:	d8f0      	bhi.n	80040d0 <SEGGER_SYSVIEW_Start+0x10c>
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	617a      	str	r2, [r7, #20]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80040fe:	2218      	movs	r2, #24
 8004100:	6839      	ldr	r1, [r7, #0]
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff fc82 	bl	8003a0c <_SendPacket>
      RECORD_END();
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800410e:	4b08      	ldr	r3, [pc, #32]	; (8004130 <SEGGER_SYSVIEW_Start+0x16c>)
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <SEGGER_SYSVIEW_Start+0x16c>)
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800411c:	f000 f9ec 	bl	80044f8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004120:	f000 f9b2 	bl	8004488 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004124:	f000 fbac 	bl	8004880 <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8004128:	bf00      	nop
 800412a:	3730      	adds	r7, #48	; 0x30
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20015268 	.word	0x20015268
 8004134:	08005158 	.word	0x08005158
 8004138:	20015298 	.word	0x20015298

0800413c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004142:	f3ef 8311 	mrs	r3, BASEPRI
 8004146:	f04f 0120 	mov.w	r1, #32
 800414a:	f381 8811 	msr	BASEPRI, r1
 800414e:	607b      	str	r3, [r7, #4]
 8004150:	480b      	ldr	r0, [pc, #44]	; (8004180 <SEGGER_SYSVIEW_Stop+0x44>)
 8004152:	f7ff fb84 	bl	800385e <_PreparePacket>
 8004156:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004158:	4b0a      	ldr	r3, [pc, #40]	; (8004184 <SEGGER_SYSVIEW_Stop+0x48>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d007      	beq.n	8004170 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004160:	220b      	movs	r2, #11
 8004162:	6839      	ldr	r1, [r7, #0]
 8004164:	6838      	ldr	r0, [r7, #0]
 8004166:	f7ff fc51 	bl	8003a0c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <SEGGER_SYSVIEW_Stop+0x48>)
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f383 8811 	msr	BASEPRI, r3
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20015298 	.word	0x20015298
 8004184:	20015268 	.word	0x20015268

08004188 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004188:	b580      	push	{r7, lr}
 800418a:	b08c      	sub	sp, #48	; 0x30
 800418c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800418e:	f3ef 8311 	mrs	r3, BASEPRI
 8004192:	f04f 0120 	mov.w	r1, #32
 8004196:	f381 8811 	msr	BASEPRI, r1
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	4845      	ldr	r0, [pc, #276]	; (80042b4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800419e:	f7ff fb5e 	bl	800385e <_PreparePacket>
 80041a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ac:	4b42      	ldr	r3, [pc, #264]	; (80042b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041b2:	e00b      	b.n	80041cc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80041b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c8:	09db      	lsrs	r3, r3, #7
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	2b7f      	cmp	r3, #127	; 0x7f
 80041d0:	d8f0      	bhi.n	80041b4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
 80041e6:	4b34      	ldr	r3, [pc, #208]	; (80042b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	623b      	str	r3, [r7, #32]
 80041ec:	e00b      	b.n	8004206 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	627a      	str	r2, [r7, #36]	; 0x24
 80041f4:	6a3a      	ldr	r2, [r7, #32]
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	701a      	strb	r2, [r3, #0]
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	09db      	lsrs	r3, r3, #7
 8004204:	623b      	str	r3, [r7, #32]
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	2b7f      	cmp	r3, #127	; 0x7f
 800420a:	d8f0      	bhi.n	80041ee <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	627a      	str	r2, [r7, #36]	; 0x24
 8004212:	6a3a      	ldr	r2, [r7, #32]
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	701a      	strb	r2, [r3, #0]
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	61fb      	str	r3, [r7, #28]
 8004220:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	e00b      	b.n	8004240 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	61fa      	str	r2, [r7, #28]
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	09db      	lsrs	r3, r3, #7
 800423e:	61bb      	str	r3, [r7, #24]
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	2b7f      	cmp	r3, #127	; 0x7f
 8004244:	d8f0      	bhi.n	8004228 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	61fa      	str	r2, [r7, #28]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	2302      	movs	r3, #2
 800425c:	613b      	str	r3, [r7, #16]
 800425e:	e00b      	b.n	8004278 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	617a      	str	r2, [r7, #20]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	09db      	lsrs	r3, r3, #7
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	2b7f      	cmp	r3, #127	; 0x7f
 800427c:	d8f0      	bhi.n	8004260 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	617a      	str	r2, [r7, #20]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	701a      	strb	r2, [r3, #0]
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800428e:	2218      	movs	r2, #24
 8004290:	6879      	ldr	r1, [r7, #4]
 8004292:	68b8      	ldr	r0, [r7, #8]
 8004294:	f7ff fbba 	bl	8003a0c <_SendPacket>
  RECORD_END();
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800429e:	4b06      	ldr	r3, [pc, #24]	; (80042b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80042a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80042a6:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	4798      	blx	r3
  }
}
 80042ac:	bf00      	nop
 80042ae:	3730      	adds	r7, #48	; 0x30
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20015298 	.word	0x20015298
 80042b8:	20015268 	.word	0x20015268

080042bc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80042bc:	b580      	push	{r7, lr}
 80042be:	b092      	sub	sp, #72	; 0x48
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80042c4:	f3ef 8311 	mrs	r3, BASEPRI
 80042c8:	f04f 0120 	mov.w	r1, #32
 80042cc:	f381 8811 	msr	BASEPRI, r1
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	486b      	ldr	r0, [pc, #428]	; (8004480 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80042d4:	f7ff fac3 	bl	800385e <_PreparePacket>
 80042d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	647b      	str	r3, [r7, #68]	; 0x44
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	4b67      	ldr	r3, [pc, #412]	; (8004484 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	089b      	lsrs	r3, r3, #2
 80042ee:	643b      	str	r3, [r7, #64]	; 0x40
 80042f0:	e00b      	b.n	800430a <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 80042f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	647a      	str	r2, [r7, #68]	; 0x44
 80042f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	701a      	strb	r2, [r3, #0]
 8004304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004306:	09db      	lsrs	r3, r3, #7
 8004308:	643b      	str	r3, [r7, #64]	; 0x40
 800430a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800430c:	2b7f      	cmp	r3, #127	; 0x7f
 800430e:	d8f0      	bhi.n	80042f2 <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8004310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	647a      	str	r2, [r7, #68]	; 0x44
 8004316:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	701a      	strb	r2, [r3, #0]
 800431c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	63bb      	str	r3, [r7, #56]	; 0x38
 800432a:	e00b      	b.n	8004344 <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 800432c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	09db      	lsrs	r3, r3, #7
 8004342:	63bb      	str	r3, [r7, #56]	; 0x38
 8004344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004346:	2b7f      	cmp	r3, #127	; 0x7f
 8004348:	d8f0      	bhi.n	800432c <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 800434a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]
 8004356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004358:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	4619      	mov	r1, r3
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f7ff fa2e 	bl	80037c4 <_EncodeStr>
 8004368:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800436a:	2209      	movs	r2, #9
 800436c:	68f9      	ldr	r1, [r7, #12]
 800436e:	6938      	ldr	r0, [r7, #16]
 8004370:	f7ff fb4c 	bl	8003a0c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	637b      	str	r3, [r7, #52]	; 0x34
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4b40      	ldr	r3, [pc, #256]	; (8004484 <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	089b      	lsrs	r3, r3, #2
 8004388:	633b      	str	r3, [r7, #48]	; 0x30
 800438a:	e00b      	b.n	80043a4 <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 800438c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	637a      	str	r2, [r7, #52]	; 0x34
 8004392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004394:	b2d2      	uxtb	r2, r2
 8004396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a0:	09db      	lsrs	r3, r3, #7
 80043a2:	633b      	str	r3, [r7, #48]	; 0x30
 80043a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a6:	2b7f      	cmp	r3, #127	; 0x7f
 80043a8:	d8f0      	bhi.n	800438c <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 80043aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	637a      	str	r2, [r7, #52]	; 0x34
 80043b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b2:	b2d2      	uxtb	r2, r2
 80043b4:	701a      	strb	r2, [r3, #0]
 80043b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c4:	e00b      	b.n	80043de <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043d4:	b2d2      	uxtb	r2, r2
 80043d6:	701a      	strb	r2, [r3, #0]
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	09db      	lsrs	r3, r3, #7
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	2b7f      	cmp	r3, #127	; 0x7f
 80043e2:	d8f0      	bhi.n	80043c6 <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	623b      	str	r3, [r7, #32]
 80043fe:	e00b      	b.n	8004418 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	627a      	str	r2, [r7, #36]	; 0x24
 8004406:	6a3a      	ldr	r2, [r7, #32]
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	09db      	lsrs	r3, r3, #7
 8004416:	623b      	str	r3, [r7, #32]
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	2b7f      	cmp	r3, #127	; 0x7f
 800441c:	d8f0      	bhi.n	8004400 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	627a      	str	r2, [r7, #36]	; 0x24
 8004424:	6a3a      	ldr	r2, [r7, #32]
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	2300      	movs	r3, #0
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	e00b      	b.n	8004450 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	61fa      	str	r2, [r7, #28]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	09db      	lsrs	r3, r3, #7
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2b7f      	cmp	r3, #127	; 0x7f
 8004454:	d8f0      	bhi.n	8004438 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	61fa      	str	r2, [r7, #28]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	701a      	strb	r2, [r3, #0]
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004466:	2215      	movs	r2, #21
 8004468:	68f9      	ldr	r1, [r7, #12]
 800446a:	6938      	ldr	r0, [r7, #16]
 800446c:	f7ff face 	bl	8003a0c <_SendPacket>
  RECORD_END();
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f383 8811 	msr	BASEPRI, r3
}
 8004476:	bf00      	nop
 8004478:	3748      	adds	r7, #72	; 0x48
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20015298 	.word	0x20015298
 8004484:	20015268 	.word	0x20015268

08004488 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800448c:	4b07      	ldr	r3, [pc, #28]	; (80044ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800449e:	4b03      	ldr	r3, [pc, #12]	; (80044ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	4798      	blx	r3
  }
}
 80044a6:	bf00      	nop
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20015268 	.word	0x20015268

080044b0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80044b8:	f3ef 8311 	mrs	r3, BASEPRI
 80044bc:	f04f 0120 	mov.w	r1, #32
 80044c0:	f381 8811 	msr	BASEPRI, r1
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	480b      	ldr	r0, [pc, #44]	; (80044f4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80044c8:	f7ff f9c9 	bl	800385e <_PreparePacket>
 80044cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80044ce:	2280      	movs	r2, #128	; 0x80
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	6938      	ldr	r0, [r7, #16]
 80044d4:	f7ff f976 	bl	80037c4 <_EncodeStr>
 80044d8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80044da:	220e      	movs	r2, #14
 80044dc:	68f9      	ldr	r1, [r7, #12]
 80044de:	6938      	ldr	r0, [r7, #16]
 80044e0:	f7ff fa94 	bl	8003a0c <_SendPacket>
  RECORD_END();
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f383 8811 	msr	BASEPRI, r3
}
 80044ea:	bf00      	nop
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20015298 	.word	0x20015298

080044f8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80044f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80044fe:	4b12      	ldr	r3, [pc, #72]	; (8004548 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d015      	beq.n	8004532 <SEGGER_SYSVIEW_RecordSystime+0x3a>
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d010      	beq.n	8004532 <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004510:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4798      	blx	r3
 8004518:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800451c:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800451e:	e897 0018 	ldmia.w	r7, {r3, r4}
 8004522:	0025      	movs	r5, r4
 8004524:	2600      	movs	r6, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004526:	462b      	mov	r3, r5
 8004528:	461a      	mov	r2, r3
 800452a:	200d      	movs	r0, #13
 800452c:	f7ff fbe8 	bl	8003d00 <SEGGER_SYSVIEW_RecordU32x2>
 8004530:	e005      	b.n	800453e <SEGGER_SYSVIEW_RecordSystime+0x46>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004532:	4b06      	ldr	r3, [pc, #24]	; (800454c <SEGGER_SYSVIEW_RecordSystime+0x54>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4619      	mov	r1, r3
 8004538:	200c      	movs	r0, #12
 800453a:	f7ff fba5 	bl	8003c88 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004546:	bf00      	nop
 8004548:	20015268 	.word	0x20015268
 800454c:	e0001004 	.word	0xe0001004

08004550 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004556:	f3ef 8311 	mrs	r3, BASEPRI
 800455a:	f04f 0120 	mov.w	r1, #32
 800455e:	f381 8811 	msr	BASEPRI, r1
 8004562:	607b      	str	r3, [r7, #4]
 8004564:	4807      	ldr	r0, [pc, #28]	; (8004584 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004566:	f7ff f97a 	bl	800385e <_PreparePacket>
 800456a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800456c:	2211      	movs	r2, #17
 800456e:	6839      	ldr	r1, [r7, #0]
 8004570:	6838      	ldr	r0, [r7, #0]
 8004572:	f7ff fa4b 	bl	8003a0c <_SendPacket>
  RECORD_END();
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f383 8811 	msr	BASEPRI, r3
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	20015298 	.word	0x20015298

08004588 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004590:	f3ef 8311 	mrs	r3, BASEPRI
 8004594:	f04f 0120 	mov.w	r1, #32
 8004598:	f381 8811 	msr	BASEPRI, r1
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	481a      	ldr	r0, [pc, #104]	; (8004608 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80045a0:	f7ff f95d 	bl	800385e <_PreparePacket>
 80045a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80045aa:	4b18      	ldr	r3, [pc, #96]	; (800460c <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	089b      	lsrs	r3, r3, #2
 80045b4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	61fb      	str	r3, [r7, #28]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	e00b      	b.n	80045d8 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	61fa      	str	r2, [r7, #28]
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	b2d2      	uxtb	r2, r2
 80045ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	09db      	lsrs	r3, r3, #7
 80045d6:	61bb      	str	r3, [r7, #24]
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b7f      	cmp	r3, #127	; 0x7f
 80045dc:	d8f0      	bhi.n	80045c0 <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	61fa      	str	r2, [r7, #28]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80045ee:	2208      	movs	r2, #8
 80045f0:	68f9      	ldr	r1, [r7, #12]
 80045f2:	6938      	ldr	r0, [r7, #16]
 80045f4:	f7ff fa0a 	bl	8003a0c <_SendPacket>
  RECORD_END();
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f383 8811 	msr	BASEPRI, r3
}
 80045fe:	bf00      	nop
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20015298 	.word	0x20015298
 800460c:	20015268 	.word	0x20015268

08004610 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004618:	f3ef 8311 	mrs	r3, BASEPRI
 800461c:	f04f 0120 	mov.w	r1, #32
 8004620:	f381 8811 	msr	BASEPRI, r1
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	481a      	ldr	r0, [pc, #104]	; (8004690 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004628:	f7ff f919 	bl	800385e <_PreparePacket>
 800462c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004632:	4b18      	ldr	r3, [pc, #96]	; (8004694 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	089b      	lsrs	r3, r3, #2
 800463c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	61bb      	str	r3, [r7, #24]
 8004646:	e00b      	b.n	8004660 <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	61fa      	str	r2, [r7, #28]
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	701a      	strb	r2, [r3, #0]
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	09db      	lsrs	r3, r3, #7
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	2b7f      	cmp	r3, #127	; 0x7f
 8004664:	d8f0      	bhi.n	8004648 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	61fa      	str	r2, [r7, #28]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004676:	2204      	movs	r2, #4
 8004678:	68f9      	ldr	r1, [r7, #12]
 800467a:	6938      	ldr	r0, [r7, #16]
 800467c:	f7ff f9c6 	bl	8003a0c <_SendPacket>
  RECORD_END();
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f383 8811 	msr	BASEPRI, r3
}
 8004686:	bf00      	nop
 8004688:	3720      	adds	r7, #32
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20015298 	.word	0x20015298
 8004694:	20015268 	.word	0x20015268

08004698 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004698:	b580      	push	{r7, lr}
 800469a:	b088      	sub	sp, #32
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80046a0:	f3ef 8311 	mrs	r3, BASEPRI
 80046a4:	f04f 0120 	mov.w	r1, #32
 80046a8:	f381 8811 	msr	BASEPRI, r1
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	481a      	ldr	r0, [pc, #104]	; (8004718 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80046b0:	f7ff f8d5 	bl	800385e <_PreparePacket>
 80046b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80046ba:	4b18      	ldr	r3, [pc, #96]	; (800471c <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	089b      	lsrs	r3, r3, #2
 80046c4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	61fb      	str	r3, [r7, #28]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	61bb      	str	r3, [r7, #24]
 80046ce:	e00b      	b.n	80046e8 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	61fa      	str	r2, [r7, #28]
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	701a      	strb	r2, [r3, #0]
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	09db      	lsrs	r3, r3, #7
 80046e6:	61bb      	str	r3, [r7, #24]
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	2b7f      	cmp	r3, #127	; 0x7f
 80046ec:	d8f0      	bhi.n	80046d0 <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	61fa      	str	r2, [r7, #28]
 80046f4:	69ba      	ldr	r2, [r7, #24]
 80046f6:	b2d2      	uxtb	r2, r2
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80046fe:	2206      	movs	r2, #6
 8004700:	68f9      	ldr	r1, [r7, #12]
 8004702:	6938      	ldr	r0, [r7, #16]
 8004704:	f7ff f982 	bl	8003a0c <_SendPacket>
  RECORD_END();
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	f383 8811 	msr	BASEPRI, r3
}
 800470e:	bf00      	nop
 8004710:	3720      	adds	r7, #32
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20015298 	.word	0x20015298
 800471c:	20015268 	.word	0x20015268

08004720 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004728:	4b05      	ldr	r3, [pc, #20]	; (8004740 <SEGGER_SYSVIEW_ShrinkId+0x20>)
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	089b      	lsrs	r3, r3, #2
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	20015268 	.word	0x20015268

08004744 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004744:	b580      	push	{r7, lr}
 8004746:	b08c      	sub	sp, #48	; 0x30
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800474e:	4b3b      	ldr	r3, [pc, #236]	; (800483c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d06d      	beq.n	8004832 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004756:	4b39      	ldr	r3, [pc, #228]	; (800483c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800475c:	2300      	movs	r3, #0
 800475e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004760:	e008      	b.n	8004774 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476a:	2b00      	cmp	r3, #0
 800476c:	d007      	beq.n	800477e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	3301      	adds	r3, #1
 8004772:	62bb      	str	r3, [r7, #40]	; 0x28
 8004774:	79fa      	ldrb	r2, [r7, #7]
 8004776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004778:	429a      	cmp	r2, r3
 800477a:	d8f2      	bhi.n	8004762 <SEGGER_SYSVIEW_SendModule+0x1e>
 800477c:	e000      	b.n	8004780 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800477e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004782:	2b00      	cmp	r3, #0
 8004784:	d055      	beq.n	8004832 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004786:	f3ef 8311 	mrs	r3, BASEPRI
 800478a:	f04f 0120 	mov.w	r1, #32
 800478e:	f381 8811 	msr	BASEPRI, r1
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	482a      	ldr	r0, [pc, #168]	; (8004840 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004796:	f7ff f862 	bl	800385e <_PreparePacket>
 800479a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	623b      	str	r3, [r7, #32]
 80047a8:	e00b      	b.n	80047c2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	627a      	str	r2, [r7, #36]	; 0x24
 80047b0:	6a3a      	ldr	r2, [r7, #32]
 80047b2:	b2d2      	uxtb	r2, r2
 80047b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047b8:	b2d2      	uxtb	r2, r2
 80047ba:	701a      	strb	r2, [r3, #0]
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	09db      	lsrs	r3, r3, #7
 80047c0:	623b      	str	r3, [r7, #32]
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	2b7f      	cmp	r3, #127	; 0x7f
 80047c6:	d8f0      	bhi.n	80047aa <SEGGER_SYSVIEW_SendModule+0x66>
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	627a      	str	r2, [r7, #36]	; 0x24
 80047ce:	6a3a      	ldr	r2, [r7, #32]
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	701a      	strb	r2, [r3, #0]
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	61fb      	str	r3, [r7, #28]
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	e00b      	b.n	80047fc <SEGGER_SYSVIEW_SendModule+0xb8>
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	61fa      	str	r2, [r7, #28]
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	09db      	lsrs	r3, r3, #7
 80047fa:	61bb      	str	r3, [r7, #24]
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004800:	d8f0      	bhi.n	80047e4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	61fa      	str	r2, [r7, #28]
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2280      	movs	r2, #128	; 0x80
 8004818:	4619      	mov	r1, r3
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f7fe ffd2 	bl	80037c4 <_EncodeStr>
 8004820:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004822:	2216      	movs	r2, #22
 8004824:	68f9      	ldr	r1, [r7, #12]
 8004826:	6938      	ldr	r0, [r7, #16]
 8004828:	f7ff f8f0 	bl	8003a0c <_SendPacket>
      RECORD_END();
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004832:	bf00      	nop
 8004834:	3730      	adds	r7, #48	; 0x30
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20015290 	.word	0x20015290
 8004840:	20015298 	.word	0x20015298

08004844 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800484a:	4b0c      	ldr	r3, [pc, #48]	; (800487c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00f      	beq.n	8004872 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004852:	4b0a      	ldr	r3, [pc, #40]	; (800487c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f2      	bne.n	8004858 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20015290 	.word	0x20015290

08004880 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004886:	f3ef 8311 	mrs	r3, BASEPRI
 800488a:	f04f 0120 	mov.w	r1, #32
 800488e:	f381 8811 	msr	BASEPRI, r1
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	4817      	ldr	r0, [pc, #92]	; (80048f4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004896:	f7fe ffe2 	bl	800385e <_PreparePacket>
 800489a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	4b14      	ldr	r3, [pc, #80]	; (80048f8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	e00b      	b.n	80048c4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	617a      	str	r2, [r7, #20]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	b2d2      	uxtb	r2, r2
 80048b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	09db      	lsrs	r3, r3, #7
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	2b7f      	cmp	r3, #127	; 0x7f
 80048c8:	d8f0      	bhi.n	80048ac <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	617a      	str	r2, [r7, #20]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80048da:	221b      	movs	r2, #27
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	68b8      	ldr	r0, [r7, #8]
 80048e0:	f7ff f894 	bl	8003a0c <_SendPacket>
  RECORD_END();
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f383 8811 	msr	BASEPRI, r3
}
 80048ea:	bf00      	nop
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20015298 	.word	0x20015298
 80048f8:	20015294 	.word	0x20015294

080048fc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	; 0x28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004904:	f3ef 8311 	mrs	r3, BASEPRI
 8004908:	f04f 0120 	mov.w	r1, #32
 800490c:	f381 8811 	msr	BASEPRI, r1
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	4827      	ldr	r0, [pc, #156]	; (80049b0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004914:	f7fe ffa3 	bl	800385e <_PreparePacket>
 8004918:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800491a:	2280      	movs	r2, #128	; 0x80
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	6938      	ldr	r0, [r7, #16]
 8004920:	f7fe ff50 	bl	80037c4 <_EncodeStr>
 8004924:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
 800492a:	2301      	movs	r3, #1
 800492c:	623b      	str	r3, [r7, #32]
 800492e:	e00b      	b.n	8004948 <SEGGER_SYSVIEW_Warn+0x4c>
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	627a      	str	r2, [r7, #36]	; 0x24
 8004936:	6a3a      	ldr	r2, [r7, #32]
 8004938:	b2d2      	uxtb	r2, r2
 800493a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	09db      	lsrs	r3, r3, #7
 8004946:	623b      	str	r3, [r7, #32]
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	2b7f      	cmp	r3, #127	; 0x7f
 800494c:	d8f0      	bhi.n	8004930 <SEGGER_SYSVIEW_Warn+0x34>
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	627a      	str	r2, [r7, #36]	; 0x24
 8004954:	6a3a      	ldr	r2, [r7, #32]
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	61fb      	str	r3, [r7, #28]
 8004962:	2300      	movs	r3, #0
 8004964:	61bb      	str	r3, [r7, #24]
 8004966:	e00b      	b.n	8004980 <SEGGER_SYSVIEW_Warn+0x84>
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	61fa      	str	r2, [r7, #28]
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004976:	b2d2      	uxtb	r2, r2
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	09db      	lsrs	r3, r3, #7
 800497e:	61bb      	str	r3, [r7, #24]
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	2b7f      	cmp	r3, #127	; 0x7f
 8004984:	d8f0      	bhi.n	8004968 <SEGGER_SYSVIEW_Warn+0x6c>
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	61fa      	str	r2, [r7, #28]
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	b2d2      	uxtb	r2, r2
 8004990:	701a      	strb	r2, [r3, #0]
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004996:	221a      	movs	r2, #26
 8004998:	68f9      	ldr	r1, [r7, #12]
 800499a:	6938      	ldr	r0, [r7, #16]
 800499c:	f7ff f836 	bl	8003a0c <_SendPacket>
  RECORD_END();
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f383 8811 	msr	BASEPRI, r3
}
 80049a6:	bf00      	nop
 80049a8:	3728      	adds	r7, #40	; 0x28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20015298 	.word	0x20015298

080049b4 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80049b8:	4b38      	ldr	r3, [pc, #224]	; (8004a9c <Audio_MAL_IRQHandler+0xe8>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4b38      	ldr	r3, [pc, #224]	; (8004aa0 <Audio_MAL_IRQHandler+0xec>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4619      	mov	r1, r3
 80049c2:	4610      	mov	r0, r2
 80049c4:	f7fb fcac 	bl	8000320 <DMA_GetFlagStatus>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d064      	beq.n	8004a98 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80049ce:	4b35      	ldr	r3, [pc, #212]	; (8004aa4 <Audio_MAL_IRQHandler+0xf0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d04c      	beq.n	8004a70 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80049d6:	bf00      	nop
 80049d8:	4b30      	ldr	r3, [pc, #192]	; (8004a9c <Audio_MAL_IRQHandler+0xe8>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4618      	mov	r0, r3
 80049de:	f7fb fc87 	bl	80002f0 <DMA_GetCmdStatus>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f7      	bne.n	80049d8 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80049e8:	4b2c      	ldr	r3, [pc, #176]	; (8004a9c <Audio_MAL_IRQHandler+0xe8>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	4b2c      	ldr	r3, [pc, #176]	; (8004aa0 <Audio_MAL_IRQHandler+0xec>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4619      	mov	r1, r3
 80049f2:	4610      	mov	r0, r2
 80049f4:	f7fb fcd0 	bl	8000398 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80049f8:	4b2b      	ldr	r3, [pc, #172]	; (8004aa8 <Audio_MAL_IRQHandler+0xf4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	461a      	mov	r2, r3
 80049fe:	4b2b      	ldr	r3, [pc, #172]	; (8004aac <Audio_MAL_IRQHandler+0xf8>)
 8004a00:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8004a02:	4b28      	ldr	r3, [pc, #160]	; (8004aa4 <Audio_MAL_IRQHandler+0xf0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	bf28      	it	cs
 8004a0e:	4613      	movcs	r3, r2
 8004a10:	4a26      	ldr	r2, [pc, #152]	; (8004aac <Audio_MAL_IRQHandler+0xf8>)
 8004a12:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8004a14:	4b21      	ldr	r3, [pc, #132]	; (8004a9c <Audio_MAL_IRQHandler+0xe8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4924      	ldr	r1, [pc, #144]	; (8004aac <Audio_MAL_IRQHandler+0xf8>)
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fb fbf4 	bl	8000208 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8004a20:	4b1e      	ldr	r3, [pc, #120]	; (8004a9c <Audio_MAL_IRQHandler+0xe8>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2101      	movs	r1, #1
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fb fc46 	bl	80002b8 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8004a2c:	4b1e      	ldr	r3, [pc, #120]	; (8004aa8 <Audio_MAL_IRQHandler+0xf4>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	4b1c      	ldr	r3, [pc, #112]	; (8004aa4 <Audio_MAL_IRQHandler+0xf0>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a38:	d203      	bcs.n	8004a42 <Audio_MAL_IRQHandler+0x8e>
 8004a3a:	4b1a      	ldr	r3, [pc, #104]	; (8004aa4 <Audio_MAL_IRQHandler+0xf0>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	e000      	b.n	8004a44 <Audio_MAL_IRQHandler+0x90>
 8004a42:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <Audio_MAL_IRQHandler+0xfc>)
 8004a44:	4413      	add	r3, r2
 8004a46:	4a18      	ldr	r2, [pc, #96]	; (8004aa8 <Audio_MAL_IRQHandler+0xf4>)
 8004a48:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8004a4a:	4b16      	ldr	r3, [pc, #88]	; (8004aa4 <Audio_MAL_IRQHandler+0xf0>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4b15      	ldr	r3, [pc, #84]	; (8004aa4 <Audio_MAL_IRQHandler+0xf0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004a56:	428b      	cmp	r3, r1
 8004a58:	bf28      	it	cs
 8004a5a:	460b      	movcs	r3, r1
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	4a11      	ldr	r2, [pc, #68]	; (8004aa4 <Audio_MAL_IRQHandler+0xf0>)
 8004a60:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8004a62:	4b0e      	ldr	r3, [pc, #56]	; (8004a9c <Audio_MAL_IRQHandler+0xe8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2101      	movs	r1, #1
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fb fc25 	bl	80002b8 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8004a6e:	e013      	b.n	8004a98 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8004a70:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <Audio_MAL_IRQHandler+0xe8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2100      	movs	r1, #0
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fb fc1e 	bl	80002b8 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8004a7c:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <Audio_MAL_IRQHandler+0xe8>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <Audio_MAL_IRQHandler+0xec>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4619      	mov	r1, r3
 8004a86:	4610      	mov	r0, r2
 8004a88:	f7fb fc86 	bl	8000398 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8004a8c:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <Audio_MAL_IRQHandler+0xf4>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2100      	movs	r1, #0
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f916 	bl	8004cc4 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8004a98:	bf00      	nop
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	2000000c 	.word	0x2000000c
 8004aa0:	20000010 	.word	0x20000010
 8004aa4:	20000004 	.word	0x20000004
 8004aa8:	20015464 	.word	0x20015464
 8004aac:	200154a4 	.word	0x200154a4
 8004ab0:	0001fffe 	.word	0x0001fffe

08004ab4 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8004ab8:	f7ff ff7c 	bl	80049b4 <Audio_MAL_IRQHandler>
}
 8004abc:	bf00      	nop
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8004ac4:	f7ff ff76 	bl	80049b4 <Audio_MAL_IRQHandler>
}
 8004ac8:	bf00      	nop
 8004aca:	bd80      	pop	{r7, pc}

08004acc <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8004ad0:	2102      	movs	r1, #2
 8004ad2:	480d      	ldr	r0, [pc, #52]	; (8004b08 <SPI3_IRQHandler+0x3c>)
 8004ad4:	f7fb fda5 	bl	8000622 <SPI_I2S_GetFlagStatus>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d011      	beq.n	8004b02 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8004ade:	4b0b      	ldr	r3, [pc, #44]	; (8004b0c <SPI3_IRQHandler+0x40>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d106      	bne.n	8004af4 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8004ae6:	f000 f8f8 	bl	8004cda <EVAL_AUDIO_GetSampleCallBack>
 8004aea:	4603      	mov	r3, r0
 8004aec:	4619      	mov	r1, r3
 8004aee:	2004      	movs	r0, #4
 8004af0:	f7fb fb6e 	bl	80001d0 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8004af4:	f000 f8f1 	bl	8004cda <EVAL_AUDIO_GetSampleCallBack>
 8004af8:	4603      	mov	r3, r0
 8004afa:	4619      	mov	r1, r3
 8004afc:	4802      	ldr	r0, [pc, #8]	; (8004b08 <SPI3_IRQHandler+0x3c>)
 8004afe:	f7fb fd81 	bl	8000604 <SPI_I2S_SendData>
  }
}
 8004b02:	bf00      	nop
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40003c00 	.word	0x40003c00
 8004b0c:	20000008 	.word	0x20000008

08004b10 <main>:
void GPIO_Output(void);
void setupConfig(void);
void delay_FreeRTOS(uint32_t delayMS);

int main(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af02      	add	r7, sp, #8
	DWT->CTRL |= 1<<0;
 8004b16:	4a14      	ldr	r2, [pc, #80]	; (8004b68 <main+0x58>)
 8004b18:	4b13      	ldr	r3, [pc, #76]	; (8004b68 <main+0x58>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f043 0301 	orr.w	r3, r3, #1
 8004b20:	6013      	str	r3, [r2, #0]
	RCC_DeInit();
 8004b22:	f7fb fd21 	bl	8000568 <RCC_DeInit>
	SystemCoreClockUpdate();
 8004b26:	f000 f951 	bl	8004dcc <SystemCoreClockUpdate>
	setupConfig();
 8004b2a:	f000 f8a3 	bl	8004c74 <setupConfig>
	SEGGER_SYSVIEW_Conf();
 8004b2e:	f7fe faf3 	bl	8003118 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 8004b32:	f7ff fa47 	bl	8003fc4 <SEGGER_SYSVIEW_Start>

	xTaskCreate(ledTaskFlashTask, "Led_Kontrol", 650, NULL, 2, &myLedTaskHandle);
 8004b36:	4b0d      	ldr	r3, [pc, #52]	; (8004b6c <main+0x5c>)
 8004b38:	9301      	str	r3, [sp, #4]
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	f240 228a 	movw	r2, #650	; 0x28a
 8004b44:	490a      	ldr	r1, [pc, #40]	; (8004b70 <main+0x60>)
 8004b46:	480b      	ldr	r0, [pc, #44]	; (8004b74 <main+0x64>)
 8004b48:	f7fc ffa4 	bl	8001a94 <xTaskCreate>
	xTaskCreate(buttonStateTask, "Button_Control", 650, NULL, 2, &myButtonTaskHandle);
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <main+0x68>)
 8004b4e:	9301      	str	r3, [sp, #4]
 8004b50:	2302      	movs	r3, #2
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	2300      	movs	r3, #0
 8004b56:	f240 228a 	movw	r2, #650	; 0x28a
 8004b5a:	4908      	ldr	r1, [pc, #32]	; (8004b7c <main+0x6c>)
 8004b5c:	4808      	ldr	r0, [pc, #32]	; (8004b80 <main+0x70>)
 8004b5e:	f7fc ff99 	bl	8001a94 <xTaskCreate>
	vTaskStartScheduler();
 8004b62:	f7fd f8f9 	bl	8001d58 <vTaskStartScheduler>

  while (1)
 8004b66:	e7fe      	b.n	8004b66 <main+0x56>
 8004b68:	e0001000 	.word	0xe0001000
 8004b6c:	200154e0 	.word	0x200154e0
 8004b70:	08005134 	.word	0x08005134
 8004b74:	08004bbd 	.word	0x08004bbd
 8004b78:	200154ec 	.word	0x200154ec
 8004b7c:	08005140 	.word	0x08005140
 8004b80:	08004b85 	.word	0x08004b85

08004b84 <buttonStateTask>:
  {

  }
}

void buttonStateTask(void *params){
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	6078      	str	r0, [r7, #4]
	while(1)
	{
	if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0)==Bit_SET){
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	4809      	ldr	r0, [pc, #36]	; (8004bb4 <buttonStateTask+0x30>)
 8004b90:	f7fb fcbe 	bl	8000510 <GPIO_ReadInputDataBit>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d1f8      	bne.n	8004b8c <buttonStateTask+0x8>
		delay_FreeRTOS(100);
 8004b9a:	2064      	movs	r0, #100	; 0x64
 8004b9c:	f000 f872 	bl	8004c84 <delay_FreeRTOS>
		xTaskNotify(myLedTaskHandle,0x00, eIncrement);
 8004ba0:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <buttonStateTask+0x34>)
 8004ba2:	6818      	ldr	r0, [r3, #0]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	2302      	movs	r3, #2
 8004baa:	2200      	movs	r2, #0
 8004bac:	2100      	movs	r1, #0
 8004bae:	f7fd fe43 	bl	8002838 <xTaskGenericNotify>
	if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0)==Bit_SET){
 8004bb2:	e7eb      	b.n	8004b8c <buttonStateTask+0x8>
 8004bb4:	40020000 	.word	0x40020000
 8004bb8:	200154e0 	.word	0x200154e0

08004bbc <ledTaskFlashTask>:
			}
	}
}

void ledTaskFlashTask(void *params){
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	6078      	str	r0, [r7, #4]
		uint32_t pulNotificationValue = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]
	  while (1)
	  {
		  	 if(xTaskNotifyWait(0, 0, &pulNotificationValue, portMAX_DELAY) == pdTRUE)
 8004bc8:	f107 020c 	add.w	r2, r7, #12
 8004bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	2000      	movs	r0, #0
 8004bda:	f7fd fda5 	bl	8002728 <xTaskGenericNotifyWait>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d1f1      	bne.n	8004bc8 <ledTaskFlashTask+0xc>
		  	 {
		  		 GPIO_ToggleBits(GPIOD,GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 8004be4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8004be8:	4801      	ldr	r0, [pc, #4]	; (8004bf0 <ledTaskFlashTask+0x34>)
 8004bea:	f7fb fcab 	bl	8000544 <GPIO_ToggleBits>
		  	 if(xTaskNotifyWait(0, 0, &pulNotificationValue, portMAX_DELAY) == pdTRUE)
 8004bee:	e7eb      	b.n	8004bc8 <ledTaskFlashTask+0xc>
 8004bf0:	40020c00 	.word	0x40020c00

08004bf4 <GPIO_Input>:
		  	 }

	  }
}

void GPIO_Input(void){
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	2001      	movs	r0, #1
 8004bfc:	f7fb fce2 	bl	80005c4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <GPIO_Input+0x38>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8004c06:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <GPIO_Input+0x38>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 8004c0c:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <GPIO_Input+0x38>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8004c12:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <GPIO_Input+0x38>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8004c18:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <GPIO_Input+0x38>)
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8004c1e:	4903      	ldr	r1, [pc, #12]	; (8004c2c <GPIO_Input+0x38>)
 8004c20:	4803      	ldr	r0, [pc, #12]	; (8004c30 <GPIO_Input+0x3c>)
 8004c22:	f7fb fbe7 	bl	80003f4 <GPIO_Init>

}
 8004c26:	bf00      	nop
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	200154e4 	.word	0x200154e4
 8004c30:	40020000 	.word	0x40020000

08004c34 <GPIO_Output>:



void GPIO_Output(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
 8004c38:	2101      	movs	r1, #1
 8004c3a:	2008      	movs	r0, #8
 8004c3c:	f7fb fcc2 	bl	80005c4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8004c40:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <GPIO_Output+0x38>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8004c46:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <GPIO_Output+0x38>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8004c4c:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <GPIO_Output+0x38>)
 8004c4e:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8004c52:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8004c54:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <GPIO_Output+0x38>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8004c5a:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <GPIO_Output+0x38>)
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOD,&GPIO_InitStruct);
 8004c60:	4902      	ldr	r1, [pc, #8]	; (8004c6c <GPIO_Output+0x38>)
 8004c62:	4803      	ldr	r0, [pc, #12]	; (8004c70 <GPIO_Output+0x3c>)
 8004c64:	f7fb fbc6 	bl	80003f4 <GPIO_Init>
}
 8004c68:	bf00      	nop
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	200154e4 	.word	0x200154e4
 8004c70:	40020c00 	.word	0x40020c00

08004c74 <setupConfig>:

void setupConfig(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
	GPIO_Output();
 8004c78:	f7ff ffdc 	bl	8004c34 <GPIO_Output>
	GPIO_Input();
 8004c7c:	f7ff ffba 	bl	8004bf4 <GPIO_Input>
}
 8004c80:	bf00      	nop
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <delay_FreeRTOS>:

void delay_FreeRTOS(uint32_t delayMS)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
	uint32_t currentTick = xTaskGetTickCount();
 8004c8c:	f7fd f972 	bl	8001f74 <xTaskGetTickCount>
 8004c90:	60f8      	str	r0, [r7, #12]
	uint32_t delayTick =	pdMS_TO_TICKS(delayMS);		// delayMS * configTICK_RATE_HZ / 1000;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c98:	fb02 f303 	mul.w	r3, r2, r3
 8004c9c:	4a08      	ldr	r2, [pc, #32]	; (8004cc0 <delay_FreeRTOS+0x3c>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	099b      	lsrs	r3, r3, #6
 8004ca4:	60bb      	str	r3, [r7, #8]
	while(xTaskGetTickCount()<(currentTick+delayTick));
 8004ca6:	bf00      	nop
 8004ca8:	f7fd f964 	bl	8001f74 <xTaskGetTickCount>
 8004cac:	4601      	mov	r1, r0
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	4299      	cmp	r1, r3
 8004cb6:	d3f7      	bcc.n	8004ca8 <delay_FreeRTOS+0x24>


}
 8004cb8:	bf00      	nop
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	10624dd3 	.word	0x10624dd3

08004cc4 <EVAL_AUDIO_TransferComplete_CallBack>:

void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8004cce:	bf00      	nop
}
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <EVAL_AUDIO_GetSampleCallBack>:



uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8004cda:	b480      	push	{r7}
 8004cdc:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8004cde:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004cf0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004cf2:	e003      	b.n	8004cfc <LoopCopyDataInit>

08004cf4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004cf6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004cf8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004cfa:	3104      	adds	r1, #4

08004cfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004cfc:	480b      	ldr	r0, [pc, #44]	; (8004d2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004cfe:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004d00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004d02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004d04:	d3f6      	bcc.n	8004cf4 <CopyDataInit>
  ldr  r2, =_sbss
 8004d06:	4a0b      	ldr	r2, [pc, #44]	; (8004d34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004d08:	e002      	b.n	8004d10 <LoopFillZerobss>

08004d0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004d0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004d0c:	f842 3b04 	str.w	r3, [r2], #4

08004d10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004d10:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004d12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004d14:	d3f9      	bcc.n	8004d0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004d16:	f000 f823 	bl	8004d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d1a:	f000 f94f 	bl	8004fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d1e:	f7ff fef7 	bl	8004b10 <main>
  bx  lr    
 8004d22:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004d24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004d28:	0800516c 	.word	0x0800516c
  ldr  r0, =_sdata
 8004d2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004d30:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 8004d34:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 8004d38:	200154f0 	.word	0x200154f0

08004d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d3c:	e7fe      	b.n	8004d3c <ADC_IRQHandler>

08004d3e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004d42:	e7fe      	b.n	8004d42 <MemManage_Handler+0x4>

08004d44 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004d48:	e7fe      	b.n	8004d48 <BusFault_Handler+0x4>

08004d4a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004d4e:	e7fe      	b.n	8004d4e <UsageFault_Handler+0x4>

08004d50 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
	...

08004d60 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d64:	4a16      	ldr	r2, [pc, #88]	; (8004dc0 <SystemInit+0x60>)
 8004d66:	4b16      	ldr	r3, [pc, #88]	; (8004dc0 <SystemInit+0x60>)
 8004d68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004d74:	4a13      	ldr	r2, [pc, #76]	; (8004dc4 <SystemInit+0x64>)
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <SystemInit+0x64>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f043 0301 	orr.w	r3, r3, #1
 8004d7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004d80:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <SystemInit+0x64>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004d86:	4a0f      	ldr	r2, [pc, #60]	; (8004dc4 <SystemInit+0x64>)
 8004d88:	4b0e      	ldr	r3, [pc, #56]	; (8004dc4 <SystemInit+0x64>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d94:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004d96:	4b0b      	ldr	r3, [pc, #44]	; (8004dc4 <SystemInit+0x64>)
 8004d98:	4a0b      	ldr	r2, [pc, #44]	; (8004dc8 <SystemInit+0x68>)
 8004d9a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004d9c:	4a09      	ldr	r2, [pc, #36]	; (8004dc4 <SystemInit+0x64>)
 8004d9e:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <SystemInit+0x64>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004da6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004da8:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <SystemInit+0x64>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8004dae:	f000 f889 	bl	8004ec4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004db2:	4b03      	ldr	r3, [pc, #12]	; (8004dc0 <SystemInit+0x60>)
 8004db4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004db8:	609a      	str	r2, [r3, #8]
#endif
}
 8004dba:	bf00      	nop
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	e000ed00 	.word	0xe000ed00
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	24003010 	.word	0x24003010

08004dcc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	2302      	movs	r3, #2
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	2300      	movs	r3, #0
 8004de0:	60bb      	str	r3, [r7, #8]
 8004de2:	2302      	movs	r3, #2
 8004de4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004de6:	4b32      	ldr	r3, [pc, #200]	; (8004eb0 <SystemCoreClockUpdate+0xe4>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 030c 	and.w	r3, r3, #12
 8004dee:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d007      	beq.n	8004e06 <SystemCoreClockUpdate+0x3a>
 8004df6:	2b08      	cmp	r3, #8
 8004df8:	d009      	beq.n	8004e0e <SystemCoreClockUpdate+0x42>
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d13d      	bne.n	8004e7a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004dfe:	4b2d      	ldr	r3, [pc, #180]	; (8004eb4 <SystemCoreClockUpdate+0xe8>)
 8004e00:	4a2d      	ldr	r2, [pc, #180]	; (8004eb8 <SystemCoreClockUpdate+0xec>)
 8004e02:	601a      	str	r2, [r3, #0]
      break;
 8004e04:	e03d      	b.n	8004e82 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004e06:	4b2b      	ldr	r3, [pc, #172]	; (8004eb4 <SystemCoreClockUpdate+0xe8>)
 8004e08:	4a2c      	ldr	r2, [pc, #176]	; (8004ebc <SystemCoreClockUpdate+0xf0>)
 8004e0a:	601a      	str	r2, [r3, #0]
      break;
 8004e0c:	e039      	b.n	8004e82 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004e0e:	4b28      	ldr	r3, [pc, #160]	; (8004eb0 <SystemCoreClockUpdate+0xe4>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	0d9b      	lsrs	r3, r3, #22
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e1a:	4b25      	ldr	r3, [pc, #148]	; (8004eb0 <SystemCoreClockUpdate+0xe4>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e22:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00c      	beq.n	8004e44 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004e2a:	4a24      	ldr	r2, [pc, #144]	; (8004ebc <SystemCoreClockUpdate+0xf0>)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e32:	4a1f      	ldr	r2, [pc, #124]	; (8004eb0 <SystemCoreClockUpdate+0xe4>)
 8004e34:	6852      	ldr	r2, [r2, #4]
 8004e36:	0992      	lsrs	r2, r2, #6
 8004e38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e3c:	fb02 f303 	mul.w	r3, r2, r3
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e00b      	b.n	8004e5c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004e44:	4a1c      	ldr	r2, [pc, #112]	; (8004eb8 <SystemCoreClockUpdate+0xec>)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4c:	4a18      	ldr	r2, [pc, #96]	; (8004eb0 <SystemCoreClockUpdate+0xe4>)
 8004e4e:	6852      	ldr	r2, [r2, #4]
 8004e50:	0992      	lsrs	r2, r2, #6
 8004e52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e56:	fb02 f303 	mul.w	r3, r2, r3
 8004e5a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004e5c:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <SystemCoreClockUpdate+0xe4>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	0c1b      	lsrs	r3, r3, #16
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	3301      	adds	r3, #1
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e74:	4a0f      	ldr	r2, [pc, #60]	; (8004eb4 <SystemCoreClockUpdate+0xe8>)
 8004e76:	6013      	str	r3, [r2, #0]
      break;
 8004e78:	e003      	b.n	8004e82 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8004e7a:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <SystemCoreClockUpdate+0xe8>)
 8004e7c:	4a0e      	ldr	r2, [pc, #56]	; (8004eb8 <SystemCoreClockUpdate+0xec>)
 8004e7e:	601a      	str	r2, [r3, #0]
      break;
 8004e80:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004e82:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <SystemCoreClockUpdate+0xe4>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	091b      	lsrs	r3, r3, #4
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	4a0c      	ldr	r2, [pc, #48]	; (8004ec0 <SystemCoreClockUpdate+0xf4>)
 8004e8e:	5cd3      	ldrb	r3, [r2, r3]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004e94:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <SystemCoreClockUpdate+0xe8>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9e:	4a05      	ldr	r2, [pc, #20]	; (8004eb4 <SystemCoreClockUpdate+0xe8>)
 8004ea0:	6013      	str	r3, [r2, #0]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	20000014 	.word	0x20000014
 8004eb8:	00f42400 	.word	0x00f42400
 8004ebc:	007a1200 	.word	0x007a1200
 8004ec0:	20000018 	.word	0x20000018

08004ec4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	607b      	str	r3, [r7, #4]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004ed2:	4a36      	ldr	r2, [pc, #216]	; (8004fac <SetSysClock+0xe8>)
 8004ed4:	4b35      	ldr	r3, [pc, #212]	; (8004fac <SetSysClock+0xe8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004edc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004ede:	4b33      	ldr	r3, [pc, #204]	; (8004fac <SetSysClock+0xe8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3301      	adds	r3, #1
 8004eec:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d103      	bne.n	8004efc <SetSysClock+0x38>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004efa:	d1f0      	bne.n	8004ede <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004efc:	4b2b      	ldr	r3, [pc, #172]	; (8004fac <SetSysClock+0xe8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	e001      	b.n	8004f12 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d142      	bne.n	8004f9e <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8004f18:	4a24      	ldr	r2, [pc, #144]	; (8004fac <SetSysClock+0xe8>)
 8004f1a:	4b24      	ldr	r3, [pc, #144]	; (8004fac <SetSysClock+0xe8>)
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f22:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8004f24:	4a22      	ldr	r2, [pc, #136]	; (8004fb0 <SetSysClock+0xec>)
 8004f26:	4b22      	ldr	r3, [pc, #136]	; (8004fb0 <SetSysClock+0xec>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f2e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004f30:	4a1e      	ldr	r2, [pc, #120]	; (8004fac <SetSysClock+0xe8>)
 8004f32:	4b1e      	ldr	r3, [pc, #120]	; (8004fac <SetSysClock+0xe8>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004f38:	4a1c      	ldr	r2, [pc, #112]	; (8004fac <SetSysClock+0xe8>)
 8004f3a:	4b1c      	ldr	r3, [pc, #112]	; (8004fac <SetSysClock+0xe8>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f42:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004f44:	4a19      	ldr	r2, [pc, #100]	; (8004fac <SetSysClock+0xe8>)
 8004f46:	4b19      	ldr	r3, [pc, #100]	; (8004fac <SetSysClock+0xe8>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004f4e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8004f50:	4b16      	ldr	r3, [pc, #88]	; (8004fac <SetSysClock+0xe8>)
 8004f52:	4a18      	ldr	r2, [pc, #96]	; (8004fb4 <SetSysClock+0xf0>)
 8004f54:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8004f56:	4a15      	ldr	r2, [pc, #84]	; (8004fac <SetSysClock+0xe8>)
 8004f58:	4b14      	ldr	r3, [pc, #80]	; (8004fac <SetSysClock+0xe8>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f60:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004f62:	bf00      	nop
 8004f64:	4b11      	ldr	r3, [pc, #68]	; (8004fac <SetSysClock+0xe8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f9      	beq.n	8004f64 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8004f70:	4b11      	ldr	r3, [pc, #68]	; (8004fb8 <SetSysClock+0xf4>)
 8004f72:	f240 6205 	movw	r2, #1541	; 0x605
 8004f76:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004f78:	4a0c      	ldr	r2, [pc, #48]	; (8004fac <SetSysClock+0xe8>)
 8004f7a:	4b0c      	ldr	r3, [pc, #48]	; (8004fac <SetSysClock+0xe8>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f023 0303 	bic.w	r3, r3, #3
 8004f82:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004f84:	4a09      	ldr	r2, [pc, #36]	; (8004fac <SetSysClock+0xe8>)
 8004f86:	4b09      	ldr	r3, [pc, #36]	; (8004fac <SetSysClock+0xe8>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f043 0302 	orr.w	r3, r3, #2
 8004f8e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8004f90:	bf00      	nop
 8004f92:	4b06      	ldr	r3, [pc, #24]	; (8004fac <SetSysClock+0xe8>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 030c 	and.w	r3, r3, #12
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d1f9      	bne.n	8004f92 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	40007000 	.word	0x40007000
 8004fb4:	07405408 	.word	0x07405408
 8004fb8:	40023c00 	.word	0x40023c00

08004fbc <__libc_init_array>:
 8004fbc:	b570      	push	{r4, r5, r6, lr}
 8004fbe:	4e0d      	ldr	r6, [pc, #52]	; (8004ff4 <__libc_init_array+0x38>)
 8004fc0:	4c0d      	ldr	r4, [pc, #52]	; (8004ff8 <__libc_init_array+0x3c>)
 8004fc2:	1ba4      	subs	r4, r4, r6
 8004fc4:	10a4      	asrs	r4, r4, #2
 8004fc6:	2500      	movs	r5, #0
 8004fc8:	42a5      	cmp	r5, r4
 8004fca:	d109      	bne.n	8004fe0 <__libc_init_array+0x24>
 8004fcc:	4e0b      	ldr	r6, [pc, #44]	; (8004ffc <__libc_init_array+0x40>)
 8004fce:	4c0c      	ldr	r4, [pc, #48]	; (8005000 <__libc_init_array+0x44>)
 8004fd0:	f000 f83a 	bl	8005048 <_init>
 8004fd4:	1ba4      	subs	r4, r4, r6
 8004fd6:	10a4      	asrs	r4, r4, #2
 8004fd8:	2500      	movs	r5, #0
 8004fda:	42a5      	cmp	r5, r4
 8004fdc:	d105      	bne.n	8004fea <__libc_init_array+0x2e>
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fe4:	4798      	blx	r3
 8004fe6:	3501      	adds	r5, #1
 8004fe8:	e7ee      	b.n	8004fc8 <__libc_init_array+0xc>
 8004fea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fee:	4798      	blx	r3
 8004ff0:	3501      	adds	r5, #1
 8004ff2:	e7f2      	b.n	8004fda <__libc_init_array+0x1e>
 8004ff4:	08005164 	.word	0x08005164
 8004ff8:	08005164 	.word	0x08005164
 8004ffc:	08005164 	.word	0x08005164
 8005000:	08005168 	.word	0x08005168

08005004 <memcmp>:
 8005004:	b510      	push	{r4, lr}
 8005006:	3901      	subs	r1, #1
 8005008:	4402      	add	r2, r0
 800500a:	4290      	cmp	r0, r2
 800500c:	d101      	bne.n	8005012 <memcmp+0xe>
 800500e:	2000      	movs	r0, #0
 8005010:	bd10      	pop	{r4, pc}
 8005012:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005016:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800501a:	42a3      	cmp	r3, r4
 800501c:	d0f5      	beq.n	800500a <memcmp+0x6>
 800501e:	1b18      	subs	r0, r3, r4
 8005020:	bd10      	pop	{r4, pc}

08005022 <memcpy>:
 8005022:	b510      	push	{r4, lr}
 8005024:	1e43      	subs	r3, r0, #1
 8005026:	440a      	add	r2, r1
 8005028:	4291      	cmp	r1, r2
 800502a:	d100      	bne.n	800502e <memcpy+0xc>
 800502c:	bd10      	pop	{r4, pc}
 800502e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005036:	e7f7      	b.n	8005028 <memcpy+0x6>

08005038 <memset>:
 8005038:	4402      	add	r2, r0
 800503a:	4603      	mov	r3, r0
 800503c:	4293      	cmp	r3, r2
 800503e:	d100      	bne.n	8005042 <memset+0xa>
 8005040:	4770      	bx	lr
 8005042:	f803 1b01 	strb.w	r1, [r3], #1
 8005046:	e7f9      	b.n	800503c <memset+0x4>

08005048 <_init>:
 8005048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504a:	bf00      	nop
 800504c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504e:	bc08      	pop	{r3}
 8005050:	469e      	mov	lr, r3
 8005052:	4770      	bx	lr

08005054 <_fini>:
 8005054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005056:	bf00      	nop
 8005058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800505a:	bc08      	pop	{r3}
 800505c:	469e      	mov	lr, r3
 800505e:	4770      	bx	lr
