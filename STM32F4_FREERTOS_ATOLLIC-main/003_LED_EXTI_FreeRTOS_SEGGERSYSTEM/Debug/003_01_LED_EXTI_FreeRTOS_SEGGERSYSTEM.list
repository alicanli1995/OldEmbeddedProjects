
003_01_LED_EXTI_FreeRTOS_SEGGERSYSTEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ff0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005180  08005180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005280  08005280  00015280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005284  08005284  00015284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000028  20000000  08005288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
  7 .bss          000154c8  20000028  20000028  00020028  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200154f0  200154f0  00020028  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012da3  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002982  00000000  00000000  00032dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001008  00000000  00000000  00035780  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000eb0  00000000  00000000  00036788  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007efa  00000000  00000000  00037638  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00005af5  00000000  00000000  0003f532  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00045027  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004338  00000000  00000000  000450a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000493dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000028 	.word	0x20000028
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005168 	.word	0x08005168

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	08005168 	.word	0x08005168

080001d0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	460b      	mov	r3, r1
 80001da:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80001e0:	4b08      	ldr	r3, [pc, #32]	; (8000204 <DAC_SetChannel1Data+0x34>)
 80001e2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80001e4:	68fa      	ldr	r2, [r7, #12]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4413      	add	r3, r2
 80001ea:	3308      	adds	r3, #8
 80001ec:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	461a      	mov	r2, r3
 80001f2:	887b      	ldrh	r3, [r7, #2]
 80001f4:	6013      	str	r3, [r2, #0]
}
 80001f6:	bf00      	nop
 80001f8:	3714      	adds	r7, #20
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	40007400 	.word	0x40007400

08000208 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800021c:	68fa      	ldr	r2, [r7, #12]
 800021e:	4b25      	ldr	r3, [pc, #148]	; (80002b4 <DMA_Init+0xac>)
 8000220:	4013      	ands	r3, r2
 8000222:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000232:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800023e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	6a1b      	ldr	r3, [r3, #32]
 8000244:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800024a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000250:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000256:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800025c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	4313      	orrs	r3, r2
 8000262:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	68fa      	ldr	r2, [r7, #12]
 8000268:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	f023 0307 	bic.w	r3, r3, #7
 8000276:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000280:	4313      	orrs	r3, r2
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	4313      	orrs	r3, r2
 8000286:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	68fa      	ldr	r2, [r7, #12]
 800028c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	691a      	ldr	r2, [r3, #16]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	685a      	ldr	r2, [r3, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	689a      	ldr	r2, [r3, #8]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60da      	str	r2, [r3, #12]
}
 80002a6:	bf00      	nop
 80002a8:	3714      	adds	r7, #20
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	f01c803f 	.word	0xf01c803f

080002b8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	460b      	mov	r3, r1
 80002c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80002c4:	78fb      	ldrb	r3, [r7, #3]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d006      	beq.n	80002d8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 0201 	orr.w	r2, r3, #1
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80002d6:	e005      	b.n	80002e4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f023 0201 	bic.w	r2, r3, #1
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	601a      	str	r2, [r3, #0]
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80002f8:	2300      	movs	r3, #0
 80002fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f003 0301 	and.w	r3, r3, #1
 8000304:	2b00      	cmp	r3, #0
 8000306:	d002      	beq.n	800030e <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000308:	2301      	movs	r3, #1
 800030a:	73fb      	strb	r3, [r7, #15]
 800030c:	e001      	b.n	8000312 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800030e:	2300      	movs	r3, #0
 8000310:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000312:	7bfb      	ldrb	r3, [r7, #15]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr

08000320 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000320:	b480      	push	{r7}
 8000322:	b087      	sub	sp, #28
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800032a:	2300      	movs	r3, #0
 800032c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a15      	ldr	r2, [pc, #84]	; (800038c <DMA_GetFlagStatus+0x6c>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d802      	bhi.n	8000340 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800033a:	4b15      	ldr	r3, [pc, #84]	; (8000390 <DMA_GetFlagStatus+0x70>)
 800033c:	613b      	str	r3, [r7, #16]
 800033e:	e001      	b.n	8000344 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000340:	4b14      	ldr	r3, [pc, #80]	; (8000394 <DMA_GetFlagStatus+0x74>)
 8000342:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800034a:	2b00      	cmp	r3, #0
 800034c:	d003      	beq.n	8000356 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e002      	b.n	800035c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000356:	693b      	ldr	r3, [r7, #16]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000362:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000366:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000368:	68fa      	ldr	r2, [r7, #12]
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	4013      	ands	r3, r2
 800036e:	2b00      	cmp	r3, #0
 8000370:	d002      	beq.n	8000378 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000372:	2301      	movs	r3, #1
 8000374:	75fb      	strb	r3, [r7, #23]
 8000376:	e001      	b.n	800037c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000378:	2300      	movs	r3, #0
 800037a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800037c:	7dfb      	ldrb	r3, [r7, #23]
}
 800037e:	4618      	mov	r0, r3
 8000380:	371c      	adds	r7, #28
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	4002640f 	.word	0x4002640f
 8000390:	40026000 	.word	0x40026000
 8000394:	40026400 	.word	0x40026400

08000398 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a10      	ldr	r2, [pc, #64]	; (80003e8 <DMA_ClearFlag+0x50>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d802      	bhi.n	80003b0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <DMA_ClearFlag+0x54>)
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	e001      	b.n	80003b4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <DMA_ClearFlag+0x58>)
 80003b2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d007      	beq.n	80003ce <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003c4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80003cc:	e006      	b.n	80003dc <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003d4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	6093      	str	r3, [r2, #8]
}
 80003dc:	bf00      	nop
 80003de:	3714      	adds	r7, #20
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	4002640f 	.word	0x4002640f
 80003ec:	40026000 	.word	0x40026000
 80003f0:	40026400 	.word	0x40026400

080003f4 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000400:	4b34      	ldr	r3, [pc, #208]	; (80004d4 <EXTI_Init+0xe0>)
 8000402:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	799b      	ldrb	r3, [r3, #6]
 8000408:	2b00      	cmp	r3, #0
 800040a:	d04f      	beq.n	80004ac <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800040c:	4931      	ldr	r1, [pc, #196]	; (80004d4 <EXTI_Init+0xe0>)
 800040e:	4b31      	ldr	r3, [pc, #196]	; (80004d4 <EXTI_Init+0xe0>)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	43db      	mvns	r3, r3
 8000418:	4013      	ands	r3, r2
 800041a:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800041c:	492d      	ldr	r1, [pc, #180]	; (80004d4 <EXTI_Init+0xe0>)
 800041e:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <EXTI_Init+0xe0>)
 8000420:	685a      	ldr	r2, [r3, #4]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	43db      	mvns	r3, r3
 8000428:	4013      	ands	r3, r2
 800042a:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	791b      	ldrb	r3, [r3, #4]
 8000430:	461a      	mov	r2, r3
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	4413      	add	r3, r2
 8000436:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	68fa      	ldr	r2, [r7, #12]
 800043c:	6811      	ldr	r1, [r2, #0]
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	6812      	ldr	r2, [r2, #0]
 8000442:	430a      	orrs	r2, r1
 8000444:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000446:	4923      	ldr	r1, [pc, #140]	; (80004d4 <EXTI_Init+0xe0>)
 8000448:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <EXTI_Init+0xe0>)
 800044a:	689a      	ldr	r2, [r3, #8]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	43db      	mvns	r3, r3
 8000452:	4013      	ands	r3, r2
 8000454:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000456:	491f      	ldr	r1, [pc, #124]	; (80004d4 <EXTI_Init+0xe0>)
 8000458:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <EXTI_Init+0xe0>)
 800045a:	68da      	ldr	r2, [r3, #12]
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	43db      	mvns	r3, r3
 8000462:	4013      	ands	r3, r2
 8000464:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	795b      	ldrb	r3, [r3, #5]
 800046a:	2b10      	cmp	r3, #16
 800046c:	d10e      	bne.n	800048c <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800046e:	4919      	ldr	r1, [pc, #100]	; (80004d4 <EXTI_Init+0xe0>)
 8000470:	4b18      	ldr	r3, [pc, #96]	; (80004d4 <EXTI_Init+0xe0>)
 8000472:	689a      	ldr	r2, [r3, #8]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4313      	orrs	r3, r2
 800047a:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800047c:	4915      	ldr	r1, [pc, #84]	; (80004d4 <EXTI_Init+0xe0>)
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <EXTI_Init+0xe0>)
 8000480:	68da      	ldr	r2, [r3, #12]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4313      	orrs	r3, r2
 8000488:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 800048a:	e01d      	b.n	80004c8 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 800048c:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <EXTI_Init+0xe0>)
 800048e:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	795b      	ldrb	r3, [r3, #5]
 8000494:	461a      	mov	r2, r3
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	4413      	add	r3, r2
 800049a:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	68fa      	ldr	r2, [r7, #12]
 80004a0:	6811      	ldr	r1, [r2, #0]
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	6812      	ldr	r2, [r2, #0]
 80004a6:	430a      	orrs	r2, r1
 80004a8:	601a      	str	r2, [r3, #0]
}
 80004aa:	e00d      	b.n	80004c8 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	791b      	ldrb	r3, [r3, #4]
 80004b0:	461a      	mov	r2, r3
 80004b2:	68fb      	ldr	r3, [r7, #12]
 80004b4:	4413      	add	r3, r2
 80004b6:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	6811      	ldr	r1, [r2, #0]
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	6812      	ldr	r2, [r2, #0]
 80004c2:	43d2      	mvns	r2, r2
 80004c4:	400a      	ands	r2, r1
 80004c6:	601a      	str	r2, [r3, #0]
}
 80004c8:	bf00      	nop
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	40013c00 	.word	0x40013c00

080004d8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <EXTI_ClearITPendingBit+0x1c>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6153      	str	r3, [r2, #20]
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40013c00 	.word	0x40013c00

080004f8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b087      	sub	sp, #28
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000502:	2300      	movs	r3, #0
 8000504:	617b      	str	r3, [r7, #20]
 8000506:	2300      	movs	r3, #0
 8000508:	613b      	str	r3, [r7, #16]
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]
 8000512:	e076      	b.n	8000602 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000514:	2201      	movs	r2, #1
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	4013      	ands	r3, r2
 8000526:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	429a      	cmp	r2, r3
 800052e:	d165      	bne.n	80005fc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	2103      	movs	r1, #3
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	43db      	mvns	r3, r3
 8000540:	401a      	ands	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	791b      	ldrb	r3, [r3, #4]
 800054e:	4619      	mov	r1, r3
 8000550:	697b      	ldr	r3, [r7, #20]
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	fa01 f303 	lsl.w	r3, r1, r3
 8000558:	431a      	orrs	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	791b      	ldrb	r3, [r3, #4]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d003      	beq.n	800056e <GPIO_Init+0x76>
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	791b      	ldrb	r3, [r3, #4]
 800056a:	2b02      	cmp	r3, #2
 800056c:	d12e      	bne.n	80005cc <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	689a      	ldr	r2, [r3, #8]
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	005b      	lsls	r3, r3, #1
 8000576:	2103      	movs	r1, #3
 8000578:	fa01 f303 	lsl.w	r3, r1, r3
 800057c:	43db      	mvns	r3, r3
 800057e:	401a      	ands	r2, r3
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	689a      	ldr	r2, [r3, #8]
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	795b      	ldrb	r3, [r3, #5]
 800058c:	4619      	mov	r1, r3
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	fa01 f303 	lsl.w	r3, r1, r3
 8000596:	431a      	orrs	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	685a      	ldr	r2, [r3, #4]
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	4619      	mov	r1, r3
 80005a6:	2301      	movs	r3, #1
 80005a8:	408b      	lsls	r3, r1
 80005aa:	43db      	mvns	r3, r3
 80005ac:	401a      	ands	r2, r3
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	685b      	ldr	r3, [r3, #4]
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	7992      	ldrb	r2, [r2, #6]
 80005ba:	4611      	mov	r1, r2
 80005bc:	697a      	ldr	r2, [r7, #20]
 80005be:	b292      	uxth	r2, r2
 80005c0:	fa01 f202 	lsl.w	r2, r1, r2
 80005c4:	b292      	uxth	r2, r2
 80005c6:	431a      	orrs	r2, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	68da      	ldr	r2, [r3, #12]
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	2103      	movs	r1, #3
 80005d8:	fa01 f303 	lsl.w	r3, r1, r3
 80005dc:	43db      	mvns	r3, r3
 80005de:	401a      	ands	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	68da      	ldr	r2, [r3, #12]
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	79db      	ldrb	r3, [r3, #7]
 80005ec:	4619      	mov	r1, r3
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	fa01 f303 	lsl.w	r3, r1, r3
 80005f6:	431a      	orrs	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	3301      	adds	r3, #1
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d985      	bls.n	8000514 <GPIO_Init+0x1c>
    }
  }
}
 8000608:	bf00      	nop
 800060a:	371c      	adds	r7, #28
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	887a      	ldrh	r2, [r7, #2]
 8000624:	835a      	strh	r2, [r3, #26]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000632:	b480      	push	{r7}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
 800063a:	460b      	mov	r3, r1
 800063c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	695a      	ldr	r2, [r3, #20]
 8000642:	887b      	ldrh	r3, [r7, #2]
 8000644:	405a      	eors	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	615a      	str	r2, [r3, #20]
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
	...

08000658 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <RCC_DeInit+0x50>)
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <RCC_DeInit+0x50>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <RCC_DeInit+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 800066e:	4a0e      	ldr	r2, [pc, #56]	; (80006a8 <RCC_DeInit+0x50>)
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <RCC_DeInit+0x50>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8000678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800067c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <RCC_DeInit+0x50>)
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <RCC_DeInit+0x54>)
 8000682:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <RCC_DeInit+0x50>)
 8000686:	4a0a      	ldr	r2, [pc, #40]	; (80006b0 <RCC_DeInit+0x58>)
 8000688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800068c:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <RCC_DeInit+0x50>)
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <RCC_DeInit+0x50>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <RCC_DeInit+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	40023800 	.word	0x40023800
 80006ac:	24003010 	.word	0x24003010
 80006b0:	20003000 	.word	0x20003000

080006b4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d006      	beq.n	80006d4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80006c6:	490a      	ldr	r1, [pc, #40]	; (80006f0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80006d2:	e006      	b.n	80006e2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80006d4:	4906      	ldr	r1, [pc, #24]	; (80006f0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80006d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	43db      	mvns	r3, r3
 80006de:	4013      	ands	r3, r2
 80006e0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d006      	beq.n	8000714 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000706:	490a      	ldr	r1, [pc, #40]	; (8000730 <RCC_APB2PeriphClockCmd+0x3c>)
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <RCC_APB2PeriphClockCmd+0x3c>)
 800070a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4313      	orrs	r3, r2
 8000710:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000712:	e006      	b.n	8000722 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000714:	4906      	ldr	r1, [pc, #24]	; (8000730 <RCC_APB2PeriphClockCmd+0x3c>)
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <RCC_APB2PeriphClockCmd+0x3c>)
 8000718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	43db      	mvns	r3, r3
 800071e:	4013      	ands	r3, r2
 8000720:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800

08000734 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	887a      	ldrh	r2, [r7, #2]
 8000744:	819a      	strh	r2, [r3, #12]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000752:	b480      	push	{r7}
 8000754:	b085      	sub	sp, #20
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	460b      	mov	r3, r1
 800075c:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800075e:	2300      	movs	r3, #0
 8000760:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	891b      	ldrh	r3, [r3, #8]
 8000766:	b29a      	uxth	r2, r3
 8000768:	887b      	ldrh	r3, [r7, #2]
 800076a:	4013      	ands	r3, r2
 800076c:	b29b      	uxth	r3, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	d002      	beq.n	8000778 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000772:	2301      	movs	r3, #1
 8000774:	73fb      	strb	r3, [r7, #15]
 8000776:	e001      	b.n	800077c <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000778:	2300      	movs	r3, #0
 800077a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800077c:	7bfb      	ldrb	r3, [r7, #15]
}
 800077e:	4618      	mov	r0, r3
 8000780:	3714      	adds	r7, #20
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800078c:	b490      	push	{r4, r7}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	460a      	mov	r2, r1
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	4613      	mov	r3, r2
 800079a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80007a0:	79bb      	ldrb	r3, [r7, #6]
 80007a2:	f003 0303 	and.w	r3, r3, #3
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	220f      	movs	r2, #15
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80007b0:	4916      	ldr	r1, [pc, #88]	; (800080c <SYSCFG_EXTILineConfig+0x80>)
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	089b      	lsrs	r3, r3, #2
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	4618      	mov	r0, r3
 80007ba:	4a14      	ldr	r2, [pc, #80]	; (800080c <SYSCFG_EXTILineConfig+0x80>)
 80007bc:	79bb      	ldrb	r3, [r7, #6]
 80007be:	089b      	lsrs	r3, r3, #2
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	3302      	adds	r3, #2
 80007c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	43db      	mvns	r3, r3
 80007cc:	401a      	ands	r2, r3
 80007ce:	1c83      	adds	r3, r0, #2
 80007d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <SYSCFG_EXTILineConfig+0x80>)
 80007d6:	79bb      	ldrb	r3, [r7, #6]
 80007d8:	089b      	lsrs	r3, r3, #2
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	461c      	mov	r4, r3
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <SYSCFG_EXTILineConfig+0x80>)
 80007e0:	79bb      	ldrb	r3, [r7, #6]
 80007e2:	089b      	lsrs	r3, r3, #2
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	3302      	adds	r3, #2
 80007e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007ec:	79f9      	ldrb	r1, [r7, #7]
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	f003 0303 	and.w	r3, r3, #3
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	431a      	orrs	r2, r3
 80007fc:	1ca3      	adds	r3, r4, #2
 80007fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000802:	bf00      	nop
 8000804:	3710      	adds	r7, #16
 8000806:	46bd      	mov	sp, r7
 8000808:	bc90      	pop	{r4, r7}
 800080a:	4770      	bx	lr
 800080c:	40013800 	.word	0x40013800

08000810 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f103 0208 	add.w	r2, r3, #8
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f103 0208 	add.w	r2, r3, #8
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f103 0208 	add.w	r2, r3, #8
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800086a:	b480      	push	{r7}
 800086c:	b085      	sub	sp, #20
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	689a      	ldr	r2, [r3, #8]
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	1c5a      	adds	r2, r3, #1
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	601a      	str	r2, [r3, #0]
}
 80008a6:	bf00      	nop
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80008b2:	b480      	push	{r7}
 80008b4:	b085      	sub	sp, #20
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c8:	d103      	bne.n	80008d2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	691b      	ldr	r3, [r3, #16]
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	e00c      	b.n	80008ec <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3308      	adds	r3, #8
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	e002      	b.n	80008e0 <vListInsert+0x2e>
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d9f6      	bls.n	80008da <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	683a      	ldr	r2, [r7, #0]
 8000906:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	1c5a      	adds	r2, r3, #1
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	601a      	str	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	691b      	ldr	r3, [r3, #16]
 8000930:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	6892      	ldr	r2, [r2, #8]
 800093a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	6852      	ldr	r2, [r2, #4]
 8000944:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	685a      	ldr	r2, [r3, #4]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	429a      	cmp	r2, r3
 800094e:	d103      	bne.n	8000958 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689a      	ldr	r2, [r3, #8]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	1e5a      	subs	r2, r3, #1
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	3b04      	subs	r3, #4
 8000988:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000990:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3b04      	subs	r3, #4
 8000996:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	f023 0201 	bic.w	r2, r3, #1
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3b04      	subs	r3, #4
 80009a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80009a8:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <pxPortInitialiseStack+0x64>)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	3b14      	subs	r3, #20
 80009b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	3b04      	subs	r3, #4
 80009be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f06f 0202 	mvn.w	r2, #2
 80009c6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	3b20      	subs	r3, #32
 80009cc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80009ce:	68fb      	ldr	r3, [r7, #12]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	080009e1 	.word	0x080009e1

080009e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <prvTaskExitError+0x50>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f2:	d009      	beq.n	8000a08 <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80009f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009f8:	f383 8811 	msr	BASEPRI, r3
 80009fc:	f3bf 8f6f 	isb	sy
 8000a00:	f3bf 8f4f 	dsb	sy
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	e7fe      	b.n	8000a06 <prvTaskExitError+0x26>
 8000a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a0c:	f383 8811 	msr	BASEPRI, r3
 8000a10:	f3bf 8f6f 	isb	sy
 8000a14:	f3bf 8f4f 	dsb	sy
 8000a18:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000a1a:	bf00      	nop
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d0fc      	beq.n	8000a1c <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000000 	.word	0x20000000
	...

08000a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <pxCurrentTCBConst2>)
 8000a42:	6819      	ldr	r1, [r3, #0]
 8000a44:	6808      	ldr	r0, [r1, #0]
 8000a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a4a:	f380 8809 	msr	PSP, r0
 8000a4e:	f3bf 8f6f 	isb	sy
 8000a52:	f04f 0000 	mov.w	r0, #0
 8000a56:	f380 8811 	msr	BASEPRI, r0
 8000a5a:	4770      	bx	lr
 8000a5c:	f3af 8000 	nop.w

08000a60 <pxCurrentTCBConst2>:
 8000a60:	20012c6c 	.word	0x20012c6c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop

08000a68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8000a68:	4808      	ldr	r0, [pc, #32]	; (8000a8c <prvPortStartFirstTask+0x24>)
 8000a6a:	6800      	ldr	r0, [r0, #0]
 8000a6c:	6800      	ldr	r0, [r0, #0]
 8000a6e:	f380 8808 	msr	MSP, r0
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	f380 8814 	msr	CONTROL, r0
 8000a7a:	b662      	cpsie	i
 8000a7c:	b661      	cpsie	f
 8000a7e:	f3bf 8f4f 	dsb	sy
 8000a82:	f3bf 8f6f 	isb	sy
 8000a86:	df00      	svc	0
 8000a88:	bf00      	nop
 8000a8a:	0000      	.short	0x0000
 8000a8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8000a90:	bf00      	nop
 8000a92:	bf00      	nop

08000a94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b086      	sub	sp, #24
 8000a98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000a9a:	4b44      	ldr	r3, [pc, #272]	; (8000bac <xPortStartScheduler+0x118>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a44      	ldr	r2, [pc, #272]	; (8000bb0 <xPortStartScheduler+0x11c>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d109      	bne.n	8000ab8 <xPortStartScheduler+0x24>
 8000aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aa8:	f383 8811 	msr	BASEPRI, r3
 8000aac:	f3bf 8f6f 	isb	sy
 8000ab0:	f3bf 8f4f 	dsb	sy
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	e7fe      	b.n	8000ab6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000ab8:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <xPortStartScheduler+0x118>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a3d      	ldr	r2, [pc, #244]	; (8000bb4 <xPortStartScheduler+0x120>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d109      	bne.n	8000ad6 <xPortStartScheduler+0x42>
 8000ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ac6:	f383 8811 	msr	BASEPRI, r3
 8000aca:	f3bf 8f6f 	isb	sy
 8000ace:	f3bf 8f4f 	dsb	sy
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	e7fe      	b.n	8000ad4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000ad6:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <xPortStartScheduler+0x124>)
 8000ad8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	22ff      	movs	r2, #255	; 0xff
 8000ae6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000af0:	78fb      	ldrb	r3, [r7, #3]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b30      	ldr	r3, [pc, #192]	; (8000bbc <xPortStartScheduler+0x128>)
 8000afc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000afe:	4b30      	ldr	r3, [pc, #192]	; (8000bc0 <xPortStartScheduler+0x12c>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000b04:	e009      	b.n	8000b1a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8000b06:	4b2e      	ldr	r3, [pc, #184]	; (8000bc0 <xPortStartScheduler+0x12c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	4a2c      	ldr	r2, [pc, #176]	; (8000bc0 <xPortStartScheduler+0x12c>)
 8000b0e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000b10:	78fb      	ldrb	r3, [r7, #3]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000b1a:	78fb      	ldrb	r3, [r7, #3]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b22:	2b80      	cmp	r3, #128	; 0x80
 8000b24:	d0ef      	beq.n	8000b06 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000b26:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <xPortStartScheduler+0x12c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	d009      	beq.n	8000b46 <xPortStartScheduler+0xb2>
 8000b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b36:	f383 8811 	msr	BASEPRI, r3
 8000b3a:	f3bf 8f6f 	isb	sy
 8000b3e:	f3bf 8f4f 	dsb	sy
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	e7fe      	b.n	8000b44 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000b46:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <xPortStartScheduler+0x12c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	021b      	lsls	r3, r3, #8
 8000b4c:	4a1c      	ldr	r2, [pc, #112]	; (8000bc0 <xPortStartScheduler+0x12c>)
 8000b4e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <xPortStartScheduler+0x12c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <xPortStartScheduler+0x12c>)
 8000b5a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8000b64:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <xPortStartScheduler+0x130>)
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <xPortStartScheduler+0x130>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b6e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8000b70:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <xPortStartScheduler+0x130>)
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <xPortStartScheduler+0x130>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000b7a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8000b7c:	f000 f8de 	bl	8000d3c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <xPortStartScheduler+0x134>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8000b86:	f000 f8fd 	bl	8000d84 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <xPortStartScheduler+0x138>)
 8000b8c:	4b0f      	ldr	r3, [pc, #60]	; (8000bcc <xPortStartScheduler+0x138>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000b94:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8000b96:	f7ff ff67 	bl	8000a68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8000b9a:	f001 fbeb 	bl	8002374 <vTaskSwitchContext>
    prvTaskExitError();
 8000b9e:	f7ff ff1f 	bl	80009e0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	e000ed00 	.word	0xe000ed00
 8000bb0:	410fc271 	.word	0x410fc271
 8000bb4:	410fc270 	.word	0x410fc270
 8000bb8:	e000e400 	.word	0xe000e400
 8000bbc:	20000044 	.word	0x20000044
 8000bc0:	20000048 	.word	0x20000048
 8000bc4:	e000ed20 	.word	0xe000ed20
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	e000ef34 	.word	0xe000ef34

08000bd0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bda:	f383 8811 	msr	BASEPRI, r3
 8000bde:	f3bf 8f6f 	isb	sy
 8000be2:	f3bf 8f4f 	dsb	sy
 8000be6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <vPortEnterCritical+0x54>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	3301      	adds	r3, #1
 8000bee:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <vPortEnterCritical+0x54>)
 8000bf0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <vPortEnterCritical+0x54>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d10e      	bne.n	8000c18 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <vPortEnterCritical+0x58>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d009      	beq.n	8000c18 <vPortEnterCritical+0x48>
 8000c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c08:	f383 8811 	msr	BASEPRI, r3
 8000c0c:	f3bf 8f6f 	isb	sy
 8000c10:	f3bf 8f4f 	dsb	sy
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	e7fe      	b.n	8000c16 <vPortEnterCritical+0x46>
    }
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	20000000 	.word	0x20000000
 8000c28:	e000ed04 	.word	0xe000ed04

08000c2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <vPortExitCritical+0x4c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d109      	bne.n	8000c4e <vPortExitCritical+0x22>
 8000c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c3e:	f383 8811 	msr	BASEPRI, r3
 8000c42:	f3bf 8f6f 	isb	sy
 8000c46:	f3bf 8f4f 	dsb	sy
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	e7fe      	b.n	8000c4c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <vPortExitCritical+0x4c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	3b01      	subs	r3, #1
 8000c54:	4a08      	ldr	r2, [pc, #32]	; (8000c78 <vPortExitCritical+0x4c>)
 8000c56:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <vPortExitCritical+0x4c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d104      	bne.n	8000c6a <vPortExitCritical+0x3e>
 8000c60:	2300      	movs	r3, #0
 8000c62:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	00000000 	.word	0x00000000

08000c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000c80:	f3ef 8009 	mrs	r0, PSP
 8000c84:	f3bf 8f6f 	isb	sy
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <pxCurrentTCBConst>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	f01e 0f10 	tst.w	lr, #16
 8000c90:	bf08      	it	eq
 8000c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c9a:	6010      	str	r0, [r2, #0]
 8000c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000ca4:	f380 8811 	msr	BASEPRI, r0
 8000ca8:	f3bf 8f4f 	dsb	sy
 8000cac:	f3bf 8f6f 	isb	sy
 8000cb0:	f001 fb60 	bl	8002374 <vTaskSwitchContext>
 8000cb4:	f04f 0000 	mov.w	r0, #0
 8000cb8:	f380 8811 	msr	BASEPRI, r0
 8000cbc:	bc09      	pop	{r0, r3}
 8000cbe:	6819      	ldr	r1, [r3, #0]
 8000cc0:	6808      	ldr	r0, [r1, #0]
 8000cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cc6:	f01e 0f10 	tst.w	lr, #16
 8000cca:	bf08      	it	eq
 8000ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000cd0:	f380 8809 	msr	PSP, r0
 8000cd4:	f3bf 8f6f 	isb	sy
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	f3af 8000 	nop.w

08000ce0 <pxCurrentTCBConst>:
 8000ce0:	20012c6c 	.word	0x20012c6c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop

08000ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
        __asm volatile
 8000cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf2:	f383 8811 	msr	BASEPRI, r3
 8000cf6:	f3bf 8f6f 	isb	sy
 8000cfa:	f3bf 8f4f 	dsb	sy
 8000cfe:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8000d00:	f003 fbd2 	bl	80044a8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000d04:	f001 fa7a 	bl	80021fc <xTaskIncrementTick>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d006      	beq.n	8000d1c <SysTick_Handler+0x34>
        {
        	traceISR_EXIT_TO_SCHEDULER();
 8000d0e:	f003 fc29 	bl	8004564 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <SysTick_Handler+0x50>)
 8000d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	e003      	b.n	8000d24 <SysTick_Handler+0x3c>
        }
        else
        {
        	traceISR_EXIT();
 8000d1c:	f003 fc06 	bl	800452c <SEGGER_SYSVIEW_RecordExitISR>
        	vTaskSwitchContext();
 8000d20:	f001 fb28 	bl	8002374 <vTaskSwitchContext>
 8000d24:	2300      	movs	r3, #0
 8000d26:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	e000ed04 	.word	0xe000ed04

08000d3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <vPortSetupTimerInterrupt+0x34>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <vPortSetupTimerInterrupt+0x38>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <vPortSetupTimerInterrupt+0x3c>)
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <vPortSetupTimerInterrupt+0x40>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	490b      	ldr	r1, [pc, #44]	; (8000d80 <vPortSetupTimerInterrupt+0x44>)
 8000d54:	fba1 1303 	umull	r1, r3, r1, r3
 8000d58:	099b      	lsrs	r3, r3, #6
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <vPortSetupTimerInterrupt+0x34>)
 8000d60:	2207      	movs	r2, #7
 8000d62:	601a      	str	r2, [r3, #0]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e010 	.word	0xe000e010
 8000d74:	e000e018 	.word	0xe000e018
 8000d78:	e000e014 	.word	0xe000e014
 8000d7c:	20000014 	.word	0x20000014
 8000d80:	10624dd3 	.word	0x10624dd3

08000d84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8000d84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000d94 <vPortEnableVFP+0x10>
 8000d88:	6801      	ldr	r1, [r0, #0]
 8000d8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000d8e:	6001      	str	r1, [r0, #0]
 8000d90:	4770      	bx	lr
 8000d92:	0000      	.short	0x0000
 8000d94:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop

08000d9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8000da2:	f3ef 8305 	mrs	r3, IPSR
 8000da6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2b0f      	cmp	r3, #15
 8000dac:	d913      	bls.n	8000dd6 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000dae:	4a16      	ldr	r2, [pc, #88]	; (8000e08 <vPortValidateInterruptPriority+0x6c>)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4413      	add	r3, r2
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000db8:	4b14      	ldr	r3, [pc, #80]	; (8000e0c <vPortValidateInterruptPriority+0x70>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	7afa      	ldrb	r2, [r7, #11]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d209      	bcs.n	8000dd6 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8000dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dc6:	f383 8811 	msr	BASEPRI, r3
 8000dca:	f3bf 8f6f 	isb	sy
 8000dce:	f3bf 8f4f 	dsb	sy
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	e7fe      	b.n	8000dd4 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <vPortValidateInterruptPriority+0x74>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <vPortValidateInterruptPriority+0x78>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d909      	bls.n	8000dfa <vPortValidateInterruptPriority+0x5e>
 8000de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dea:	f383 8811 	msr	BASEPRI, r3
 8000dee:	f3bf 8f6f 	isb	sy
 8000df2:	f3bf 8f4f 	dsb	sy
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	e7fe      	b.n	8000df8 <vPortValidateInterruptPriority+0x5c>
    }
 8000dfa:	bf00      	nop
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e3f0 	.word	0xe000e3f0
 8000e0c:	20000044 	.word	0x20000044
 8000e10:	e000ed0c 	.word	0xe000ed0c
 8000e14:	20000048 	.word	0x20000048

08000e18 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8000e24:	f001 f91a 	bl	800205c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8000e28:	4b59      	ldr	r3, [pc, #356]	; (8000f90 <pvPortMalloc+0x178>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d101      	bne.n	8000e34 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8000e30:	f000 f91a 	bl	8001068 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000e34:	4b57      	ldr	r3, [pc, #348]	; (8000f94 <pvPortMalloc+0x17c>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f040 8091 	bne.w	8000f64 <pvPortMalloc+0x14c>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d01c      	beq.n	8000e82 <pvPortMalloc+0x6a>
            {
                xWantedSize += xHeapStructSize;
 8000e48:	2208      	movs	r2, #8
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d013      	beq.n	8000e82 <pvPortMalloc+0x6a>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f023 0307 	bic.w	r3, r3, #7
 8000e60:	3308      	adds	r3, #8
 8000e62:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d009      	beq.n	8000e82 <pvPortMalloc+0x6a>
 8000e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e72:	f383 8811 	msr	BASEPRI, r3
 8000e76:	f3bf 8f6f 	isb	sy
 8000e7a:	f3bf 8f4f 	dsb	sy
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	e7fe      	b.n	8000e80 <pvPortMalloc+0x68>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d06d      	beq.n	8000f64 <pvPortMalloc+0x14c>
 8000e88:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <pvPortMalloc+0x180>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d868      	bhi.n	8000f64 <pvPortMalloc+0x14c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 8000e92:	4b42      	ldr	r3, [pc, #264]	; (8000f9c <pvPortMalloc+0x184>)
 8000e94:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8000e96:	4b41      	ldr	r3, [pc, #260]	; (8000f9c <pvPortMalloc+0x184>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000e9c:	e004      	b.n	8000ea8 <pvPortMalloc+0x90>
                {
                    pxPreviousBlock = pxBlock;
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d203      	bcs.n	8000eba <pvPortMalloc+0xa2>
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f1      	bne.n	8000e9e <pvPortMalloc+0x86>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8000eba:	4b35      	ldr	r3, [pc, #212]	; (8000f90 <pvPortMalloc+0x178>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d04f      	beq.n	8000f64 <pvPortMalloc+0x14c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000ec4:	6a3b      	ldr	r3, [r7, #32]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2208      	movs	r2, #8
 8000eca:	4413      	add	r3, r2
 8000ecc:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	1ad2      	subs	r2, r2, r3
 8000ede:	2308      	movs	r3, #8
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d91e      	bls.n	8000f24 <pvPortMalloc+0x10c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4413      	add	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	f003 0307 	and.w	r3, r3, #7
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d009      	beq.n	8000f0c <pvPortMalloc+0xf4>
 8000ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000efc:	f383 8811 	msr	BASEPRI, r3
 8000f00:	f3bf 8f6f 	isb	sy
 8000f04:	f3bf 8f4f 	dsb	sy
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	e7fe      	b.n	8000f0a <pvPortMalloc+0xf2>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	1ad2      	subs	r2, r2, r3
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000f1e:	69b8      	ldr	r0, [r7, #24]
 8000f20:	f000 f904 	bl	800112c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <pvPortMalloc+0x180>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <pvPortMalloc+0x180>)
 8000f30:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000f32:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <pvPortMalloc+0x180>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <pvPortMalloc+0x188>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d203      	bcs.n	8000f46 <pvPortMalloc+0x12e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <pvPortMalloc+0x180>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <pvPortMalloc+0x188>)
 8000f44:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <pvPortMalloc+0x17c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8000f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <pvPortMalloc+0x18c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <pvPortMalloc+0x18c>)
 8000f62:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000f64:	f001 f888 	bl	8002078 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d009      	beq.n	8000f86 <pvPortMalloc+0x16e>
 8000f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f76:	f383 8811 	msr	BASEPRI, r3
 8000f7a:	f3bf 8f6f 	isb	sy
 8000f7e:	f3bf 8f4f 	dsb	sy
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e7fe      	b.n	8000f84 <pvPortMalloc+0x16c>
    return pvReturn;
 8000f86:	69fb      	ldr	r3, [r7, #28]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3728      	adds	r7, #40	; 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20012c54 	.word	0x20012c54
 8000f94:	20012c68 	.word	0x20012c68
 8000f98:	20012c58 	.word	0x20012c58
 8000f9c:	20012c4c 	.word	0x20012c4c
 8000fa0:	20012c5c 	.word	0x20012c5c
 8000fa4:	20012c60 	.word	0x20012c60

08000fa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d04b      	beq.n	8001052 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8000fba:	2308      	movs	r3, #8
 8000fbc:	425b      	negs	r3, r3
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <vPortFree+0xb4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d109      	bne.n	8000fea <vPortFree+0x42>
 8000fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fda:	f383 8811 	msr	BASEPRI, r3
 8000fde:	f3bf 8f6f 	isb	sy
 8000fe2:	f3bf 8f4f 	dsb	sy
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	e7fe      	b.n	8000fe8 <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d009      	beq.n	8001006 <vPortFree+0x5e>
 8000ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ff6:	f383 8811 	msr	BASEPRI, r3
 8000ffa:	f3bf 8f6f 	isb	sy
 8000ffe:	f3bf 8f4f 	dsb	sy
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	e7fe      	b.n	8001004 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <vPortFree+0xb4>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4013      	ands	r3, r2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d01e      	beq.n	8001052 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d11a      	bne.n	8001052 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <vPortFree+0xb4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	43db      	mvns	r3, r3
 8001026:	401a      	ands	r2, r3
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800102c:	f001 f816 	bl	800205c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <vPortFree+0xb8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4413      	add	r3, r2
 800103a:	4a09      	ldr	r2, [pc, #36]	; (8001060 <vPortFree+0xb8>)
 800103c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800103e:	6938      	ldr	r0, [r7, #16]
 8001040:	f000 f874 	bl	800112c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <vPortFree+0xbc>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	4a06      	ldr	r2, [pc, #24]	; (8001064 <vPortFree+0xbc>)
 800104c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800104e:	f001 f813 	bl	8002078 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20012c68 	.word	0x20012c68
 8001060:	20012c58 	.word	0x20012c58
 8001064:	20012c64 	.word	0x20012c64

08001068 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800106e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001072:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8001074:	4b27      	ldr	r3, [pc, #156]	; (8001114 <prvHeapInit+0xac>)
 8001076:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00c      	beq.n	800109c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	3307      	adds	r3, #7
 8001086:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f023 0307 	bic.w	r3, r3, #7
 800108e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	4a1f      	ldr	r2, [pc, #124]	; (8001114 <prvHeapInit+0xac>)
 8001098:	4413      	add	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80010a0:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <prvHeapInit+0xb0>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <prvHeapInit+0xb0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	4413      	add	r3, r2
 80010b2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80010b4:	2208      	movs	r2, #8
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	1a9b      	subs	r3, r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f023 0307 	bic.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4a15      	ldr	r2, [pc, #84]	; (800111c <prvHeapInit+0xb4>)
 80010c8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <prvHeapInit+0xb4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2200      	movs	r2, #0
 80010d0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <prvHeapInit+0xb4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	1ad2      	subs	r2, r2, r3
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <prvHeapInit+0xb4>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <prvHeapInit+0xb8>)
 80010f6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	4a09      	ldr	r2, [pc, #36]	; (8001124 <prvHeapInit+0xbc>)
 80010fe:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <prvHeapInit+0xc0>)
 8001102:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001106:	601a      	str	r2, [r3, #0]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	2000004c 	.word	0x2000004c
 8001118:	20012c4c 	.word	0x20012c4c
 800111c:	20012c54 	.word	0x20012c54
 8001120:	20012c5c 	.word	0x20012c5c
 8001124:	20012c58 	.word	0x20012c58
 8001128:	20012c68 	.word	0x20012c68

0800112c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <prvInsertBlockIntoFreeList+0xac>)
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	e002      	b.n	8001140 <prvInsertBlockIntoFreeList+0x14>
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	429a      	cmp	r2, r3
 8001148:	d3f7      	bcc.n	800113a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	441a      	add	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	429a      	cmp	r2, r3
 800115a:	d108      	bne.n	800116e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	441a      	add	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	441a      	add	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d118      	bne.n	80011b4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <prvInsertBlockIntoFreeList+0xb0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d00d      	beq.n	80011aa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	441a      	add	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	e008      	b.n	80011bc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <prvInsertBlockIntoFreeList+0xb0>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	e003      	b.n	80011bc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d002      	beq.n	80011ca <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20012c4c 	.word	0x20012c4c
 80011dc:	20012c54 	.word	0x20012c54

080011e0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d109      	bne.n	8001208 <xQueueGenericReset+0x28>
 80011f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011f8:	f383 8811 	msr	BASEPRI, r3
 80011fc:	f3bf 8f6f 	isb	sy
 8001200:	f3bf 8f4f 	dsb	sy
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	e7fe      	b.n	8001206 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8001208:	f7ff fce2 	bl	8000bd0 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001214:	68f9      	ldr	r1, [r7, #12]
 8001216:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001218:	fb01 f303 	mul.w	r3, r1, r3
 800121c:	441a      	add	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001238:	3b01      	subs	r3, #1
 800123a:	68f9      	ldr	r1, [r7, #12]
 800123c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800123e:	fb01 f303 	mul.w	r3, r1, r3
 8001242:	441a      	add	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	22ff      	movs	r2, #255	; 0xff
 800124c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	22ff      	movs	r2, #255	; 0xff
 8001254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d114      	bne.n	8001288 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d01a      	beq.n	800129c <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3310      	adds	r3, #16
 800126a:	4618      	mov	r0, r3
 800126c:	f001 f942 	bl	80024f4 <xTaskRemoveFromEventList>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d012      	beq.n	800129c <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <xQueueGenericReset+0xcc>)
 8001278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	f3bf 8f4f 	dsb	sy
 8001282:	f3bf 8f6f 	isb	sy
 8001286:	e009      	b.n	800129c <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3310      	adds	r3, #16
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fabf 	bl	8000810 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3324      	adds	r3, #36	; 0x24
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff faba 	bl	8000810 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800129c:	f7ff fcc6 	bl	8000c2c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80012a0:	2301      	movs	r3, #1
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000ed04 	.word	0xe000ed04

080012b0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	; 0x30
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	4613      	mov	r3, r2
 80012bc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d109      	bne.n	80012d8 <xQueueGenericCreate+0x28>
 80012c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012c8:	f383 8811 	msr	BASEPRI, r3
 80012cc:	f3bf 8f6f 	isb	sy
 80012d0:	f3bf 8f4f 	dsb	sy
 80012d4:	61bb      	str	r3, [r7, #24]
 80012d6:	e7fe      	b.n	80012d6 <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d006      	beq.n	80012f6 <xQueueGenericCreate+0x46>
 80012e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d101      	bne.n	80012fa <xQueueGenericCreate+0x4a>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <xQueueGenericCreate+0x4c>
 80012fa:	2300      	movs	r3, #0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d109      	bne.n	8001314 <xQueueGenericCreate+0x64>
 8001300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001304:	f383 8811 	msr	BASEPRI, r3
 8001308:	f3bf 8f6f 	isb	sy
 800130c:	f3bf 8f4f 	dsb	sy
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	e7fe      	b.n	8001312 <xQueueGenericCreate+0x62>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001316:	3350      	adds	r3, #80	; 0x50
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fd7d 	bl	8000e18 <pvPortMalloc>
 800131e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001320:	6a3b      	ldr	r3, [r7, #32]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00d      	beq.n	8001342 <xQueueGenericCreate+0x92>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3350      	adds	r3, #80	; 0x50
 800132e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001330:	79fa      	ldrb	r2, [r7, #7]
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	4613      	mov	r3, r2
 8001338:	69fa      	ldr	r2, [r7, #28]
 800133a:	68b9      	ldr	r1, [r7, #8]
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f000 f805 	bl	800134c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001342:	6a3b      	ldr	r3, [r7, #32]
    }
 8001344:	4618      	mov	r0, r3
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d103      	bne.n	8001368 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e002      	b.n	800136e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800137a:	2101      	movs	r1, #1
 800137c:	69b8      	ldr	r0, [r7, #24]
 800137e:	f7ff ff2f 	bl	80011e0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	78fa      	ldrb	r2, [r7, #3]
 8001386:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	68f9      	ldr	r1, [r7, #12]
 8001390:	2073      	movs	r0, #115	; 0x73
 8001392:	f002 fcbb 	bl	8003d0c <SEGGER_SYSVIEW_RecordU32x3>
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b090      	sub	sp, #64	; 0x40
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80013ae:	2300      	movs	r3, #0
 80013b0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80013b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d109      	bne.n	80013d0 <xQueueGenericSend+0x30>
 80013bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013c0:	f383 8811 	msr	BASEPRI, r3
 80013c4:	f3bf 8f6f 	isb	sy
 80013c8:	f3bf 8f4f 	dsb	sy
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80013ce:	e7fe      	b.n	80013ce <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d103      	bne.n	80013de <xQueueGenericSend+0x3e>
 80013d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <xQueueGenericSend+0x42>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <xQueueGenericSend+0x44>
 80013e2:	2300      	movs	r3, #0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d109      	bne.n	80013fc <xQueueGenericSend+0x5c>
 80013e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013ec:	f383 8811 	msr	BASEPRI, r3
 80013f0:	f3bf 8f6f 	isb	sy
 80013f4:	f3bf 8f4f 	dsb	sy
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	e7fe      	b.n	80013fa <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d103      	bne.n	800140a <xQueueGenericSend+0x6a>
 8001402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001406:	2b01      	cmp	r3, #1
 8001408:	d101      	bne.n	800140e <xQueueGenericSend+0x6e>
 800140a:	2301      	movs	r3, #1
 800140c:	e000      	b.n	8001410 <xQueueGenericSend+0x70>
 800140e:	2300      	movs	r3, #0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d109      	bne.n	8001428 <xQueueGenericSend+0x88>
 8001414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001418:	f383 8811 	msr	BASEPRI, r3
 800141c:	f3bf 8f6f 	isb	sy
 8001420:	f3bf 8f4f 	dsb	sy
 8001424:	623b      	str	r3, [r7, #32]
 8001426:	e7fe      	b.n	8001426 <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001428:	f001 fa00 	bl	800282c <xTaskGetSchedulerState>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <xQueueGenericSend+0x98>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <xQueueGenericSend+0x9c>
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <xQueueGenericSend+0x9e>
 800143c:	2300      	movs	r3, #0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d109      	bne.n	8001456 <xQueueGenericSend+0xb6>
 8001442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001446:	f383 8811 	msr	BASEPRI, r3
 800144a:	f3bf 8f6f 	isb	sy
 800144e:	f3bf 8f4f 	dsb	sy
 8001452:	61fb      	str	r3, [r7, #28]
 8001454:	e7fe      	b.n	8001454 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001456:	f7ff fbbb 	bl	8000bd0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800145a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800145c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800145e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001462:	429a      	cmp	r2, r3
 8001464:	d302      	bcc.n	800146c <xQueueGenericSend+0xcc>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d136      	bne.n	80014da <xQueueGenericSend+0x13a>
            {
                traceQUEUE_SEND( pxQueue );
 800146c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146e:	4618      	mov	r0, r3
 8001470:	f003 f97c 	bl	800476c <SEGGER_SYSVIEW_ShrinkId>
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	460b      	mov	r3, r1
 800147e:	4601      	mov	r1, r0
 8001480:	205a      	movs	r0, #90	; 0x5a
 8001482:	f002 fcb9 	bl	8003df8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800148c:	f000 fa78 	bl	8001980 <prvCopyDataToQueue>
 8001490:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	2b00      	cmp	r3, #0
 8001498:	d010      	beq.n	80014bc <xQueueGenericSend+0x11c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800149a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149c:	3324      	adds	r3, #36	; 0x24
 800149e:	4618      	mov	r0, r3
 80014a0:	f001 f828 	bl	80024f4 <xTaskRemoveFromEventList>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d013      	beq.n	80014d2 <xQueueGenericSend+0x132>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80014aa:	4b4d      	ldr	r3, [pc, #308]	; (80015e0 <xQueueGenericSend+0x240>)
 80014ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	f3bf 8f4f 	dsb	sy
 80014b6:	f3bf 8f6f 	isb	sy
 80014ba:	e00a      	b.n	80014d2 <xQueueGenericSend+0x132>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80014bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d007      	beq.n	80014d2 <xQueueGenericSend+0x132>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80014c2:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <xQueueGenericSend+0x240>)
 80014c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	f3bf 8f4f 	dsb	sy
 80014ce:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80014d2:	f7ff fbab 	bl	8000c2c <vPortExitCritical>
                return pdPASS;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e07d      	b.n	80015d6 <xQueueGenericSend+0x236>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d110      	bne.n	8001502 <xQueueGenericSend+0x162>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80014e0:	f7ff fba4 	bl	8000c2c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80014e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 f940 	bl	800476c <SEGGER_SYSVIEW_ShrinkId>
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	460b      	mov	r3, r1
 80014f6:	4601      	mov	r1, r0
 80014f8:	205a      	movs	r0, #90	; 0x5a
 80014fa:	f002 fc7d 	bl	8003df8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	e069      	b.n	80015d6 <xQueueGenericSend+0x236>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001504:	2b00      	cmp	r3, #0
 8001506:	d106      	bne.n	8001516 <xQueueGenericSend+0x176>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4618      	mov	r0, r3
 800150e:	f001 f857 	bl	80025c0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001512:	2301      	movs	r3, #1
 8001514:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001516:	f7ff fb89 	bl	8000c2c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800151a:	f000 fd9f 	bl	800205c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800151e:	f7ff fb57 	bl	8000bd0 <vPortEnterCritical>
 8001522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001528:	b25b      	sxtb	r3, r3
 800152a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800152e:	d103      	bne.n	8001538 <xQueueGenericSend+0x198>
 8001530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800153a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800153e:	b25b      	sxtb	r3, r3
 8001540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001544:	d103      	bne.n	800154e <xQueueGenericSend+0x1ae>
 8001546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800154e:	f7ff fb6d 	bl	8000c2c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001552:	1d3a      	adds	r2, r7, #4
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f001 f846 	bl	80025ec <xTaskCheckForTimeOut>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d124      	bne.n	80015b0 <xQueueGenericSend+0x210>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001566:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001568:	f000 fb02 	bl	8001b70 <prvIsQueueFull>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d018      	beq.n	80015a4 <xQueueGenericSend+0x204>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001574:	3310      	adds	r3, #16
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	4611      	mov	r1, r2
 800157a:	4618      	mov	r0, r3
 800157c:	f000 ff68 	bl	8002450 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001582:	f000 fa8d 	bl	8001aa0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001586:	f000 fd77 	bl	8002078 <xTaskResumeAll>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	f47f af62 	bne.w	8001456 <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <xQueueGenericSend+0x240>)
 8001594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	f3bf 8f4f 	dsb	sy
 800159e:	f3bf 8f6f 	isb	sy
 80015a2:	e758      	b.n	8001456 <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80015a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015a6:	f000 fa7b 	bl	8001aa0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80015aa:	f000 fd65 	bl	8002078 <xTaskResumeAll>
 80015ae:	e752      	b.n	8001456 <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80015b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80015b2:	f000 fa75 	bl	8001aa0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80015b6:	f000 fd5f 	bl	8002078 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80015ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015bc:	4618      	mov	r0, r3
 80015be:	f003 f8d5 	bl	800476c <SEGGER_SYSVIEW_ShrinkId>
 80015c2:	68ba      	ldr	r2, [r7, #8]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	460b      	mov	r3, r1
 80015cc:	4601      	mov	r1, r0
 80015ce:	205a      	movs	r0, #90	; 0x5a
 80015d0:	f002 fc12 	bl	8003df8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80015d4:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3738      	adds	r7, #56	; 0x38
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	e000ed04 	.word	0xe000ed04

080015e4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b090      	sub	sp, #64	; 0x40
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80015f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d109      	bne.n	8001610 <xQueueGenericSendFromISR+0x2c>
 80015fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001600:	f383 8811 	msr	BASEPRI, r3
 8001604:	f3bf 8f6f 	isb	sy
 8001608:	f3bf 8f4f 	dsb	sy
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
 800160e:	e7fe      	b.n	800160e <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d103      	bne.n	800161e <xQueueGenericSendFromISR+0x3a>
 8001616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <xQueueGenericSendFromISR+0x3e>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <xQueueGenericSendFromISR+0x40>
 8001622:	2300      	movs	r3, #0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d109      	bne.n	800163c <xQueueGenericSendFromISR+0x58>
 8001628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800162c:	f383 8811 	msr	BASEPRI, r3
 8001630:	f3bf 8f6f 	isb	sy
 8001634:	f3bf 8f4f 	dsb	sy
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
 800163a:	e7fe      	b.n	800163a <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2b02      	cmp	r3, #2
 8001640:	d103      	bne.n	800164a <xQueueGenericSendFromISR+0x66>
 8001642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001646:	2b01      	cmp	r3, #1
 8001648:	d101      	bne.n	800164e <xQueueGenericSendFromISR+0x6a>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <xQueueGenericSendFromISR+0x6c>
 800164e:	2300      	movs	r3, #0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d109      	bne.n	8001668 <xQueueGenericSendFromISR+0x84>
 8001654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001658:	f383 8811 	msr	BASEPRI, r3
 800165c:	f3bf 8f6f 	isb	sy
 8001660:	f3bf 8f4f 	dsb	sy
 8001664:	623b      	str	r3, [r7, #32]
 8001666:	e7fe      	b.n	8001666 <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001668:	f7ff fb98 	bl	8000d9c <vPortValidateInterruptPriority>
        __asm volatile
 800166c:	f3ef 8211 	mrs	r2, BASEPRI
 8001670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001674:	f383 8811 	msr	BASEPRI, r3
 8001678:	f3bf 8f6f 	isb	sy
 800167c:	f3bf 8f4f 	dsb	sy
 8001680:	61fa      	str	r2, [r7, #28]
 8001682:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8001684:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001686:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800168a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800168c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800168e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001690:	429a      	cmp	r2, r3
 8001692:	d302      	bcc.n	800169a <xQueueGenericSendFromISR+0xb6>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d147      	bne.n	800172a <xQueueGenericSendFromISR+0x146>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800169a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800169c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80016a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80016aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ac:	4618      	mov	r0, r3
 80016ae:	f003 f85d 	bl	800476c <SEGGER_SYSVIEW_ShrinkId>
 80016b2:	4601      	mov	r1, r0
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	461a      	mov	r2, r3
 80016b8:	2060      	movs	r0, #96	; 0x60
 80016ba:	f002 facd 	bl	8003c58 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	68b9      	ldr	r1, [r7, #8]
 80016c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80016c4:	f000 f95c 	bl	8001980 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80016c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d0:	d112      	bne.n	80016f8 <xQueueGenericSendFromISR+0x114>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80016d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d024      	beq.n	8001724 <xQueueGenericSendFromISR+0x140>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80016da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016dc:	3324      	adds	r3, #36	; 0x24
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 ff08 	bl	80024f4 <xTaskRemoveFromEventList>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d01c      	beq.n	8001724 <xQueueGenericSendFromISR+0x140>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d019      	beq.n	8001724 <xQueueGenericSendFromISR+0x140>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	e015      	b.n	8001724 <xQueueGenericSendFromISR+0x140>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80016f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80016fc:	2b7f      	cmp	r3, #127	; 0x7f
 80016fe:	d109      	bne.n	8001714 <xQueueGenericSendFromISR+0x130>
        __asm volatile
 8001700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001704:	f383 8811 	msr	BASEPRI, r3
 8001708:	f3bf 8f6f 	isb	sy
 800170c:	f3bf 8f4f 	dsb	sy
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	e7fe      	b.n	8001712 <xQueueGenericSendFromISR+0x12e>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001714:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001718:	3301      	adds	r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	b25a      	sxtb	r2, r3
 800171e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001724:	2301      	movs	r3, #1
 8001726:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8001728:	e00b      	b.n	8001742 <xQueueGenericSendFromISR+0x15e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800172a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800172c:	4618      	mov	r0, r3
 800172e:	f003 f81d 	bl	800476c <SEGGER_SYSVIEW_ShrinkId>
 8001732:	4601      	mov	r1, r0
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	461a      	mov	r2, r3
 8001738:	2060      	movs	r0, #96	; 0x60
 800173a:	f002 fa8d 	bl	8003c58 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800173e:	2300      	movs	r3, #0
 8001740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001744:	613b      	str	r3, [r7, #16]
        __asm volatile
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800174c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800174e:	4618      	mov	r0, r3
 8001750:	3740      	adds	r7, #64	; 0x40
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b08f      	sub	sp, #60	; 0x3c
 800175c:	af02      	add	r7, sp, #8
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001764:	2300      	movs	r3, #0
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800176c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <xQueueReceive+0x2e>
        __asm volatile
 8001772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001776:	f383 8811 	msr	BASEPRI, r3
 800177a:	f3bf 8f6f 	isb	sy
 800177e:	f3bf 8f4f 	dsb	sy
 8001782:	623b      	str	r3, [r7, #32]
 8001784:	e7fe      	b.n	8001784 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d103      	bne.n	8001794 <xQueueReceive+0x3c>
 800178c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <xQueueReceive+0x40>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <xQueueReceive+0x42>
 8001798:	2300      	movs	r3, #0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <xQueueReceive+0x5a>
 800179e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a2:	f383 8811 	msr	BASEPRI, r3
 80017a6:	f3bf 8f6f 	isb	sy
 80017aa:	f3bf 8f4f 	dsb	sy
 80017ae:	61fb      	str	r3, [r7, #28]
 80017b0:	e7fe      	b.n	80017b0 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80017b2:	f001 f83b 	bl	800282c <xTaskGetSchedulerState>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <xQueueReceive+0x6a>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <xQueueReceive+0x6e>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <xQueueReceive+0x70>
 80017c6:	2300      	movs	r3, #0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d109      	bne.n	80017e0 <xQueueReceive+0x88>
 80017cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d0:	f383 8811 	msr	BASEPRI, r3
 80017d4:	f3bf 8f6f 	isb	sy
 80017d8:	f3bf 8f4f 	dsb	sy
 80017dc:	61bb      	str	r3, [r7, #24]
 80017de:	e7fe      	b.n	80017de <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80017e0:	f7ff f9f6 	bl	8000bd0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80017e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d031      	beq.n	8001854 <xQueueReceive+0xfc>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017f4:	f000 f92e 	bl	8001a54 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80017f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 ffb6 	bl	800476c <SEGGER_SYSVIEW_ShrinkId>
 8001800:	4604      	mov	r4, r0
 8001802:	2000      	movs	r0, #0
 8001804:	f002 ffb2 	bl	800476c <SEGGER_SYSVIEW_ShrinkId>
 8001808:	4601      	mov	r1, r0
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	2301      	movs	r3, #1
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	4613      	mov	r3, r2
 8001812:	460a      	mov	r2, r1
 8001814:	4621      	mov	r1, r4
 8001816:	205c      	movs	r0, #92	; 0x5c
 8001818:	f002 faee 	bl	8003df8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	1e5a      	subs	r2, r3, #1
 8001820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001822:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00f      	beq.n	800184c <xQueueReceive+0xf4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800182c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182e:	3310      	adds	r3, #16
 8001830:	4618      	mov	r0, r3
 8001832:	f000 fe5f 	bl	80024f4 <xTaskRemoveFromEventList>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <xQueueReceive+0xf4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800183c:	4b4f      	ldr	r3, [pc, #316]	; (800197c <xQueueReceive+0x224>)
 800183e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	f3bf 8f4f 	dsb	sy
 8001848:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800184c:	f7ff f9ee 	bl	8000c2c <vPortExitCritical>
                return pdPASS;
 8001850:	2301      	movs	r3, #1
 8001852:	e08e      	b.n	8001972 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d115      	bne.n	8001886 <xQueueReceive+0x12e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800185a:	f7ff f9e7 	bl	8000c2c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800185e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001860:	4618      	mov	r0, r3
 8001862:	f002 ff83 	bl	800476c <SEGGER_SYSVIEW_ShrinkId>
 8001866:	4604      	mov	r4, r0
 8001868:	2000      	movs	r0, #0
 800186a:	f002 ff7f 	bl	800476c <SEGGER_SYSVIEW_ShrinkId>
 800186e:	4601      	mov	r1, r0
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	2301      	movs	r3, #1
 8001874:	9300      	str	r3, [sp, #0]
 8001876:	4613      	mov	r3, r2
 8001878:	460a      	mov	r2, r1
 800187a:	4621      	mov	r1, r4
 800187c:	205c      	movs	r0, #92	; 0x5c
 800187e:	f002 fabb 	bl	8003df8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8001882:	2300      	movs	r3, #0
 8001884:	e075      	b.n	8001972 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001888:	2b00      	cmp	r3, #0
 800188a:	d106      	bne.n	800189a <xQueueReceive+0x142>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	4618      	mov	r0, r3
 8001892:	f000 fe95 	bl	80025c0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001896:	2301      	movs	r3, #1
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800189a:	f7ff f9c7 	bl	8000c2c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800189e:	f000 fbdd 	bl	800205c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80018a2:	f7ff f995 	bl	8000bd0 <vPortEnterCritical>
 80018a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b2:	d103      	bne.n	80018bc <xQueueReceive+0x164>
 80018b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018c2:	b25b      	sxtb	r3, r3
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c8:	d103      	bne.n	80018d2 <xQueueReceive+0x17a>
 80018ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80018d2:	f7ff f9ab 	bl	8000c2c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80018d6:	1d3a      	adds	r2, r7, #4
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4611      	mov	r1, r2
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 fe84 	bl	80025ec <xTaskCheckForTimeOut>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d124      	bne.n	8001934 <xQueueReceive+0x1dc>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80018ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018ec:	f000 f92a 	bl	8001b44 <prvIsQueueEmpty>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d018      	beq.n	8001928 <xQueueReceive+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80018f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f8:	3324      	adds	r3, #36	; 0x24
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	4611      	mov	r1, r2
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 fda6 	bl	8002450 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001906:	f000 f8cb 	bl	8001aa0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800190a:	f000 fbb5 	bl	8002078 <xTaskResumeAll>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	f47f af65 	bne.w	80017e0 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8001916:	4b19      	ldr	r3, [pc, #100]	; (800197c <xQueueReceive+0x224>)
 8001918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	f3bf 8f4f 	dsb	sy
 8001922:	f3bf 8f6f 	isb	sy
 8001926:	e75b      	b.n	80017e0 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800192a:	f000 f8b9 	bl	8001aa0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800192e:	f000 fba3 	bl	8002078 <xTaskResumeAll>
 8001932:	e755      	b.n	80017e0 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001936:	f000 f8b3 	bl	8001aa0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800193a:	f000 fb9d 	bl	8002078 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800193e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001940:	f000 f900 	bl	8001b44 <prvIsQueueEmpty>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	f43f af4a 	beq.w	80017e0 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800194c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194e:	4618      	mov	r0, r3
 8001950:	f002 ff0c 	bl	800476c <SEGGER_SYSVIEW_ShrinkId>
 8001954:	4604      	mov	r4, r0
 8001956:	2000      	movs	r0, #0
 8001958:	f002 ff08 	bl	800476c <SEGGER_SYSVIEW_ShrinkId>
 800195c:	4601      	mov	r1, r0
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	2301      	movs	r3, #1
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	4613      	mov	r3, r2
 8001966:	460a      	mov	r2, r1
 8001968:	4621      	mov	r1, r4
 800196a:	205c      	movs	r0, #92	; 0x5c
 800196c:	f002 fa44 	bl	8003df8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8001970:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001972:	4618      	mov	r0, r3
 8001974:	3734      	adds	r7, #52	; 0x34
 8001976:	46bd      	mov	sp, r7
 8001978:	bd90      	pop	{r4, r7, pc}
 800197a:	bf00      	nop
 800197c:	e000ed04 	.word	0xe000ed04

08001980 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001994:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10d      	bne.n	80019ba <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d14d      	bne.n	8001a42 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 ff5c 	bl	8002868 <xTaskPriorityDisinherit>
 80019b0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	e043      	b.n	8001a42 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d119      	bne.n	80019f4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6858      	ldr	r0, [r3, #4]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	461a      	mov	r2, r3
 80019ca:	68b9      	ldr	r1, [r7, #8]
 80019cc:	f003 fbb9 	bl	8005142 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	441a      	add	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d32b      	bcc.n	8001a42 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	e026      	b.n	8001a42 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	68d8      	ldr	r0, [r3, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	461a      	mov	r2, r3
 80019fe:	68b9      	ldr	r1, [r7, #8]
 8001a00:	f003 fb9f 	bl	8005142 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	425b      	negs	r3, r3
 8001a0e:	441a      	add	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d207      	bcs.n	8001a30 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	425b      	negs	r3, r3
 8001a2a:	441a      	add	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d105      	bne.n	8001a42 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001a4a:	697b      	ldr	r3, [r7, #20]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d018      	beq.n	8001a98 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	441a      	add	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d303      	bcc.n	8001a88 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68d9      	ldr	r1, [r3, #12]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	461a      	mov	r2, r3
 8001a92:	6838      	ldr	r0, [r7, #0]
 8001a94:	f003 fb55 	bl	8005142 <memcpy>
    }
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001aa8:	f7ff f892 	bl	8000bd0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ab2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ab4:	e011      	b.n	8001ada <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d012      	beq.n	8001ae4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3324      	adds	r3, #36	; 0x24
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 fd16 	bl	80024f4 <xTaskRemoveFromEventList>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001ace:	f000 fdf1 	bl	80026b4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	dce9      	bgt.n	8001ab6 <prvUnlockQueue+0x16>
 8001ae2:	e000      	b.n	8001ae6 <prvUnlockQueue+0x46>
                        break;
 8001ae4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	22ff      	movs	r2, #255	; 0xff
 8001aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001aee:	f7ff f89d 	bl	8000c2c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001af2:	f7ff f86d 	bl	8000bd0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001afc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001afe:	e011      	b.n	8001b24 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d012      	beq.n	8001b2e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3310      	adds	r3, #16
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 fcf1 	bl	80024f4 <xTaskRemoveFromEventList>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001b18:	f000 fdcc 	bl	80026b4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001b1c:	7bbb      	ldrb	r3, [r7, #14]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	dce9      	bgt.n	8001b00 <prvUnlockQueue+0x60>
 8001b2c:	e000      	b.n	8001b30 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001b2e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	22ff      	movs	r2, #255	; 0xff
 8001b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001b38:	f7ff f878 	bl	8000c2c <vPortExitCritical>
}
 8001b3c:	bf00      	nop
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001b4c:	f7ff f840 	bl	8000bd0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	e001      	b.n	8001b62 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001b62:	f7ff f863 	bl	8000c2c <vPortExitCritical>

    return xReturn;
 8001b66:	68fb      	ldr	r3, [r7, #12]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001b78:	f7ff f82a 	bl	8000bd0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d102      	bne.n	8001b8e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	e001      	b.n	8001b92 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001b92:	f7ff f84b 	bl	8000c2c <vPortExitCritical>

    return xReturn;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	e01e      	b.n	8001bee <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8001bb0:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <vQueueAddToRegistry+0x5c>)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d115      	bne.n	8001be8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001bbc:	490f      	ldr	r1, [pc, #60]	; (8001bfc <vQueueAddToRegistry+0x5c>)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8001bc6:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <vQueueAddToRegistry+0x5c>)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f002 fdc9 	bl	800476c <SEGGER_SYSVIEW_ShrinkId>
 8001bda:	4601      	mov	r1, r0
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	2071      	movs	r0, #113	; 0x71
 8001be2:	f002 f839 	bl	8003c58 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8001be6:	e005      	b.n	8001bf4 <vQueueAddToRegistry+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	3301      	adds	r3, #1
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b07      	cmp	r3, #7
 8001bf2:	d9dd      	bls.n	8001bb0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001bf4:	bf00      	nop
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20015384 	.word	0x20015384

08001c00 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001c10:	f7fe ffde 	bl	8000bd0 <vPortEnterCritical>
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c1a:	b25b      	sxtb	r3, r3
 8001c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c20:	d103      	bne.n	8001c2a <vQueueWaitForMessageRestricted+0x2a>
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c30:	b25b      	sxtb	r3, r3
 8001c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c36:	d103      	bne.n	8001c40 <vQueueWaitForMessageRestricted+0x40>
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c40:	f7fe fff4 	bl	8000c2c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d106      	bne.n	8001c5a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3324      	adds	r3, #36	; 0x24
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	68b9      	ldr	r1, [r7, #8]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 fc1f 	bl	8002498 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f7ff ff20 	bl	8001aa0 <prvUnlockQueue>
    }
 8001c60:	bf00      	nop
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08c      	sub	sp, #48	; 0x30
 8001c6c:	af04      	add	r7, sp, #16
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	4613      	mov	r3, r2
 8001c76:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff f8cb 	bl	8000e18 <pvPortMalloc>
 8001c82:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00e      	beq.n	8001ca8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001c8a:	2058      	movs	r0, #88	; 0x58
 8001c8c:	f7ff f8c4 	bl	8000e18 <pvPortMalloc>
 8001c90:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c9e:	e005      	b.n	8001cac <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001ca0:	6978      	ldr	r0, [r7, #20]
 8001ca2:	f7ff f981 	bl	8000fa8 <vPortFree>
 8001ca6:	e001      	b.n	8001cac <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d013      	beq.n	8001cda <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001cb2:	88fa      	ldrh	r2, [r7, #6]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	9303      	str	r3, [sp, #12]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	9302      	str	r3, [sp, #8]
 8001cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	68b9      	ldr	r1, [r7, #8]
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 f80e 	bl	8001cea <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001cce:	69f8      	ldr	r0, [r7, #28]
 8001cd0:	f000 f8a0 	bl	8001e14 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	e002      	b.n	8001ce0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001ce0:	69bb      	ldr	r3, [r7, #24]
    }
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3720      	adds	r7, #32
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b088      	sub	sp, #32
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	461a      	mov	r2, r3
 8001d02:	21a5      	movs	r1, #165	; 0xa5
 8001d04:	f003 fa28 	bl	8005158 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d12:	3b01      	subs	r3, #1
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	f023 0307 	bic.w	r3, r3, #7
 8001d20:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d009      	beq.n	8001d40 <prvInitialiseNewTask+0x56>
 8001d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d30:	f383 8811 	msr	BASEPRI, r3
 8001d34:	f3bf 8f6f 	isb	sy
 8001d38:	f3bf 8f4f 	dsb	sy
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	e7fe      	b.n	8001d3e <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d01f      	beq.n	8001d86 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	e012      	b.n	8001d72 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	4413      	add	r3, r2
 8001d52:	7819      	ldrb	r1, [r3, #0]
 8001d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	4413      	add	r3, r2
 8001d5a:	3334      	adds	r3, #52	; 0x34
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	4413      	add	r3, r2
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	2b09      	cmp	r3, #9
 8001d76:	d9e9      	bls.n	8001d4c <prvInitialiseNewTask+0x62>
 8001d78:	e000      	b.n	8001d7c <prvInitialiseNewTask+0x92>
            {
                break;
 8001d7a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001d84:	e003      	b.n	8001d8e <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d901      	bls.n	8001d98 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d94:	2304      	movs	r3, #4
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d9c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001da2:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da6:	2200      	movs	r2, #0
 8001da8:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dac:	3304      	adds	r3, #4
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fd4e 	bl	8000850 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db6:	3318      	adds	r3, #24
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fd49 	bl	8000850 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dc2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc6:	f1c3 0205 	rsb	r2, r3, #5
 8001dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dcc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd6:	3350      	adds	r3, #80	; 0x50
 8001dd8:	2204      	movs	r2, #4
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 f9bb 	bl	8005158 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001de4:	3354      	adds	r3, #84	; 0x54
 8001de6:	2201      	movs	r2, #1
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f003 f9b4 	bl	8005158 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	68f9      	ldr	r1, [r7, #12]
 8001df4:	69b8      	ldr	r0, [r7, #24]
 8001df6:	f7fe fdbf 	bl	8000978 <pxPortInitialiseStack>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfe:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e0a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001e0c:	bf00      	nop
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001e14:	b5b0      	push	{r4, r5, r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001e1c:	f7fe fed8 	bl	8000bd0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001e20:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <prvAddNewTaskToReadyList+0xfc>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	3301      	adds	r3, #1
 8001e26:	4a3a      	ldr	r2, [pc, #232]	; (8001f10 <prvAddNewTaskToReadyList+0xfc>)
 8001e28:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001e2a:	4b3a      	ldr	r3, [pc, #232]	; (8001f14 <prvAddNewTaskToReadyList+0x100>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d109      	bne.n	8001e46 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001e32:	4a38      	ldr	r2, [pc, #224]	; (8001f14 <prvAddNewTaskToReadyList+0x100>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e38:	4b35      	ldr	r3, [pc, #212]	; (8001f10 <prvAddNewTaskToReadyList+0xfc>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d110      	bne.n	8001e62 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001e40:	f000 fc5c 	bl	80026fc <prvInitialiseTaskLists>
 8001e44:	e00d      	b.n	8001e62 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001e46:	4b34      	ldr	r3, [pc, #208]	; (8001f18 <prvAddNewTaskToReadyList+0x104>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001e4e:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <prvAddNewTaskToReadyList+0x100>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d802      	bhi.n	8001e62 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001e5c:	4a2d      	ldr	r2, [pc, #180]	; (8001f14 <prvAddNewTaskToReadyList+0x100>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001e62:	4b2e      	ldr	r3, [pc, #184]	; (8001f1c <prvAddNewTaskToReadyList+0x108>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	3301      	adds	r3, #1
 8001e68:	4a2c      	ldr	r2, [pc, #176]	; (8001f1c <prvAddNewTaskToReadyList+0x108>)
 8001e6a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001e6c:	4b2b      	ldr	r3, [pc, #172]	; (8001f1c <prvAddNewTaskToReadyList+0x108>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d016      	beq.n	8001ea8 <prvAddNewTaskToReadyList+0x94>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f002 fba9 	bl	80045d4 <SEGGER_SYSVIEW_OnTaskCreate>
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	461d      	mov	r5, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	461c      	mov	r4, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	1ae3      	subs	r3, r4, r3
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	462b      	mov	r3, r5
 8001ea4:	f001 f978 	bl	8003198 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 fc1a 	bl	80046e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	409a      	lsls	r2, r3
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <prvAddNewTaskToReadyList+0x10c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	4a18      	ldr	r2, [pc, #96]	; (8001f20 <prvAddNewTaskToReadyList+0x10c>)
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4a15      	ldr	r2, [pc, #84]	; (8001f24 <prvAddNewTaskToReadyList+0x110>)
 8001ed0:	441a      	add	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4610      	mov	r0, r2
 8001eda:	f7fe fcc6 	bl	800086a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001ede:	f7fe fea5 	bl	8000c2c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <prvAddNewTaskToReadyList+0x104>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00e      	beq.n	8001f08 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <prvAddNewTaskToReadyList+0x100>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d207      	bcs.n	8001f08 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <prvAddNewTaskToReadyList+0x114>)
 8001efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	f3bf 8f4f 	dsb	sy
 8001f04:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f10:	20012d44 	.word	0x20012d44
 8001f14:	20012c6c 	.word	0x20012c6c
 8001f18:	20012d50 	.word	0x20012d50
 8001f1c:	20012d60 	.word	0x20012d60
 8001f20:	20012d4c 	.word	0x20012d4c
 8001f24:	20012c70 	.word	0x20012c70
 8001f28:	e000ed04 	.word	0xe000ed04

08001f2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d01a      	beq.n	8001f74 <vTaskDelay+0x48>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <vTaskDelay+0x68>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <vTaskDelay+0x2e>
 8001f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4a:	f383 8811 	msr	BASEPRI, r3
 8001f4e:	f3bf 8f6f 	isb	sy
 8001f52:	f3bf 8f4f 	dsb	sy
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	e7fe      	b.n	8001f58 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8001f5a:	f000 f87f 	bl	800205c <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	2023      	movs	r0, #35	; 0x23
 8001f62:	f001 fe3d 	bl	8003be0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001f66:	2100      	movs	r1, #0
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fcff 	bl	800296c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001f6e:	f000 f883 	bl	8002078 <xTaskResumeAll>
 8001f72:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d107      	bne.n	8001f8a <vTaskDelay+0x5e>
        {
            portYIELD_WITHIN_API();
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <vTaskDelay+0x6c>)
 8001f7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	f3bf 8f4f 	dsb	sy
 8001f86:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20012d6c 	.word	0x20012d6c
 8001f98:	e000ed04 	.word	0xe000ed04

08001f9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001fa2:	4b27      	ldr	r3, [pc, #156]	; (8002040 <vTaskStartScheduler+0xa4>)
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2300      	movs	r3, #0
 8001fac:	2282      	movs	r2, #130	; 0x82
 8001fae:	4925      	ldr	r1, [pc, #148]	; (8002044 <vTaskStartScheduler+0xa8>)
 8001fb0:	4825      	ldr	r0, [pc, #148]	; (8002048 <vTaskStartScheduler+0xac>)
 8001fb2:	f7ff fe59 	bl	8001c68 <xTaskCreate>
 8001fb6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d102      	bne.n	8001fc4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001fbe:	f000 fd3b 	bl	8002a38 <xTimerCreateTimerTask>
 8001fc2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d128      	bne.n	800201c <vTaskStartScheduler+0x80>
 8001fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fce:	f383 8811 	msr	BASEPRI, r3
 8001fd2:	f3bf 8f6f 	isb	sy
 8001fd6:	f3bf 8f4f 	dsb	sy
 8001fda:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <vTaskStartScheduler+0xb0>)
 8001fde:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe2:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <vTaskStartScheduler+0xb4>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <vTaskStartScheduler+0xb8>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <vTaskStartScheduler+0xbc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	3334      	adds	r3, #52	; 0x34
 8001ff6:	2205      	movs	r2, #5
 8001ff8:	4912      	ldr	r1, [pc, #72]	; (8002044 <vTaskStartScheduler+0xa8>)
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f003 f892 	bl	8005124 <memcmp>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d005      	beq.n	8002012 <vTaskStartScheduler+0x76>
 8002006:	4b14      	ldr	r3, [pc, #80]	; (8002058 <vTaskStartScheduler+0xbc>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f002 fb26 	bl	800465c <SEGGER_SYSVIEW_OnTaskStartExec>
 8002010:	e001      	b.n	8002016 <vTaskStartScheduler+0x7a>
 8002012:	f002 fac3 	bl	800459c <SEGGER_SYSVIEW_OnIdle>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002016:	f7fe fd3d 	bl	8000a94 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;
}
 800201a:	e00d      	b.n	8002038 <vTaskStartScheduler+0x9c>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002022:	d109      	bne.n	8002038 <vTaskStartScheduler+0x9c>
 8002024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002028:	f383 8811 	msr	BASEPRI, r3
 800202c:	f3bf 8f6f 	isb	sy
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	e7fe      	b.n	8002036 <vTaskStartScheduler+0x9a>
}
 8002038:	bf00      	nop
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20012d68 	.word	0x20012d68
 8002044:	08005180 	.word	0x08005180
 8002048:	080026cd 	.word	0x080026cd
 800204c:	20012d64 	.word	0x20012d64
 8002050:	20012d50 	.word	0x20012d50
 8002054:	20012d48 	.word	0x20012d48
 8002058:	20012c6c 	.word	0x20012c6c

0800205c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <vTaskSuspendAll+0x18>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	4a03      	ldr	r2, [pc, #12]	; (8002074 <vTaskSuspendAll+0x18>)
 8002068:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	20012d6c 	.word	0x20012d6c

08002078 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002086:	4b43      	ldr	r3, [pc, #268]	; (8002194 <xTaskResumeAll+0x11c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <xTaskResumeAll+0x2a>
 800208e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002092:	f383 8811 	msr	BASEPRI, r3
 8002096:	f3bf 8f6f 	isb	sy
 800209a:	f3bf 8f4f 	dsb	sy
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	e7fe      	b.n	80020a0 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80020a2:	f7fe fd95 	bl	8000bd0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80020a6:	4b3b      	ldr	r3, [pc, #236]	; (8002194 <xTaskResumeAll+0x11c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	4a39      	ldr	r2, [pc, #228]	; (8002194 <xTaskResumeAll+0x11c>)
 80020ae:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020b0:	4b38      	ldr	r3, [pc, #224]	; (8002194 <xTaskResumeAll+0x11c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d165      	bne.n	8002184 <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80020b8:	4b37      	ldr	r3, [pc, #220]	; (8002198 <xTaskResumeAll+0x120>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d061      	beq.n	8002184 <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020c0:	e032      	b.n	8002128 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020c2:	4b36      	ldr	r3, [pc, #216]	; (800219c <xTaskResumeAll+0x124>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3318      	adds	r3, #24
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fc28 	bl	8000924 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	3304      	adds	r3, #4
 80020d8:	4618      	mov	r0, r3
 80020da:	f7fe fc23 	bl	8000924 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f002 faff 	bl	80046e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	2201      	movs	r2, #1
 80020ec:	409a      	lsls	r2, r3
 80020ee:	4b2c      	ldr	r3, [pc, #176]	; (80021a0 <xTaskResumeAll+0x128>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	4a2a      	ldr	r2, [pc, #168]	; (80021a0 <xTaskResumeAll+0x128>)
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4a27      	ldr	r2, [pc, #156]	; (80021a4 <xTaskResumeAll+0x12c>)
 8002106:	441a      	add	r2, r3
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3304      	adds	r3, #4
 800210c:	4619      	mov	r1, r3
 800210e:	4610      	mov	r0, r2
 8002110:	f7fe fbab 	bl	800086a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002118:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <xTaskResumeAll+0x130>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	429a      	cmp	r2, r3
 8002120:	d302      	bcc.n	8002128 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 8002122:	4b22      	ldr	r3, [pc, #136]	; (80021ac <xTaskResumeAll+0x134>)
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002128:	4b1c      	ldr	r3, [pc, #112]	; (800219c <xTaskResumeAll+0x124>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1c8      	bne.n	80020c2 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002136:	f000 fb5d 	bl	80027f4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800213a:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <xTaskResumeAll+0x138>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d010      	beq.n	8002168 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002146:	f000 f859 	bl	80021fc <xTaskIncrementTick>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 8002150:	4b16      	ldr	r3, [pc, #88]	; (80021ac <xTaskResumeAll+0x134>)
 8002152:	2201      	movs	r2, #1
 8002154:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3b01      	subs	r3, #1
 800215a:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f1      	bne.n	8002146 <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 8002162:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <xTaskResumeAll+0x138>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002168:	4b10      	ldr	r3, [pc, #64]	; (80021ac <xTaskResumeAll+0x134>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d009      	beq.n	8002184 <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002170:	2301      	movs	r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <xTaskResumeAll+0x13c>)
 8002176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	f3bf 8f4f 	dsb	sy
 8002180:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002184:	f7fe fd52 	bl	8000c2c <vPortExitCritical>

    return xAlreadyYielded;
 8002188:	68bb      	ldr	r3, [r7, #8]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20012d6c 	.word	0x20012d6c
 8002198:	20012d44 	.word	0x20012d44
 800219c:	20012d04 	.word	0x20012d04
 80021a0:	20012d4c 	.word	0x20012d4c
 80021a4:	20012c70 	.word	0x20012c70
 80021a8:	20012c6c 	.word	0x20012c6c
 80021ac:	20012d58 	.word	0x20012d58
 80021b0:	20012d54 	.word	0x20012d54
 80021b4:	e000ed04 	.word	0xe000ed04

080021b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <xTaskGetTickCount+0x1c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80021c4:	687b      	ldr	r3, [r7, #4]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20012d48 	.word	0x20012d48

080021d8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80021de:	f7fe fddd 	bl	8000d9c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <xTaskGetTickCountFromISR+0x20>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80021ec:	683b      	ldr	r3, [r7, #0]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20012d48 	.word	0x20012d48

080021fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002206:	4b50      	ldr	r3, [pc, #320]	; (8002348 <xTaskIncrementTick+0x14c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	f040 8091 	bne.w	8002332 <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002210:	4b4e      	ldr	r3, [pc, #312]	; (800234c <xTaskIncrementTick+0x150>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	3301      	adds	r3, #1
 8002216:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002218:	4a4c      	ldr	r2, [pc, #304]	; (800234c <xTaskIncrementTick+0x150>)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d11f      	bne.n	8002264 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002224:	4b4a      	ldr	r3, [pc, #296]	; (8002350 <xTaskIncrementTick+0x154>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <xTaskIncrementTick+0x46>
 800222e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002232:	f383 8811 	msr	BASEPRI, r3
 8002236:	f3bf 8f6f 	isb	sy
 800223a:	f3bf 8f4f 	dsb	sy
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	e7fe      	b.n	8002240 <xTaskIncrementTick+0x44>
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <xTaskIncrementTick+0x154>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	4b42      	ldr	r3, [pc, #264]	; (8002354 <xTaskIncrementTick+0x158>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a40      	ldr	r2, [pc, #256]	; (8002350 <xTaskIncrementTick+0x154>)
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4a40      	ldr	r2, [pc, #256]	; (8002354 <xTaskIncrementTick+0x158>)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b40      	ldr	r3, [pc, #256]	; (8002358 <xTaskIncrementTick+0x15c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	3301      	adds	r3, #1
 800225c:	4a3e      	ldr	r2, [pc, #248]	; (8002358 <xTaskIncrementTick+0x15c>)
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	f000 fac8 	bl	80027f4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002264:	4b3d      	ldr	r3, [pc, #244]	; (800235c <xTaskIncrementTick+0x160>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	429a      	cmp	r2, r3
 800226c:	d34c      	bcc.n	8002308 <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800226e:	4b38      	ldr	r3, [pc, #224]	; (8002350 <xTaskIncrementTick+0x154>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d104      	bne.n	8002282 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002278:	4b38      	ldr	r3, [pc, #224]	; (800235c <xTaskIncrementTick+0x160>)
 800227a:	f04f 32ff 	mov.w	r2, #4294967295
 800227e:	601a      	str	r2, [r3, #0]
                    break;
 8002280:	e042      	b.n	8002308 <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002282:	4b33      	ldr	r3, [pc, #204]	; (8002350 <xTaskIncrementTick+0x154>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	429a      	cmp	r2, r3
 8002298:	d203      	bcs.n	80022a2 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800229a:	4a30      	ldr	r2, [pc, #192]	; (800235c <xTaskIncrementTick+0x160>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80022a0:	e032      	b.n	8002308 <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	3304      	adds	r3, #4
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe fb3c 	bl	8000924 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d004      	beq.n	80022be <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	3318      	adds	r3, #24
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe fb33 	bl	8000924 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f002 fa0f 	bl	80046e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	2201      	movs	r2, #1
 80022cc:	409a      	lsls	r2, r3
 80022ce:	4b24      	ldr	r3, [pc, #144]	; (8002360 <xTaskIncrementTick+0x164>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	4a22      	ldr	r2, [pc, #136]	; (8002360 <xTaskIncrementTick+0x164>)
 80022d6:	6013      	str	r3, [r2, #0]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4a1f      	ldr	r2, [pc, #124]	; (8002364 <xTaskIncrementTick+0x168>)
 80022e6:	441a      	add	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	3304      	adds	r3, #4
 80022ec:	4619      	mov	r1, r3
 80022ee:	4610      	mov	r0, r2
 80022f0:	f7fe fabb 	bl	800086a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f8:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <xTaskIncrementTick+0x16c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fe:	429a      	cmp	r2, r3
 8002300:	d3b5      	bcc.n	800226e <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8002302:	2301      	movs	r3, #1
 8002304:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002306:	e7b2      	b.n	800226e <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002308:	4b17      	ldr	r3, [pc, #92]	; (8002368 <xTaskIncrementTick+0x16c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230e:	4915      	ldr	r1, [pc, #84]	; (8002364 <xTaskIncrementTick+0x168>)
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d901      	bls.n	8002324 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8002320:	2301      	movs	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <xTaskIncrementTick+0x170>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d007      	beq.n	800233c <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 800232c:	2301      	movs	r3, #1
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	e004      	b.n	800233c <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <xTaskIncrementTick+0x174>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	3301      	adds	r3, #1
 8002338:	4a0d      	ldr	r2, [pc, #52]	; (8002370 <xTaskIncrementTick+0x174>)
 800233a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800233c:	697b      	ldr	r3, [r7, #20]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3718      	adds	r7, #24
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20012d6c 	.word	0x20012d6c
 800234c:	20012d48 	.word	0x20012d48
 8002350:	20012cfc 	.word	0x20012cfc
 8002354:	20012d00 	.word	0x20012d00
 8002358:	20012d5c 	.word	0x20012d5c
 800235c:	20012d64 	.word	0x20012d64
 8002360:	20012d4c 	.word	0x20012d4c
 8002364:	20012c70 	.word	0x20012c70
 8002368:	20012c6c 	.word	0x20012c6c
 800236c:	20012d58 	.word	0x20012d58
 8002370:	20012d54 	.word	0x20012d54

08002374 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800237a:	4b2f      	ldr	r3, [pc, #188]	; (8002438 <vTaskSwitchContext+0xc4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002382:	4b2e      	ldr	r3, [pc, #184]	; (800243c <vTaskSwitchContext+0xc8>)
 8002384:	2201      	movs	r2, #1
 8002386:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002388:	e051      	b.n	800242e <vTaskSwitchContext+0xba>
        xYieldPending = pdFALSE;
 800238a:	4b2c      	ldr	r3, [pc, #176]	; (800243c <vTaskSwitchContext+0xc8>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002390:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <vTaskSwitchContext+0xcc>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800239e:	7afb      	ldrb	r3, [r7, #11]
 80023a0:	f1c3 031f 	rsb	r3, r3, #31
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	4927      	ldr	r1, [pc, #156]	; (8002444 <vTaskSwitchContext+0xd0>)
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <vTaskSwitchContext+0x5a>
        __asm volatile
 80023ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023be:	f383 8811 	msr	BASEPRI, r3
 80023c2:	f3bf 8f6f 	isb	sy
 80023c6:	f3bf 8f4f 	dsb	sy
 80023ca:	607b      	str	r3, [r7, #4]
 80023cc:	e7fe      	b.n	80023cc <vTaskSwitchContext+0x58>
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4a1a      	ldr	r2, [pc, #104]	; (8002444 <vTaskSwitchContext+0xd0>)
 80023da:	4413      	add	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	3308      	adds	r3, #8
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d104      	bne.n	80023fe <vTaskSwitchContext+0x8a>
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4a10      	ldr	r2, [pc, #64]	; (8002448 <vTaskSwitchContext+0xd4>)
 8002406:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <vTaskSwitchContext+0xd4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	3334      	adds	r3, #52	; 0x34
 800240e:	2205      	movs	r2, #5
 8002410:	490e      	ldr	r1, [pc, #56]	; (800244c <vTaskSwitchContext+0xd8>)
 8002412:	4618      	mov	r0, r3
 8002414:	f002 fe86 	bl	8005124 <memcmp>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <vTaskSwitchContext+0xb6>
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <vTaskSwitchContext+0xd4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f002 f91a 	bl	800465c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002428:	e001      	b.n	800242e <vTaskSwitchContext+0xba>
        traceTASK_SWITCHED_IN();
 800242a:	f002 f8b7 	bl	800459c <SEGGER_SYSVIEW_OnIdle>
}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20012d6c 	.word	0x20012d6c
 800243c:	20012d58 	.word	0x20012d58
 8002440:	20012d4c 	.word	0x20012d4c
 8002444:	20012c70 	.word	0x20012c70
 8002448:	20012c6c 	.word	0x20012c6c
 800244c:	08005180 	.word	0x08005180

08002450 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d109      	bne.n	8002474 <vTaskPlaceOnEventList+0x24>
 8002460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	e7fe      	b.n	8002472 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002474:	4b07      	ldr	r3, [pc, #28]	; (8002494 <vTaskPlaceOnEventList+0x44>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3318      	adds	r3, #24
 800247a:	4619      	mov	r1, r3
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7fe fa18 	bl	80008b2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002482:	2101      	movs	r1, #1
 8002484:	6838      	ldr	r0, [r7, #0]
 8002486:	f000 fa71 	bl	800296c <prvAddCurrentTaskToDelayedList>
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20012c6c 	.word	0x20012c6c

08002498 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <vTaskPlaceOnEventListRestricted+0x26>
 80024aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ae:	f383 8811 	msr	BASEPRI, r3
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	e7fe      	b.n	80024bc <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80024be:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <vTaskPlaceOnEventListRestricted+0x58>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3318      	adds	r3, #24
 80024c4:	4619      	mov	r1, r3
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f7fe f9cf 	bl	800086a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80024d8:	2024      	movs	r0, #36	; 0x24
 80024da:	f001 fb63 	bl	8003ba4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80024de:	6879      	ldr	r1, [r7, #4]
 80024e0:	68b8      	ldr	r0, [r7, #8]
 80024e2:	f000 fa43 	bl	800296c <prvAddCurrentTaskToDelayedList>
    }
 80024e6:	bf00      	nop
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20012c6c 	.word	0x20012c6c

080024f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d109      	bne.n	800251e <xTaskRemoveFromEventList+0x2a>
 800250a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250e:	f383 8811 	msr	BASEPRI, r3
 8002512:	f3bf 8f6f 	isb	sy
 8002516:	f3bf 8f4f 	dsb	sy
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	e7fe      	b.n	800251c <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	3318      	adds	r3, #24
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe f9fe 	bl	8000924 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002528:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <xTaskRemoveFromEventList+0xb4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d120      	bne.n	8002572 <xTaskRemoveFromEventList+0x7e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	3304      	adds	r3, #4
 8002534:	4618      	mov	r0, r3
 8002536:	f7fe f9f5 	bl	8000924 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4618      	mov	r0, r3
 800253e:	f002 f8d1 	bl	80046e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	2201      	movs	r2, #1
 8002548:	409a      	lsls	r2, r3
 800254a:	4b18      	ldr	r3, [pc, #96]	; (80025ac <xTaskRemoveFromEventList+0xb8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4313      	orrs	r3, r2
 8002550:	4a16      	ldr	r2, [pc, #88]	; (80025ac <xTaskRemoveFromEventList+0xb8>)
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4a13      	ldr	r2, [pc, #76]	; (80025b0 <xTaskRemoveFromEventList+0xbc>)
 8002562:	441a      	add	r2, r3
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	3304      	adds	r3, #4
 8002568:	4619      	mov	r1, r3
 800256a:	4610      	mov	r0, r2
 800256c:	f7fe f97d 	bl	800086a <vListInsertEnd>
 8002570:	e005      	b.n	800257e <xTaskRemoveFromEventList+0x8a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	3318      	adds	r3, #24
 8002576:	4619      	mov	r1, r3
 8002578:	480e      	ldr	r0, [pc, #56]	; (80025b4 <xTaskRemoveFromEventList+0xc0>)
 800257a:	f7fe f976 	bl	800086a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <xTaskRemoveFromEventList+0xc4>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	429a      	cmp	r2, r3
 800258a:	d905      	bls.n	8002598 <xTaskRemoveFromEventList+0xa4>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800258c:	2301      	movs	r3, #1
 800258e:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002590:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <xTaskRemoveFromEventList+0xc8>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e001      	b.n	800259c <xTaskRemoveFromEventList+0xa8>
    }
    else
    {
        xReturn = pdFALSE;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800259c:	697b      	ldr	r3, [r7, #20]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20012d6c 	.word	0x20012d6c
 80025ac:	20012d4c 	.word	0x20012d4c
 80025b0:	20012c70 	.word	0x20012c70
 80025b4:	20012d04 	.word	0x20012d04
 80025b8:	20012c6c 	.word	0x20012c6c
 80025bc:	20012d58 	.word	0x20012d58

080025c0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <vTaskInternalSetTimeOutState+0x24>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <vTaskInternalSetTimeOutState+0x28>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	605a      	str	r2, [r3, #4]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	20012d5c 	.word	0x20012d5c
 80025e8:	20012d48 	.word	0x20012d48

080025ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d109      	bne.n	8002610 <xTaskCheckForTimeOut+0x24>
 80025fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002600:	f383 8811 	msr	BASEPRI, r3
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	e7fe      	b.n	800260e <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <xTaskCheckForTimeOut+0x3e>
 8002616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261a:	f383 8811 	msr	BASEPRI, r3
 800261e:	f3bf 8f6f 	isb	sy
 8002622:	f3bf 8f4f 	dsb	sy
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	e7fe      	b.n	8002628 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 800262a:	f7fe fad1 	bl	8000bd0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800262e:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <xTaskCheckForTimeOut+0xc0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002646:	d102      	bne.n	800264e <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	e026      	b.n	800269c <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <xTaskCheckForTimeOut+0xc4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	429a      	cmp	r2, r3
 8002658:	d00a      	beq.n	8002670 <xTaskCheckForTimeOut+0x84>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	429a      	cmp	r2, r3
 8002662:	d805      	bhi.n	8002670 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002664:	2301      	movs	r3, #1
 8002666:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	e015      	b.n	800269c <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	429a      	cmp	r2, r3
 8002678:	d90b      	bls.n	8002692 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	1ad2      	subs	r2, r2, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ff9a 	bl	80025c0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800268c:	2300      	movs	r3, #0
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	e004      	b.n	800269c <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002698:	2301      	movs	r3, #1
 800269a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800269c:	f7fe fac6 	bl	8000c2c <vPortExitCritical>

    return xReturn;
 80026a0:	69fb      	ldr	r3, [r7, #28]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3720      	adds	r7, #32
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20012d48 	.word	0x20012d48
 80026b0:	20012d5c 	.word	0x20012d5c

080026b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <vTaskMissedYield+0x14>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
}
 80026be:	bf00      	nop
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	20012d58 	.word	0x20012d58

080026cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80026d4:	f000 f852 	bl	800277c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <prvIdleTask+0x28>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d9f9      	bls.n	80026d4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <prvIdleTask+0x2c>)
 80026e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80026f0:	e7f0      	b.n	80026d4 <prvIdleTask+0x8>
 80026f2:	bf00      	nop
 80026f4:	20012c70 	.word	0x20012c70
 80026f8:	e000ed04 	.word	0xe000ed04

080026fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	e00c      	b.n	8002722 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4a12      	ldr	r2, [pc, #72]	; (800275c <prvInitialiseTaskLists+0x60>)
 8002714:	4413      	add	r3, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe f87a 	bl	8000810 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3301      	adds	r3, #1
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b04      	cmp	r3, #4
 8002726:	d9ef      	bls.n	8002708 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002728:	480d      	ldr	r0, [pc, #52]	; (8002760 <prvInitialiseTaskLists+0x64>)
 800272a:	f7fe f871 	bl	8000810 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800272e:	480d      	ldr	r0, [pc, #52]	; (8002764 <prvInitialiseTaskLists+0x68>)
 8002730:	f7fe f86e 	bl	8000810 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002734:	480c      	ldr	r0, [pc, #48]	; (8002768 <prvInitialiseTaskLists+0x6c>)
 8002736:	f7fe f86b 	bl	8000810 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800273a:	480c      	ldr	r0, [pc, #48]	; (800276c <prvInitialiseTaskLists+0x70>)
 800273c:	f7fe f868 	bl	8000810 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002740:	480b      	ldr	r0, [pc, #44]	; (8002770 <prvInitialiseTaskLists+0x74>)
 8002742:	f7fe f865 	bl	8000810 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002746:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <prvInitialiseTaskLists+0x78>)
 8002748:	4a05      	ldr	r2, [pc, #20]	; (8002760 <prvInitialiseTaskLists+0x64>)
 800274a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800274c:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <prvInitialiseTaskLists+0x7c>)
 800274e:	4a05      	ldr	r2, [pc, #20]	; (8002764 <prvInitialiseTaskLists+0x68>)
 8002750:	601a      	str	r2, [r3, #0]
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20012c70 	.word	0x20012c70
 8002760:	20012cd4 	.word	0x20012cd4
 8002764:	20012ce8 	.word	0x20012ce8
 8002768:	20012d04 	.word	0x20012d04
 800276c:	20012d18 	.word	0x20012d18
 8002770:	20012d30 	.word	0x20012d30
 8002774:	20012cfc 	.word	0x20012cfc
 8002778:	20012d00 	.word	0x20012d00

0800277c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002782:	e019      	b.n	80027b8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002784:	f7fe fa24 	bl	8000bd0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002788:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <prvCheckTasksWaitingTermination+0x4c>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3304      	adds	r3, #4
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe f8c5 	bl	8000924 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800279a:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <prvCheckTasksWaitingTermination+0x50>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3b01      	subs	r3, #1
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <prvCheckTasksWaitingTermination+0x50>)
 80027a2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80027a4:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <prvCheckTasksWaitingTermination+0x54>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <prvCheckTasksWaitingTermination+0x54>)
 80027ac:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80027ae:	f7fe fa3d 	bl	8000c2c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f80e 	bl	80027d4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <prvCheckTasksWaitingTermination+0x54>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1e1      	bne.n	8002784 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20012d18 	.word	0x20012d18
 80027cc:	20012d44 	.word	0x20012d44
 80027d0:	20012d2c 	.word	0x20012d2c

080027d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fe fbe1 	bl	8000fa8 <vPortFree>
                vPortFree( pxTCB );
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7fe fbde 	bl	8000fa8 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80027ec:	bf00      	nop
 80027ee:	3708      	adds	r7, #8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <prvResetNextTaskUnblockTime+0x30>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d104      	bne.n	800280c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <prvResetNextTaskUnblockTime+0x34>)
 8002804:	f04f 32ff 	mov.w	r2, #4294967295
 8002808:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800280a:	e005      	b.n	8002818 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <prvResetNextTaskUnblockTime+0x30>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a04      	ldr	r2, [pc, #16]	; (8002828 <prvResetNextTaskUnblockTime+0x34>)
 8002816:	6013      	str	r3, [r2, #0]
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	20012cfc 	.word	0x20012cfc
 8002828:	20012d64 	.word	0x20012d64

0800282c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <xTaskGetSchedulerState+0x34>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d102      	bne.n	8002840 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800283a:	2301      	movs	r3, #1
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	e008      	b.n	8002852 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <xTaskGetSchedulerState+0x38>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d102      	bne.n	800284e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002848:	2302      	movs	r3, #2
 800284a:	607b      	str	r3, [r7, #4]
 800284c:	e001      	b.n	8002852 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002852:	687b      	ldr	r3, [r7, #4]
    }
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	20012d50 	.word	0x20012d50
 8002864:	20012d6c 	.word	0x20012d6c

08002868 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d06a      	beq.n	8002954 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800287e:	4b38      	ldr	r3, [pc, #224]	; (8002960 <xTaskPriorityDisinherit+0xf8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	429a      	cmp	r2, r3
 8002886:	d009      	beq.n	800289c <xTaskPriorityDisinherit+0x34>
 8002888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288c:	f383 8811 	msr	BASEPRI, r3
 8002890:	f3bf 8f6f 	isb	sy
 8002894:	f3bf 8f4f 	dsb	sy
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	e7fe      	b.n	800289a <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d109      	bne.n	80028b8 <xTaskPriorityDisinherit+0x50>
 80028a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	e7fe      	b.n	80028b6 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028bc:	1e5a      	subs	r2, r3, #1
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d042      	beq.n	8002954 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d13e      	bne.n	8002954 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	3304      	adds	r3, #4
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe f822 	bl	8000924 <uxListRemove>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10a      	bne.n	80028fc <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ea:	2201      	movs	r2, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43da      	mvns	r2, r3
 80028f2:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <xTaskPriorityDisinherit+0xfc>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4013      	ands	r3, r2
 80028f8:	4a1a      	ldr	r2, [pc, #104]	; (8002964 <xTaskPriorityDisinherit+0xfc>)
 80028fa:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4619      	mov	r1, r3
 8002900:	204a      	movs	r0, #74	; 0x4a
 8002902:	f001 f96d 	bl	8003be0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	f1c3 0205 	rsb	r2, r3, #5
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4618      	mov	r0, r3
 800291e:	f001 fee1 	bl	80046e4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	2201      	movs	r2, #1
 8002928:	409a      	lsls	r2, r3
 800292a:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <xTaskPriorityDisinherit+0xfc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4313      	orrs	r3, r2
 8002930:	4a0c      	ldr	r2, [pc, #48]	; (8002964 <xTaskPriorityDisinherit+0xfc>)
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4a09      	ldr	r2, [pc, #36]	; (8002968 <xTaskPriorityDisinherit+0x100>)
 8002942:	441a      	add	r2, r3
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	3304      	adds	r3, #4
 8002948:	4619      	mov	r1, r3
 800294a:	4610      	mov	r0, r2
 800294c:	f7fd ff8d 	bl	800086a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002950:	2301      	movs	r3, #1
 8002952:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002954:	697b      	ldr	r3, [r7, #20]
    }
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20012c6c 	.word	0x20012c6c
 8002964:	20012d4c 	.word	0x20012d4c
 8002968:	20012c70 	.word	0x20012c70

0800296c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002976:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800297c:	4b28      	ldr	r3, [pc, #160]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	3304      	adds	r3, #4
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd ffce 	bl	8000924 <uxListRemove>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10b      	bne.n	80029a6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	2201      	movs	r2, #1
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43da      	mvns	r2, r3
 800299c:	4b21      	ldr	r3, [pc, #132]	; (8002a24 <prvAddCurrentTaskToDelayedList+0xb8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4013      	ands	r3, r2
 80029a2:	4a20      	ldr	r2, [pc, #128]	; (8002a24 <prvAddCurrentTaskToDelayedList+0xb8>)
 80029a4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d10a      	bne.n	80029c4 <prvAddCurrentTaskToDelayedList+0x58>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d007      	beq.n	80029c4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029b4:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3304      	adds	r3, #4
 80029ba:	4619      	mov	r1, r3
 80029bc:	481a      	ldr	r0, [pc, #104]	; (8002a28 <prvAddCurrentTaskToDelayedList+0xbc>)
 80029be:	f7fd ff54 	bl	800086a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80029c2:	e026      	b.n	8002a12 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80029cc:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d209      	bcs.n	80029f0 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029dc:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <prvAddCurrentTaskToDelayedList+0xc0>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3304      	adds	r3, #4
 80029e6:	4619      	mov	r1, r3
 80029e8:	4610      	mov	r0, r2
 80029ea:	f7fd ff62 	bl	80008b2 <vListInsert>
}
 80029ee:	e010      	b.n	8002a12 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <prvAddCurrentTaskToDelayedList+0xc4>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <prvAddCurrentTaskToDelayedList+0xb4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3304      	adds	r3, #4
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f7fd ff58 	bl	80008b2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002a02:	4b0c      	ldr	r3, [pc, #48]	; (8002a34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d202      	bcs.n	8002a12 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8002a0c:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	6013      	str	r3, [r2, #0]
}
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20012d48 	.word	0x20012d48
 8002a20:	20012c6c 	.word	0x20012c6c
 8002a24:	20012d4c 	.word	0x20012d4c
 8002a28:	20012d30 	.word	0x20012d30
 8002a2c:	20012d00 	.word	0x20012d00
 8002a30:	20012cfc 	.word	0x20012cfc
 8002a34:	20012d64 	.word	0x20012d64

08002a38 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002a42:	f000 fad1 	bl	8002fe8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002a46:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <xTimerCreateTimerTask+0x54>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00b      	beq.n	8002a66 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002a4e:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <xTimerCreateTimerTask+0x58>)
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	2302      	movs	r3, #2
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	2300      	movs	r3, #0
 8002a58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a5c:	490d      	ldr	r1, [pc, #52]	; (8002a94 <xTimerCreateTimerTask+0x5c>)
 8002a5e:	480e      	ldr	r0, [pc, #56]	; (8002a98 <xTimerCreateTimerTask+0x60>)
 8002a60:	f7ff f902 	bl	8001c68 <xTaskCreate>
 8002a64:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d109      	bne.n	8002a80 <xTimerCreateTimerTask+0x48>
 8002a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a70:	f383 8811 	msr	BASEPRI, r3
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	603b      	str	r3, [r7, #0]
 8002a7e:	e7fe      	b.n	8002a7e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8002a80:	687b      	ldr	r3, [r7, #4]
    }
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20012da0 	.word	0x20012da0
 8002a90:	20012da4 	.word	0x20012da4
 8002a94:	08005188 	.word	0x08005188
 8002a98:	08002bcd 	.word	0x08002bcd

08002a9c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	; 0x28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d109      	bne.n	8002ac8 <xTimerGenericCommand+0x2c>
 8002ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	623b      	str	r3, [r7, #32]
 8002ac6:	e7fe      	b.n	8002ac6 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <xTimerGenericCommand+0x94>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d02a      	beq.n	8002b26 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b05      	cmp	r3, #5
 8002ae0:	dc18      	bgt.n	8002b14 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002ae2:	f7ff fea3 	bl	800282c <xTaskGetSchedulerState>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d109      	bne.n	8002b00 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002aec:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <xTimerGenericCommand+0x94>)
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	f107 0114 	add.w	r1, r7, #20
 8002af4:	2300      	movs	r3, #0
 8002af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002af8:	f7fe fc52 	bl	80013a0 <xQueueGenericSend>
 8002afc:	6278      	str	r0, [r7, #36]	; 0x24
 8002afe:	e012      	b.n	8002b26 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <xTimerGenericCommand+0x94>)
 8002b02:	6818      	ldr	r0, [r3, #0]
 8002b04:	f107 0114 	add.w	r1, r7, #20
 8002b08:	2300      	movs	r3, #0
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f7fe fc48 	bl	80013a0 <xQueueGenericSend>
 8002b10:	6278      	str	r0, [r7, #36]	; 0x24
 8002b12:	e008      	b.n	8002b26 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <xTimerGenericCommand+0x94>)
 8002b16:	6818      	ldr	r0, [r3, #0]
 8002b18:	f107 0114 	add.w	r1, r7, #20
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	f7fe fd60 	bl	80015e4 <xQueueGenericSendFromISR>
 8002b24:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3728      	adds	r7, #40	; 0x28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20012da0 	.word	0x20012da0

08002b34 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b3e:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <prvProcessExpiredTimer+0x94>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fd fee9 	bl	8000924 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d021      	beq.n	8002ba4 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	699a      	ldr	r2, [r3, #24]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	18d1      	adds	r1, r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	6978      	ldr	r0, [r7, #20]
 8002b6e:	f000 f8d1 	bl	8002d14 <prvInsertTimerInActiveList>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01e      	beq.n	8002bb6 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	2100      	movs	r1, #0
 8002b82:	6978      	ldr	r0, [r7, #20]
 8002b84:	f7ff ff8a 	bl	8002a9c <xTimerGenericCommand>
 8002b88:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d112      	bne.n	8002bb6 <prvProcessExpiredTimer+0x82>
 8002b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	e7fe      	b.n	8002ba2 <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	6978      	ldr	r0, [r7, #20]
 8002bbc:	4798      	blx	r3
    }
 8002bbe:	bf00      	nop
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20012d98 	.word	0x20012d98

08002bcc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002bd4:	f107 0308 	add.w	r3, r7, #8
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 f857 	bl	8002c8c <prvGetNextExpireTime>
 8002bde:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4619      	mov	r1, r3
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 f803 	bl	8002bf0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002bea:	f000 f8d5 	bl	8002d98 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002bee:	e7f1      	b.n	8002bd4 <prvTimerTask+0x8>

08002bf0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002bfa:	f7ff fa2f 	bl	800205c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002bfe:	f107 0308 	add.w	r3, r7, #8
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 f866 	bl	8002cd4 <prvSampleTimeNow>
 8002c08:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d130      	bne.n	8002c72 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10a      	bne.n	8002c2c <prvProcessTimerOrBlockTask+0x3c>
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d806      	bhi.n	8002c2c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002c1e:	f7ff fa2b 	bl	8002078 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002c22:	68f9      	ldr	r1, [r7, #12]
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff85 	bl	8002b34 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002c2a:	e024      	b.n	8002c76 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d008      	beq.n	8002c44 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002c32:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <prvProcessTimerOrBlockTask+0x90>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <prvProcessTimerOrBlockTask+0x50>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <prvProcessTimerOrBlockTask+0x52>
 8002c40:	2300      	movs	r3, #0
 8002c42:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002c44:	4b0f      	ldr	r3, [pc, #60]	; (8002c84 <prvProcessTimerOrBlockTask+0x94>)
 8002c46:	6818      	ldr	r0, [r3, #0]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	4619      	mov	r1, r3
 8002c52:	f7fe ffd5 	bl	8001c00 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8002c56:	f7ff fa0f 	bl	8002078 <xTaskResumeAll>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <prvProcessTimerOrBlockTask+0x98>)
 8002c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	f3bf 8f6f 	isb	sy
    }
 8002c70:	e001      	b.n	8002c76 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8002c72:	f7ff fa01 	bl	8002078 <xTaskResumeAll>
    }
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20012d9c 	.word	0x20012d9c
 8002c84:	20012da0 	.word	0x20012da0
 8002c88:	e000ed04 	.word	0xe000ed04

08002c8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002c94:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <prvGetNextExpireTime+0x44>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <prvGetNextExpireTime+0x16>
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	e000      	b.n	8002ca4 <prvGetNextExpireTime+0x18>
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d105      	bne.n	8002cbc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002cb0:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <prvGetNextExpireTime+0x44>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	e001      	b.n	8002cc0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
    }
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20012d98 	.word	0x20012d98

08002cd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8002cdc:	f7ff fa6c 	bl	80021b8 <xTaskGetTickCount>
 8002ce0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <prvSampleTimeNow+0x3c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d205      	bcs.n	8002cf8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002cec:	f000 f918 	bl	8002f20 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	e002      	b.n	8002cfe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002cfe:	4a04      	ldr	r2, [pc, #16]	; (8002d10 <prvSampleTimeNow+0x3c>)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002d04:	68fb      	ldr	r3, [r7, #12]
    }
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	20012da8 	.word	0x20012da8

08002d14 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d812      	bhi.n	8002d60 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	1ad2      	subs	r2, r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d302      	bcc.n	8002d4e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	e01b      	b.n	8002d86 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002d4e:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <prvInsertTimerInActiveList+0x7c>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	3304      	adds	r3, #4
 8002d56:	4619      	mov	r1, r3
 8002d58:	4610      	mov	r0, r2
 8002d5a:	f7fd fdaa 	bl	80008b2 <vListInsert>
 8002d5e:	e012      	b.n	8002d86 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d206      	bcs.n	8002d76 <prvInsertTimerInActiveList+0x62>
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d302      	bcc.n	8002d76 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002d70:	2301      	movs	r3, #1
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	e007      	b.n	8002d86 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002d76:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <prvInsertTimerInActiveList+0x80>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4610      	mov	r0, r2
 8002d82:	f7fd fd96 	bl	80008b2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002d86:	697b      	ldr	r3, [r7, #20]
    }
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20012d9c 	.word	0x20012d9c
 8002d94:	20012d98 	.word	0x20012d98

08002d98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08c      	sub	sp, #48	; 0x30
 8002d9c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002d9e:	e0ac      	b.n	8002efa <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f2c0 80a9 	blt.w	8002efa <prvProcessReceivedCommands+0x162>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d004      	beq.n	8002dbe <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	3304      	adds	r3, #4
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fd fdb3 	bl	8000924 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002dbe:	1d3b      	adds	r3, r7, #4
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ff87 	bl	8002cd4 <prvSampleTimeNow>
 8002dc6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b09      	cmp	r3, #9
 8002dcc:	f200 8094 	bhi.w	8002ef8 <prvProcessReceivedCommands+0x160>
 8002dd0:	a201      	add	r2, pc, #4	; (adr r2, 8002dd8 <prvProcessReceivedCommands+0x40>)
 8002dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd6:	bf00      	nop
 8002dd8:	08002e01 	.word	0x08002e01
 8002ddc:	08002e01 	.word	0x08002e01
 8002de0:	08002e01 	.word	0x08002e01
 8002de4:	08002e73 	.word	0x08002e73
 8002de8:	08002e87 	.word	0x08002e87
 8002dec:	08002ecf 	.word	0x08002ecf
 8002df0:	08002e01 	.word	0x08002e01
 8002df4:	08002e01 	.word	0x08002e01
 8002df8:	08002e73 	.word	0x08002e73
 8002dfc:	08002e87 	.word	0x08002e87
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e06:	f043 0301 	orr.w	r3, r3, #1
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	18d1      	adds	r1, r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a3a      	ldr	r2, [r7, #32]
 8002e1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e20:	f7ff ff78 	bl	8002d14 <prvInsertTimerInActiveList>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d067      	beq.n	8002efa <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e30:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d05c      	beq.n	8002efa <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	441a      	add	r2, r3
 8002e48:	2300      	movs	r3, #0
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	2100      	movs	r1, #0
 8002e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e52:	f7ff fe23 	bl	8002a9c <xTimerGenericCommand>
 8002e56:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d14d      	bne.n	8002efa <prvProcessReceivedCommands+0x162>
 8002e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e62:	f383 8811 	msr	BASEPRI, r3
 8002e66:	f3bf 8f6f 	isb	sy
 8002e6a:	f3bf 8f4f 	dsb	sy
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	e7fe      	b.n	8002e70 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	b2da      	uxtb	r2, r3
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002e84:	e039      	b.n	8002efa <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d109      	bne.n	8002eba <prvProcessReceivedCommands+0x122>
 8002ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	e7fe      	b.n	8002eb8 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	18d1      	adds	r1, r2, r3
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	6a3a      	ldr	r2, [r7, #32]
 8002ec6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ec8:	f7ff ff24 	bl	8002d14 <prvInsertTimerInActiveList>
                        break;
 8002ecc:	e015      	b.n	8002efa <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d103      	bne.n	8002ee4 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8002edc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ede:	f7fe f863 	bl	8000fa8 <vPortFree>
 8002ee2:	e00a      	b.n	8002efa <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002eea:	f023 0301 	bic.w	r3, r3, #1
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002ef6:	e000      	b.n	8002efa <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002ef8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002efa:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <prvProcessReceivedCommands+0x184>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f107 0108 	add.w	r1, r7, #8
 8002f02:	2200      	movs	r2, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fe fc27 	bl	8001758 <xQueueReceive>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f47f af47 	bne.w	8002da0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002f12:	bf00      	nop
 8002f14:	3728      	adds	r7, #40	; 0x28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20012da0 	.word	0x20012da0

08002f20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002f26:	e047      	b.n	8002fb8 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002f28:	4b2d      	ldr	r3, [pc, #180]	; (8002fe0 <prvSwitchTimerLists+0xc0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	617b      	str	r3, [r7, #20]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f32:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <prvSwitchTimerLists+0xc0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	613b      	str	r3, [r7, #16]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	3304      	adds	r3, #4
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd fcef 	bl	8000924 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	6938      	ldr	r0, [r7, #16]
 8002f4c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d02d      	beq.n	8002fb8 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	699a      	ldr	r2, [r3, #24]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	4413      	add	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

                if( xReloadTime > xNextExpireTime )
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d90e      	bls.n	8002f8c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002f7a:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <prvSwitchTimerLists+0xc0>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	3304      	adds	r3, #4
 8002f82:	4619      	mov	r1, r3
 8002f84:	4610      	mov	r0, r2
 8002f86:	f7fd fc94 	bl	80008b2 <vListInsert>
 8002f8a:	e015      	b.n	8002fb8 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	2300      	movs	r3, #0
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	2100      	movs	r1, #0
 8002f96:	6938      	ldr	r0, [r7, #16]
 8002f98:	f7ff fd80 	bl	8002a9c <xTimerGenericCommand>
 8002f9c:	60b8      	str	r0, [r7, #8]
                    configASSERT( xResult );
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d109      	bne.n	8002fb8 <prvSwitchTimerLists+0x98>
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	e7fe      	b.n	8002fb6 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002fb8:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <prvSwitchTimerLists+0xc0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1b2      	bne.n	8002f28 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002fc2:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <prvSwitchTimerLists+0xc0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <prvSwitchTimerLists+0xc4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a04      	ldr	r2, [pc, #16]	; (8002fe0 <prvSwitchTimerLists+0xc0>)
 8002fce:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002fd0:	4a04      	ldr	r2, [pc, #16]	; (8002fe4 <prvSwitchTimerLists+0xc4>)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6013      	str	r3, [r2, #0]
    }
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20012d98 	.word	0x20012d98
 8002fe4:	20012d9c 	.word	0x20012d9c

08002fe8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002fec:	f7fd fdf0 	bl	8000bd0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002ff0:	4b12      	ldr	r3, [pc, #72]	; (800303c <prvCheckForValidListAndQueue+0x54>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d11d      	bne.n	8003034 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002ff8:	4811      	ldr	r0, [pc, #68]	; (8003040 <prvCheckForValidListAndQueue+0x58>)
 8002ffa:	f7fd fc09 	bl	8000810 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002ffe:	4811      	ldr	r0, [pc, #68]	; (8003044 <prvCheckForValidListAndQueue+0x5c>)
 8003000:	f7fd fc06 	bl	8000810 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003004:	4b10      	ldr	r3, [pc, #64]	; (8003048 <prvCheckForValidListAndQueue+0x60>)
 8003006:	4a0e      	ldr	r2, [pc, #56]	; (8003040 <prvCheckForValidListAndQueue+0x58>)
 8003008:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800300a:	4b10      	ldr	r3, [pc, #64]	; (800304c <prvCheckForValidListAndQueue+0x64>)
 800300c:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <prvCheckForValidListAndQueue+0x5c>)
 800300e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003010:	2200      	movs	r2, #0
 8003012:	210c      	movs	r1, #12
 8003014:	200a      	movs	r0, #10
 8003016:	f7fe f94b 	bl	80012b0 <xQueueGenericCreate>
 800301a:	4602      	mov	r2, r0
 800301c:	4b07      	ldr	r3, [pc, #28]	; (800303c <prvCheckForValidListAndQueue+0x54>)
 800301e:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <prvCheckForValidListAndQueue+0x54>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003028:	4b04      	ldr	r3, [pc, #16]	; (800303c <prvCheckForValidListAndQueue+0x54>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4908      	ldr	r1, [pc, #32]	; (8003050 <prvCheckForValidListAndQueue+0x68>)
 800302e:	4618      	mov	r0, r3
 8003030:	f7fe fdb6 	bl	8001ba0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003034:	f7fd fdfa 	bl	8000c2c <vPortExitCritical>
    }
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20012da0 	.word	0x20012da0
 8003040:	20012d70 	.word	0x20012d70
 8003044:	20012d84 	.word	0x20012d84
 8003048:	20012d98 	.word	0x20012d98
 800304c:	20012d9c 	.word	0x20012d9c
 8003050:	08005190 	.word	0x08005190

08003054 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003058:	4803      	ldr	r0, [pc, #12]	; (8003068 <_cbSendSystemDesc+0x14>)
 800305a:	f001 f9d5 	bl	8004408 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800305e:	4803      	ldr	r0, [pc, #12]	; (800306c <_cbSendSystemDesc+0x18>)
 8003060:	f001 f9d2 	bl	8004408 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003064:	bf00      	nop
 8003066:	bd80      	pop	{r7, pc}
 8003068:	08005198 	.word	0x08005198
 800306c:	080051d8 	.word	0x080051d8

08003070 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <SEGGER_SYSVIEW_Conf+0x20>)
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <SEGGER_SYSVIEW_Conf+0x20>)
 800307a:	6819      	ldr	r1, [r3, #0]
 800307c:	4b05      	ldr	r3, [pc, #20]	; (8003094 <SEGGER_SYSVIEW_Conf+0x24>)
 800307e:	4a06      	ldr	r2, [pc, #24]	; (8003098 <SEGGER_SYSVIEW_Conf+0x28>)
 8003080:	f000 fd42 	bl	8003b08 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003084:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8003088:	f000 fd7c 	bl	8003b84 <SEGGER_SYSVIEW_SetRAMBase>
}
 800308c:	bf00      	nop
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000014 	.word	0x20000014
 8003094:	08003055 	.word	0x08003055
 8003098:	0800526c 	.word	0x0800526c

0800309c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800309c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800309e:	b085      	sub	sp, #20
 80030a0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80030a2:	2300      	movs	r3, #0
 80030a4:	607b      	str	r3, [r7, #4]
 80030a6:	e034      	b.n	8003112 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80030a8:	491e      	ldr	r1, [pc, #120]	; (8003124 <_cbSendTaskList+0x88>)
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	491a      	ldr	r1, [pc, #104]	; (8003124 <_cbSendTaskList+0x88>)
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	3304      	adds	r3, #4
 80030c8:	681c      	ldr	r4, [r3, #0]
 80030ca:	4916      	ldr	r1, [pc, #88]	; (8003124 <_cbSendTaskList+0x88>)
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	3308      	adds	r3, #8
 80030da:	681d      	ldr	r5, [r3, #0]
 80030dc:	4911      	ldr	r1, [pc, #68]	; (8003124 <_cbSendTaskList+0x88>)
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	330c      	adds	r3, #12
 80030ec:	681e      	ldr	r6, [r3, #0]
 80030ee:	490d      	ldr	r1, [pc, #52]	; (8003124 <_cbSendTaskList+0x88>)
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	4413      	add	r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	3310      	adds	r3, #16
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	4633      	mov	r3, r6
 8003104:	462a      	mov	r2, r5
 8003106:	4621      	mov	r1, r4
 8003108:	f000 f8ae 	bl	8003268 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3301      	adds	r3, #1
 8003110:	607b      	str	r3, [r7, #4]
 8003112:	4b05      	ldr	r3, [pc, #20]	; (8003128 <_cbSendTaskList+0x8c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	429a      	cmp	r2, r3
 800311a:	d3c5      	bcc.n	80030a8 <_cbSendTaskList+0xc>
  }
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003124:	20012dac 	.word	0x20012dac
 8003128:	20012e4c 	.word	0x20012e4c

0800312c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800312c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003134:	f7ff f850 	bl	80021d8 <xTaskGetTickCountFromISR>
 8003138:	4603      	mov	r3, r0
 800313a:	f04f 0400 	mov.w	r4, #0
 800313e:	e887 0018 	stmia.w	r7, {r3, r4}
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003142:	e897 0006 	ldmia.w	r7, {r1, r2}
 8003146:	460b      	mov	r3, r1
 8003148:	4614      	mov	r4, r2
 800314a:	ea4f 1b44 	mov.w	fp, r4, lsl #5
 800314e:	ea4b 6bd3 	orr.w	fp, fp, r3, lsr #27
 8003152:	ea4f 1a43 	mov.w	sl, r3, lsl #5
 8003156:	4653      	mov	r3, sl
 8003158:	465c      	mov	r4, fp
 800315a:	1a5b      	subs	r3, r3, r1
 800315c:	eb64 0402 	sbc.w	r4, r4, r2
 8003160:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8003164:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
 8003168:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800316c:	4643      	mov	r3, r8
 800316e:	464c      	mov	r4, r9
 8003170:	185b      	adds	r3, r3, r1
 8003172:	eb44 0402 	adc.w	r4, r4, r2
 8003176:	00e6      	lsls	r6, r4, #3
 8003178:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
 800317c:	00dd      	lsls	r5, r3, #3
 800317e:	462b      	mov	r3, r5
 8003180:	4634      	mov	r4, r6
 8003182:	e887 0018 	stmia.w	r7, {r3, r4}
  return Time;
 8003186:	e897 0018 	ldmia.w	r7, {r3, r4}
}
 800318a:	4618      	mov	r0, r3
 800318c:	4621      	mov	r1, r4
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003198 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80031a6:	2205      	movs	r2, #5
 80031a8:	492b      	ldr	r1, [pc, #172]	; (8003258 <SYSVIEW_AddTask+0xc0>)
 80031aa:	68b8      	ldr	r0, [r7, #8]
 80031ac:	f001 ffba 	bl	8005124 <memcmp>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d04b      	beq.n	800324e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80031b6:	4b29      	ldr	r3, [pc, #164]	; (800325c <SYSVIEW_AddTask+0xc4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b07      	cmp	r3, #7
 80031bc:	d903      	bls.n	80031c6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80031be:	4828      	ldr	r0, [pc, #160]	; (8003260 <SYSVIEW_AddTask+0xc8>)
 80031c0:	f001 fbc2 	bl	8004948 <SEGGER_SYSVIEW_Warn>
    return;
 80031c4:	e044      	b.n	8003250 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80031c6:	4b25      	ldr	r3, [pc, #148]	; (800325c <SYSVIEW_AddTask+0xc4>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4926      	ldr	r1, [pc, #152]	; (8003264 <SYSVIEW_AddTask+0xcc>)
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <SYSVIEW_AddTask+0xc4>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	4921      	ldr	r1, [pc, #132]	; (8003264 <SYSVIEW_AddTask+0xcc>)
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	3304      	adds	r3, #4
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80031f0:	4b1a      	ldr	r3, [pc, #104]	; (800325c <SYSVIEW_AddTask+0xc4>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	491b      	ldr	r1, [pc, #108]	; (8003264 <SYSVIEW_AddTask+0xcc>)
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	3308      	adds	r3, #8
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003206:	4b15      	ldr	r3, [pc, #84]	; (800325c <SYSVIEW_AddTask+0xc4>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4916      	ldr	r1, [pc, #88]	; (8003264 <SYSVIEW_AddTask+0xcc>)
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	330c      	adds	r3, #12
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800321c:	4b0f      	ldr	r3, [pc, #60]	; (800325c <SYSVIEW_AddTask+0xc4>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4910      	ldr	r1, [pc, #64]	; (8003264 <SYSVIEW_AddTask+0xcc>)
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	3310      	adds	r3, #16
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <SYSVIEW_AddTask+0xc4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	4a08      	ldr	r2, [pc, #32]	; (800325c <SYSVIEW_AddTask+0xc4>)
 800323a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f80e 	bl	8003268 <SYSVIEW_SendTaskInfo>
 800324c:	e000      	b.n	8003250 <SYSVIEW_AddTask+0xb8>
    return;
 800324e:	bf00      	nop

}
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	080051e8 	.word	0x080051e8
 800325c:	20012e4c 	.word	0x20012e4c
 8003260:	080051f0 	.word	0x080051f0
 8003264:	20012dac 	.word	0x20012dac

08003268 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003268:	b580      	push	{r7, lr}
 800326a:	b08a      	sub	sp, #40	; 0x28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003276:	f107 0314 	add.w	r3, r7, #20
 800327a:	2214      	movs	r2, #20
 800327c:	2100      	movs	r1, #0
 800327e:	4618      	mov	r0, r3
 8003280:	f001 ff6a 	bl	8005158 <memset>
  TaskInfo.TaskID     = TaskID;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	4618      	mov	r0, r3
 800329e:	f000 ffb9 	bl	8004214 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80032a2:	bf00      	nop
 80032a4:	3728      	adds	r7, #40	; 0x28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
 80032b2:	4b21      	ldr	r3, [pc, #132]	; (8003338 <_DoInit+0x8c>)
 80032b4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2203      	movs	r2, #3
 80032ba:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2203      	movs	r2, #3
 80032c0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1d      	ldr	r2, [pc, #116]	; (800333c <_DoInit+0x90>)
 80032c6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a1d      	ldr	r2, [pc, #116]	; (8003340 <_DoInit+0x94>)
 80032cc:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032d4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a14      	ldr	r2, [pc, #80]	; (800333c <_DoInit+0x90>)
 80032ec:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a14      	ldr	r2, [pc, #80]	; (8003344 <_DoInit+0x98>)
 80032f2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2210      	movs	r2, #16
 80032f8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3307      	adds	r3, #7
 8003310:	4a0d      	ldr	r2, [pc, #52]	; (8003348 <_DoInit+0x9c>)
 8003312:	6810      	ldr	r0, [r2, #0]
 8003314:	6018      	str	r0, [r3, #0]
  strcpy(&p->acID[0], "SEGGER");
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a0c      	ldr	r2, [pc, #48]	; (800334c <_DoInit+0xa0>)
 800331a:	6810      	ldr	r0, [r2, #0]
 800331c:	6018      	str	r0, [r3, #0]
 800331e:	8891      	ldrh	r1, [r2, #4]
 8003320:	7992      	ldrb	r2, [r2, #6]
 8003322:	8099      	strh	r1, [r3, #4]
 8003324:	719a      	strb	r2, [r3, #6]
  p->acID[6] = ' ';
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	719a      	strb	r2, [r3, #6]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	200153c4 	.word	0x200153c4
 800333c:	08005240 	.word	0x08005240
 8003340:	20012e50 	.word	0x20012e50
 8003344:	20013250 	.word	0x20013250
 8003348:	0800524c 	.word	0x0800524c
 800334c:	08005250 	.word	0x08005250

08003350 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	; 0x28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_DOWN* pRing;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  const char*             pSrc;
#endif
  //
  INIT();
 800335c:	4b3c      	ldr	r3, [pc, #240]	; (8003450 <SEGGER_RTT_ReadNoLock+0x100>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <SEGGER_RTT_ReadNoLock+0x18>
 8003364:	f7ff ffa2 	bl	80032ac <_DoInit>
  pRing = &_SEGGER_RTT.aDown[BufferIndex];
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4613      	mov	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4413      	add	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	3360      	adds	r3, #96	; 0x60
 8003374:	4a36      	ldr	r2, [pc, #216]	; (8003450 <SEGGER_RTT_ReadNoLock+0x100>)
 8003376:	4413      	add	r3, r2
 8003378:	61bb      	str	r3, [r7, #24]
  pBuffer = (unsigned char*)pData;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	61fb      	str	r3, [r7, #28]
  RdOff = pRing->RdOff;
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	617b      	str	r3, [r7, #20]
  NumBytesRead = 0u;
 800338a:	2300      	movs	r3, #0
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800338e:	6a3a      	ldr	r2, [r7, #32]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	429a      	cmp	r2, r3
 8003394:	d92a      	bls.n	80033ec <SEGGER_RTT_ReadNoLock+0x9c>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	613b      	str	r3, [r7, #16]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4293      	cmp	r3, r2
 80033a6:	bf28      	it	cs
 80033a8:	4613      	movcs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	4413      	add	r3, r2
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4619      	mov	r1, r3
 80033b8:	69f8      	ldr	r0, [r7, #28]
 80033ba:	f001 fec2 	bl	8005142 <memcpy>
    NumBytesRead += NumBytesRem;
 80033be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4413      	add	r3, r2
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4413      	add	r3, r2
 80033cc:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80033d6:	6a3a      	ldr	r2, [r7, #32]
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4413      	add	r3, r2
 80033dc:	623b      	str	r3, [r7, #32]
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d101      	bne.n	80033ec <SEGGER_RTT_ReadNoLock+0x9c>
      RdOff = 0u;
 80033e8:	2300      	movs	r3, #0
 80033ea:	623b      	str	r3, [r7, #32]
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	613b      	str	r3, [r7, #16]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4293      	cmp	r3, r2
 80033fa:	bf28      	it	cs
 80033fc:	4613      	movcs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
  if (NumBytesRem > 0u) {
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d018      	beq.n	8003438 <SEGGER_RTT_ReadNoLock+0xe8>
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, pRing->pBuffer + RdOff, NumBytesRem);
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	4413      	add	r3, r2
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4619      	mov	r1, r3
 8003412:	69f8      	ldr	r0, [r7, #28]
 8003414:	f001 fe95 	bl	8005142 <memcpy>
    NumBytesRead += NumBytesRem;
 8003418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	4413      	add	r3, r2
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
    pBuffer      += NumBytesRem;
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4413      	add	r3, r2
 8003426:	61fb      	str	r3, [r7, #28]
    BufferSize   -= NumBytesRem;
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003430:	6a3a      	ldr	r2, [r7, #32]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4413      	add	r3, r2
 8003436:	623b      	str	r3, [r7, #32]
#endif
  }
  if (NumBytesRead) {
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <SEGGER_RTT_ReadNoLock+0xf4>
    pRing->RdOff = RdOff;
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	6a3a      	ldr	r2, [r7, #32]
 8003442:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003446:	4618      	mov	r0, r3
 8003448:	3728      	adds	r7, #40	; 0x28
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	200153c4 	.word	0x200153c4

08003454 <SEGGER_RTT_WriteSkipNoLock>:
*    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	; 0x28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  unsigned              Rem;
#if SEGGER_RTT_MEMCPY_USE_BYTELOOP
  char*                 pDst;
#endif

  pData = (const char *)pBuffer;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get "to-host" ring buffer and copy some elements into local variables.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1c5a      	adds	r2, r3, #1
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4a3f      	ldr	r2, [pc, #252]	; (8003570 <SEGGER_RTT_WriteSkipNoLock+0x11c>)
 8003472:	4413      	add	r3, r2
 8003474:	623b      	str	r3, [r7, #32]
  RdOff = pRing->RdOff;
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	61fb      	str	r3, [r7, #28]
  WrOff = pRing->WrOff;
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	61bb      	str	r3, [r7, #24]
  //
  //    RdOff > WrOff -> Space until RdOff - 1 is free.
  //  AND
  //    WrOff + NumBytes < RdOff -> Data fits into buffer
  //
  if (RdOff <= WrOff) {
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	429a      	cmp	r2, r3
 8003488:	d854      	bhi.n	8003534 <SEGGER_RTT_WriteSkipNoLock+0xe0>
    //
    // Get space until WrOff will be at wrap around.
    //
    Avail = pRing->SizeOfBuffer - 1u - WrOff ;
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	429a      	cmp	r2, r3
 800349c:	d30f      	bcc.n	80034be <SEGGER_RTT_WriteSkipNoLock+0x6a>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	4413      	add	r3, r2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 fe49 	bl	8005142 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	441a      	add	r2, r3
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e054      	b.n	8003568 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
    //
    // If data did not fit into space until wrap around calculate complete space in buffer.
    //
    Avail += RdOff;
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	4413      	add	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]
    //
    // If there is still no space for the whole of this output, don't bother.
    //
    if (Avail >= NumBytes) {
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d34b      	bcc.n	8003566 <SEGGER_RTT_WriteSkipNoLock+0x112>
      //
      //  OK, we have enough space in buffer. Copy in one or 2 chunks
      //
      Rem = pRing->SizeOfBuffer - WrOff;      // Space until end of buffer
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	613b      	str	r3, [r7, #16]
      if (Rem > NumBytes) {
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d90e      	bls.n	80034fe <SEGGER_RTT_WriteSkipNoLock+0xaa>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	4413      	add	r3, r2
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ec:	4618      	mov	r0, r3
 80034ee:	f001 fe28 	bl	8005142 <memcpy>
        pRing->WrOff = WrOff + NumBytes;
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	441a      	add	r2, r3
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	60da      	str	r2, [r3, #12]
 80034fc:	e018      	b.n	8003530 <SEGGER_RTT_WriteSkipNoLock+0xdc>
        while (NumBytes--) {
          *pDst++ = *pData++;
        };
        pRing->WrOff = WrOff;
#else
        SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, Rem);
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	4413      	add	r3, r2
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800350a:	4618      	mov	r0, r3
 800350c:	f001 fe19 	bl	8005142 <memcpy>
        SEGGER_RTT_MEMCPY(pRing->pBuffer, pData + Rem, NumBytes - Rem);
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	6858      	ldr	r0, [r3, #4]
 8003514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	18d1      	adds	r1, r2, r3
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	461a      	mov	r2, r3
 8003522:	f001 fe0e 	bl	8005142 <memcpy>
        pRing->WrOff = NumBytes - Rem;
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad2      	subs	r2, r2, r3
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	60da      	str	r2, [r3, #12]
#endif
      }
      return 1;
 8003530:	2301      	movs	r3, #1
 8003532:	e019      	b.n	8003568 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  } else {
    Avail = RdOff - WrOff - 1u;
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	617b      	str	r3, [r7, #20]
    if (Avail >= NumBytes) {
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	429a      	cmp	r2, r3
 8003544:	d30f      	bcc.n	8003566 <SEGGER_RTT_WriteSkipNoLock+0x112>
      while (NumBytes--) {
        *pDst++ = *pData++;
      };
      pRing->WrOff = WrOff;
#else
      SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pData, NumBytes);
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	4413      	add	r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003552:	4618      	mov	r0, r3
 8003554:	f001 fdf5 	bl	8005142 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	441a      	add	r2, r3
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	60da      	str	r2, [r3, #12]
#endif
      return 1;
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <SEGGER_RTT_WriteSkipNoLock+0x114>
    }
  }
  //
  // If we reach this point no data has been written
  //
  return 0;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3728      	adds	r7, #40	; 0x28
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	200153c4 	.word	0x200153c4

08003574 <SEGGER_RTT_ConfigUpBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003582:	4b30      	ldr	r3, [pc, #192]	; (8003644 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <SEGGER_RTT_ConfigUpBuffer+0x1a>
 800358a:	f7ff fe8f 	bl	80032ac <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumUpBuffers) {
 800358e:	4b2d      	ldr	r3, [pc, #180]	; (8003644 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	461a      	mov	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	429a      	cmp	r2, r3
 8003598:	d94c      	bls.n	8003634 <SEGGER_RTT_ConfigUpBuffer+0xc0>
    SEGGER_RTT_LOCK();
 800359a:	f3ef 8311 	mrs	r3, BASEPRI
 800359e:	f04f 0120 	mov.w	r1, #32
 80035a2:	f381 8811 	msr	BASEPRI, r1
 80035a6:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d032      	beq.n	8003614 <SEGGER_RTT_ConfigUpBuffer+0xa0>
      _SEGGER_RTT.aUp[BufferIndex].sName        = sName;
 80035ae:	4925      	ldr	r1, [pc, #148]	; (8003644 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	4613      	mov	r3, r2
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	4413      	add	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	440b      	add	r3, r1
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80035c2:	4920      	ldr	r1, [pc, #128]	; (8003644 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	4613      	mov	r3, r2
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	4413      	add	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	440b      	add	r3, r1
 80035d2:	3304      	adds	r3, #4
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80035d8:	491a      	ldr	r1, [pc, #104]	; (8003644 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4613      	mov	r3, r2
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	440b      	add	r3, r1
 80035e6:	3320      	adds	r3, #32
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].RdOff        = 0u;
 80035ec:	4915      	ldr	r1, [pc, #84]	; (8003644 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4613      	mov	r3, r2
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	4413      	add	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	440b      	add	r3, r1
 80035fa:	3328      	adds	r3, #40	; 0x28
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aUp[BufferIndex].WrOff        = 0u;
 8003600:	4910      	ldr	r1, [pc, #64]	; (8003644 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4613      	mov	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4413      	add	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	440b      	add	r3, r1
 800360e:	3324      	adds	r3, #36	; 0x24
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aUp[BufferIndex].Flags          = Flags;
 8003614:	490b      	ldr	r1, [pc, #44]	; (8003644 <SEGGER_RTT_ConfigUpBuffer+0xd0>)
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4613      	mov	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4413      	add	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	440b      	add	r3, r1
 8003622:	332c      	adds	r3, #44	; 0x2c
 8003624:	6a3a      	ldr	r2, [r7, #32]
 8003626:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	e002      	b.n	800363a <SEGGER_RTT_ConfigUpBuffer+0xc6>
  } else {
    r = -1;
 8003634:	f04f 33ff 	mov.w	r3, #4294967295
 8003638:	617b      	str	r3, [r7, #20]
  }
  return r;
 800363a:	697b      	ldr	r3, [r7, #20]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	200153c4 	.word	0x200153c4

08003648 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
  int r;

  INIT();
 8003656:	4b30      	ldr	r3, [pc, #192]	; (8003718 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <SEGGER_RTT_ConfigDownBuffer+0x1a>
 800365e:	f7ff fe25 	bl	80032ac <_DoInit>
  if (BufferIndex < (unsigned)_SEGGER_RTT.MaxNumDownBuffers) {
 8003662:	4b2d      	ldr	r3, [pc, #180]	; (8003718 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	461a      	mov	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	429a      	cmp	r2, r3
 800366c:	d94b      	bls.n	8003706 <SEGGER_RTT_ConfigDownBuffer+0xbe>
    SEGGER_RTT_LOCK();
 800366e:	f3ef 8311 	mrs	r3, BASEPRI
 8003672:	f04f 0120 	mov.w	r1, #32
 8003676:	f381 8811 	msr	BASEPRI, r1
 800367a:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d031      	beq.n	80036e6 <SEGGER_RTT_ConfigDownBuffer+0x9e>
      _SEGGER_RTT.aDown[BufferIndex].sName        = sName;
 8003682:	4925      	ldr	r1, [pc, #148]	; (8003718 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	4613      	mov	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	4413      	add	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	440b      	add	r3, r1
 8003690:	3360      	adds	r3, #96	; 0x60
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003696:	4920      	ldr	r1, [pc, #128]	; (8003718 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4613      	mov	r3, r2
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	4413      	add	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	440b      	add	r3, r1
 80036a4:	3364      	adds	r3, #100	; 0x64
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80036aa:	491b      	ldr	r1, [pc, #108]	; (8003718 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4613      	mov	r3, r2
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	4413      	add	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	440b      	add	r3, r1
 80036b8:	3368      	adds	r3, #104	; 0x68
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].RdOff        = 0u;
 80036be:	4916      	ldr	r1, [pc, #88]	; (8003718 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4613      	mov	r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	4413      	add	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	440b      	add	r3, r1
 80036cc:	3370      	adds	r3, #112	; 0x70
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
      _SEGGER_RTT.aDown[BufferIndex].WrOff        = 0u;
 80036d2:	4911      	ldr	r1, [pc, #68]	; (8003718 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4613      	mov	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4413      	add	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	440b      	add	r3, r1
 80036e0:	336c      	adds	r3, #108	; 0x6c
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
    }
    _SEGGER_RTT.aDown[BufferIndex].Flags          = Flags;
 80036e6:	490c      	ldr	r1, [pc, #48]	; (8003718 <SEGGER_RTT_ConfigDownBuffer+0xd0>)
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	440b      	add	r3, r1
 80036f4:	3374      	adds	r3, #116	; 0x74
 80036f6:	6a3a      	ldr	r2, [r7, #32]
 80036f8:	601a      	str	r2, [r3, #0]
    SEGGER_RTT_UNLOCK();
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	e002      	b.n	800370c <SEGGER_RTT_ConfigDownBuffer+0xc4>
  } else {
    r = -1;
 8003706:	f04f 33ff 	mov.w	r3, #4294967295
 800370a:	617b      	str	r3, [r7, #20]
  }
  return r;
 800370c:	697b      	ldr	r3, [r7, #20]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	200153c4 	.word	0x200153c4

0800371c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800372c:	e002      	b.n	8003734 <_EncodeStr+0x18>
    Len++;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	3301      	adds	r3, #1
 8003732:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4413      	add	r3, r2
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f6      	bne.n	800372e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	429a      	cmp	r2, r3
 8003746:	d901      	bls.n	800374c <_EncodeStr+0x30>
    Len = Limit;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	2bfe      	cmp	r3, #254	; 0xfe
 8003750:	d806      	bhi.n	8003760 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	60fa      	str	r2, [r7, #12]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	e011      	b.n	8003784 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	60fa      	str	r2, [r7, #12]
 8003766:	22ff      	movs	r2, #255	; 0xff
 8003768:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	60fa      	str	r2, [r7, #12]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	60fa      	str	r2, [r7, #12]
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	0a12      	lsrs	r2, r2, #8
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003788:	e00a      	b.n	80037a0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	60fa      	str	r2, [r7, #12]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	1c51      	adds	r1, r2, #1
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	7812      	ldrb	r2, [r2, #0]
 8003798:	701a      	strb	r2, [r3, #0]
    n++;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	3301      	adds	r3, #1
 800379e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d3f0      	bcc.n	800378a <_EncodeStr+0x6e>
  }
  return pPayload;
 80037a8:	68fb      	ldr	r3, [r7, #12]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3304      	adds	r3, #4
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80037d4:	1cfb      	adds	r3, r7, #3
 80037d6:	2201      	movs	r2, #1
 80037d8:	4619      	mov	r1, r3
 80037da:	2001      	movs	r0, #1
 80037dc:	f7ff fdb8 	bl	8003350 <SEGGER_RTT_ReadNoLock>
 80037e0:	4603      	mov	r3, r0
 80037e2:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	dd47      	ble.n	800387a <_HandleIncomingPacket+0xac>
    switch (Cmd) {
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d01a      	beq.n	8003826 <_HandleIncomingPacket+0x58>
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	dc06      	bgt.n	8003802 <_HandleIncomingPacket+0x34>
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d010      	beq.n	800381a <_HandleIncomingPacket+0x4c>
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	dc11      	bgt.n	8003820 <_HandleIncomingPacket+0x52>
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d009      	beq.n	8003814 <_HandleIncomingPacket+0x46>
 8003800:	e02d      	b.n	800385e <_HandleIncomingPacket+0x90>
 8003802:	2b06      	cmp	r3, #6
 8003804:	d015      	beq.n	8003832 <_HandleIncomingPacket+0x64>
 8003806:	2b06      	cmp	r3, #6
 8003808:	db10      	blt.n	800382c <_HandleIncomingPacket+0x5e>
 800380a:	2b07      	cmp	r3, #7
 800380c:	d014      	beq.n	8003838 <_HandleIncomingPacket+0x6a>
 800380e:	2b80      	cmp	r3, #128	; 0x80
 8003810:	d015      	beq.n	800383e <_HandleIncomingPacket+0x70>
 8003812:	e024      	b.n	800385e <_HandleIncomingPacket+0x90>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003814:	f000 fb82 	bl	8003f1c <SEGGER_SYSVIEW_Start>
      break;
 8003818:	e02f      	b.n	800387a <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800381a:	f000 fc3b 	bl	8004094 <SEGGER_SYSVIEW_Stop>
      break;
 800381e:	e02c      	b.n	800387a <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003820:	f000 fe16 	bl	8004450 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003824:	e029      	b.n	800387a <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003826:	f000 fddb 	bl	80043e0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800382a:	e026      	b.n	800387a <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800382c:	f000 fc58 	bl	80040e0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003830:	e023      	b.n	800387a <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003832:	f001 f84b 	bl	80048cc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003836:	e020      	b.n	800387a <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003838:	f001 f82a 	bl	8004890 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800383c:	e01d      	b.n	800387a <_HandleIncomingPacket+0xac>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800383e:	1cfb      	adds	r3, r7, #3
 8003840:	2201      	movs	r2, #1
 8003842:	4619      	mov	r1, r3
 8003844:	2001      	movs	r0, #1
 8003846:	f7ff fd83 	bl	8003350 <SEGGER_RTT_ReadNoLock>
 800384a:	4603      	mov	r3, r0
 800384c:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	dd0f      	ble.n	8003874 <_HandleIncomingPacket+0xa6>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	4618      	mov	r0, r3
 8003858:	f000 ff9a 	bl	8004790 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800385c:	e00a      	b.n	8003874 <_HandleIncomingPacket+0xa6>
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800385e:	78fb      	ldrb	r3, [r7, #3]
 8003860:	b25b      	sxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	da08      	bge.n	8003878 <_HandleIncomingPacket+0xaa>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003866:	1cfb      	adds	r3, r7, #3
 8003868:	2201      	movs	r2, #1
 800386a:	4619      	mov	r1, r3
 800386c:	2001      	movs	r0, #1
 800386e:	f7ff fd6f 	bl	8003350 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003872:	e001      	b.n	8003878 <_HandleIncomingPacket+0xaa>
      break;
 8003874:	bf00      	nop
 8003876:	e000      	b.n	800387a <_HandleIncomingPacket+0xac>
      break;
 8003878:	bf00      	nop
    }
  }
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003884:	b580      	push	{r7, lr}
 8003886:	b08c      	sub	sp, #48	; 0x30
 8003888:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800388a:	2301      	movs	r3, #1
 800388c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800388e:	1d3b      	adds	r3, r7, #4
 8003890:	3301      	adds	r3, #1
 8003892:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003898:	4b30      	ldr	r3, [pc, #192]	; (800395c <_TrySendOverflowPacket+0xd8>)
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	62bb      	str	r3, [r7, #40]	; 0x28
 800389e:	e00b      	b.n	80038b8 <_TrySendOverflowPacket+0x34>
 80038a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	09db      	lsrs	r3, r3, #7
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	2b7f      	cmp	r3, #127	; 0x7f
 80038bc:	d8f0      	bhi.n	80038a0 <_TrySendOverflowPacket+0x1c>
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038cc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80038ce:	4b24      	ldr	r3, [pc, #144]	; (8003960 <_TrySendOverflowPacket+0xdc>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80038d4:	4b21      	ldr	r3, [pc, #132]	; (800395c <_TrySendOverflowPacket+0xd8>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	623b      	str	r3, [r7, #32]
 80038e6:	e00b      	b.n	8003900 <_TrySendOverflowPacket+0x7c>
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	627a      	str	r2, [r7, #36]	; 0x24
 80038ee:	6a3a      	ldr	r2, [r7, #32]
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	09db      	lsrs	r3, r3, #7
 80038fe:	623b      	str	r3, [r7, #32]
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	2b7f      	cmp	r3, #127	; 0x7f
 8003904:	d8f0      	bhi.n	80038e8 <_TrySendOverflowPacket+0x64>
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	627a      	str	r2, [r7, #36]	; 0x24
 800390c:	6a3a      	ldr	r2, [r7, #32]
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003916:	69fa      	ldr	r2, [r7, #28]
 8003918:	1d3b      	adds	r3, r7, #4
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	461a      	mov	r2, r3
 800391e:	1d3b      	adds	r3, r7, #4
 8003920:	4619      	mov	r1, r3
 8003922:	2001      	movs	r0, #1
 8003924:	f7ff fd96 	bl	8003454 <SEGGER_RTT_WriteSkipNoLock>
 8003928:	4603      	mov	r3, r0
 800392a:	613b      	str	r3, [r7, #16]
  if (Status) {
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d009      	beq.n	8003946 <_TrySendOverflowPacket+0xc2>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003932:	4a0a      	ldr	r2, [pc, #40]	; (800395c <_TrySendOverflowPacket+0xd8>)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003938:	4b08      	ldr	r3, [pc, #32]	; (800395c <_TrySendOverflowPacket+0xd8>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	3b01      	subs	r3, #1
 800393e:	b2da      	uxtb	r2, r3
 8003940:	4b06      	ldr	r3, [pc, #24]	; (800395c <_TrySendOverflowPacket+0xd8>)
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	e004      	b.n	8003950 <_TrySendOverflowPacket+0xcc>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003946:	4b05      	ldr	r3, [pc, #20]	; (800395c <_TrySendOverflowPacket+0xd8>)
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	3301      	adds	r3, #1
 800394c:	4a03      	ldr	r2, [pc, #12]	; (800395c <_TrySendOverflowPacket+0xd8>)
 800394e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003950:	693b      	ldr	r3, [r7, #16]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3730      	adds	r7, #48	; 0x30
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20015268 	.word	0x20015268
 8003960:	e0001004 	.word	0xe0001004

08003964 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003964:	b580      	push	{r7, lr}
 8003966:	b08a      	sub	sp, #40	; 0x28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003970:	4b62      	ldr	r3, [pc, #392]	; (8003afc <_SendPacket+0x198>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d010      	beq.n	800399a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003978:	4b60      	ldr	r3, [pc, #384]	; (8003afc <_SendPacket+0x198>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 809f 	beq.w	8003ac0 <_SendPacket+0x15c>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003982:	4b5e      	ldr	r3, [pc, #376]	; (8003afc <_SendPacket+0x198>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b02      	cmp	r3, #2
 8003988:	d108      	bne.n	800399c <_SendPacket+0x38>
    _TrySendOverflowPacket();
 800398a:	f7ff ff7b 	bl	8003884 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800398e:	4b5b      	ldr	r3, [pc, #364]	; (8003afc <_SendPacket+0x198>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b01      	cmp	r3, #1
 8003994:	f040 8096 	bne.w	8003ac4 <_SendPacket+0x160>
 8003998:	e000      	b.n	800399c <_SendPacket+0x38>
    goto Send;
 800399a:	bf00      	nop
Send:
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b1f      	cmp	r3, #31
 80039a0:	d809      	bhi.n	80039b6 <_SendPacket+0x52>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80039a2:	4b56      	ldr	r3, [pc, #344]	; (8003afc <_SendPacket+0x198>)
 80039a4:	69da      	ldr	r2, [r3, #28]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f040 8089 	bne.w	8003ac8 <_SendPacket+0x164>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b17      	cmp	r3, #23
 80039ba:	d807      	bhi.n	80039cc <_SendPacket+0x68>
    *--pStartPacket = EventId;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3b01      	subs	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	701a      	strb	r2, [r3, #0]
 80039ca:	e03d      	b.n	8003a48 <_SendPacket+0xe4>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b7f      	cmp	r3, #127	; 0x7f
 80039d8:	d912      	bls.n	8003a00 <_SendPacket+0x9c>
      *--pStartPacket = (NumBytes >> 7);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3b01      	subs	r3, #1
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	09db      	lsrs	r3, r3, #7
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	e006      	b.n	8003a0e <_SendPacket+0xaa>
    } else {
      *--pStartPacket = NumBytes;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b7f      	cmp	r3, #127	; 0x7f
 8003a12:	d912      	bls.n	8003a3a <_SendPacket+0xd6>
      *--pStartPacket = (EventId >> 7);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	60fb      	str	r3, [r7, #12]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	09db      	lsrs	r3, r3, #7
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	e006      	b.n	8003a48 <_SendPacket+0xe4>
    } else {
      *--pStartPacket = EventId;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003a48:	4b2d      	ldr	r3, [pc, #180]	; (8003b00 <_SendPacket+0x19c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003a4e:	4b2b      	ldr	r3, [pc, #172]	; (8003afc <_SendPacket+0x198>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	623b      	str	r3, [r7, #32]
 8003a60:	e00b      	b.n	8003a7a <_SendPacket+0x116>
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	627a      	str	r2, [r7, #36]	; 0x24
 8003a68:	6a3a      	ldr	r2, [r7, #32]
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	09db      	lsrs	r3, r3, #7
 8003a78:	623b      	str	r3, [r7, #32]
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8003a7e:	d8f0      	bhi.n	8003a62 <_SendPacket+0xfe>
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	627a      	str	r2, [r7, #36]	; 0x24
 8003a86:	6a3a      	ldr	r2, [r7, #32]
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	461a      	mov	r2, r3
 8003a98:	68f9      	ldr	r1, [r7, #12]
 8003a9a:	2001      	movs	r0, #1
 8003a9c:	f7ff fcda 	bl	8003454 <SEGGER_RTT_WriteSkipNoLock>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	613b      	str	r3, [r7, #16]
  if (Status) {
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <_SendPacket+0x14e>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003aaa:	4a14      	ldr	r2, [pc, #80]	; (8003afc <_SendPacket+0x198>)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	60d3      	str	r3, [r2, #12]
 8003ab0:	e00b      	b.n	8003aca <_SendPacket+0x166>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003ab2:	4b12      	ldr	r3, [pc, #72]	; (8003afc <_SendPacket+0x198>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	4b10      	ldr	r3, [pc, #64]	; (8003afc <_SendPacket+0x198>)
 8003abc:	701a      	strb	r2, [r3, #0]
 8003abe:	e004      	b.n	8003aca <_SendPacket+0x166>
    goto SendDone;
 8003ac0:	bf00      	nop
 8003ac2:	e002      	b.n	8003aca <_SendPacket+0x166>
      goto SendDone;
 8003ac4:	bf00      	nop
 8003ac6:	e000      	b.n	8003aca <_SendPacket+0x166>
      goto SendDone;
 8003ac8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003aca:	4b0e      	ldr	r3, [pc, #56]	; (8003b04 <_SendPacket+0x1a0>)
 8003acc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <_SendPacket+0x1a0>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d00b      	beq.n	8003af2 <_SendPacket+0x18e>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003ada:	4b08      	ldr	r3, [pc, #32]	; (8003afc <_SendPacket+0x198>)
 8003adc:	789b      	ldrb	r3, [r3, #2]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d107      	bne.n	8003af2 <_SendPacket+0x18e>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <_SendPacket+0x198>)
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003ae8:	f7ff fe71 	bl	80037ce <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003aec:	4b03      	ldr	r3, [pc, #12]	; (8003afc <_SendPacket+0x198>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003af2:	bf00      	nop
 8003af4:	3728      	adds	r7, #40	; 0x28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20015268 	.word	0x20015268
 8003b00:	e0001004 	.word	0xe0001004
 8003b04:	200153c4 	.word	0x200153c4

08003b08 <SEGGER_SYSVIEW_Init>:
*    to identify the SystemView channel.
*
*  Notes
*    The channel is configured by the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
  _SYSVIEW_Globals.EnableState      = 0;
  _SYSVIEW_Globals.PacketCount      = 0;
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003b16:	2300      	movs	r3, #0
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b1e:	4a14      	ldr	r2, [pc, #80]	; (8003b70 <SEGGER_SYSVIEW_Init+0x68>)
 8003b20:	4914      	ldr	r1, [pc, #80]	; (8003b74 <SEGGER_SYSVIEW_Init+0x6c>)
 8003b22:	2001      	movs	r0, #1
 8003b24:	f7ff fd26 	bl	8003574 <SEGGER_RTT_ConfigUpBuffer>
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003b28:	2300      	movs	r3, #0
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	2308      	movs	r3, #8
 8003b2e:	4a12      	ldr	r2, [pc, #72]	; (8003b78 <SEGGER_SYSVIEW_Init+0x70>)
 8003b30:	4910      	ldr	r1, [pc, #64]	; (8003b74 <SEGGER_SYSVIEW_Init+0x6c>)
 8003b32:	2001      	movs	r0, #1
 8003b34:	f7ff fd88 	bl	8003648 <SEGGER_RTT_ConfigDownBuffer>
  // TODO: Use SEGGER_RTT_AllocDownBuffer when SystemViewer is able to handle another Down Channel than Up Channel.
  //
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003b38:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <SEGGER_SYSVIEW_Init+0x74>)
 8003b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b3e:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003b40:	4b0f      	ldr	r3, [pc, #60]	; (8003b80 <SEGGER_SYSVIEW_Init+0x78>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0d      	ldr	r2, [pc, #52]	; (8003b7c <SEGGER_SYSVIEW_Init+0x74>)
 8003b46:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003b48:	4a0c      	ldr	r2, [pc, #48]	; (8003b7c <SEGGER_SYSVIEW_Init+0x74>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003b4e:	4a0b      	ldr	r2, [pc, #44]	; (8003b7c <SEGGER_SYSVIEW_Init+0x74>)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003b54:	4a09      	ldr	r2, [pc, #36]	; (8003b7c <SEGGER_SYSVIEW_Init+0x74>)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003b5a:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <SEGGER_SYSVIEW_Init+0x74>)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <SEGGER_SYSVIEW_Init+0x74>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003b66:	bf00      	nop
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20013260 	.word	0x20013260
 8003b74:	08005258 	.word	0x08005258
 8003b78:	20015260 	.word	0x20015260
 8003b7c:	20015268 	.word	0x20015268
 8003b80:	e0001004 	.word	0xe0001004

08003b84 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003b8c:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6113      	str	r3, [r2, #16]
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20015268 	.word	0x20015268

08003ba4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003bac:	f3ef 8311 	mrs	r3, BASEPRI
 8003bb0:	f04f 0120 	mov.w	r1, #32
 8003bb4:	f381 8811 	msr	BASEPRI, r1
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	4808      	ldr	r0, [pc, #32]	; (8003bdc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003bbc:	f7ff fdfb 	bl	80037b6 <_PreparePacket>
 8003bc0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	68b8      	ldr	r0, [r7, #8]
 8003bc8:	f7ff fecc 	bl	8003964 <_SendPacket>
  RECORD_END();
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f383 8811 	msr	BASEPRI, r3
}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20015298 	.word	0x20015298

08003be0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b088      	sub	sp, #32
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003bea:	f3ef 8311 	mrs	r3, BASEPRI
 8003bee:	f04f 0120 	mov.w	r1, #32
 8003bf2:	f381 8811 	msr	BASEPRI, r1
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	4816      	ldr	r0, [pc, #88]	; (8003c54 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003bfa:	f7ff fddc 	bl	80037b6 <_PreparePacket>
 8003bfe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	61fb      	str	r3, [r7, #28]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e00b      	b.n	8003c26 <SEGGER_SYSVIEW_RecordU32+0x46>
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	61fa      	str	r2, [r7, #28]
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	09db      	lsrs	r3, r3, #7
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	2b7f      	cmp	r3, #127	; 0x7f
 8003c2a:	d8f0      	bhi.n	8003c0e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	61fa      	str	r2, [r7, #28]
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	68f9      	ldr	r1, [r7, #12]
 8003c40:	6938      	ldr	r0, [r7, #16]
 8003c42:	f7ff fe8f 	bl	8003964 <_SendPacket>
  RECORD_END();
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f383 8811 	msr	BASEPRI, r3
}
 8003c4c:	bf00      	nop
 8003c4e:	3720      	adds	r7, #32
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	20015298 	.word	0x20015298

08003c58 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08c      	sub	sp, #48	; 0x30
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003c64:	f3ef 8311 	mrs	r3, BASEPRI
 8003c68:	f04f 0120 	mov.w	r1, #32
 8003c6c:	f381 8811 	msr	BASEPRI, r1
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	4825      	ldr	r0, [pc, #148]	; (8003d08 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003c74:	f7ff fd9f 	bl	80037b6 <_PreparePacket>
 8003c78:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c86:	e00b      	b.n	8003ca0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	09db      	lsrs	r3, r3, #7
 8003c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8003ca4:	d8f0      	bhi.n	8003c88 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	623b      	str	r3, [r7, #32]
 8003cbe:	e00b      	b.n	8003cd8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	627a      	str	r2, [r7, #36]	; 0x24
 8003cc6:	6a3a      	ldr	r2, [r7, #32]
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	09db      	lsrs	r3, r3, #7
 8003cd6:	623b      	str	r3, [r7, #32]
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	2b7f      	cmp	r3, #127	; 0x7f
 8003cdc:	d8f0      	bhi.n	8003cc0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	627a      	str	r2, [r7, #36]	; 0x24
 8003ce4:	6a3a      	ldr	r2, [r7, #32]
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	6979      	ldr	r1, [r7, #20]
 8003cf2:	69b8      	ldr	r0, [r7, #24]
 8003cf4:	f7ff fe36 	bl	8003964 <_SendPacket>
  RECORD_END();
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f383 8811 	msr	BASEPRI, r3
}
 8003cfe:	bf00      	nop
 8003d00:	3730      	adds	r7, #48	; 0x30
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	20015298 	.word	0x20015298

08003d0c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08e      	sub	sp, #56	; 0x38
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8003d1a:	f3ef 8311 	mrs	r3, BASEPRI
 8003d1e:	f04f 0120 	mov.w	r1, #32
 8003d22:	f381 8811 	msr	BASEPRI, r1
 8003d26:	61fb      	str	r3, [r7, #28]
 8003d28:	4832      	ldr	r0, [pc, #200]	; (8003df4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8003d2a:	f7ff fd44 	bl	80037b6 <_PreparePacket>
 8003d2e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	637b      	str	r3, [r7, #52]	; 0x34
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d3c:	e00b      	b.n	8003d56 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8003d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	637a      	str	r2, [r7, #52]	; 0x34
 8003d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d52:	09db      	lsrs	r3, r3, #7
 8003d54:	633b      	str	r3, [r7, #48]	; 0x30
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	2b7f      	cmp	r3, #127	; 0x7f
 8003d5a:	d8f0      	bhi.n	8003d3e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8003d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	637a      	str	r2, [r7, #52]	; 0x34
 8003d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	701a      	strb	r2, [r3, #0]
 8003d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d74:	e00b      	b.n	8003d8e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8003d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	09db      	lsrs	r3, r3, #7
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	2b7f      	cmp	r3, #127	; 0x7f
 8003d92:	d8f0      	bhi.n	8003d76 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8003d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	701a      	strb	r2, [r3, #0]
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	623b      	str	r3, [r7, #32]
 8003dac:	e00b      	b.n	8003dc6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8003dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	627a      	str	r2, [r7, #36]	; 0x24
 8003db4:	6a3a      	ldr	r2, [r7, #32]
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	09db      	lsrs	r3, r3, #7
 8003dc4:	623b      	str	r3, [r7, #32]
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8003dca:	d8f0      	bhi.n	8003dae <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	627a      	str	r2, [r7, #36]	; 0x24
 8003dd2:	6a3a      	ldr	r2, [r7, #32]
 8003dd4:	b2d2      	uxtb	r2, r2
 8003dd6:	701a      	strb	r2, [r3, #0]
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	6979      	ldr	r1, [r7, #20]
 8003de0:	69b8      	ldr	r0, [r7, #24]
 8003de2:	f7ff fdbf 	bl	8003964 <_SendPacket>
  RECORD_END();
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f383 8811 	msr	BASEPRI, r3
}
 8003dec:	bf00      	nop
 8003dee:	3738      	adds	r7, #56	; 0x38
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20015298 	.word	0x20015298

08003df8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b090      	sub	sp, #64	; 0x40
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003e06:	f3ef 8311 	mrs	r3, BASEPRI
 8003e0a:	f04f 0120 	mov.w	r1, #32
 8003e0e:	f381 8811 	msr	BASEPRI, r1
 8003e12:	61fb      	str	r3, [r7, #28]
 8003e14:	4840      	ldr	r0, [pc, #256]	; (8003f18 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003e16:	f7ff fcce 	bl	80037b6 <_PreparePacket>
 8003e1a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e28:	e00b      	b.n	8003e42 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	701a      	strb	r2, [r3, #0]
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	09db      	lsrs	r3, r3, #7
 8003e40:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	2b7f      	cmp	r3, #127	; 0x7f
 8003e46:	d8f0      	bhi.n	8003e2a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8003e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	701a      	strb	r2, [r3, #0]
 8003e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	633b      	str	r3, [r7, #48]	; 0x30
 8003e60:	e00b      	b.n	8003e7a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8003e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	637a      	str	r2, [r7, #52]	; 0x34
 8003e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	701a      	strb	r2, [r3, #0]
 8003e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e76:	09db      	lsrs	r3, r3, #7
 8003e78:	633b      	str	r3, [r7, #48]	; 0x30
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8003e7e:	d8f0      	bhi.n	8003e62 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8003e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	637a      	str	r2, [r7, #52]	; 0x34
 8003e86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e98:	e00b      	b.n	8003eb2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	701a      	strb	r2, [r3, #0]
 8003eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eae:	09db      	lsrs	r3, r3, #7
 8003eb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8003eb6:	d8f0      	bhi.n	8003e9a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8003eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	701a      	strb	r2, [r3, #0]
 8003ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
 8003ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ece:	623b      	str	r3, [r7, #32]
 8003ed0:	e00b      	b.n	8003eea <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	627a      	str	r2, [r7, #36]	; 0x24
 8003ed8:	6a3a      	ldr	r2, [r7, #32]
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	09db      	lsrs	r3, r3, #7
 8003ee8:	623b      	str	r3, [r7, #32]
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	2b7f      	cmp	r3, #127	; 0x7f
 8003eee:	d8f0      	bhi.n	8003ed2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	1c5a      	adds	r2, r3, #1
 8003ef4:	627a      	str	r2, [r7, #36]	; 0x24
 8003ef6:	6a3a      	ldr	r2, [r7, #32]
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	701a      	strb	r2, [r3, #0]
 8003efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	6979      	ldr	r1, [r7, #20]
 8003f04:	69b8      	ldr	r0, [r7, #24]
 8003f06:	f7ff fd2d 	bl	8003964 <_SendPacket>
  RECORD_END();
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	f383 8811 	msr	BASEPRI, r3
}
 8003f10:	bf00      	nop
 8003f12:	3740      	adds	r7, #64	; 0x40
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	20015298 	.word	0x20015298

08003f1c <SEGGER_SYSVIEW_Start>:
*    system description string is sent, too.
*
*  Notes
*    SEGGER_SYSVIEW_Start and SEGGER_SYSVIEW_Stop do not nest.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08c      	sub	sp, #48	; 0x30
 8003f20:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003f22:	4b59      	ldr	r3, [pc, #356]	; (8004088 <SEGGER_SYSVIEW_Start+0x16c>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f040 80aa 	bne.w	8004080 <SEGGER_SYSVIEW_Start+0x164>
    _SYSVIEW_Globals.EnableState = 1;
 8003f2c:	4b56      	ldr	r3, [pc, #344]	; (8004088 <SEGGER_SYSVIEW_Start+0x16c>)
 8003f2e:	2201      	movs	r2, #1
 8003f30:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003f32:	f3ef 8311 	mrs	r3, BASEPRI
 8003f36:	f04f 0120 	mov.w	r1, #32
 8003f3a:	f381 8811 	msr	BASEPRI, r1
 8003f3e:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003f40:	220a      	movs	r2, #10
 8003f42:	4952      	ldr	r1, [pc, #328]	; (800408c <SEGGER_SYSVIEW_Start+0x170>)
 8003f44:	2001      	movs	r0, #1
 8003f46:	f7ff fa85 	bl	8003454 <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003f50:	200a      	movs	r0, #10
 8003f52:	f7ff fe27 	bl	8003ba4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003f56:	f3ef 8311 	mrs	r3, BASEPRI
 8003f5a:	f04f 0120 	mov.w	r1, #32
 8003f5e:	f381 8811 	msr	BASEPRI, r1
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	484a      	ldr	r0, [pc, #296]	; (8004090 <SEGGER_SYSVIEW_Start+0x174>)
 8003f66:	f7ff fc26 	bl	80037b6 <_PreparePacket>
 8003f6a:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f74:	4b44      	ldr	r3, [pc, #272]	; (8004088 <SEGGER_SYSVIEW_Start+0x16c>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f7a:	e00b      	b.n	8003f94 <SEGGER_SYSVIEW_Start+0x78>
 8003f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f8a:	b2d2      	uxtb	r2, r2
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	09db      	lsrs	r3, r3, #7
 8003f92:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	2b7f      	cmp	r3, #127	; 0x7f
 8003f98:	d8f0      	bhi.n	8003f7c <SEGGER_SYSVIEW_Start+0x60>
 8003f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
 8003fae:	4b36      	ldr	r3, [pc, #216]	; (8004088 <SEGGER_SYSVIEW_Start+0x16c>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	623b      	str	r3, [r7, #32]
 8003fb4:	e00b      	b.n	8003fce <SEGGER_SYSVIEW_Start+0xb2>
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	627a      	str	r2, [r7, #36]	; 0x24
 8003fbc:	6a3a      	ldr	r2, [r7, #32]
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	701a      	strb	r2, [r3, #0]
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	09db      	lsrs	r3, r3, #7
 8003fcc:	623b      	str	r3, [r7, #32]
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	2b7f      	cmp	r3, #127	; 0x7f
 8003fd2:	d8f0      	bhi.n	8003fb6 <SEGGER_SYSVIEW_Start+0x9a>
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	627a      	str	r2, [r7, #36]	; 0x24
 8003fda:	6a3a      	ldr	r2, [r7, #32]
 8003fdc:	b2d2      	uxtb	r2, r2
 8003fde:	701a      	strb	r2, [r3, #0]
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	61fb      	str	r3, [r7, #28]
 8003fe8:	4b27      	ldr	r3, [pc, #156]	; (8004088 <SEGGER_SYSVIEW_Start+0x16c>)
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	61bb      	str	r3, [r7, #24]
 8003fee:	e00b      	b.n	8004008 <SEGGER_SYSVIEW_Start+0xec>
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	61fa      	str	r2, [r7, #28]
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	09db      	lsrs	r3, r3, #7
 8004006:	61bb      	str	r3, [r7, #24]
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b7f      	cmp	r3, #127	; 0x7f
 800400c:	d8f0      	bhi.n	8003ff0 <SEGGER_SYSVIEW_Start+0xd4>
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	61fa      	str	r2, [r7, #28]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	701a      	strb	r2, [r3, #0]
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	2302      	movs	r3, #2
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	e00b      	b.n	8004040 <SEGGER_SYSVIEW_Start+0x124>
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	617a      	str	r2, [r7, #20]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	09db      	lsrs	r3, r3, #7
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	2b7f      	cmp	r3, #127	; 0x7f
 8004044:	d8f0      	bhi.n	8004028 <SEGGER_SYSVIEW_Start+0x10c>
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	617a      	str	r2, [r7, #20]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004056:	2218      	movs	r2, #24
 8004058:	6839      	ldr	r1, [r7, #0]
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff fc82 	bl	8003964 <_SendPacket>
      RECORD_END();
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004066:	4b08      	ldr	r3, [pc, #32]	; (8004088 <SEGGER_SYSVIEW_Start+0x16c>)
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <SEGGER_SYSVIEW_Start+0x158>
      _SYSVIEW_Globals.pfSendSysDesc();
 800406e:	4b06      	ldr	r3, [pc, #24]	; (8004088 <SEGGER_SYSVIEW_Start+0x16c>)
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004074:	f000 f9ec 	bl	8004450 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004078:	f000 f9b2 	bl	80043e0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800407c:	f000 fc26 	bl	80048cc <SEGGER_SYSVIEW_SendNumModules>
#endif
  }
}
 8004080:	bf00      	nop
 8004082:	3730      	adds	r7, #48	; 0x30
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20015268 	.word	0x20015268
 800408c:	08005274 	.word	0x08005274
 8004090:	20015298 	.word	0x20015298

08004094 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800409a:	f3ef 8311 	mrs	r3, BASEPRI
 800409e:	f04f 0120 	mov.w	r1, #32
 80040a2:	f381 8811 	msr	BASEPRI, r1
 80040a6:	607b      	str	r3, [r7, #4]
 80040a8:	480b      	ldr	r0, [pc, #44]	; (80040d8 <SEGGER_SYSVIEW_Stop+0x44>)
 80040aa:	f7ff fb84 	bl	80037b6 <_PreparePacket>
 80040ae:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80040b0:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <SEGGER_SYSVIEW_Stop+0x48>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80040b8:	220b      	movs	r2, #11
 80040ba:	6839      	ldr	r1, [r7, #0]
 80040bc:	6838      	ldr	r0, [r7, #0]
 80040be:	f7ff fc51 	bl	8003964 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <SEGGER_SYSVIEW_Stop+0x48>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f383 8811 	msr	BASEPRI, r3
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20015298 	.word	0x20015298
 80040dc:	20015268 	.word	0x20015268

080040e0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08c      	sub	sp, #48	; 0x30
 80040e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80040e6:	f3ef 8311 	mrs	r3, BASEPRI
 80040ea:	f04f 0120 	mov.w	r1, #32
 80040ee:	f381 8811 	msr	BASEPRI, r1
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	4845      	ldr	r0, [pc, #276]	; (800420c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80040f6:	f7ff fb5e 	bl	80037b6 <_PreparePacket>
 80040fa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004104:	4b42      	ldr	r3, [pc, #264]	; (8004210 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
 800410a:	e00b      	b.n	8004124 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800410c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	09db      	lsrs	r3, r3, #7
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	2b7f      	cmp	r3, #127	; 0x7f
 8004128:	d8f0      	bhi.n	800410c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004138:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
 800413e:	4b34      	ldr	r3, [pc, #208]	; (8004210 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	623b      	str	r3, [r7, #32]
 8004144:	e00b      	b.n	800415e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	627a      	str	r2, [r7, #36]	; 0x24
 800414c:	6a3a      	ldr	r2, [r7, #32]
 800414e:	b2d2      	uxtb	r2, r2
 8004150:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	09db      	lsrs	r3, r3, #7
 800415c:	623b      	str	r3, [r7, #32]
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	2b7f      	cmp	r3, #127	; 0x7f
 8004162:	d8f0      	bhi.n	8004146 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	627a      	str	r2, [r7, #36]	; 0x24
 800416a:	6a3a      	ldr	r2, [r7, #32]
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	701a      	strb	r2, [r3, #0]
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	61fb      	str	r3, [r7, #28]
 8004178:	4b25      	ldr	r3, [pc, #148]	; (8004210 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	e00b      	b.n	8004198 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	61fa      	str	r2, [r7, #28]
 8004186:	69ba      	ldr	r2, [r7, #24]
 8004188:	b2d2      	uxtb	r2, r2
 800418a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	09db      	lsrs	r3, r3, #7
 8004196:	61bb      	str	r3, [r7, #24]
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b7f      	cmp	r3, #127	; 0x7f
 800419c:	d8f0      	bhi.n	8004180 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	61fa      	str	r2, [r7, #28]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	2302      	movs	r3, #2
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	e00b      	b.n	80041d0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	617a      	str	r2, [r7, #20]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	09db      	lsrs	r3, r3, #7
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2b7f      	cmp	r3, #127	; 0x7f
 80041d4:	d8f0      	bhi.n	80041b8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	617a      	str	r2, [r7, #20]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80041e6:	2218      	movs	r2, #24
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	68b8      	ldr	r0, [r7, #8]
 80041ec:	f7ff fbba 	bl	8003964 <_SendPacket>
  RECORD_END();
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80041f6:	4b06      	ldr	r3, [pc, #24]	; (8004210 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80041fe:	4b04      	ldr	r3, [pc, #16]	; (8004210 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	4798      	blx	r3
  }
}
 8004204:	bf00      	nop
 8004206:	3730      	adds	r7, #48	; 0x30
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	20015298 	.word	0x20015298
 8004210:	20015268 	.word	0x20015268

08004214 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b092      	sub	sp, #72	; 0x48
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800421c:	f3ef 8311 	mrs	r3, BASEPRI
 8004220:	f04f 0120 	mov.w	r1, #32
 8004224:	f381 8811 	msr	BASEPRI, r1
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	486b      	ldr	r0, [pc, #428]	; (80043d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800422c:	f7ff fac3 	bl	80037b6 <_PreparePacket>
 8004230:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	647b      	str	r3, [r7, #68]	; 0x44
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4b67      	ldr	r3, [pc, #412]	; (80043dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	089b      	lsrs	r3, r3, #2
 8004246:	643b      	str	r3, [r7, #64]	; 0x40
 8004248:	e00b      	b.n	8004262 <SEGGER_SYSVIEW_SendTaskInfo+0x4e>
 800424a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	647a      	str	r2, [r7, #68]	; 0x44
 8004250:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	701a      	strb	r2, [r3, #0]
 800425c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800425e:	09db      	lsrs	r3, r3, #7
 8004260:	643b      	str	r3, [r7, #64]	; 0x40
 8004262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004264:	2b7f      	cmp	r3, #127	; 0x7f
 8004266:	d8f0      	bhi.n	800424a <SEGGER_SYSVIEW_SendTaskInfo+0x36>
 8004268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	647a      	str	r2, [r7, #68]	; 0x44
 800426e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	701a      	strb	r2, [r3, #0]
 8004274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004276:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	63bb      	str	r3, [r7, #56]	; 0x38
 8004282:	e00b      	b.n	800429c <SEGGER_SYSVIEW_SendTaskInfo+0x88>
 8004284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	63fa      	str	r2, [r7, #60]	; 0x3c
 800428a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004298:	09db      	lsrs	r3, r3, #7
 800429a:	63bb      	str	r3, [r7, #56]	; 0x38
 800429c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429e:	2b7f      	cmp	r3, #127	; 0x7f
 80042a0:	d8f0      	bhi.n	8004284 <SEGGER_SYSVIEW_SendTaskInfo+0x70>
 80042a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]
 80042ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b0:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2220      	movs	r2, #32
 80042b8:	4619      	mov	r1, r3
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f7ff fa2e 	bl	800371c <_EncodeStr>
 80042c0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80042c2:	2209      	movs	r2, #9
 80042c4:	68f9      	ldr	r1, [r7, #12]
 80042c6:	6938      	ldr	r0, [r7, #16]
 80042c8:	f7ff fb4c 	bl	8003964 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	637b      	str	r3, [r7, #52]	; 0x34
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4b40      	ldr	r3, [pc, #256]	; (80043dc <SEGGER_SYSVIEW_SendTaskInfo+0x1c8>)
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	089b      	lsrs	r3, r3, #2
 80042e0:	633b      	str	r3, [r7, #48]	; 0x30
 80042e2:	e00b      	b.n	80042fc <SEGGER_SYSVIEW_SendTaskInfo+0xe8>
 80042e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	637a      	str	r2, [r7, #52]	; 0x34
 80042ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	09db      	lsrs	r3, r3, #7
 80042fa:	633b      	str	r3, [r7, #48]	; 0x30
 80042fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fe:	2b7f      	cmp	r3, #127	; 0x7f
 8004300:	d8f0      	bhi.n	80042e4 <SEGGER_SYSVIEW_SendTaskInfo+0xd0>
 8004302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	637a      	str	r2, [r7, #52]	; 0x34
 8004308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004310:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	62bb      	str	r3, [r7, #40]	; 0x28
 800431c:	e00b      	b.n	8004336 <SEGGER_SYSVIEW_SendTaskInfo+0x122>
 800431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	09db      	lsrs	r3, r3, #7
 8004334:	62bb      	str	r3, [r7, #40]	; 0x28
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	2b7f      	cmp	r3, #127	; 0x7f
 800433a:	d8f0      	bhi.n	800431e <SEGGER_SYSVIEW_SendTaskInfo+0x10a>
 800433c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	701a      	strb	r2, [r3, #0]
 8004348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	623b      	str	r3, [r7, #32]
 8004356:	e00b      	b.n	8004370 <SEGGER_SYSVIEW_SendTaskInfo+0x15c>
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	627a      	str	r2, [r7, #36]	; 0x24
 800435e:	6a3a      	ldr	r2, [r7, #32]
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	6a3b      	ldr	r3, [r7, #32]
 800436c:	09db      	lsrs	r3, r3, #7
 800436e:	623b      	str	r3, [r7, #32]
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	2b7f      	cmp	r3, #127	; 0x7f
 8004374:	d8f0      	bhi.n	8004358 <SEGGER_SYSVIEW_SendTaskInfo+0x144>
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	627a      	str	r2, [r7, #36]	; 0x24
 800437c:	6a3a      	ldr	r2, [r7, #32]
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	61fb      	str	r3, [r7, #28]
 800438a:	2300      	movs	r3, #0
 800438c:	61bb      	str	r3, [r7, #24]
 800438e:	e00b      	b.n	80043a8 <SEGGER_SYSVIEW_SendTaskInfo+0x194>
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	61fa      	str	r2, [r7, #28]
 8004396:	69ba      	ldr	r2, [r7, #24]
 8004398:	b2d2      	uxtb	r2, r2
 800439a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	09db      	lsrs	r3, r3, #7
 80043a6:	61bb      	str	r3, [r7, #24]
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b7f      	cmp	r3, #127	; 0x7f
 80043ac:	d8f0      	bhi.n	8004390 <SEGGER_SYSVIEW_SendTaskInfo+0x17c>
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	1c5a      	adds	r2, r3, #1
 80043b2:	61fa      	str	r2, [r7, #28]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80043be:	2215      	movs	r2, #21
 80043c0:	68f9      	ldr	r1, [r7, #12]
 80043c2:	6938      	ldr	r0, [r7, #16]
 80043c4:	f7ff face 	bl	8003964 <_SendPacket>
  RECORD_END();
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f383 8811 	msr	BASEPRI, r3
}
 80043ce:	bf00      	nop
 80043d0:	3748      	adds	r7, #72	; 0x48
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20015298 	.word	0x20015298
 80043dc:	20015268 	.word	0x20015268

080043e0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80043e4:	4b07      	ldr	r3, [pc, #28]	; (8004404 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80043f6:	4b03      	ldr	r3, [pc, #12]	; (8004404 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	4798      	blx	r3
  }
}
 80043fe:	bf00      	nop
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20015268 	.word	0x20015268

08004408 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004410:	f3ef 8311 	mrs	r3, BASEPRI
 8004414:	f04f 0120 	mov.w	r1, #32
 8004418:	f381 8811 	msr	BASEPRI, r1
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	480b      	ldr	r0, [pc, #44]	; (800444c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004420:	f7ff f9c9 	bl	80037b6 <_PreparePacket>
 8004424:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004426:	2280      	movs	r2, #128	; 0x80
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	6938      	ldr	r0, [r7, #16]
 800442c:	f7ff f976 	bl	800371c <_EncodeStr>
 8004430:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004432:	220e      	movs	r2, #14
 8004434:	68f9      	ldr	r1, [r7, #12]
 8004436:	6938      	ldr	r0, [r7, #16]
 8004438:	f7ff fa94 	bl	8003964 <_SendPacket>
  RECORD_END();
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f383 8811 	msr	BASEPRI, r3
}
 8004442:	bf00      	nop
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20015298 	.word	0x20015298

08004450 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004456:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d015      	beq.n	800448a <SEGGER_SYSVIEW_RecordSystime+0x3a>
 800445e:	4b10      	ldr	r3, [pc, #64]	; (80044a0 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d010      	beq.n	800448a <SEGGER_SYSVIEW_RecordSystime+0x3a>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004468:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <SEGGER_SYSVIEW_RecordSystime+0x50>)
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4798      	blx	r3
 8004470:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004474:	6839      	ldr	r1, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004476:	e897 0018 	ldmia.w	r7, {r3, r4}
 800447a:	0025      	movs	r5, r4
 800447c:	2600      	movs	r6, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800447e:	462b      	mov	r3, r5
 8004480:	461a      	mov	r2, r3
 8004482:	200d      	movs	r0, #13
 8004484:	f7ff fbe8 	bl	8003c58 <SEGGER_SYSVIEW_RecordU32x2>
 8004488:	e005      	b.n	8004496 <SEGGER_SYSVIEW_RecordSystime+0x46>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <SEGGER_SYSVIEW_RecordSystime+0x54>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4619      	mov	r1, r3
 8004490:	200c      	movs	r0, #12
 8004492:	f7ff fba5 	bl	8003be0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800449e:	bf00      	nop
 80044a0:	20015268 	.word	0x20015268
 80044a4:	e0001004 	.word	0xe0001004

080044a8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80044ae:	f3ef 8311 	mrs	r3, BASEPRI
 80044b2:	f04f 0120 	mov.w	r1, #32
 80044b6:	f381 8811 	msr	BASEPRI, r1
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	4819      	ldr	r0, [pc, #100]	; (8004524 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80044be:	f7ff f97a 	bl	80037b6 <_PreparePacket>
 80044c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80044c8:	4b17      	ldr	r3, [pc, #92]	; (8004528 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	e00b      	b.n	80044f4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	617a      	str	r2, [r7, #20]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044ea:	b2d2      	uxtb	r2, r2
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	09db      	lsrs	r3, r3, #7
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	2b7f      	cmp	r3, #127	; 0x7f
 80044f8:	d8f0      	bhi.n	80044dc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	617a      	str	r2, [r7, #20]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800450a:	2202      	movs	r2, #2
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	68b8      	ldr	r0, [r7, #8]
 8004510:	f7ff fa28 	bl	8003964 <_SendPacket>
  RECORD_END();
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f383 8811 	msr	BASEPRI, r3
}
 800451a:	bf00      	nop
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	20015298 	.word	0x20015298
 8004528:	e000ed04 	.word	0xe000ed04

0800452c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004532:	f3ef 8311 	mrs	r3, BASEPRI
 8004536:	f04f 0120 	mov.w	r1, #32
 800453a:	f381 8811 	msr	BASEPRI, r1
 800453e:	607b      	str	r3, [r7, #4]
 8004540:	4807      	ldr	r0, [pc, #28]	; (8004560 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004542:	f7ff f938 	bl	80037b6 <_PreparePacket>
 8004546:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004548:	2203      	movs	r2, #3
 800454a:	6839      	ldr	r1, [r7, #0]
 800454c:	6838      	ldr	r0, [r7, #0]
 800454e:	f7ff fa09 	bl	8003964 <_SendPacket>
  RECORD_END();
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f383 8811 	msr	BASEPRI, r3
}
 8004558:	bf00      	nop
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20015298 	.word	0x20015298

08004564 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800456a:	f3ef 8311 	mrs	r3, BASEPRI
 800456e:	f04f 0120 	mov.w	r1, #32
 8004572:	f381 8811 	msr	BASEPRI, r1
 8004576:	607b      	str	r3, [r7, #4]
 8004578:	4807      	ldr	r0, [pc, #28]	; (8004598 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800457a:	f7ff f91c 	bl	80037b6 <_PreparePacket>
 800457e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004580:	2212      	movs	r2, #18
 8004582:	6839      	ldr	r1, [r7, #0]
 8004584:	6838      	ldr	r0, [r7, #0]
 8004586:	f7ff f9ed 	bl	8003964 <_SendPacket>
  RECORD_END();
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f383 8811 	msr	BASEPRI, r3
}
 8004590:	bf00      	nop
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	20015298 	.word	0x20015298

0800459c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80045a2:	f3ef 8311 	mrs	r3, BASEPRI
 80045a6:	f04f 0120 	mov.w	r1, #32
 80045aa:	f381 8811 	msr	BASEPRI, r1
 80045ae:	607b      	str	r3, [r7, #4]
 80045b0:	4807      	ldr	r0, [pc, #28]	; (80045d0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80045b2:	f7ff f900 	bl	80037b6 <_PreparePacket>
 80045b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80045b8:	2211      	movs	r2, #17
 80045ba:	6839      	ldr	r1, [r7, #0]
 80045bc:	6838      	ldr	r0, [r7, #0]
 80045be:	f7ff f9d1 	bl	8003964 <_SendPacket>
  RECORD_END();
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f383 8811 	msr	BASEPRI, r3
}
 80045c8:	bf00      	nop
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	20015298 	.word	0x20015298

080045d4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b088      	sub	sp, #32
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80045dc:	f3ef 8311 	mrs	r3, BASEPRI
 80045e0:	f04f 0120 	mov.w	r1, #32
 80045e4:	f381 8811 	msr	BASEPRI, r1
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	481a      	ldr	r0, [pc, #104]	; (8004654 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80045ec:	f7ff f8e3 	bl	80037b6 <_PreparePacket>
 80045f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80045f6:	4b18      	ldr	r3, [pc, #96]	; (8004658 <SEGGER_SYSVIEW_OnTaskCreate+0x84>)
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	089b      	lsrs	r3, r3, #2
 8004600:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	e00b      	b.n	8004624 <SEGGER_SYSVIEW_OnTaskCreate+0x50>
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	61fa      	str	r2, [r7, #28]
 8004612:	69ba      	ldr	r2, [r7, #24]
 8004614:	b2d2      	uxtb	r2, r2
 8004616:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800461a:	b2d2      	uxtb	r2, r2
 800461c:	701a      	strb	r2, [r3, #0]
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	09db      	lsrs	r3, r3, #7
 8004622:	61bb      	str	r3, [r7, #24]
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	2b7f      	cmp	r3, #127	; 0x7f
 8004628:	d8f0      	bhi.n	800460c <SEGGER_SYSVIEW_OnTaskCreate+0x38>
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	61fa      	str	r2, [r7, #28]
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	b2d2      	uxtb	r2, r2
 8004634:	701a      	strb	r2, [r3, #0]
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800463a:	2208      	movs	r2, #8
 800463c:	68f9      	ldr	r1, [r7, #12]
 800463e:	6938      	ldr	r0, [r7, #16]
 8004640:	f7ff f990 	bl	8003964 <_SendPacket>
  RECORD_END();
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f383 8811 	msr	BASEPRI, r3
}
 800464a:	bf00      	nop
 800464c:	3720      	adds	r7, #32
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20015298 	.word	0x20015298
 8004658:	20015268 	.word	0x20015268

0800465c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004664:	f3ef 8311 	mrs	r3, BASEPRI
 8004668:	f04f 0120 	mov.w	r1, #32
 800466c:	f381 8811 	msr	BASEPRI, r1
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	481a      	ldr	r0, [pc, #104]	; (80046dc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004674:	f7ff f89f 	bl	80037b6 <_PreparePacket>
 8004678:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800467e:	4b18      	ldr	r3, [pc, #96]	; (80046e0 <SEGGER_SYSVIEW_OnTaskStartExec+0x84>)
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	089b      	lsrs	r3, r3, #2
 8004688:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	61bb      	str	r3, [r7, #24]
 8004692:	e00b      	b.n	80046ac <SEGGER_SYSVIEW_OnTaskStartExec+0x50>
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	61fa      	str	r2, [r7, #28]
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	09db      	lsrs	r3, r3, #7
 80046aa:	61bb      	str	r3, [r7, #24]
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	2b7f      	cmp	r3, #127	; 0x7f
 80046b0:	d8f0      	bhi.n	8004694 <SEGGER_SYSVIEW_OnTaskStartExec+0x38>
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	61fa      	str	r2, [r7, #28]
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	701a      	strb	r2, [r3, #0]
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80046c2:	2204      	movs	r2, #4
 80046c4:	68f9      	ldr	r1, [r7, #12]
 80046c6:	6938      	ldr	r0, [r7, #16]
 80046c8:	f7ff f94c 	bl	8003964 <_SendPacket>
  RECORD_END();
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f383 8811 	msr	BASEPRI, r3
}
 80046d2:	bf00      	nop
 80046d4:	3720      	adds	r7, #32
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	20015298 	.word	0x20015298
 80046e0:	20015268 	.word	0x20015268

080046e4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80046ec:	f3ef 8311 	mrs	r3, BASEPRI
 80046f0:	f04f 0120 	mov.w	r1, #32
 80046f4:	f381 8811 	msr	BASEPRI, r1
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	481a      	ldr	r0, [pc, #104]	; (8004764 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80046fc:	f7ff f85b 	bl	80037b6 <_PreparePacket>
 8004700:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004706:	4b18      	ldr	r3, [pc, #96]	; (8004768 <SEGGER_SYSVIEW_OnTaskStartReady+0x84>)
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	089b      	lsrs	r3, r3, #2
 8004710:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	61fb      	str	r3, [r7, #28]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	61bb      	str	r3, [r7, #24]
 800471a:	e00b      	b.n	8004734 <SEGGER_SYSVIEW_OnTaskStartReady+0x50>
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	61fa      	str	r2, [r7, #28]
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	09db      	lsrs	r3, r3, #7
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	2b7f      	cmp	r3, #127	; 0x7f
 8004738:	d8f0      	bhi.n	800471c <SEGGER_SYSVIEW_OnTaskStartReady+0x38>
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	1c5a      	adds	r2, r3, #1
 800473e:	61fa      	str	r2, [r7, #28]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800474a:	2206      	movs	r2, #6
 800474c:	68f9      	ldr	r1, [r7, #12]
 800474e:	6938      	ldr	r0, [r7, #16]
 8004750:	f7ff f908 	bl	8003964 <_SendPacket>
  RECORD_END();
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f383 8811 	msr	BASEPRI, r3
}
 800475a:	bf00      	nop
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20015298 	.word	0x20015298
 8004768:	20015268 	.word	0x20015268

0800476c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8004774:	4b05      	ldr	r3, [pc, #20]	; (800478c <SEGGER_SYSVIEW_ShrinkId+0x20>)
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	089b      	lsrs	r3, r3, #2
}
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	20015268 	.word	0x20015268

08004790 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b08c      	sub	sp, #48	; 0x30
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800479a:	4b3b      	ldr	r3, [pc, #236]	; (8004888 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d06d      	beq.n	800487e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80047a2:	4b39      	ldr	r3, [pc, #228]	; (8004888 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80047a8:	2300      	movs	r3, #0
 80047aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80047ac:	e008      	b.n	80047c0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80047ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80047b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	3301      	adds	r3, #1
 80047be:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c0:	79fa      	ldrb	r2, [r7, #7]
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d8f2      	bhi.n	80047ae <SEGGER_SYSVIEW_SendModule+0x1e>
 80047c8:	e000      	b.n	80047cc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80047ca:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d055      	beq.n	800487e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80047d2:	f3ef 8311 	mrs	r3, BASEPRI
 80047d6:	f04f 0120 	mov.w	r1, #32
 80047da:	f381 8811 	msr	BASEPRI, r1
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	482a      	ldr	r0, [pc, #168]	; (800488c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80047e2:	f7fe ffe8 	bl	80037b6 <_PreparePacket>
 80047e6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
 80047f0:	79fb      	ldrb	r3, [r7, #7]
 80047f2:	623b      	str	r3, [r7, #32]
 80047f4:	e00b      	b.n	800480e <SEGGER_SYSVIEW_SendModule+0x7e>
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	627a      	str	r2, [r7, #36]	; 0x24
 80047fc:	6a3a      	ldr	r2, [r7, #32]
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004804:	b2d2      	uxtb	r2, r2
 8004806:	701a      	strb	r2, [r3, #0]
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	09db      	lsrs	r3, r3, #7
 800480c:	623b      	str	r3, [r7, #32]
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	2b7f      	cmp	r3, #127	; 0x7f
 8004812:	d8f0      	bhi.n	80047f6 <SEGGER_SYSVIEW_SendModule+0x66>
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	627a      	str	r2, [r7, #36]	; 0x24
 800481a:	6a3a      	ldr	r2, [r7, #32]
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	61fb      	str	r3, [r7, #28]
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	61bb      	str	r3, [r7, #24]
 800482e:	e00b      	b.n	8004848 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	61fa      	str	r2, [r7, #28]
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	09db      	lsrs	r3, r3, #7
 8004846:	61bb      	str	r3, [r7, #24]
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	2b7f      	cmp	r3, #127	; 0x7f
 800484c:	d8f0      	bhi.n	8004830 <SEGGER_SYSVIEW_SendModule+0xa0>
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	61fa      	str	r2, [r7, #28]
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	b2d2      	uxtb	r2, r2
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2280      	movs	r2, #128	; 0x80
 8004864:	4619      	mov	r1, r3
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f7fe ff58 	bl	800371c <_EncodeStr>
 800486c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800486e:	2216      	movs	r2, #22
 8004870:	68f9      	ldr	r1, [r7, #12]
 8004872:	6938      	ldr	r0, [r7, #16]
 8004874:	f7ff f876 	bl	8003964 <_SendPacket>
      RECORD_END();
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800487e:	bf00      	nop
 8004880:	3730      	adds	r7, #48	; 0x30
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20015290 	.word	0x20015290
 800488c:	20015298 	.word	0x20015298

08004890 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00f      	beq.n	80048be <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800489e:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d002      	beq.n	80048b2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f2      	bne.n	80048a4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80048be:	bf00      	nop
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	20015290 	.word	0x20015290

080048cc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80048d2:	f3ef 8311 	mrs	r3, BASEPRI
 80048d6:	f04f 0120 	mov.w	r1, #32
 80048da:	f381 8811 	msr	BASEPRI, r1
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	4817      	ldr	r0, [pc, #92]	; (8004940 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80048e2:	f7fe ff68 	bl	80037b6 <_PreparePacket>
 80048e6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	4b14      	ldr	r3, [pc, #80]	; (8004944 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	e00b      	b.n	8004910 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	617a      	str	r2, [r7, #20]
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	09db      	lsrs	r3, r3, #7
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	2b7f      	cmp	r3, #127	; 0x7f
 8004914:	d8f0      	bhi.n	80048f8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	617a      	str	r2, [r7, #20]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004926:	221b      	movs	r2, #27
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	68b8      	ldr	r0, [r7, #8]
 800492c:	f7ff f81a 	bl	8003964 <_SendPacket>
  RECORD_END();
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f383 8811 	msr	BASEPRI, r3
}
 8004936:	bf00      	nop
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20015298 	.word	0x20015298
 8004944:	20015294 	.word	0x20015294

08004948 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004950:	f3ef 8311 	mrs	r3, BASEPRI
 8004954:	f04f 0120 	mov.w	r1, #32
 8004958:	f381 8811 	msr	BASEPRI, r1
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	4827      	ldr	r0, [pc, #156]	; (80049fc <SEGGER_SYSVIEW_Warn+0xb4>)
 8004960:	f7fe ff29 	bl	80037b6 <_PreparePacket>
 8004964:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004966:	2280      	movs	r2, #128	; 0x80
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	6938      	ldr	r0, [r7, #16]
 800496c:	f7fe fed6 	bl	800371c <_EncodeStr>
 8004970:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
 8004976:	2301      	movs	r3, #1
 8004978:	623b      	str	r3, [r7, #32]
 800497a:	e00b      	b.n	8004994 <SEGGER_SYSVIEW_Warn+0x4c>
 800497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	627a      	str	r2, [r7, #36]	; 0x24
 8004982:	6a3a      	ldr	r2, [r7, #32]
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	09db      	lsrs	r3, r3, #7
 8004992:	623b      	str	r3, [r7, #32]
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	2b7f      	cmp	r3, #127	; 0x7f
 8004998:	d8f0      	bhi.n	800497c <SEGGER_SYSVIEW_Warn+0x34>
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	627a      	str	r2, [r7, #36]	; 0x24
 80049a0:	6a3a      	ldr	r2, [r7, #32]
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	61fb      	str	r3, [r7, #28]
 80049ae:	2300      	movs	r3, #0
 80049b0:	61bb      	str	r3, [r7, #24]
 80049b2:	e00b      	b.n	80049cc <SEGGER_SYSVIEW_Warn+0x84>
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	61fa      	str	r2, [r7, #28]
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	701a      	strb	r2, [r3, #0]
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	09db      	lsrs	r3, r3, #7
 80049ca:	61bb      	str	r3, [r7, #24]
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b7f      	cmp	r3, #127	; 0x7f
 80049d0:	d8f0      	bhi.n	80049b4 <SEGGER_SYSVIEW_Warn+0x6c>
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	61fa      	str	r2, [r7, #28]
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	701a      	strb	r2, [r3, #0]
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80049e2:	221a      	movs	r2, #26
 80049e4:	68f9      	ldr	r1, [r7, #12]
 80049e6:	6938      	ldr	r0, [r7, #16]
 80049e8:	f7fe ffbc 	bl	8003964 <_SendPacket>
  RECORD_END();
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f383 8811 	msr	BASEPRI, r3
}
 80049f2:	bf00      	nop
 80049f4:	3728      	adds	r7, #40	; 0x28
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20015298 	.word	0x20015298

08004a00 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8004a04:	4b38      	ldr	r3, [pc, #224]	; (8004ae8 <Audio_MAL_IRQHandler+0xe8>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	4b38      	ldr	r3, [pc, #224]	; (8004aec <Audio_MAL_IRQHandler+0xec>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	f7fb fc86 	bl	8000320 <DMA_GetFlagStatus>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d064      	beq.n	8004ae4 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8004a1a:	4b35      	ldr	r3, [pc, #212]	; (8004af0 <Audio_MAL_IRQHandler+0xf0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d04c      	beq.n	8004abc <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8004a22:	bf00      	nop
 8004a24:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <Audio_MAL_IRQHandler+0xe8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fb fc61 	bl	80002f0 <DMA_GetCmdStatus>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f7      	bne.n	8004a24 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8004a34:	4b2c      	ldr	r3, [pc, #176]	; (8004ae8 <Audio_MAL_IRQHandler+0xe8>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	4b2c      	ldr	r3, [pc, #176]	; (8004aec <Audio_MAL_IRQHandler+0xec>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	f7fb fcaa 	bl	8000398 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8004a44:	4b2b      	ldr	r3, [pc, #172]	; (8004af4 <Audio_MAL_IRQHandler+0xf4>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4b2b      	ldr	r3, [pc, #172]	; (8004af8 <Audio_MAL_IRQHandler+0xf8>)
 8004a4c:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8004a4e:	4b28      	ldr	r3, [pc, #160]	; (8004af0 <Audio_MAL_IRQHandler+0xf0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a56:	4293      	cmp	r3, r2
 8004a58:	bf28      	it	cs
 8004a5a:	4613      	movcs	r3, r2
 8004a5c:	4a26      	ldr	r2, [pc, #152]	; (8004af8 <Audio_MAL_IRQHandler+0xf8>)
 8004a5e:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8004a60:	4b21      	ldr	r3, [pc, #132]	; (8004ae8 <Audio_MAL_IRQHandler+0xe8>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4924      	ldr	r1, [pc, #144]	; (8004af8 <Audio_MAL_IRQHandler+0xf8>)
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fb fbce 	bl	8000208 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8004a6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <Audio_MAL_IRQHandler+0xe8>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2101      	movs	r1, #1
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fb fc20 	bl	80002b8 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8004a78:	4b1e      	ldr	r3, [pc, #120]	; (8004af4 <Audio_MAL_IRQHandler+0xf4>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4b1c      	ldr	r3, [pc, #112]	; (8004af0 <Audio_MAL_IRQHandler+0xf0>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a84:	d203      	bcs.n	8004a8e <Audio_MAL_IRQHandler+0x8e>
 8004a86:	4b1a      	ldr	r3, [pc, #104]	; (8004af0 <Audio_MAL_IRQHandler+0xf0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	e000      	b.n	8004a90 <Audio_MAL_IRQHandler+0x90>
 8004a8e:	4b1b      	ldr	r3, [pc, #108]	; (8004afc <Audio_MAL_IRQHandler+0xfc>)
 8004a90:	4413      	add	r3, r2
 8004a92:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <Audio_MAL_IRQHandler+0xf4>)
 8004a94:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8004a96:	4b16      	ldr	r3, [pc, #88]	; (8004af0 <Audio_MAL_IRQHandler+0xf0>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4b15      	ldr	r3, [pc, #84]	; (8004af0 <Audio_MAL_IRQHandler+0xf0>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004aa2:	428b      	cmp	r3, r1
 8004aa4:	bf28      	it	cs
 8004aa6:	460b      	movcs	r3, r1
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	4a11      	ldr	r2, [pc, #68]	; (8004af0 <Audio_MAL_IRQHandler+0xf0>)
 8004aac:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8004aae:	4b0e      	ldr	r3, [pc, #56]	; (8004ae8 <Audio_MAL_IRQHandler+0xe8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7fb fbff 	bl	80002b8 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8004aba:	e013      	b.n	8004ae4 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <Audio_MAL_IRQHandler+0xe8>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fb fbf8 	bl	80002b8 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8004ac8:	4b07      	ldr	r3, [pc, #28]	; (8004ae8 <Audio_MAL_IRQHandler+0xe8>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b07      	ldr	r3, [pc, #28]	; (8004aec <Audio_MAL_IRQHandler+0xec>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	f7fb fc60 	bl	8000398 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8004ad8:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <Audio_MAL_IRQHandler+0xf4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f980 	bl	8004de4 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8004ae4:	bf00      	nop
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	2000000c 	.word	0x2000000c
 8004aec:	20000010 	.word	0x20000010
 8004af0:	20000004 	.word	0x20000004
 8004af4:	2001546c 	.word	0x2001546c
 8004af8:	200154ac 	.word	0x200154ac
 8004afc:	0001fffe 	.word	0x0001fffe

08004b00 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8004b04:	f7ff ff7c 	bl	8004a00 <Audio_MAL_IRQHandler>
}
 8004b08:	bf00      	nop
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8004b10:	f7ff ff76 	bl	8004a00 <Audio_MAL_IRQHandler>
}
 8004b14:	bf00      	nop
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8004b1c:	2102      	movs	r1, #2
 8004b1e:	480d      	ldr	r0, [pc, #52]	; (8004b54 <SPI3_IRQHandler+0x3c>)
 8004b20:	f7fb fe17 	bl	8000752 <SPI_I2S_GetFlagStatus>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d011      	beq.n	8004b4e <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <SPI3_IRQHandler+0x40>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d106      	bne.n	8004b40 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8004b32:	f000 f962 	bl	8004dfa <EVAL_AUDIO_GetSampleCallBack>
 8004b36:	4603      	mov	r3, r0
 8004b38:	4619      	mov	r1, r3
 8004b3a:	2004      	movs	r0, #4
 8004b3c:	f7fb fb48 	bl	80001d0 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8004b40:	f000 f95b 	bl	8004dfa <EVAL_AUDIO_GetSampleCallBack>
 8004b44:	4603      	mov	r3, r0
 8004b46:	4619      	mov	r1, r3
 8004b48:	4802      	ldr	r0, [pc, #8]	; (8004b54 <SPI3_IRQHandler+0x3c>)
 8004b4a:	f7fb fdf3 	bl	8000734 <SPI_I2S_SendData>
  }
}
 8004b4e:	bf00      	nop
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	40003c00 	.word	0x40003c00
 8004b58:	20000008 	.word	0x20000008

08004b5c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8004b66:	4909      	ldr	r1, [pc, #36]	; (8004b8c <NVIC_EnableIRQ+0x30>)
 8004b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6c:	095b      	lsrs	r3, r3, #5
 8004b6e:	79fa      	ldrb	r2, [r7, #7]
 8004b70:	f002 021f 	and.w	r2, r2, #31
 8004b74:	2001      	movs	r0, #1
 8004b76:	fa00 f202 	lsl.w	r2, r0, r2
 8004b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	e000e100 	.word	0xe000e100

08004b90 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	6039      	str	r1, [r7, #0]
 8004b9a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8004b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	da0b      	bge.n	8004bbc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8004ba4:	490d      	ldr	r1, [pc, #52]	; (8004bdc <NVIC_SetPriority+0x4c>)
 8004ba6:	79fb      	ldrb	r3, [r7, #7]
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	3b04      	subs	r3, #4
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	b2d2      	uxtb	r2, r2
 8004bb2:	0112      	lsls	r2, r2, #4
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8004bba:	e009      	b.n	8004bd0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8004bbc:	4908      	ldr	r1, [pc, #32]	; (8004be0 <NVIC_SetPriority+0x50>)
 8004bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	0112      	lsls	r2, r2, #4
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	440b      	add	r3, r1
 8004bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	e000ed00 	.word	0xe000ed00
 8004be0:	e000e100 	.word	0xe000e100

08004be4 <EXTI0_IRQHandler>:
void GPIO_Input(void);
void GPIO_Output(void);
void setupConfig(void);
void Button_Handler(void);

void EXTI0_IRQHandler(void){
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
	traceISR_ENTER();
 8004be8:	f7ff fc5e 	bl	80044a8 <SEGGER_SYSVIEW_RecordEnterISR>
	EXTI_ClearITPendingBit(EXTI_Line0);
 8004bec:	2001      	movs	r0, #1
 8004bee:	f7fb fc73 	bl	80004d8 <EXTI_ClearITPendingBit>
	Button_Handler();
 8004bf2:	f000 f82d 	bl	8004c50 <Button_Handler>
	traceISR_EXIT();
 8004bf6:	f7ff fc99 	bl	800452c <SEGGER_SYSVIEW_RecordExitISR>

}
 8004bfa:	bf00      	nop
 8004bfc:	bd80      	pop	{r7, pc}
	...

08004c00 <main>:

uint8_t buttonState = 0;


int main(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af02      	add	r7, sp, #8
	DWT->CTRL |= (1<<0);
 8004c06:	4a0e      	ldr	r2, [pc, #56]	; (8004c40 <main+0x40>)
 8004c08:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <main+0x40>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f043 0301 	orr.w	r3, r3, #1
 8004c10:	6013      	str	r3, [r2, #0]
	RCC_DeInit();
 8004c12:	f7fb fd21 	bl	8000658 <RCC_DeInit>
	SystemCoreClockUpdate();
 8004c16:	f000 f969 	bl	8004eec <SystemCoreClockUpdate>
	setupConfig();
 8004c1a:	f000 f8db 	bl	8004dd4 <setupConfig>
	SEGGER_SYSVIEW_Conf();
 8004c1e:	f7fe fa27 	bl	8003070 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 8004c22:	f7ff f97b 	bl	8003f1c <SEGGER_SYSVIEW_Start>
	xTaskCreate(ledTaskFlashTask, "Led_Kontrol", configMINIMAL_STACK_SIZE, NULL, 2, &myLedTaskHandle);
 8004c26:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <main+0x44>)
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	2282      	movs	r2, #130	; 0x82
 8004c32:	4905      	ldr	r1, [pc, #20]	; (8004c48 <main+0x48>)
 8004c34:	4805      	ldr	r0, [pc, #20]	; (8004c4c <main+0x4c>)
 8004c36:	f7fd f817 	bl	8001c68 <xTaskCreate>
	vTaskStartScheduler();
 8004c3a:	f7fd f9af 	bl	8001f9c <vTaskStartScheduler>



  while (1)
 8004c3e:	e7fe      	b.n	8004c3e <main+0x3e>
 8004c40:	e0001000 	.word	0xe0001000
 8004c44:	2001537c 	.word	0x2001537c
 8004c48:	08005260 	.word	0x08005260
 8004c4c:	08004c7d 	.word	0x08004c7d

08004c50 <Button_Handler>:

  }
}

void Button_Handler(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
	buttonState++;
 8004c54:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <Button_Handler+0x28>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <Button_Handler+0x28>)
 8004c5e:	701a      	strb	r2, [r3, #0]
	if(buttonState==5)
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <Button_Handler+0x28>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b05      	cmp	r3, #5
 8004c66:	d102      	bne.n	8004c6e <Button_Handler+0x1e>
		buttonState=0;
 8004c68:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <Button_Handler+0x28>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	701a      	strb	r2, [r3, #0]

}
 8004c6e:	bf00      	nop
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	20015380 	.word	0x20015380

08004c7c <ledTaskFlashTask>:

void ledTaskFlashTask(void *params){
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
	  while (1)
	  {
		  if(buttonState == 0)
 8004c84:	4b20      	ldr	r3, [pc, #128]	; (8004d08 <ledTaskFlashTask+0x8c>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <ledTaskFlashTask+0x1c>
			  GPIO_ResetBits(GPIOD,GPIO_Pin_All);
 8004c8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c90:	481e      	ldr	r0, [pc, #120]	; (8004d0c <ledTaskFlashTask+0x90>)
 8004c92:	f7fb fcbf 	bl	8000614 <GPIO_ResetBits>
 8004c96:	e7f5      	b.n	8004c84 <ledTaskFlashTask+0x8>
		  else if(buttonState == 1){
 8004c98:	4b1b      	ldr	r3, [pc, #108]	; (8004d08 <ledTaskFlashTask+0x8c>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d109      	bne.n	8004cb4 <ledTaskFlashTask+0x38>
			  GPIO_ToggleBits(GPIOD,GPIO_Pin_All);
 8004ca0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004ca4:	4819      	ldr	r0, [pc, #100]	; (8004d0c <ledTaskFlashTask+0x90>)
 8004ca6:	f7fb fcc4 	bl	8000632 <GPIO_ToggleBits>
			  vTaskDelay(1000);
 8004caa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cae:	f7fd f93d 	bl	8001f2c <vTaskDelay>
 8004cb2:	e7e7      	b.n	8004c84 <ledTaskFlashTask+0x8>
		  }
		  else if(buttonState == 2){
 8004cb4:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <ledTaskFlashTask+0x8c>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d109      	bne.n	8004cd0 <ledTaskFlashTask+0x54>
			  GPIO_ToggleBits(GPIOD,GPIO_Pin_All);
 8004cbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004cc0:	4812      	ldr	r0, [pc, #72]	; (8004d0c <ledTaskFlashTask+0x90>)
 8004cc2:	f7fb fcb6 	bl	8000632 <GPIO_ToggleBits>
			  vTaskDelay(750);
 8004cc6:	f240 20ee 	movw	r0, #750	; 0x2ee
 8004cca:	f7fd f92f 	bl	8001f2c <vTaskDelay>
 8004cce:	e7d9      	b.n	8004c84 <ledTaskFlashTask+0x8>
		  }
		  else if(buttonState == 3){
 8004cd0:	4b0d      	ldr	r3, [pc, #52]	; (8004d08 <ledTaskFlashTask+0x8c>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d109      	bne.n	8004cec <ledTaskFlashTask+0x70>
			  GPIO_ToggleBits(GPIOD,GPIO_Pin_All);
 8004cd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004cdc:	480b      	ldr	r0, [pc, #44]	; (8004d0c <ledTaskFlashTask+0x90>)
 8004cde:	f7fb fca8 	bl	8000632 <GPIO_ToggleBits>
			  vTaskDelay(500);
 8004ce2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ce6:	f7fd f921 	bl	8001f2c <vTaskDelay>
 8004cea:	e7cb      	b.n	8004c84 <ledTaskFlashTask+0x8>
		  }
		  else if(buttonState == 4){
 8004cec:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <ledTaskFlashTask+0x8c>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b04      	cmp	r3, #4
 8004cf2:	d1c7      	bne.n	8004c84 <ledTaskFlashTask+0x8>
			  GPIO_ToggleBits(GPIOD,GPIO_Pin_All);
 8004cf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004cf8:	4804      	ldr	r0, [pc, #16]	; (8004d0c <ledTaskFlashTask+0x90>)
 8004cfa:	f7fb fc9a 	bl	8000632 <GPIO_ToggleBits>
			  vTaskDelay(250);
 8004cfe:	20fa      	movs	r0, #250	; 0xfa
 8004d00:	f7fd f914 	bl	8001f2c <vTaskDelay>
		  if(buttonState == 0)
 8004d04:	e7be      	b.n	8004c84 <ledTaskFlashTask+0x8>
 8004d06:	bf00      	nop
 8004d08:	20015380 	.word	0x20015380
 8004d0c:	40020c00 	.word	0x40020c00

08004d10 <GPIO_Input>:
		  }

	  }
}

void GPIO_Input(){
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0

	EXTI_InitTypeDef EXTI_InitStruct = {0};
 8004d16:	463b      	mov	r3, r7
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	605a      	str	r2, [r3, #4]

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);
 8004d1e:	2101      	movs	r1, #1
 8004d20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004d24:	f7fb fce6 	bl	80006f4 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8004d28:	2101      	movs	r1, #1
 8004d2a:	2001      	movs	r0, #1
 8004d2c:	f7fb fcc2 	bl	80006b4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8004d30:	4b16      	ldr	r3, [pc, #88]	; (8004d8c <GPIO_Input+0x7c>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8004d36:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <GPIO_Input+0x7c>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 8004d3c:	4b13      	ldr	r3, [pc, #76]	; (8004d8c <GPIO_Input+0x7c>)
 8004d3e:	2201      	movs	r2, #1
 8004d40:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8004d42:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <GPIO_Input+0x7c>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8004d48:	4b10      	ldr	r3, [pc, #64]	; (8004d8c <GPIO_Input+0x7c>)
 8004d4a:	2203      	movs	r2, #3
 8004d4c:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8004d4e:	490f      	ldr	r1, [pc, #60]	; (8004d8c <GPIO_Input+0x7c>)
 8004d50:	480f      	ldr	r0, [pc, #60]	; (8004d90 <GPIO_Input+0x80>)
 8004d52:	f7fb fbd1 	bl	80004f8 <GPIO_Init>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource0);
 8004d56:	2100      	movs	r1, #0
 8004d58:	2000      	movs	r0, #0
 8004d5a:	f7fb fd17 	bl	800078c <SYSCFG_EXTILineConfig>
	EXTI_InitStruct.EXTI_Line = EXTI_Line0;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	603b      	str	r3, [r7, #0]
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8004d62:	2301      	movs	r3, #1
 8004d64:	71bb      	strb	r3, [r7, #6]
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8004d66:	2300      	movs	r3, #0
 8004d68:	713b      	strb	r3, [r7, #4]
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 8004d6a:	2308      	movs	r3, #8
 8004d6c:	717b      	strb	r3, [r7, #5]
	EXTI_Init(&EXTI_InitStruct);
 8004d6e:	463b      	mov	r3, r7
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fb fb3f 	bl	80003f4 <EXTI_Init>

	NVIC_SetPriority(EXTI0_IRQn,1);
 8004d76:	2101      	movs	r1, #1
 8004d78:	2006      	movs	r0, #6
 8004d7a:	f7ff ff09 	bl	8004b90 <NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 8004d7e:	2006      	movs	r0, #6
 8004d80:	f7ff feec 	bl	8004b5c <NVIC_EnableIRQ>

}
 8004d84:	bf00      	nop
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	200154e8 	.word	0x200154e8
 8004d90:	40020000 	.word	0x40020000

08004d94 <GPIO_Output>:



void GPIO_Output(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
 8004d98:	2101      	movs	r1, #1
 8004d9a:	2008      	movs	r0, #8
 8004d9c:	f7fb fc8a 	bl	80006b4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8004da0:	4b0a      	ldr	r3, [pc, #40]	; (8004dcc <GPIO_Output+0x38>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8004da6:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <GPIO_Output+0x38>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8004dac:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <GPIO_Output+0x38>)
 8004dae:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8004db2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8004db4:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <GPIO_Output+0x38>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8004dba:	4b04      	ldr	r3, [pc, #16]	; (8004dcc <GPIO_Output+0x38>)
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOD,&GPIO_InitStruct);
 8004dc0:	4902      	ldr	r1, [pc, #8]	; (8004dcc <GPIO_Output+0x38>)
 8004dc2:	4803      	ldr	r0, [pc, #12]	; (8004dd0 <GPIO_Output+0x3c>)
 8004dc4:	f7fb fb98 	bl	80004f8 <GPIO_Init>
}
 8004dc8:	bf00      	nop
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	200154e8 	.word	0x200154e8
 8004dd0:	40020c00 	.word	0x40020c00

08004dd4 <setupConfig>:

void setupConfig(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
	GPIO_Output();
 8004dd8:	f7ff ffdc 	bl	8004d94 <GPIO_Output>
	GPIO_Input();
 8004ddc:	f7ff ff98 	bl	8004d10 <GPIO_Input>
}
 8004de0:	bf00      	nop
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <EVAL_AUDIO_TransferComplete_CallBack>:

void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8004dee:	bf00      	nop
}
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <EVAL_AUDIO_GetSampleCallBack>:



uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8004dfa:	b480      	push	{r7}
 8004dfc:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 8004dfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004e10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004e12:	e003      	b.n	8004e1c <LoopCopyDataInit>

08004e14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004e14:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004e16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004e18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004e1a:	3104      	adds	r1, #4

08004e1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004e1c:	480b      	ldr	r0, [pc, #44]	; (8004e4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004e1e:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004e20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004e22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004e24:	d3f6      	bcc.n	8004e14 <CopyDataInit>
  ldr  r2, =_sbss
 8004e26:	4a0b      	ldr	r2, [pc, #44]	; (8004e54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004e28:	e002      	b.n	8004e30 <LoopFillZerobss>

08004e2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004e2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004e2c:	f842 3b04 	str.w	r3, [r2], #4

08004e30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004e30:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004e32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004e34:	d3f9      	bcc.n	8004e2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004e36:	f000 f823 	bl	8004e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e3a:	f000 f94f 	bl	80050dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e3e:	f7ff fedf 	bl	8004c00 <main>
  bx  lr    
 8004e42:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004e44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004e48:	08005288 	.word	0x08005288
  ldr  r0, =_sdata
 8004e4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004e50:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 8004e54:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 8004e58:	200154f0 	.word	0x200154f0

08004e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e5c:	e7fe      	b.n	8004e5c <ADC_IRQHandler>

08004e5e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004e62:	e7fe      	b.n	8004e62 <MemManage_Handler+0x4>

08004e64 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004e68:	e7fe      	b.n	8004e68 <BusFault_Handler+0x4>

08004e6a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004e6e:	e7fe      	b.n	8004e6e <UsageFault_Handler+0x4>

08004e70 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
	...

08004e80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004e84:	4a16      	ldr	r2, [pc, #88]	; (8004ee0 <SystemInit+0x60>)
 8004e86:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <SystemInit+0x60>)
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004e94:	4a13      	ldr	r2, [pc, #76]	; (8004ee4 <SystemInit+0x64>)
 8004e96:	4b13      	ldr	r3, [pc, #76]	; (8004ee4 <SystemInit+0x64>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f043 0301 	orr.w	r3, r3, #1
 8004e9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004ea0:	4b10      	ldr	r3, [pc, #64]	; (8004ee4 <SystemInit+0x64>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004ea6:	4a0f      	ldr	r2, [pc, #60]	; (8004ee4 <SystemInit+0x64>)
 8004ea8:	4b0e      	ldr	r3, [pc, #56]	; (8004ee4 <SystemInit+0x64>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004eb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <SystemInit+0x64>)
 8004eb8:	4a0b      	ldr	r2, [pc, #44]	; (8004ee8 <SystemInit+0x68>)
 8004eba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004ebc:	4a09      	ldr	r2, [pc, #36]	; (8004ee4 <SystemInit+0x64>)
 8004ebe:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <SystemInit+0x64>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ec6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004ec8:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <SystemInit+0x64>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8004ece:	f000 f889 	bl	8004fe4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004ed2:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <SystemInit+0x60>)
 8004ed4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ed8:	609a      	str	r2, [r3, #8]
#endif
}
 8004eda:	bf00      	nop
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	e000ed00 	.word	0xe000ed00
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	24003010 	.word	0x24003010

08004eec <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	2302      	movs	r3, #2
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	2300      	movs	r3, #0
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	2302      	movs	r3, #2
 8004f04:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8004f06:	4b32      	ldr	r3, [pc, #200]	; (8004fd0 <SystemCoreClockUpdate+0xe4>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
 8004f0e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d007      	beq.n	8004f26 <SystemCoreClockUpdate+0x3a>
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d009      	beq.n	8004f2e <SystemCoreClockUpdate+0x42>
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d13d      	bne.n	8004f9a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8004f1e:	4b2d      	ldr	r3, [pc, #180]	; (8004fd4 <SystemCoreClockUpdate+0xe8>)
 8004f20:	4a2d      	ldr	r2, [pc, #180]	; (8004fd8 <SystemCoreClockUpdate+0xec>)
 8004f22:	601a      	str	r2, [r3, #0]
      break;
 8004f24:	e03d      	b.n	8004fa2 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8004f26:	4b2b      	ldr	r3, [pc, #172]	; (8004fd4 <SystemCoreClockUpdate+0xe8>)
 8004f28:	4a2c      	ldr	r2, [pc, #176]	; (8004fdc <SystemCoreClockUpdate+0xf0>)
 8004f2a:	601a      	str	r2, [r3, #0]
      break;
 8004f2c:	e039      	b.n	8004fa2 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8004f2e:	4b28      	ldr	r3, [pc, #160]	; (8004fd0 <SystemCoreClockUpdate+0xe4>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	0d9b      	lsrs	r3, r3, #22
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f3a:	4b25      	ldr	r3, [pc, #148]	; (8004fd0 <SystemCoreClockUpdate+0xe4>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f42:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00c      	beq.n	8004f64 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8004f4a:	4a24      	ldr	r2, [pc, #144]	; (8004fdc <SystemCoreClockUpdate+0xf0>)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f52:	4a1f      	ldr	r2, [pc, #124]	; (8004fd0 <SystemCoreClockUpdate+0xe4>)
 8004f54:	6852      	ldr	r2, [r2, #4]
 8004f56:	0992      	lsrs	r2, r2, #6
 8004f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f5c:	fb02 f303 	mul.w	r3, r2, r3
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	e00b      	b.n	8004f7c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004f64:	4a1c      	ldr	r2, [pc, #112]	; (8004fd8 <SystemCoreClockUpdate+0xec>)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6c:	4a18      	ldr	r2, [pc, #96]	; (8004fd0 <SystemCoreClockUpdate+0xe4>)
 8004f6e:	6852      	ldr	r2, [r2, #4]
 8004f70:	0992      	lsrs	r2, r2, #6
 8004f72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f76:	fb02 f303 	mul.w	r3, r2, r3
 8004f7a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004f7c:	4b14      	ldr	r3, [pc, #80]	; (8004fd0 <SystemCoreClockUpdate+0xe4>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	0c1b      	lsrs	r3, r3, #16
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	3301      	adds	r3, #1
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f94:	4a0f      	ldr	r2, [pc, #60]	; (8004fd4 <SystemCoreClockUpdate+0xe8>)
 8004f96:	6013      	str	r3, [r2, #0]
      break;
 8004f98:	e003      	b.n	8004fa2 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8004f9a:	4b0e      	ldr	r3, [pc, #56]	; (8004fd4 <SystemCoreClockUpdate+0xe8>)
 8004f9c:	4a0e      	ldr	r2, [pc, #56]	; (8004fd8 <SystemCoreClockUpdate+0xec>)
 8004f9e:	601a      	str	r2, [r3, #0]
      break;
 8004fa0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004fa2:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <SystemCoreClockUpdate+0xe4>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	091b      	lsrs	r3, r3, #4
 8004fa8:	f003 030f 	and.w	r3, r3, #15
 8004fac:	4a0c      	ldr	r2, [pc, #48]	; (8004fe0 <SystemCoreClockUpdate+0xf4>)
 8004fae:	5cd3      	ldrb	r3, [r2, r3]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004fb4:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <SystemCoreClockUpdate+0xe8>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	fa22 f303 	lsr.w	r3, r2, r3
 8004fbe:	4a05      	ldr	r2, [pc, #20]	; (8004fd4 <SystemCoreClockUpdate+0xe8>)
 8004fc0:	6013      	str	r3, [r2, #0]
}
 8004fc2:	bf00      	nop
 8004fc4:	371c      	adds	r7, #28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	20000014 	.word	0x20000014
 8004fd8:	00f42400 	.word	0x00f42400
 8004fdc:	007a1200 	.word	0x007a1200
 8004fe0:	20000018 	.word	0x20000018

08004fe4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8004fea:	2300      	movs	r3, #0
 8004fec:	607b      	str	r3, [r7, #4]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004ff2:	4a36      	ldr	r2, [pc, #216]	; (80050cc <SetSysClock+0xe8>)
 8004ff4:	4b35      	ldr	r3, [pc, #212]	; (80050cc <SetSysClock+0xe8>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004ffe:	4b33      	ldr	r3, [pc, #204]	; (80050cc <SetSysClock+0xe8>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005006:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3301      	adds	r3, #1
 800500c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d103      	bne.n	800501c <SetSysClock+0x38>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800501a:	d1f0      	bne.n	8004ffe <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800501c:	4b2b      	ldr	r3, [pc, #172]	; (80050cc <SetSysClock+0xe8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8005028:	2301      	movs	r3, #1
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	e001      	b.n	8005032 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800502e:	2300      	movs	r3, #0
 8005030:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d142      	bne.n	80050be <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8005038:	4a24      	ldr	r2, [pc, #144]	; (80050cc <SetSysClock+0xe8>)
 800503a:	4b24      	ldr	r3, [pc, #144]	; (80050cc <SetSysClock+0xe8>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005042:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8005044:	4a22      	ldr	r2, [pc, #136]	; (80050d0 <SetSysClock+0xec>)
 8005046:	4b22      	ldr	r3, [pc, #136]	; (80050d0 <SetSysClock+0xec>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800504e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8005050:	4a1e      	ldr	r2, [pc, #120]	; (80050cc <SetSysClock+0xe8>)
 8005052:	4b1e      	ldr	r3, [pc, #120]	; (80050cc <SetSysClock+0xe8>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8005058:	4a1c      	ldr	r2, [pc, #112]	; (80050cc <SetSysClock+0xe8>)
 800505a:	4b1c      	ldr	r3, [pc, #112]	; (80050cc <SetSysClock+0xe8>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005062:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8005064:	4a19      	ldr	r2, [pc, #100]	; (80050cc <SetSysClock+0xe8>)
 8005066:	4b19      	ldr	r3, [pc, #100]	; (80050cc <SetSysClock+0xe8>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800506e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8005070:	4b16      	ldr	r3, [pc, #88]	; (80050cc <SetSysClock+0xe8>)
 8005072:	4a18      	ldr	r2, [pc, #96]	; (80050d4 <SetSysClock+0xf0>)
 8005074:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8005076:	4a15      	ldr	r2, [pc, #84]	; (80050cc <SetSysClock+0xe8>)
 8005078:	4b14      	ldr	r3, [pc, #80]	; (80050cc <SetSysClock+0xe8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005080:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8005082:	bf00      	nop
 8005084:	4b11      	ldr	r3, [pc, #68]	; (80050cc <SetSysClock+0xe8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0f9      	beq.n	8005084 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8005090:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <SetSysClock+0xf4>)
 8005092:	f240 6205 	movw	r2, #1541	; 0x605
 8005096:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8005098:	4a0c      	ldr	r2, [pc, #48]	; (80050cc <SetSysClock+0xe8>)
 800509a:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <SetSysClock+0xe8>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f023 0303 	bic.w	r3, r3, #3
 80050a2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80050a4:	4a09      	ldr	r2, [pc, #36]	; (80050cc <SetSysClock+0xe8>)
 80050a6:	4b09      	ldr	r3, [pc, #36]	; (80050cc <SetSysClock+0xe8>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f043 0302 	orr.w	r3, r3, #2
 80050ae:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80050b0:	bf00      	nop
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <SetSysClock+0xe8>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 030c 	and.w	r3, r3, #12
 80050ba:	2b08      	cmp	r3, #8
 80050bc:	d1f9      	bne.n	80050b2 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40023800 	.word	0x40023800
 80050d0:	40007000 	.word	0x40007000
 80050d4:	07405408 	.word	0x07405408
 80050d8:	40023c00 	.word	0x40023c00

080050dc <__libc_init_array>:
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	4e0d      	ldr	r6, [pc, #52]	; (8005114 <__libc_init_array+0x38>)
 80050e0:	4c0d      	ldr	r4, [pc, #52]	; (8005118 <__libc_init_array+0x3c>)
 80050e2:	1ba4      	subs	r4, r4, r6
 80050e4:	10a4      	asrs	r4, r4, #2
 80050e6:	2500      	movs	r5, #0
 80050e8:	42a5      	cmp	r5, r4
 80050ea:	d109      	bne.n	8005100 <__libc_init_array+0x24>
 80050ec:	4e0b      	ldr	r6, [pc, #44]	; (800511c <__libc_init_array+0x40>)
 80050ee:	4c0c      	ldr	r4, [pc, #48]	; (8005120 <__libc_init_array+0x44>)
 80050f0:	f000 f83a 	bl	8005168 <_init>
 80050f4:	1ba4      	subs	r4, r4, r6
 80050f6:	10a4      	asrs	r4, r4, #2
 80050f8:	2500      	movs	r5, #0
 80050fa:	42a5      	cmp	r5, r4
 80050fc:	d105      	bne.n	800510a <__libc_init_array+0x2e>
 80050fe:	bd70      	pop	{r4, r5, r6, pc}
 8005100:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005104:	4798      	blx	r3
 8005106:	3501      	adds	r5, #1
 8005108:	e7ee      	b.n	80050e8 <__libc_init_array+0xc>
 800510a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800510e:	4798      	blx	r3
 8005110:	3501      	adds	r5, #1
 8005112:	e7f2      	b.n	80050fa <__libc_init_array+0x1e>
 8005114:	08005280 	.word	0x08005280
 8005118:	08005280 	.word	0x08005280
 800511c:	08005280 	.word	0x08005280
 8005120:	08005284 	.word	0x08005284

08005124 <memcmp>:
 8005124:	b510      	push	{r4, lr}
 8005126:	3901      	subs	r1, #1
 8005128:	4402      	add	r2, r0
 800512a:	4290      	cmp	r0, r2
 800512c:	d101      	bne.n	8005132 <memcmp+0xe>
 800512e:	2000      	movs	r0, #0
 8005130:	bd10      	pop	{r4, pc}
 8005132:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005136:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800513a:	42a3      	cmp	r3, r4
 800513c:	d0f5      	beq.n	800512a <memcmp+0x6>
 800513e:	1b18      	subs	r0, r3, r4
 8005140:	bd10      	pop	{r4, pc}

08005142 <memcpy>:
 8005142:	b510      	push	{r4, lr}
 8005144:	1e43      	subs	r3, r0, #1
 8005146:	440a      	add	r2, r1
 8005148:	4291      	cmp	r1, r2
 800514a:	d100      	bne.n	800514e <memcpy+0xc>
 800514c:	bd10      	pop	{r4, pc}
 800514e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005156:	e7f7      	b.n	8005148 <memcpy+0x6>

08005158 <memset>:
 8005158:	4402      	add	r2, r0
 800515a:	4603      	mov	r3, r0
 800515c:	4293      	cmp	r3, r2
 800515e:	d100      	bne.n	8005162 <memset+0xa>
 8005160:	4770      	bx	lr
 8005162:	f803 1b01 	strb.w	r1, [r3], #1
 8005166:	e7f9      	b.n	800515c <memset+0x4>

08005168 <_init>:
 8005168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516a:	bf00      	nop
 800516c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800516e:	bc08      	pop	{r3}
 8005170:	469e      	mov	lr, r3
 8005172:	4770      	bx	lr

08005174 <_fini>:
 8005174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005176:	bf00      	nop
 8005178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517a:	bc08      	pop	{r3}
 800517c:	469e      	mov	lr, r3
 800517e:	4770      	bx	lr
