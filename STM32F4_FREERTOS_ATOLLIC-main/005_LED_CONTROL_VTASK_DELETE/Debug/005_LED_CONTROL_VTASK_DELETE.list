
005_LED_CONTROL_VTASK_DELETE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003230  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080033c0  080033c0  000133c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080033e8  080033e8  000133e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080033ec  080033ec  000133ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000002c  20000000  080033f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
  7 .bss          00012e50  2000002c  2000002c  0002002c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20012e7c  20012e7c  0002002c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c28c  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001da2  00000000  00000000  0002c2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b70  00000000  00000000  0002e090  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a78  00000000  00000000  0002ec00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005925  00000000  00000000  0002f678  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004513  00000000  00000000  00034f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000394b0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002f34  00000000  00000000  0003952c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0003c460  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000002c 	.word	0x2000002c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080033a8 	.word	0x080033a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000030 	.word	0x20000030
 80001cc:	080033a8 	.word	0x080033a8

080001d0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	460b      	mov	r3, r1
 80001da:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80001e0:	4b08      	ldr	r3, [pc, #32]	; (8000204 <DAC_SetChannel1Data+0x34>)
 80001e2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80001e4:	68fa      	ldr	r2, [r7, #12]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4413      	add	r3, r2
 80001ea:	3308      	adds	r3, #8
 80001ec:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	461a      	mov	r2, r3
 80001f2:	887b      	ldrh	r3, [r7, #2]
 80001f4:	6013      	str	r3, [r2, #0]
}
 80001f6:	bf00      	nop
 80001f8:	3714      	adds	r7, #20
 80001fa:	46bd      	mov	sp, r7
 80001fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	40007400 	.word	0x40007400

08000208 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000208:	b480      	push	{r7}
 800020a:	b085      	sub	sp, #20
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000212:	2300      	movs	r3, #0
 8000214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800021c:	68fa      	ldr	r2, [r7, #12]
 800021e:	4b25      	ldr	r3, [pc, #148]	; (80002b4 <DMA_Init+0xac>)
 8000220:	4013      	ands	r3, r2
 8000222:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000232:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800023e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	6a1b      	ldr	r3, [r3, #32]
 8000244:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800024a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000250:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000256:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800025c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	4313      	orrs	r3, r2
 8000262:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	68fa      	ldr	r2, [r7, #12]
 8000268:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	f023 0307 	bic.w	r3, r3, #7
 8000276:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000280:	4313      	orrs	r3, r2
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	4313      	orrs	r3, r2
 8000286:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	68fa      	ldr	r2, [r7, #12]
 800028c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	691a      	ldr	r2, [r3, #16]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	685a      	ldr	r2, [r3, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	689a      	ldr	r2, [r3, #8]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60da      	str	r2, [r3, #12]
}
 80002a6:	bf00      	nop
 80002a8:	3714      	adds	r7, #20
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	f01c803f 	.word	0xf01c803f

080002b8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
 80002c0:	460b      	mov	r3, r1
 80002c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80002c4:	78fb      	ldrb	r3, [r7, #3]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d006      	beq.n	80002d8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 0201 	orr.w	r2, r3, #1
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80002d6:	e005      	b.n	80002e4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f023 0201 	bic.w	r2, r3, #1
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	601a      	str	r2, [r3, #0]
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr

080002f0 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 80002f8:	2300      	movs	r3, #0
 80002fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f003 0301 	and.w	r3, r3, #1
 8000304:	2b00      	cmp	r3, #0
 8000306:	d002      	beq.n	800030e <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000308:	2301      	movs	r3, #1
 800030a:	73fb      	strb	r3, [r7, #15]
 800030c:	e001      	b.n	8000312 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800030e:	2300      	movs	r3, #0
 8000310:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000312:	7bfb      	ldrb	r3, [r7, #15]
}
 8000314:	4618      	mov	r0, r3
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr

08000320 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000320:	b480      	push	{r7}
 8000322:	b087      	sub	sp, #28
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800032a:	2300      	movs	r3, #0
 800032c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a15      	ldr	r2, [pc, #84]	; (800038c <DMA_GetFlagStatus+0x6c>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d802      	bhi.n	8000340 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800033a:	4b15      	ldr	r3, [pc, #84]	; (8000390 <DMA_GetFlagStatus+0x70>)
 800033c:	613b      	str	r3, [r7, #16]
 800033e:	e001      	b.n	8000344 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000340:	4b14      	ldr	r3, [pc, #80]	; (8000394 <DMA_GetFlagStatus+0x74>)
 8000342:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800034a:	2b00      	cmp	r3, #0
 800034c:	d003      	beq.n	8000356 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	60fb      	str	r3, [r7, #12]
 8000354:	e002      	b.n	800035c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000356:	693b      	ldr	r3, [r7, #16]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000362:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000366:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000368:	68fa      	ldr	r2, [r7, #12]
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	4013      	ands	r3, r2
 800036e:	2b00      	cmp	r3, #0
 8000370:	d002      	beq.n	8000378 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000372:	2301      	movs	r3, #1
 8000374:	75fb      	strb	r3, [r7, #23]
 8000376:	e001      	b.n	800037c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000378:	2300      	movs	r3, #0
 800037a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800037c:	7dfb      	ldrb	r3, [r7, #23]
}
 800037e:	4618      	mov	r0, r3
 8000380:	371c      	adds	r7, #28
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	4002640f 	.word	0x4002640f
 8000390:	40026000 	.word	0x40026000
 8000394:	40026400 	.word	0x40026400

08000398 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000398:	b480      	push	{r7}
 800039a:	b085      	sub	sp, #20
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a10      	ldr	r2, [pc, #64]	; (80003e8 <DMA_ClearFlag+0x50>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d802      	bhi.n	80003b0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80003aa:	4b10      	ldr	r3, [pc, #64]	; (80003ec <DMA_ClearFlag+0x54>)
 80003ac:	60fb      	str	r3, [r7, #12]
 80003ae:	e001      	b.n	80003b4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80003b0:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <DMA_ClearFlag+0x58>)
 80003b2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d007      	beq.n	80003ce <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003c4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80003cc:	e006      	b.n	80003dc <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80003d4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	6093      	str	r3, [r2, #8]
}
 80003dc:	bf00      	nop
 80003de:	3714      	adds	r7, #20
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	4002640f 	.word	0x4002640f
 80003ec:	40026000 	.word	0x40026000
 80003f0:	40026400 	.word	0x40026400

080003f4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b087      	sub	sp, #28
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800040a:	2300      	movs	r3, #0
 800040c:	617b      	str	r3, [r7, #20]
 800040e:	e076      	b.n	80004fe <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000410:	2201      	movs	r2, #1
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	fa02 f303 	lsl.w	r3, r2, r3
 8000418:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	693b      	ldr	r3, [r7, #16]
 8000420:	4013      	ands	r3, r2
 8000422:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000424:	68fa      	ldr	r2, [r7, #12]
 8000426:	693b      	ldr	r3, [r7, #16]
 8000428:	429a      	cmp	r2, r3
 800042a:	d165      	bne.n	80004f8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	2103      	movs	r1, #3
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	43db      	mvns	r3, r3
 800043c:	401a      	ands	r2, r3
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	791b      	ldrb	r3, [r3, #4]
 800044a:	4619      	mov	r1, r3
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	005b      	lsls	r3, r3, #1
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
 8000454:	431a      	orrs	r2, r3
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	791b      	ldrb	r3, [r3, #4]
 800045e:	2b01      	cmp	r3, #1
 8000460:	d003      	beq.n	800046a <GPIO_Init+0x76>
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	791b      	ldrb	r3, [r3, #4]
 8000466:	2b02      	cmp	r3, #2
 8000468:	d12e      	bne.n	80004c8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	689a      	ldr	r2, [r3, #8]
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	2103      	movs	r1, #3
 8000474:	fa01 f303 	lsl.w	r3, r1, r3
 8000478:	43db      	mvns	r3, r3
 800047a:	401a      	ands	r2, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	689a      	ldr	r2, [r3, #8]
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	795b      	ldrb	r3, [r3, #5]
 8000488:	4619      	mov	r1, r3
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	fa01 f303 	lsl.w	r3, r1, r3
 8000492:	431a      	orrs	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	685a      	ldr	r2, [r3, #4]
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	b29b      	uxth	r3, r3
 80004a0:	4619      	mov	r1, r3
 80004a2:	2301      	movs	r3, #1
 80004a4:	408b      	lsls	r3, r1
 80004a6:	43db      	mvns	r3, r3
 80004a8:	401a      	ands	r2, r3
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	683a      	ldr	r2, [r7, #0]
 80004b4:	7992      	ldrb	r2, [r2, #6]
 80004b6:	4611      	mov	r1, r2
 80004b8:	697a      	ldr	r2, [r7, #20]
 80004ba:	b292      	uxth	r2, r2
 80004bc:	fa01 f202 	lsl.w	r2, r1, r2
 80004c0:	b292      	uxth	r2, r2
 80004c2:	431a      	orrs	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	68da      	ldr	r2, [r3, #12]
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	b29b      	uxth	r3, r3
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	2103      	movs	r1, #3
 80004d4:	fa01 f303 	lsl.w	r3, r1, r3
 80004d8:	43db      	mvns	r3, r3
 80004da:	401a      	ands	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	68da      	ldr	r2, [r3, #12]
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	79db      	ldrb	r3, [r3, #7]
 80004e8:	4619      	mov	r1, r3
 80004ea:	697b      	ldr	r3, [r7, #20]
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	431a      	orrs	r2, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	3301      	adds	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	2b0f      	cmp	r3, #15
 8000502:	d985      	bls.n	8000410 <GPIO_Init+0x1c>
    }
  }
}
 8000504:	bf00      	nop
 8000506:	371c      	adds	r7, #28
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr

08000510 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800051c:	2300      	movs	r3, #0
 800051e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	691a      	ldr	r2, [r3, #16]
 8000524:	887b      	ldrh	r3, [r7, #2]
 8000526:	4013      	ands	r3, r2
 8000528:	2b00      	cmp	r3, #0
 800052a:	d002      	beq.n	8000532 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 800052c:	2301      	movs	r3, #1
 800052e:	73fb      	strb	r3, [r7, #15]
 8000530:	e001      	b.n	8000536 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000532:	2300      	movs	r3, #0
 8000534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000536:	7bfb      	ldrb	r3, [r7, #15]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	695a      	ldr	r2, [r3, #20]
 8000554:	887b      	ldrh	r3, [r7, #2]
 8000556:	405a      	eors	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	615a      	str	r2, [r3, #20]
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800056c:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <RCC_DeInit+0x50>)
 800056e:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <RCC_DeInit+0x50>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f043 0301 	orr.w	r3, r3, #1
 8000576:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <RCC_DeInit+0x50>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <RCC_DeInit+0x50>)
 8000580:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <RCC_DeInit+0x50>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8000588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800058c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800058e:	4b0a      	ldr	r3, [pc, #40]	; (80005b8 <RCC_DeInit+0x50>)
 8000590:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <RCC_DeInit+0x54>)
 8000592:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000594:	4b08      	ldr	r3, [pc, #32]	; (80005b8 <RCC_DeInit+0x50>)
 8000596:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <RCC_DeInit+0x58>)
 8000598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800059c:	4a06      	ldr	r2, [pc, #24]	; (80005b8 <RCC_DeInit+0x50>)
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <RCC_DeInit+0x50>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <RCC_DeInit+0x50>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40023800 	.word	0x40023800
 80005bc:	24003010 	.word	0x24003010
 80005c0:	20003000 	.word	0x20003000

080005c4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80005d0:	78fb      	ldrb	r3, [r7, #3]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d006      	beq.n	80005e4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80005d6:	490a      	ldr	r1, [pc, #40]	; (8000600 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4313      	orrs	r3, r2
 80005e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80005e2:	e006      	b.n	80005f2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80005e4:	4906      	ldr	r1, [pc, #24]	; (8000600 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <RCC_AHB1PeriphClockCmd+0x3c>)
 80005e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	43db      	mvns	r3, r3
 80005ee:	4013      	ands	r3, r2
 80005f0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800

08000604 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	460b      	mov	r3, r1
 800060e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	887a      	ldrh	r2, [r7, #2]
 8000614:	819a      	strh	r2, [r3, #12]
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000622:	b480      	push	{r7}
 8000624:	b085      	sub	sp, #20
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	460b      	mov	r3, r1
 800062c:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800062e:	2300      	movs	r3, #0
 8000630:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	891b      	ldrh	r3, [r3, #8]
 8000636:	b29a      	uxth	r2, r3
 8000638:	887b      	ldrh	r3, [r7, #2]
 800063a:	4013      	ands	r3, r2
 800063c:	b29b      	uxth	r3, r3
 800063e:	2b00      	cmp	r3, #0
 8000640:	d002      	beq.n	8000648 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000642:	2301      	movs	r3, #1
 8000644:	73fb      	strb	r3, [r7, #15]
 8000646:	e001      	b.n	800064c <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800064c:	7bfb      	ldrb	r3, [r7, #15]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f103 0208 	add.w	r2, r3, #8
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f04f 32ff 	mov.w	r2, #4294967295
 8000672:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f103 0208 	add.w	r2, r3, #8
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f103 0208 	add.w	r2, r3, #8
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	689a      	ldr	r2, [r3, #8]
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	683a      	ldr	r2, [r7, #0]
 80006de:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	1c5a      	adds	r2, r3, #1
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	601a      	str	r2, [r3, #0]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr

080006fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000712:	d103      	bne.n	800071c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	691b      	ldr	r3, [r3, #16]
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	e00c      	b.n	8000736 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3308      	adds	r3, #8
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	e002      	b.n	800072a <vListInsert+0x2e>
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	681a      	ldr	r2, [r3, #0]
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	429a      	cmp	r2, r3
 8000734:	d9f6      	bls.n	8000724 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	685a      	ldr	r2, [r3, #4]
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	683a      	ldr	r2, [r7, #0]
 8000744:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	601a      	str	r2, [r3, #0]
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800076e:	b480      	push	{r7}
 8000770:	b085      	sub	sp, #20
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	691b      	ldr	r3, [r3, #16]
 800077a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	6892      	ldr	r2, [r2, #8]
 8000784:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	6852      	ldr	r2, [r2, #4]
 800078e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	685a      	ldr	r2, [r3, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	429a      	cmp	r2, r3
 8000798:	d103      	bne.n	80007a2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	689a      	ldr	r2, [r3, #8]
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	1e5a      	subs	r2, r3, #1
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	681b      	ldr	r3, [r3, #0]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	3b04      	subs	r3, #4
 80007d4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80007dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	3b04      	subs	r3, #4
 80007e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	f023 0201 	bic.w	r2, r3, #1
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	3b04      	subs	r3, #4
 80007f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80007f4:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <pxPortInitialiseStack+0x64>)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	3b14      	subs	r3, #20
 80007fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	3b04      	subs	r3, #4
 800080a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f06f 0202 	mvn.w	r2, #2
 8000812:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3b20      	subs	r3, #32
 8000818:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800081a:	68fb      	ldr	r3, [r7, #12]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	0800082d 	.word	0x0800082d

0800082c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <prvTaskExitError+0x50>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800083e:	d009      	beq.n	8000854 <prvTaskExitError+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000844:	f383 8811 	msr	BASEPRI, r3
 8000848:	f3bf 8f6f 	isb	sy
 800084c:	f3bf 8f4f 	dsb	sy
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	e7fe      	b.n	8000852 <prvTaskExitError+0x26>
 8000854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000858:	f383 8811 	msr	BASEPRI, r3
 800085c:	f3bf 8f6f 	isb	sy
 8000860:	f3bf 8f4f 	dsb	sy
 8000864:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8000866:	bf00      	nop
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0fc      	beq.n	8000868 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	20000000 	.word	0x20000000

08000880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <pxCurrentTCBConst2>)
 8000882:	6819      	ldr	r1, [r3, #0]
 8000884:	6808      	ldr	r0, [r1, #0]
 8000886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800088a:	f380 8809 	msr	PSP, r0
 800088e:	f3bf 8f6f 	isb	sy
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	f380 8811 	msr	BASEPRI, r0
 800089a:	4770      	bx	lr
 800089c:	f3af 8000 	nop.w

080008a0 <pxCurrentTCBConst2>:
 80008a0:	20012c70 	.word	0x20012c70
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop

080008a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80008a8:	4808      	ldr	r0, [pc, #32]	; (80008cc <prvPortStartFirstTask+0x24>)
 80008aa:	6800      	ldr	r0, [r0, #0]
 80008ac:	6800      	ldr	r0, [r0, #0]
 80008ae:	f380 8808 	msr	MSP, r0
 80008b2:	f04f 0000 	mov.w	r0, #0
 80008b6:	f380 8814 	msr	CONTROL, r0
 80008ba:	b662      	cpsie	i
 80008bc:	b661      	cpsie	f
 80008be:	f3bf 8f4f 	dsb	sy
 80008c2:	f3bf 8f6f 	isb	sy
 80008c6:	df00      	svc	0
 80008c8:	bf00      	nop
 80008ca:	0000      	.short	0x0000
 80008cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop

080008d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80008da:	4b44      	ldr	r3, [pc, #272]	; (80009ec <xPortStartScheduler+0x118>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a44      	ldr	r2, [pc, #272]	; (80009f0 <xPortStartScheduler+0x11c>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d109      	bne.n	80008f8 <xPortStartScheduler+0x24>
 80008e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e8:	f383 8811 	msr	BASEPRI, r3
 80008ec:	f3bf 8f6f 	isb	sy
 80008f0:	f3bf 8f4f 	dsb	sy
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	e7fe      	b.n	80008f6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80008f8:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <xPortStartScheduler+0x118>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a3d      	ldr	r2, [pc, #244]	; (80009f4 <xPortStartScheduler+0x120>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d109      	bne.n	8000916 <xPortStartScheduler+0x42>
 8000902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000906:	f383 8811 	msr	BASEPRI, r3
 800090a:	f3bf 8f6f 	isb	sy
 800090e:	f3bf 8f4f 	dsb	sy
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	e7fe      	b.n	8000914 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000916:	4b38      	ldr	r3, [pc, #224]	; (80009f8 <xPortStartScheduler+0x124>)
 8000918:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	b2db      	uxtb	r3, r3
 8000920:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	22ff      	movs	r2, #255	; 0xff
 8000926:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b30      	ldr	r3, [pc, #192]	; (80009fc <xPortStartScheduler+0x128>)
 800093c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800093e:	4b30      	ldr	r3, [pc, #192]	; (8000a00 <xPortStartScheduler+0x12c>)
 8000940:	2207      	movs	r2, #7
 8000942:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000944:	e009      	b.n	800095a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8000946:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <xPortStartScheduler+0x12c>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	3b01      	subs	r3, #1
 800094c:	4a2c      	ldr	r2, [pc, #176]	; (8000a00 <xPortStartScheduler+0x12c>)
 800094e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000950:	78fb      	ldrb	r3, [r7, #3]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	b2db      	uxtb	r3, r3
 8000958:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800095a:	78fb      	ldrb	r3, [r7, #3]
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000962:	2b80      	cmp	r3, #128	; 0x80
 8000964:	d0ef      	beq.n	8000946 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <xPortStartScheduler+0x12c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f1c3 0307 	rsb	r3, r3, #7
 800096e:	2b04      	cmp	r3, #4
 8000970:	d009      	beq.n	8000986 <xPortStartScheduler+0xb2>
 8000972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000976:	f383 8811 	msr	BASEPRI, r3
 800097a:	f3bf 8f6f 	isb	sy
 800097e:	f3bf 8f4f 	dsb	sy
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	e7fe      	b.n	8000984 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000986:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <xPortStartScheduler+0x12c>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	021b      	lsls	r3, r3, #8
 800098c:	4a1c      	ldr	r2, [pc, #112]	; (8000a00 <xPortStartScheduler+0x12c>)
 800098e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000990:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <xPortStartScheduler+0x12c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <xPortStartScheduler+0x12c>)
 800099a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80009a4:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <xPortStartScheduler+0x130>)
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <xPortStartScheduler+0x130>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ae:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80009b0:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <xPortStartScheduler+0x130>)
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <xPortStartScheduler+0x130>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80009ba:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80009bc:	f000 f8d4 	bl	8000b68 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <xPortStartScheduler+0x134>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80009c6:	f000 f8f3 	bl	8000bb0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80009ca:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <xPortStartScheduler+0x138>)
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <xPortStartScheduler+0x138>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80009d4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80009d6:	f7ff ff67 	bl	80008a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80009da:	f001 fb6d 	bl	80020b8 <vTaskSwitchContext>
    prvTaskExitError();
 80009de:	f7ff ff25 	bl	800082c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80009e2:	2300      	movs	r3, #0
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	e000ed00 	.word	0xe000ed00
 80009f0:	410fc271 	.word	0x410fc271
 80009f4:	410fc270 	.word	0x410fc270
 80009f8:	e000e400 	.word	0xe000e400
 80009fc:	20000048 	.word	0x20000048
 8000a00:	2000004c 	.word	0x2000004c
 8000a04:	e000ed20 	.word	0xe000ed20
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	e000ef34 	.word	0xe000ef34

08000a10 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a1a:	f383 8811 	msr	BASEPRI, r3
 8000a1e:	f3bf 8f6f 	isb	sy
 8000a22:	f3bf 8f4f 	dsb	sy
 8000a26:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <vPortEnterCritical+0x54>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <vPortEnterCritical+0x54>)
 8000a30:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <vPortEnterCritical+0x54>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d10e      	bne.n	8000a58 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <vPortEnterCritical+0x58>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d009      	beq.n	8000a58 <vPortEnterCritical+0x48>
 8000a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a48:	f383 8811 	msr	BASEPRI, r3
 8000a4c:	f3bf 8f6f 	isb	sy
 8000a50:	f3bf 8f4f 	dsb	sy
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	e7fe      	b.n	8000a56 <vPortEnterCritical+0x46>
    }
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	20000000 	.word	0x20000000
 8000a68:	e000ed04 	.word	0xe000ed04

08000a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <vPortExitCritical+0x4c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d109      	bne.n	8000a8e <vPortExitCritical+0x22>
 8000a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a7e:	f383 8811 	msr	BASEPRI, r3
 8000a82:	f3bf 8f6f 	isb	sy
 8000a86:	f3bf 8f4f 	dsb	sy
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	e7fe      	b.n	8000a8c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8000a8e:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <vPortExitCritical+0x4c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <vPortExitCritical+0x4c>)
 8000a96:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <vPortExitCritical+0x4c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d104      	bne.n	8000aaa <vPortExitCritical+0x3e>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	00000000 	.word	0x00000000

08000ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8000ac0:	f3ef 8009 	mrs	r0, PSP
 8000ac4:	f3bf 8f6f 	isb	sy
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <pxCurrentTCBConst>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	f01e 0f10 	tst.w	lr, #16
 8000ad0:	bf08      	it	eq
 8000ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ada:	6010      	str	r0, [r2, #0]
 8000adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8000ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000ae4:	f380 8811 	msr	BASEPRI, r0
 8000ae8:	f3bf 8f4f 	dsb	sy
 8000aec:	f3bf 8f6f 	isb	sy
 8000af0:	f001 fae2 	bl	80020b8 <vTaskSwitchContext>
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	f380 8811 	msr	BASEPRI, r0
 8000afc:	bc09      	pop	{r0, r3}
 8000afe:	6819      	ldr	r1, [r3, #0]
 8000b00:	6808      	ldr	r0, [r1, #0]
 8000b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b06:	f01e 0f10 	tst.w	lr, #16
 8000b0a:	bf08      	it	eq
 8000b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000b10:	f380 8809 	msr	PSP, r0
 8000b14:	f3bf 8f6f 	isb	sy
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	f3af 8000 	nop.w

08000b20 <pxCurrentTCBConst>:
 8000b20:	20012c70 	.word	0x20012c70
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop

08000b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
        __asm volatile
 8000b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b32:	f383 8811 	msr	BASEPRI, r3
 8000b36:	f3bf 8f6f 	isb	sy
 8000b3a:	f3bf 8f4f 	dsb	sy
 8000b3e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8000b40:	f001 fa02 	bl	8001f48 <xTaskIncrementTick>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <SysTick_Handler+0x3c>)
 8000b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
        __asm volatile
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	e000ed04 	.word	0xe000ed04

08000b68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <vPortSetupTimerInterrupt+0x34>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <vPortSetupTimerInterrupt+0x38>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <vPortSetupTimerInterrupt+0x3c>)
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <vPortSetupTimerInterrupt+0x40>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	490b      	ldr	r1, [pc, #44]	; (8000bac <vPortSetupTimerInterrupt+0x44>)
 8000b80:	fba1 1303 	umull	r1, r3, r1, r3
 8000b84:	099b      	lsrs	r3, r3, #6
 8000b86:	3b01      	subs	r3, #1
 8000b88:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000b8a:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <vPortSetupTimerInterrupt+0x34>)
 8000b8c:	2207      	movs	r2, #7
 8000b8e:	601a      	str	r2, [r3, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e010 	.word	0xe000e010
 8000ba0:	e000e018 	.word	0xe000e018
 8000ba4:	e000e014 	.word	0xe000e014
 8000ba8:	20000018 	.word	0x20000018
 8000bac:	10624dd3 	.word	0x10624dd3

08000bb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8000bb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000bc0 <vPortEnableVFP+0x10>
 8000bb4:	6801      	ldr	r1, [r0, #0]
 8000bb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000bba:	6001      	str	r1, [r0, #0]
 8000bbc:	4770      	bx	lr
 8000bbe:	0000      	.short	0x0000
 8000bc0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop

08000bc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8000bce:	f3ef 8305 	mrs	r3, IPSR
 8000bd2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2b0f      	cmp	r3, #15
 8000bd8:	d913      	bls.n	8000c02 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000bda:	4a16      	ldr	r2, [pc, #88]	; (8000c34 <vPortValidateInterruptPriority+0x6c>)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <vPortValidateInterruptPriority+0x70>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	7afa      	ldrb	r2, [r7, #11]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d209      	bcs.n	8000c02 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8000bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bf2:	f383 8811 	msr	BASEPRI, r3
 8000bf6:	f3bf 8f6f 	isb	sy
 8000bfa:	f3bf 8f4f 	dsb	sy
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	e7fe      	b.n	8000c00 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <vPortValidateInterruptPriority+0x74>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <vPortValidateInterruptPriority+0x78>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d909      	bls.n	8000c26 <vPortValidateInterruptPriority+0x5e>
 8000c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c16:	f383 8811 	msr	BASEPRI, r3
 8000c1a:	f3bf 8f6f 	isb	sy
 8000c1e:	f3bf 8f4f 	dsb	sy
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	e7fe      	b.n	8000c24 <vPortValidateInterruptPriority+0x5c>
    }
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000e3f0 	.word	0xe000e3f0
 8000c38:	20000048 	.word	0x20000048
 8000c3c:	e000ed0c 	.word	0xe000ed0c
 8000c40:	2000004c 	.word	0x2000004c

08000c44 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8000c50:	f001 f8c0 	bl	8001dd4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8000c54:	4b59      	ldr	r3, [pc, #356]	; (8000dbc <pvPortMalloc+0x178>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d101      	bne.n	8000c60 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8000c5c:	f000 f91a 	bl	8000e94 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000c60:	4b57      	ldr	r3, [pc, #348]	; (8000dc0 <pvPortMalloc+0x17c>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4013      	ands	r3, r2
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	f040 8091 	bne.w	8000d90 <pvPortMalloc+0x14c>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d01c      	beq.n	8000cae <pvPortMalloc+0x6a>
            {
                xWantedSize += xHeapStructSize;
 8000c74:	2208      	movs	r2, #8
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d013      	beq.n	8000cae <pvPortMalloc+0x6a>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f023 0307 	bic.w	r3, r3, #7
 8000c8c:	3308      	adds	r3, #8
 8000c8e:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d009      	beq.n	8000cae <pvPortMalloc+0x6a>
 8000c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c9e:	f383 8811 	msr	BASEPRI, r3
 8000ca2:	f3bf 8f6f 	isb	sy
 8000ca6:	f3bf 8f4f 	dsb	sy
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	e7fe      	b.n	8000cac <pvPortMalloc+0x68>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d06d      	beq.n	8000d90 <pvPortMalloc+0x14c>
 8000cb4:	4b43      	ldr	r3, [pc, #268]	; (8000dc4 <pvPortMalloc+0x180>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d868      	bhi.n	8000d90 <pvPortMalloc+0x14c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 8000cbe:	4b42      	ldr	r3, [pc, #264]	; (8000dc8 <pvPortMalloc+0x184>)
 8000cc0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8000cc2:	4b41      	ldr	r3, [pc, #260]	; (8000dc8 <pvPortMalloc+0x184>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000cc8:	e004      	b.n	8000cd4 <pvPortMalloc+0x90>
                {
                    pxPreviousBlock = pxBlock;
 8000cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ccc:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d203      	bcs.n	8000ce6 <pvPortMalloc+0xa2>
 8000cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f1      	bne.n	8000cca <pvPortMalloc+0x86>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8000ce6:	4b35      	ldr	r3, [pc, #212]	; (8000dbc <pvPortMalloc+0x178>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d04f      	beq.n	8000d90 <pvPortMalloc+0x14c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2208      	movs	r2, #8
 8000cf6:	4413      	add	r3, r2
 8000cf8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	1ad2      	subs	r2, r2, r3
 8000d0a:	2308      	movs	r3, #8
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d91e      	bls.n	8000d50 <pvPortMalloc+0x10c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4413      	add	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	f003 0307 	and.w	r3, r3, #7
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d009      	beq.n	8000d38 <pvPortMalloc+0xf4>
 8000d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d28:	f383 8811 	msr	BASEPRI, r3
 8000d2c:	f3bf 8f6f 	isb	sy
 8000d30:	f3bf 8f4f 	dsb	sy
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	e7fe      	b.n	8000d36 <pvPortMalloc+0xf2>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3a:	685a      	ldr	r2, [r3, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	1ad2      	subs	r2, r2, r3
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8000d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000d4a:	69b8      	ldr	r0, [r7, #24]
 8000d4c:	f000 f904 	bl	8000f58 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000d50:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <pvPortMalloc+0x180>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	4a1a      	ldr	r2, [pc, #104]	; (8000dc4 <pvPortMalloc+0x180>)
 8000d5c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <pvPortMalloc+0x180>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <pvPortMalloc+0x188>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d203      	bcs.n	8000d72 <pvPortMalloc+0x12e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <pvPortMalloc+0x180>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <pvPortMalloc+0x188>)
 8000d70:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	685a      	ldr	r2, [r3, #4]
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <pvPortMalloc+0x17c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8000d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <pvPortMalloc+0x18c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	4a10      	ldr	r2, [pc, #64]	; (8000dd0 <pvPortMalloc+0x18c>)
 8000d8e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8000d90:	f001 f82e 	bl	8001df0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d009      	beq.n	8000db2 <pvPortMalloc+0x16e>
 8000d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000da2:	f383 8811 	msr	BASEPRI, r3
 8000da6:	f3bf 8f6f 	isb	sy
 8000daa:	f3bf 8f4f 	dsb	sy
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	e7fe      	b.n	8000db0 <pvPortMalloc+0x16c>
    return pvReturn;
 8000db2:	69fb      	ldr	r3, [r7, #28]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20012c58 	.word	0x20012c58
 8000dc0:	20012c6c 	.word	0x20012c6c
 8000dc4:	20012c5c 	.word	0x20012c5c
 8000dc8:	20012c50 	.word	0x20012c50
 8000dcc:	20012c60 	.word	0x20012c60
 8000dd0:	20012c64 	.word	0x20012c64

08000dd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d04b      	beq.n	8000e7e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8000de6:	2308      	movs	r3, #8
 8000de8:	425b      	negs	r3, r3
 8000dea:	697a      	ldr	r2, [r7, #20]
 8000dec:	4413      	add	r3, r2
 8000dee:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <vPortFree+0xb4>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d109      	bne.n	8000e16 <vPortFree+0x42>
 8000e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e06:	f383 8811 	msr	BASEPRI, r3
 8000e0a:	f3bf 8f6f 	isb	sy
 8000e0e:	f3bf 8f4f 	dsb	sy
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	e7fe      	b.n	8000e14 <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d009      	beq.n	8000e32 <vPortFree+0x5e>
 8000e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e22:	f383 8811 	msr	BASEPRI, r3
 8000e26:	f3bf 8f6f 	isb	sy
 8000e2a:	f3bf 8f4f 	dsb	sy
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	e7fe      	b.n	8000e30 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <vPortFree+0xb4>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d01e      	beq.n	8000e7e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d11a      	bne.n	8000e7e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <vPortFree+0xb4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	401a      	ands	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8000e58:	f000 ffbc 	bl	8001dd4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	685a      	ldr	r2, [r3, #4]
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <vPortFree+0xb8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4413      	add	r3, r2
 8000e66:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <vPortFree+0xb8>)
 8000e68:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000e6a:	6938      	ldr	r0, [r7, #16]
 8000e6c:	f000 f874 	bl	8000f58 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <vPortFree+0xbc>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <vPortFree+0xbc>)
 8000e78:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8000e7a:	f000 ffb9 	bl	8001df0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20012c6c 	.word	0x20012c6c
 8000e8c:	20012c5c 	.word	0x20012c5c
 8000e90:	20012c68 	.word	0x20012c68

08000e94 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000e9a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000e9e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8000ea0:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <prvHeapInit+0xac>)
 8000ea2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d00c      	beq.n	8000ec8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	3307      	adds	r3, #7
 8000eb2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f023 0307 	bic.w	r3, r3, #7
 8000eba:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000ebc:	68ba      	ldr	r2, [r7, #8]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	4a1f      	ldr	r2, [pc, #124]	; (8000f40 <prvHeapInit+0xac>)
 8000ec4:	4413      	add	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000ecc:	4a1d      	ldr	r2, [pc, #116]	; (8000f44 <prvHeapInit+0xb0>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <prvHeapInit+0xb0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	4413      	add	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8000ee0:	2208      	movs	r2, #8
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	1a9b      	subs	r3, r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f023 0307 	bic.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4a15      	ldr	r2, [pc, #84]	; (8000f48 <prvHeapInit+0xb4>)
 8000ef4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <prvHeapInit+0xb4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <prvHeapInit+0xb4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	1ad2      	subs	r2, r2, r3
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <prvHeapInit+0xb4>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <prvHeapInit+0xb8>)
 8000f22:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <prvHeapInit+0xbc>)
 8000f2a:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <prvHeapInit+0xc0>)
 8000f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f32:	601a      	str	r2, [r3, #0]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20000050 	.word	0x20000050
 8000f44:	20012c50 	.word	0x20012c50
 8000f48:	20012c58 	.word	0x20012c58
 8000f4c:	20012c60 	.word	0x20012c60
 8000f50:	20012c5c 	.word	0x20012c5c
 8000f54:	20012c6c 	.word	0x20012c6c

08000f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <prvInsertBlockIntoFreeList+0xac>)
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	e002      	b.n	8000f6c <prvInsertBlockIntoFreeList+0x14>
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d3f7      	bcc.n	8000f66 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	441a      	add	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d108      	bne.n	8000f9a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	441a      	add	r2, r3
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	441a      	add	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d118      	bne.n	8000fe0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <prvInsertBlockIntoFreeList+0xb0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d00d      	beq.n	8000fd6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	441a      	add	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	e008      	b.n	8000fe8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <prvInsertBlockIntoFreeList+0xb0>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e003      	b.n	8000fe8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d002      	beq.n	8000ff6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20012c50 	.word	0x20012c50
 8001008:	20012c58 	.word	0x20012c58

0800100c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d109      	bne.n	8001034 <xQueueGenericReset+0x28>
 8001020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001024:	f383 8811 	msr	BASEPRI, r3
 8001028:	f3bf 8f6f 	isb	sy
 800102c:	f3bf 8f4f 	dsb	sy
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	e7fe      	b.n	8001032 <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8001034:	f7ff fcec 	bl	8000a10 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001040:	68f9      	ldr	r1, [r7, #12]
 8001042:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001044:	fb01 f303 	mul.w	r3, r1, r3
 8001048:	441a      	add	r2, r3
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2200      	movs	r2, #0
 8001052:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001064:	3b01      	subs	r3, #1
 8001066:	68f9      	ldr	r1, [r7, #12]
 8001068:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800106a:	fb01 f303 	mul.w	r3, r1, r3
 800106e:	441a      	add	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	22ff      	movs	r2, #255	; 0xff
 8001078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	22ff      	movs	r2, #255	; 0xff
 8001080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d114      	bne.n	80010b4 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d01a      	beq.n	80010c8 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3310      	adds	r3, #16
 8001096:	4618      	mov	r0, r3
 8001098:	f001 f8b6 	bl	8002208 <xTaskRemoveFromEventList>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d012      	beq.n	80010c8 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <xQueueGenericReset+0xcc>)
 80010a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	f3bf 8f4f 	dsb	sy
 80010ae:	f3bf 8f6f 	isb	sy
 80010b2:	e009      	b.n	80010c8 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3310      	adds	r3, #16
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff face 	bl	800065a <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	3324      	adds	r3, #36	; 0x24
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fac9 	bl	800065a <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80010c8:	f7ff fcd0 	bl	8000a6c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80010cc:	2301      	movs	r3, #1
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000ed04 	.word	0xe000ed04

080010dc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	4613      	mov	r3, r2
 80010e8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d109      	bne.n	8001104 <xQueueGenericCreate+0x28>
 80010f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010f4:	f383 8811 	msr	BASEPRI, r3
 80010f8:	f3bf 8f6f 	isb	sy
 80010fc:	f3bf 8f4f 	dsb	sy
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	e7fe      	b.n	8001102 <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	fb02 f303 	mul.w	r3, r2, r3
 800110c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d006      	beq.n	8001122 <xQueueGenericCreate+0x46>
 8001114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	fbb2 f2f3 	udiv	r2, r2, r3
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	429a      	cmp	r2, r3
 8001120:	d101      	bne.n	8001126 <xQueueGenericCreate+0x4a>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <xQueueGenericCreate+0x4c>
 8001126:	2300      	movs	r3, #0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d109      	bne.n	8001140 <xQueueGenericCreate+0x64>
 800112c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001130:	f383 8811 	msr	BASEPRI, r3
 8001134:	f3bf 8f6f 	isb	sy
 8001138:	f3bf 8f4f 	dsb	sy
 800113c:	617b      	str	r3, [r7, #20]
 800113e:	e7fe      	b.n	800113e <xQueueGenericCreate+0x62>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	3350      	adds	r3, #80	; 0x50
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fd7d 	bl	8000c44 <pvPortMalloc>
 800114a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00d      	beq.n	800116e <xQueueGenericCreate+0x92>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3350      	adds	r3, #80	; 0x50
 800115a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800115c:	79fa      	ldrb	r2, [r7, #7]
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	4613      	mov	r3, r2
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	68b9      	ldr	r1, [r7, #8]
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f000 f805 	bl	8001178 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800116e:	6a3b      	ldr	r3, [r7, #32]
    }
 8001170:	4618      	mov	r0, r3
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d103      	bne.n	8001194 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	e002      	b.n	800119a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	68fa      	ldr	r2, [r7, #12]
 800119e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80011a6:	2101      	movs	r1, #1
 80011a8:	69b8      	ldr	r0, [r7, #24]
 80011aa:	f7ff ff2f 	bl	800100c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	78fa      	ldrb	r2, [r7, #3]
 80011b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	; 0x38
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80011ce:	2300      	movs	r3, #0
 80011d0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80011d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d109      	bne.n	80011f0 <xQueueGenericSend+0x30>
 80011dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011e0:	f383 8811 	msr	BASEPRI, r3
 80011e4:	f3bf 8f6f 	isb	sy
 80011e8:	f3bf 8f4f 	dsb	sy
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ee:	e7fe      	b.n	80011ee <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d103      	bne.n	80011fe <xQueueGenericSend+0x3e>
 80011f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <xQueueGenericSend+0x42>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <xQueueGenericSend+0x44>
 8001202:	2300      	movs	r3, #0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d109      	bne.n	800121c <xQueueGenericSend+0x5c>
 8001208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800120c:	f383 8811 	msr	BASEPRI, r3
 8001210:	f3bf 8f6f 	isb	sy
 8001214:	f3bf 8f4f 	dsb	sy
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
 800121a:	e7fe      	b.n	800121a <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d103      	bne.n	800122a <xQueueGenericSend+0x6a>
 8001222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <xQueueGenericSend+0x6e>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <xQueueGenericSend+0x70>
 800122e:	2300      	movs	r3, #0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d109      	bne.n	8001248 <xQueueGenericSend+0x88>
 8001234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001238:	f383 8811 	msr	BASEPRI, r3
 800123c:	f3bf 8f6f 	isb	sy
 8001240:	f3bf 8f4f 	dsb	sy
 8001244:	623b      	str	r3, [r7, #32]
 8001246:	e7fe      	b.n	8001246 <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001248:	f001 f976 	bl	8002538 <xTaskGetSchedulerState>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d102      	bne.n	8001258 <xQueueGenericSend+0x98>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <xQueueGenericSend+0x9c>
 8001258:	2301      	movs	r3, #1
 800125a:	e000      	b.n	800125e <xQueueGenericSend+0x9e>
 800125c:	2300      	movs	r3, #0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d109      	bne.n	8001276 <xQueueGenericSend+0xb6>
 8001262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001266:	f383 8811 	msr	BASEPRI, r3
 800126a:	f3bf 8f6f 	isb	sy
 800126e:	f3bf 8f4f 	dsb	sy
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	e7fe      	b.n	8001274 <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001276:	f7ff fbcb 	bl	8000a10 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800127a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800127e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001282:	429a      	cmp	r2, r3
 8001284:	d302      	bcc.n	800128c <xQueueGenericSend+0xcc>
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d129      	bne.n	80012e0 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	68b9      	ldr	r1, [r7, #8]
 8001290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001292:	f000 fa11 	bl	80016b8 <prvCopyDataToQueue>
 8001296:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800129a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129c:	2b00      	cmp	r3, #0
 800129e:	d010      	beq.n	80012c2 <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80012a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a2:	3324      	adds	r3, #36	; 0x24
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 ffaf 	bl	8002208 <xTaskRemoveFromEventList>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d013      	beq.n	80012d8 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80012b0:	4b3f      	ldr	r3, [pc, #252]	; (80013b0 <xQueueGenericSend+0x1f0>)
 80012b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	f3bf 8f4f 	dsb	sy
 80012bc:	f3bf 8f6f 	isb	sy
 80012c0:	e00a      	b.n	80012d8 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d007      	beq.n	80012d8 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80012c8:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <xQueueGenericSend+0x1f0>)
 80012ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	f3bf 8f4f 	dsb	sy
 80012d4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80012d8:	f7ff fbc8 	bl	8000a6c <vPortExitCritical>
                return pdPASS;
 80012dc:	2301      	movs	r3, #1
 80012de:	e063      	b.n	80013a8 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d103      	bne.n	80012ee <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80012e6:	f7ff fbc1 	bl	8000a6c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e05c      	b.n	80013a8 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80012ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d106      	bne.n	8001302 <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 ffe7 	bl	80022cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80012fe:	2301      	movs	r3, #1
 8001300:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001302:	f7ff fbb3 	bl	8000a6c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001306:	f000 fd65 	bl	8001dd4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800130a:	f7ff fb81 	bl	8000a10 <vPortEnterCritical>
 800130e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001314:	b25b      	sxtb	r3, r3
 8001316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800131a:	d103      	bne.n	8001324 <xQueueGenericSend+0x164>
 800131c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800132a:	b25b      	sxtb	r3, r3
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001330:	d103      	bne.n	800133a <xQueueGenericSend+0x17a>
 8001332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800133a:	f7ff fb97 	bl	8000a6c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800133e:	1d3a      	adds	r2, r7, #4
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f000 ffd6 	bl	80022f8 <xTaskCheckForTimeOut>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d124      	bne.n	800139c <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001352:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001354:	f000 faa8 	bl	80018a8 <prvIsQueueFull>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d018      	beq.n	8001390 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800135e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001360:	3310      	adds	r3, #16
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f000 ff00 	bl	800216c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800136c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800136e:	f000 fa33 	bl	80017d8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001372:	f000 fd3d 	bl	8001df0 <xTaskResumeAll>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	f47f af7c 	bne.w	8001276 <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 800137e:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <xQueueGenericSend+0x1f0>)
 8001380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	f3bf 8f4f 	dsb	sy
 800138a:	f3bf 8f6f 	isb	sy
 800138e:	e772      	b.n	8001276 <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001392:	f000 fa21 	bl	80017d8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001396:	f000 fd2b 	bl	8001df0 <xTaskResumeAll>
 800139a:	e76c      	b.n	8001276 <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800139c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800139e:	f000 fa1b 	bl	80017d8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80013a2:	f000 fd25 	bl	8001df0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80013a6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3738      	adds	r7, #56	; 0x38
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	e000ed04 	.word	0xe000ed04

080013b4 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b090      	sub	sp, #64	; 0x40
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80013c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d109      	bne.n	80013e0 <xQueueGenericSendFromISR+0x2c>
 80013cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d0:	f383 8811 	msr	BASEPRI, r3
 80013d4:	f3bf 8f6f 	isb	sy
 80013d8:	f3bf 8f4f 	dsb	sy
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80013de:	e7fe      	b.n	80013de <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d103      	bne.n	80013ee <xQueueGenericSendFromISR+0x3a>
 80013e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <xQueueGenericSendFromISR+0x3e>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <xQueueGenericSendFromISR+0x40>
 80013f2:	2300      	movs	r3, #0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d109      	bne.n	800140c <xQueueGenericSendFromISR+0x58>
 80013f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013fc:	f383 8811 	msr	BASEPRI, r3
 8001400:	f3bf 8f6f 	isb	sy
 8001404:	f3bf 8f4f 	dsb	sy
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
 800140a:	e7fe      	b.n	800140a <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d103      	bne.n	800141a <xQueueGenericSendFromISR+0x66>
 8001412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001416:	2b01      	cmp	r3, #1
 8001418:	d101      	bne.n	800141e <xQueueGenericSendFromISR+0x6a>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <xQueueGenericSendFromISR+0x6c>
 800141e:	2300      	movs	r3, #0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d109      	bne.n	8001438 <xQueueGenericSendFromISR+0x84>
 8001424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001428:	f383 8811 	msr	BASEPRI, r3
 800142c:	f3bf 8f6f 	isb	sy
 8001430:	f3bf 8f4f 	dsb	sy
 8001434:	623b      	str	r3, [r7, #32]
 8001436:	e7fe      	b.n	8001436 <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001438:	f7ff fbc6 	bl	8000bc8 <vPortValidateInterruptPriority>
        __asm volatile
 800143c:	f3ef 8211 	mrs	r2, BASEPRI
 8001440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001444:	f383 8811 	msr	BASEPRI, r3
 8001448:	f3bf 8f6f 	isb	sy
 800144c:	f3bf 8f4f 	dsb	sy
 8001450:	61fa      	str	r2, [r7, #28]
 8001452:	61bb      	str	r3, [r7, #24]
        return ulOriginalBASEPRI;
 8001454:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001456:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800145a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800145c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800145e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001460:	429a      	cmp	r2, r3
 8001462:	d302      	bcc.n	800146a <xQueueGenericSendFromISR+0xb6>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2b02      	cmp	r3, #2
 8001468:	d13d      	bne.n	80014e6 <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800146a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800146c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001470:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001480:	f000 f91a 	bl	80016b8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001484:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800148c:	d112      	bne.n	80014b4 <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800148e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001492:	2b00      	cmp	r3, #0
 8001494:	d024      	beq.n	80014e0 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001498:	3324      	adds	r3, #36	; 0x24
 800149a:	4618      	mov	r0, r3
 800149c:	f000 feb4 	bl	8002208 <xTaskRemoveFromEventList>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d01c      	beq.n	80014e0 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d019      	beq.n	80014e0 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	e015      	b.n	80014e0 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80014b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80014b8:	2b7f      	cmp	r3, #127	; 0x7f
 80014ba:	d109      	bne.n	80014d0 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 80014bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014c0:	f383 8811 	msr	BASEPRI, r3
 80014c4:	f3bf 8f6f 	isb	sy
 80014c8:	f3bf 8f4f 	dsb	sy
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	e7fe      	b.n	80014ce <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80014d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014d4:	3301      	adds	r3, #1
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	b25a      	sxtb	r2, r3
 80014da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80014e0:	2301      	movs	r3, #1
 80014e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 80014e4:	e001      	b.n	80014ea <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ec:	613b      	str	r3, [r7, #16]
        __asm volatile
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80014f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3740      	adds	r7, #64	; 0x40
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08c      	sub	sp, #48	; 0x30
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001516:	2b00      	cmp	r3, #0
 8001518:	d109      	bne.n	800152e <xQueueReceive+0x2e>
        __asm volatile
 800151a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800151e:	f383 8811 	msr	BASEPRI, r3
 8001522:	f3bf 8f6f 	isb	sy
 8001526:	f3bf 8f4f 	dsb	sy
 800152a:	623b      	str	r3, [r7, #32]
 800152c:	e7fe      	b.n	800152c <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d103      	bne.n	800153c <xQueueReceive+0x3c>
 8001534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	2b00      	cmp	r3, #0
 800153a:	d101      	bne.n	8001540 <xQueueReceive+0x40>
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <xQueueReceive+0x42>
 8001540:	2300      	movs	r3, #0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d109      	bne.n	800155a <xQueueReceive+0x5a>
 8001546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800154a:	f383 8811 	msr	BASEPRI, r3
 800154e:	f3bf 8f6f 	isb	sy
 8001552:	f3bf 8f4f 	dsb	sy
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	e7fe      	b.n	8001558 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800155a:	f000 ffed 	bl	8002538 <xTaskGetSchedulerState>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <xQueueReceive+0x6a>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <xQueueReceive+0x6e>
 800156a:	2301      	movs	r3, #1
 800156c:	e000      	b.n	8001570 <xQueueReceive+0x70>
 800156e:	2300      	movs	r3, #0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d109      	bne.n	8001588 <xQueueReceive+0x88>
 8001574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001578:	f383 8811 	msr	BASEPRI, r3
 800157c:	f3bf 8f6f 	isb	sy
 8001580:	f3bf 8f4f 	dsb	sy
 8001584:	61bb      	str	r3, [r7, #24]
 8001586:	e7fe      	b.n	8001586 <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001588:	f7ff fa42 	bl	8000a10 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001590:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	2b00      	cmp	r3, #0
 8001596:	d01f      	beq.n	80015d8 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800159c:	f000 f8f6 	bl	800178c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	1e5a      	subs	r2, r3, #1
 80015a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a6:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80015a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00f      	beq.n	80015d0 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b2:	3310      	adds	r3, #16
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 fe27 	bl	8002208 <xTaskRemoveFromEventList>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d007      	beq.n	80015d0 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80015c0:	4b3c      	ldr	r3, [pc, #240]	; (80016b4 <xQueueReceive+0x1b4>)
 80015c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	f3bf 8f4f 	dsb	sy
 80015cc:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80015d0:	f7ff fa4c 	bl	8000a6c <vPortExitCritical>
                return pdPASS;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e069      	b.n	80016ac <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d103      	bne.n	80015e6 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80015de:	f7ff fa45 	bl	8000a6c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80015e2:	2300      	movs	r3, #0
 80015e4:	e062      	b.n	80016ac <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 80015e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d106      	bne.n	80015fa <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	4618      	mov	r0, r3
 80015f2:	f000 fe6b 	bl	80022cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80015f6:	2301      	movs	r3, #1
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80015fa:	f7ff fa37 	bl	8000a6c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80015fe:	f000 fbe9 	bl	8001dd4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001602:	f7ff fa05 	bl	8000a10 <vPortEnterCritical>
 8001606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800160c:	b25b      	sxtb	r3, r3
 800160e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001612:	d103      	bne.n	800161c <xQueueReceive+0x11c>
 8001614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800161c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001622:	b25b      	sxtb	r3, r3
 8001624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001628:	d103      	bne.n	8001632 <xQueueReceive+0x132>
 800162a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001632:	f7ff fa1b 	bl	8000a6c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001636:	1d3a      	adds	r2, r7, #4
 8001638:	f107 0310 	add.w	r3, r7, #16
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fe5a 	bl	80022f8 <xTaskCheckForTimeOut>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d123      	bne.n	8001692 <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800164a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800164c:	f000 f916 	bl	800187c <prvIsQueueEmpty>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d017      	beq.n	8001686 <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001658:	3324      	adds	r3, #36	; 0x24
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f000 fd84 	bl	800216c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001666:	f000 f8b7 	bl	80017d8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800166a:	f000 fbc1 	bl	8001df0 <xTaskResumeAll>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d189      	bne.n	8001588 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <xQueueReceive+0x1b4>)
 8001676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	f3bf 8f4f 	dsb	sy
 8001680:	f3bf 8f6f 	isb	sy
 8001684:	e780      	b.n	8001588 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001686:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001688:	f000 f8a6 	bl	80017d8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800168c:	f000 fbb0 	bl	8001df0 <xTaskResumeAll>
 8001690:	e77a      	b.n	8001588 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001694:	f000 f8a0 	bl	80017d8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001698:	f000 fbaa 	bl	8001df0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800169c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800169e:	f000 f8ed 	bl	800187c <prvIsQueueEmpty>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f43f af6f 	beq.w	8001588 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80016aa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3730      	adds	r7, #48	; 0x30
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	e000ed04 	.word	0xe000ed04

080016b8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016cc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10d      	bne.n	80016f2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d14d      	bne.n	800177a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 ff46 	bl	8002574 <xTaskPriorityDisinherit>
 80016e8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	e043      	b.n	800177a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d119      	bne.n	800172c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6858      	ldr	r0, [r3, #4]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	461a      	mov	r2, r3
 8001702:	68b9      	ldr	r1, [r7, #8]
 8001704:	f001 fe3c 	bl	8003380 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	441a      	add	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	429a      	cmp	r2, r3
 8001720:	d32b      	bcc.n	800177a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	e026      	b.n	800177a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	68d8      	ldr	r0, [r3, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	461a      	mov	r2, r3
 8001736:	68b9      	ldr	r1, [r7, #8]
 8001738:	f001 fe22 	bl	8003380 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	425b      	negs	r3, r3
 8001746:	441a      	add	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d207      	bcs.n	8001768 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	425b      	negs	r3, r3
 8001762:	441a      	add	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d105      	bne.n	800177a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	3b01      	subs	r3, #1
 8001778:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1c5a      	adds	r2, r3, #1
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8001782:	697b      	ldr	r3, [r7, #20]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	2b00      	cmp	r3, #0
 800179c:	d018      	beq.n	80017d0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	441a      	add	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d303      	bcc.n	80017c0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68d9      	ldr	r1, [r3, #12]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	461a      	mov	r2, r3
 80017ca:	6838      	ldr	r0, [r7, #0]
 80017cc:	f001 fdd8 	bl	8003380 <memcpy>
    }
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80017e0:	f7ff f916 	bl	8000a10 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017ea:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80017ec:	e011      	b.n	8001812 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d012      	beq.n	800181c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3324      	adds	r3, #36	; 0x24
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fd04 	bl	8002208 <xTaskRemoveFromEventList>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001806:	f000 fddb 	bl	80023c0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	3b01      	subs	r3, #1
 800180e:	b2db      	uxtb	r3, r3
 8001810:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001816:	2b00      	cmp	r3, #0
 8001818:	dce9      	bgt.n	80017ee <prvUnlockQueue+0x16>
 800181a:	e000      	b.n	800181e <prvUnlockQueue+0x46>
                        break;
 800181c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	22ff      	movs	r2, #255	; 0xff
 8001822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001826:	f7ff f921 	bl	8000a6c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800182a:	f7ff f8f1 	bl	8000a10 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001834:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001836:	e011      	b.n	800185c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d012      	beq.n	8001866 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3310      	adds	r3, #16
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fcdf 	bl	8002208 <xTaskRemoveFromEventList>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001850:	f000 fdb6 	bl	80023c0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001854:	7bbb      	ldrb	r3, [r7, #14]
 8001856:	3b01      	subs	r3, #1
 8001858:	b2db      	uxtb	r3, r3
 800185a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800185c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001860:	2b00      	cmp	r3, #0
 8001862:	dce9      	bgt.n	8001838 <prvUnlockQueue+0x60>
 8001864:	e000      	b.n	8001868 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001866:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	22ff      	movs	r2, #255	; 0xff
 800186c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001870:	f7ff f8fc 	bl	8000a6c <vPortExitCritical>
}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001884:	f7ff f8c4 	bl	8000a10 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001890:	2301      	movs	r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	e001      	b.n	800189a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001896:	2300      	movs	r3, #0
 8001898:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800189a:	f7ff f8e7 	bl	8000a6c <vPortExitCritical>

    return xReturn;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3710      	adds	r7, #16
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80018b0:	f7ff f8ae 	bl	8000a10 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018bc:	429a      	cmp	r2, r3
 80018be:	d102      	bne.n	80018c6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80018c0:	2301      	movs	r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e001      	b.n	80018ca <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80018ca:	f7ff f8cf 	bl	8000a6c <vPortExitCritical>

    return xReturn;
 80018ce:	68fb      	ldr	r3, [r7, #12]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e014      	b.n	8001912 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80018e8:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <vQueueAddToRegistry+0x4c>)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10b      	bne.n	800190c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80018f4:	490b      	ldr	r1, [pc, #44]	; (8001924 <vQueueAddToRegistry+0x4c>)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80018fe:	4a09      	ldr	r2, [pc, #36]	; (8001924 <vQueueAddToRegistry+0x4c>)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4413      	add	r3, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800190a:	e005      	b.n	8001918 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	3301      	adds	r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b07      	cmp	r3, #7
 8001916:	d9e7      	bls.n	80018e8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	20012db8 	.word	0x20012db8

08001928 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8001938:	f7ff f86a 	bl	8000a10 <vPortEnterCritical>
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001942:	b25b      	sxtb	r3, r3
 8001944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001948:	d103      	bne.n	8001952 <vQueueWaitForMessageRestricted+0x2a>
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001958:	b25b      	sxtb	r3, r3
 800195a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195e:	d103      	bne.n	8001968 <vQueueWaitForMessageRestricted+0x40>
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001968:	f7ff f880 	bl	8000a6c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001970:	2b00      	cmp	r3, #0
 8001972:	d106      	bne.n	8001982 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3324      	adds	r3, #36	; 0x24
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	68b9      	ldr	r1, [r7, #8]
 800197c:	4618      	mov	r0, r3
 800197e:	f000 fc19 	bl	80021b4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8001982:	6978      	ldr	r0, [r7, #20]
 8001984:	f7ff ff28 	bl	80017d8 <prvUnlockQueue>
    }
 8001988:	bf00      	nop
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001990:	b580      	push	{r7, lr}
 8001992:	b08c      	sub	sp, #48	; 0x30
 8001994:	af04      	add	r7, sp, #16
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	4613      	mov	r3, r2
 800199e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff f94d 	bl	8000c44 <pvPortMalloc>
 80019aa:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00e      	beq.n	80019d0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80019b2:	2058      	movs	r0, #88	; 0x58
 80019b4:	f7ff f946 	bl	8000c44 <pvPortMalloc>
 80019b8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	631a      	str	r2, [r3, #48]	; 0x30
 80019c6:	e005      	b.n	80019d4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80019c8:	6978      	ldr	r0, [r7, #20]
 80019ca:	f7ff fa03 	bl	8000dd4 <vPortFree>
 80019ce:	e001      	b.n	80019d4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d013      	beq.n	8001a02 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80019da:	88fa      	ldrh	r2, [r7, #6]
 80019dc:	2300      	movs	r3, #0
 80019de:	9303      	str	r3, [sp, #12]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	9302      	str	r3, [sp, #8]
 80019e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68b9      	ldr	r1, [r7, #8]
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 f80e 	bl	8001a12 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80019f6:	69f8      	ldr	r0, [r7, #28]
 80019f8:	f000 f8a0 	bl	8001b3c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80019fc:	2301      	movs	r3, #1
 80019fe:	61bb      	str	r3, [r7, #24]
 8001a00:	e002      	b.n	8001a08 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001a08:	69bb      	ldr	r3, [r7, #24]
    }
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3720      	adds	r7, #32
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b088      	sub	sp, #32
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a22:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	461a      	mov	r2, r3
 8001a2a:	21a5      	movs	r1, #165	; 0xa5
 8001a2c:	f001 fcb3 	bl	8003396 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	f023 0307 	bic.w	r3, r3, #7
 8001a48:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d009      	beq.n	8001a68 <prvInitialiseNewTask+0x56>
 8001a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a58:	f383 8811 	msr	BASEPRI, r3
 8001a5c:	f3bf 8f6f 	isb	sy
 8001a60:	f3bf 8f4f 	dsb	sy
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	e7fe      	b.n	8001a66 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d01f      	beq.n	8001aae <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
 8001a72:	e012      	b.n	8001a9a <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	4413      	add	r3, r2
 8001a7a:	7819      	ldrb	r1, [r3, #0]
 8001a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	4413      	add	r3, r2
 8001a82:	3334      	adds	r3, #52	; 0x34
 8001a84:	460a      	mov	r2, r1
 8001a86:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d006      	beq.n	8001aa2 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	3301      	adds	r3, #1
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	2b09      	cmp	r3, #9
 8001a9e:	d9e9      	bls.n	8001a74 <prvInitialiseNewTask+0x62>
 8001aa0:	e000      	b.n	8001aa4 <prvInitialiseNewTask+0x92>
            {
                break;
 8001aa2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001aac:	e003      	b.n	8001ab6 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d901      	bls.n	8001ac0 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001abc:	2304      	movs	r3, #4
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ac4:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aca:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ace:	2200      	movs	r2, #0
 8001ad0:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fddf 	bl	800069a <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ade:	3318      	adds	r3, #24
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fdda 	bl	800069a <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001aea:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aee:	f1c3 0205 	rsb	r2, r3, #5
 8001af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afe:	3350      	adds	r3, #80	; 0x50
 8001b00:	2204      	movs	r2, #4
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f001 fc46 	bl	8003396 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0c:	3354      	adds	r3, #84	; 0x54
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2100      	movs	r1, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	f001 fc3f 	bl	8003396 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	68f9      	ldr	r1, [r7, #12]
 8001b1c:	69b8      	ldr	r0, [r7, #24]
 8001b1e:	f7fe fe51 	bl	80007c4 <pxPortInitialiseStack>
 8001b22:	4602      	mov	r2, r0
 8001b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b26:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b32:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001b34:	bf00      	nop
 8001b36:	3720      	adds	r7, #32
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001b44:	f7fe ff64 	bl	8000a10 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001b48:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <prvAddNewTaskToReadyList+0xc0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	4a2b      	ldr	r2, [pc, #172]	; (8001bfc <prvAddNewTaskToReadyList+0xc0>)
 8001b50:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001b52:	4b2b      	ldr	r3, [pc, #172]	; (8001c00 <prvAddNewTaskToReadyList+0xc4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d109      	bne.n	8001b6e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001b5a:	4a29      	ldr	r2, [pc, #164]	; (8001c00 <prvAddNewTaskToReadyList+0xc4>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001b60:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <prvAddNewTaskToReadyList+0xc0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d110      	bne.n	8001b8a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001b68:	f000 fc4e 	bl	8002408 <prvInitialiseTaskLists>
 8001b6c:	e00d      	b.n	8001b8a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001b6e:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <prvAddNewTaskToReadyList+0xc8>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001b76:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <prvAddNewTaskToReadyList+0xc4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d802      	bhi.n	8001b8a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001b84:	4a1e      	ldr	r2, [pc, #120]	; (8001c00 <prvAddNewTaskToReadyList+0xc4>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <prvAddNewTaskToReadyList+0xcc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	4a1d      	ldr	r2, [pc, #116]	; (8001c08 <prvAddNewTaskToReadyList+0xcc>)
 8001b92:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001b94:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <prvAddNewTaskToReadyList+0xcc>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <prvAddNewTaskToReadyList+0xd0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	4a18      	ldr	r2, [pc, #96]	; (8001c0c <prvAddNewTaskToReadyList+0xd0>)
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4a15      	ldr	r2, [pc, #84]	; (8001c10 <prvAddNewTaskToReadyList+0xd4>)
 8001bbc:	441a      	add	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	f7fe fd75 	bl	80006b4 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001bca:	f7fe ff4f 	bl	8000a6c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <prvAddNewTaskToReadyList+0xc8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00e      	beq.n	8001bf4 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001bd6:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <prvAddNewTaskToReadyList+0xc4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d207      	bcs.n	8001bf4 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <prvAddNewTaskToReadyList+0xd8>)
 8001be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	f3bf 8f4f 	dsb	sy
 8001bf0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20012d48 	.word	0x20012d48
 8001c00:	20012c70 	.word	0x20012c70
 8001c04:	20012d54 	.word	0x20012d54
 8001c08:	20012d64 	.word	0x20012d64
 8001c0c:	20012d50 	.word	0x20012d50
 8001c10:	20012c74 	.word	0x20012c74
 8001c14:	e000ed04 	.word	0xe000ed04

08001c18 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8001c20:	f7fe fef6 	bl	8000a10 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d102      	bne.n	8001c30 <vTaskDelete+0x18>
 8001c2a:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <vTaskDelete+0xf4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	e000      	b.n	8001c32 <vTaskDelete+0x1a>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3304      	adds	r3, #4
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fd98 	bl	800076e <uxListRemove>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d115      	bne.n	8001c70 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c48:	4931      	ldr	r1, [pc, #196]	; (8001d10 <vTaskDelete+0xf8>)
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10a      	bne.n	8001c70 <vTaskDelete+0x58>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	2201      	movs	r2, #1
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43da      	mvns	r2, r3
 8001c66:	4b2b      	ldr	r3, [pc, #172]	; (8001d14 <vTaskDelete+0xfc>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	4a29      	ldr	r2, [pc, #164]	; (8001d14 <vTaskDelete+0xfc>)
 8001c6e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d004      	beq.n	8001c82 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3318      	adds	r3, #24
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fd76 	bl	800076e <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8001c82:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <vTaskDelete+0x100>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3301      	adds	r3, #1
 8001c88:	4a23      	ldr	r2, [pc, #140]	; (8001d18 <vTaskDelete+0x100>)
 8001c8a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8001c8c:	4b1f      	ldr	r3, [pc, #124]	; (8001d0c <vTaskDelete+0xf4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d10b      	bne.n	8001cae <vTaskDelete+0x96>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	481f      	ldr	r0, [pc, #124]	; (8001d1c <vTaskDelete+0x104>)
 8001c9e:	f7fe fd09 	bl	80006b4 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8001ca2:	4b1f      	ldr	r3, [pc, #124]	; (8001d20 <vTaskDelete+0x108>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <vTaskDelete+0x108>)
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	e009      	b.n	8001cc2 <vTaskDelete+0xaa>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <vTaskDelete+0x10c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <vTaskDelete+0x10c>)
 8001cb6:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
                prvDeleteTCB( pxTCB );
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 fc11 	bl	80024e0 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8001cbe:	f000 fc1f 	bl	8002500 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8001cc2:	f7fe fed3 	bl	8000a6c <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <vTaskDelete+0x110>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d01a      	beq.n	8001d04 <vTaskDelete+0xec>
        {
            if( pxTCB == pxCurrentTCB )
 8001cce:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <vTaskDelete+0xf4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d115      	bne.n	8001d04 <vTaskDelete+0xec>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <vTaskDelete+0x114>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d009      	beq.n	8001cf4 <vTaskDelete+0xdc>
 8001ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce4:	f383 8811 	msr	BASEPRI, r3
 8001ce8:	f3bf 8f6f 	isb	sy
 8001cec:	f3bf 8f4f 	dsb	sy
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	e7fe      	b.n	8001cf2 <vTaskDelete+0xda>
                portYIELD_WITHIN_API();
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <vTaskDelete+0x118>)
 8001cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	f3bf 8f4f 	dsb	sy
 8001d00:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8001d04:	bf00      	nop
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20012c70 	.word	0x20012c70
 8001d10:	20012c74 	.word	0x20012c74
 8001d14:	20012d50 	.word	0x20012d50
 8001d18:	20012d64 	.word	0x20012d64
 8001d1c:	20012d1c 	.word	0x20012d1c
 8001d20:	20012d30 	.word	0x20012d30
 8001d24:	20012d48 	.word	0x20012d48
 8001d28:	20012d54 	.word	0x20012d54
 8001d2c:	20012d70 	.word	0x20012d70
 8001d30:	e000ed04 	.word	0xe000ed04

08001d34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001d3a:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <vTaskStartScheduler+0x84>)
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2300      	movs	r3, #0
 8001d44:	2282      	movs	r2, #130	; 0x82
 8001d46:	491d      	ldr	r1, [pc, #116]	; (8001dbc <vTaskStartScheduler+0x88>)
 8001d48:	481d      	ldr	r0, [pc, #116]	; (8001dc0 <vTaskStartScheduler+0x8c>)
 8001d4a:	f7ff fe21 	bl	8001990 <xTaskCreate>
 8001d4e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d102      	bne.n	8001d5c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001d56:	f000 fceb 	bl	8002730 <xTimerCreateTimerTask>
 8001d5a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d115      	bne.n	8001d8e <vTaskStartScheduler+0x5a>
 8001d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d66:	f383 8811 	msr	BASEPRI, r3
 8001d6a:	f3bf 8f6f 	isb	sy
 8001d6e:	f3bf 8f4f 	dsb	sy
 8001d72:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <vTaskStartScheduler+0x90>)
 8001d76:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <vTaskStartScheduler+0x94>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <vTaskStartScheduler+0x98>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001d88:	f7fe fda4 	bl	80008d4 <xPortStartScheduler>
 8001d8c:	e00d      	b.n	8001daa <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d109      	bne.n	8001daa <vTaskStartScheduler+0x76>
 8001d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d9a:	f383 8811 	msr	BASEPRI, r3
 8001d9e:	f3bf 8f6f 	isb	sy
 8001da2:	f3bf 8f4f 	dsb	sy
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	e7fe      	b.n	8001da8 <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <vTaskStartScheduler+0x9c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20012d6c 	.word	0x20012d6c
 8001dbc:	080033c0 	.word	0x080033c0
 8001dc0:	080023d9 	.word	0x080023d9
 8001dc4:	20012d68 	.word	0x20012d68
 8001dc8:	20012d54 	.word	0x20012d54
 8001dcc:	20012d4c 	.word	0x20012d4c
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <vTaskSuspendAll+0x18>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	4a03      	ldr	r2, [pc, #12]	; (8001dec <vTaskSuspendAll+0x18>)
 8001de0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	20012d70 	.word	0x20012d70

08001df0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001dfe:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <xTaskResumeAll+0x114>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <xTaskResumeAll+0x2a>
 8001e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e0a:	f383 8811 	msr	BASEPRI, r3
 8001e0e:	f3bf 8f6f 	isb	sy
 8001e12:	f3bf 8f4f 	dsb	sy
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	e7fe      	b.n	8001e18 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001e1a:	f7fe fdf9 	bl	8000a10 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001e1e:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <xTaskResumeAll+0x114>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	4a37      	ldr	r2, [pc, #220]	; (8001f04 <xTaskResumeAll+0x114>)
 8001e26:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e28:	4b36      	ldr	r3, [pc, #216]	; (8001f04 <xTaskResumeAll+0x114>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d161      	bne.n	8001ef4 <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e30:	4b35      	ldr	r3, [pc, #212]	; (8001f08 <xTaskResumeAll+0x118>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d05d      	beq.n	8001ef4 <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e38:	e02e      	b.n	8001e98 <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e3a:	4b34      	ldr	r3, [pc, #208]	; (8001f0c <xTaskResumeAll+0x11c>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3318      	adds	r3, #24
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fc91 	bl	800076e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3304      	adds	r3, #4
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fc8c 	bl	800076e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	4b2c      	ldr	r3, [pc, #176]	; (8001f10 <xTaskResumeAll+0x120>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	4a2a      	ldr	r2, [pc, #168]	; (8001f10 <xTaskResumeAll+0x120>)
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4a27      	ldr	r2, [pc, #156]	; (8001f14 <xTaskResumeAll+0x124>)
 8001e76:	441a      	add	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4610      	mov	r0, r2
 8001e80:	f7fe fc18 	bl	80006b4 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e88:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <xTaskResumeAll+0x128>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d302      	bcc.n	8001e98 <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 8001e92:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <xTaskResumeAll+0x12c>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e98:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <xTaskResumeAll+0x11c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1cc      	bne.n	8001e3a <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001ea6:	f000 fb2b 	bl	8002500 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <xTaskResumeAll+0x130>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d010      	beq.n	8001ed8 <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001eb6:	f000 f847 	bl	8001f48 <xTaskIncrementTick>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 8001ec0:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <xTaskResumeAll+0x12c>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f1      	bne.n	8001eb6 <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 8001ed2:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <xTaskResumeAll+0x130>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <xTaskResumeAll+0x12c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d009      	beq.n	8001ef4 <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <xTaskResumeAll+0x134>)
 8001ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	f3bf 8f4f 	dsb	sy
 8001ef0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001ef4:	f7fe fdba 	bl	8000a6c <vPortExitCritical>

    return xAlreadyYielded;
 8001ef8:	68bb      	ldr	r3, [r7, #8]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20012d70 	.word	0x20012d70
 8001f08:	20012d48 	.word	0x20012d48
 8001f0c:	20012d08 	.word	0x20012d08
 8001f10:	20012d50 	.word	0x20012d50
 8001f14:	20012c74 	.word	0x20012c74
 8001f18:	20012c70 	.word	0x20012c70
 8001f1c:	20012d5c 	.word	0x20012d5c
 8001f20:	20012d58 	.word	0x20012d58
 8001f24:	e000ed04 	.word	0xe000ed04

08001f28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001f2e:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <xTaskGetTickCount+0x1c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001f34:	687b      	ldr	r3, [r7, #4]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20012d4c 	.word	0x20012d4c

08001f48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f52:	4b4e      	ldr	r3, [pc, #312]	; (800208c <xTaskIncrementTick+0x144>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f040 808d 	bne.w	8002076 <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001f5c:	4b4c      	ldr	r3, [pc, #304]	; (8002090 <xTaskIncrementTick+0x148>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	3301      	adds	r3, #1
 8001f62:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001f64:	4a4a      	ldr	r2, [pc, #296]	; (8002090 <xTaskIncrementTick+0x148>)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d11f      	bne.n	8001fb0 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8001f70:	4b48      	ldr	r3, [pc, #288]	; (8002094 <xTaskIncrementTick+0x14c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d009      	beq.n	8001f8e <xTaskIncrementTick+0x46>
 8001f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f7e:	f383 8811 	msr	BASEPRI, r3
 8001f82:	f3bf 8f6f 	isb	sy
 8001f86:	f3bf 8f4f 	dsb	sy
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	e7fe      	b.n	8001f8c <xTaskIncrementTick+0x44>
 8001f8e:	4b41      	ldr	r3, [pc, #260]	; (8002094 <xTaskIncrementTick+0x14c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	4b40      	ldr	r3, [pc, #256]	; (8002098 <xTaskIncrementTick+0x150>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a3e      	ldr	r2, [pc, #248]	; (8002094 <xTaskIncrementTick+0x14c>)
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	4a3e      	ldr	r2, [pc, #248]	; (8002098 <xTaskIncrementTick+0x150>)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b3e      	ldr	r3, [pc, #248]	; (800209c <xTaskIncrementTick+0x154>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	4a3c      	ldr	r2, [pc, #240]	; (800209c <xTaskIncrementTick+0x154>)
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	f000 faa8 	bl	8002500 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001fb0:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <xTaskIncrementTick+0x158>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d348      	bcc.n	800204c <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fba:	4b36      	ldr	r3, [pc, #216]	; (8002094 <xTaskIncrementTick+0x14c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d104      	bne.n	8001fce <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fc4:	4b36      	ldr	r3, [pc, #216]	; (80020a0 <xTaskIncrementTick+0x158>)
 8001fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8001fca:	601a      	str	r2, [r3, #0]
                    break;
 8001fcc:	e03e      	b.n	800204c <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fce:	4b31      	ldr	r3, [pc, #196]	; (8002094 <xTaskIncrementTick+0x14c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d203      	bcs.n	8001fee <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001fe6:	4a2e      	ldr	r2, [pc, #184]	; (80020a0 <xTaskIncrementTick+0x158>)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001fec:	e02e      	b.n	800204c <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fbbb 	bl	800076e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d004      	beq.n	800200a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	3318      	adds	r3, #24
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fbb2 	bl	800076e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	2201      	movs	r2, #1
 8002010:	409a      	lsls	r2, r3
 8002012:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <xTaskIncrementTick+0x15c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	4a22      	ldr	r2, [pc, #136]	; (80020a4 <xTaskIncrementTick+0x15c>)
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4a1f      	ldr	r2, [pc, #124]	; (80020a8 <xTaskIncrementTick+0x160>)
 800202a:	441a      	add	r2, r3
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	3304      	adds	r3, #4
 8002030:	4619      	mov	r1, r3
 8002032:	4610      	mov	r0, r2
 8002034:	f7fe fb3e 	bl	80006b4 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203c:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <xTaskIncrementTick+0x164>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002042:	429a      	cmp	r2, r3
 8002044:	d3b9      	bcc.n	8001fba <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8002046:	2301      	movs	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800204a:	e7b6      	b.n	8001fba <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800204c:	4b17      	ldr	r3, [pc, #92]	; (80020ac <xTaskIncrementTick+0x164>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002052:	4915      	ldr	r1, [pc, #84]	; (80020a8 <xTaskIncrementTick+0x160>)
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d901      	bls.n	8002068 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 8002064:	2301      	movs	r3, #1
 8002066:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <xTaskIncrementTick+0x168>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 8002070:	2301      	movs	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	e004      	b.n	8002080 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002076:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <xTaskIncrementTick+0x16c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	3301      	adds	r3, #1
 800207c:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <xTaskIncrementTick+0x16c>)
 800207e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002080:	697b      	ldr	r3, [r7, #20]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20012d70 	.word	0x20012d70
 8002090:	20012d4c 	.word	0x20012d4c
 8002094:	20012d00 	.word	0x20012d00
 8002098:	20012d04 	.word	0x20012d04
 800209c:	20012d60 	.word	0x20012d60
 80020a0:	20012d68 	.word	0x20012d68
 80020a4:	20012d50 	.word	0x20012d50
 80020a8:	20012c74 	.word	0x20012c74
 80020ac:	20012c70 	.word	0x20012c70
 80020b0:	20012d5c 	.word	0x20012d5c
 80020b4:	20012d58 	.word	0x20012d58

080020b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020be:	4b26      	ldr	r3, [pc, #152]	; (8002158 <vTaskSwitchContext+0xa0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80020c6:	4b25      	ldr	r3, [pc, #148]	; (800215c <vTaskSwitchContext+0xa4>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80020cc:	e03e      	b.n	800214c <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 80020ce:	4b23      	ldr	r3, [pc, #140]	; (800215c <vTaskSwitchContext+0xa4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020d4:	4b22      	ldr	r3, [pc, #136]	; (8002160 <vTaskSwitchContext+0xa8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80020e2:	7afb      	ldrb	r3, [r7, #11]
 80020e4:	f1c3 031f 	rsb	r3, r3, #31
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	491e      	ldr	r1, [pc, #120]	; (8002164 <vTaskSwitchContext+0xac>)
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <vTaskSwitchContext+0x5a>
        __asm volatile
 80020fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002102:	f383 8811 	msr	BASEPRI, r3
 8002106:	f3bf 8f6f 	isb	sy
 800210a:	f3bf 8f4f 	dsb	sy
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	e7fe      	b.n	8002110 <vTaskSwitchContext+0x58>
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4a11      	ldr	r2, [pc, #68]	; (8002164 <vTaskSwitchContext+0xac>)
 800211e:	4413      	add	r3, r2
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	685a      	ldr	r2, [r3, #4]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	3308      	adds	r3, #8
 8002134:	429a      	cmp	r2, r3
 8002136:	d104      	bne.n	8002142 <vTaskSwitchContext+0x8a>
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a07      	ldr	r2, [pc, #28]	; (8002168 <vTaskSwitchContext+0xb0>)
 800214a:	6013      	str	r3, [r2, #0]
}
 800214c:	bf00      	nop
 800214e:	371c      	adds	r7, #28
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	20012d70 	.word	0x20012d70
 800215c:	20012d5c 	.word	0x20012d5c
 8002160:	20012d50 	.word	0x20012d50
 8002164:	20012c74 	.word	0x20012c74
 8002168:	20012c70 	.word	0x20012c70

0800216c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d109      	bne.n	8002190 <vTaskPlaceOnEventList+0x24>
 800217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	e7fe      	b.n	800218e <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002190:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <vTaskPlaceOnEventList+0x44>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3318      	adds	r3, #24
 8002196:	4619      	mov	r1, r3
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7fe faaf 	bl	80006fc <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800219e:	2101      	movs	r1, #1
 80021a0:	6838      	ldr	r0, [r7, #0]
 80021a2:	f000 fa5f 	bl	8002664 <prvAddCurrentTaskToDelayedList>
}
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20012c70 	.word	0x20012c70

080021b4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d109      	bne.n	80021da <vTaskPlaceOnEventListRestricted+0x26>
 80021c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ca:	f383 8811 	msr	BASEPRI, r3
 80021ce:	f3bf 8f6f 	isb	sy
 80021d2:	f3bf 8f4f 	dsb	sy
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	e7fe      	b.n	80021d8 <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <vTaskPlaceOnEventListRestricted+0x50>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	3318      	adds	r3, #24
 80021e0:	4619      	mov	r1, r3
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f7fe fa66 	bl	80006b4 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	68b8      	ldr	r0, [r7, #8]
 80021f8:	f000 fa34 	bl	8002664 <prvAddCurrentTaskToDelayedList>
    }
 80021fc:	bf00      	nop
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20012c70 	.word	0x20012c70

08002208 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <xTaskRemoveFromEventList+0x2a>
 800221e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002222:	f383 8811 	msr	BASEPRI, r3
 8002226:	f3bf 8f6f 	isb	sy
 800222a:	f3bf 8f4f 	dsb	sy
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	e7fe      	b.n	8002230 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	3318      	adds	r3, #24
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fa99 	bl	800076e <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800223c:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <xTaskRemoveFromEventList+0xac>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d11c      	bne.n	800227e <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	3304      	adds	r3, #4
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe fa90 	bl	800076e <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	2201      	movs	r2, #1
 8002254:	409a      	lsls	r2, r3
 8002256:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <xTaskRemoveFromEventList+0xb0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4313      	orrs	r3, r2
 800225c:	4a16      	ldr	r2, [pc, #88]	; (80022b8 <xTaskRemoveFromEventList+0xb0>)
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4a13      	ldr	r2, [pc, #76]	; (80022bc <xTaskRemoveFromEventList+0xb4>)
 800226e:	441a      	add	r2, r3
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	3304      	adds	r3, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4610      	mov	r0, r2
 8002278:	f7fe fa1c 	bl	80006b4 <vListInsertEnd>
 800227c:	e005      	b.n	800228a <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	3318      	adds	r3, #24
 8002282:	4619      	mov	r1, r3
 8002284:	480e      	ldr	r0, [pc, #56]	; (80022c0 <xTaskRemoveFromEventList+0xb8>)
 8002286:	f7fe fa15 	bl	80006b4 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <xTaskRemoveFromEventList+0xbc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	429a      	cmp	r2, r3
 8002296:	d905      	bls.n	80022a4 <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002298:	2301      	movs	r3, #1
 800229a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <xTaskRemoveFromEventList+0xc0>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e001      	b.n	80022a8 <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80022a8:	697b      	ldr	r3, [r7, #20]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20012d70 	.word	0x20012d70
 80022b8:	20012d50 	.word	0x20012d50
 80022bc:	20012c74 	.word	0x20012c74
 80022c0:	20012d08 	.word	0x20012d08
 80022c4:	20012c70 	.word	0x20012c70
 80022c8:	20012d5c 	.word	0x20012d5c

080022cc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80022d4:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <vTaskInternalSetTimeOutState+0x24>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <vTaskInternalSetTimeOutState+0x28>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	605a      	str	r2, [r3, #4]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	20012d60 	.word	0x20012d60
 80022f4:	20012d4c 	.word	0x20012d4c

080022f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d109      	bne.n	800231c <xTaskCheckForTimeOut+0x24>
 8002308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	e7fe      	b.n	800231a <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <xTaskCheckForTimeOut+0x3e>
 8002322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002326:	f383 8811 	msr	BASEPRI, r3
 800232a:	f3bf 8f6f 	isb	sy
 800232e:	f3bf 8f4f 	dsb	sy
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e7fe      	b.n	8002334 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8002336:	f7fe fb6b 	bl	8000a10 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800233a:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <xTaskCheckForTimeOut+0xc0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002352:	d102      	bne.n	800235a <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002354:	2300      	movs	r3, #0
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	e026      	b.n	80023a8 <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	4b17      	ldr	r3, [pc, #92]	; (80023bc <xTaskCheckForTimeOut+0xc4>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d00a      	beq.n	800237c <xTaskCheckForTimeOut+0x84>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	429a      	cmp	r2, r3
 800236e:	d805      	bhi.n	800237c <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002370:	2301      	movs	r3, #1
 8002372:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	e015      	b.n	80023a8 <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	429a      	cmp	r2, r3
 8002384:	d90b      	bls.n	800239e <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	1ad2      	subs	r2, r2, r3
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff ff9a 	bl	80022cc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	e004      	b.n	80023a8 <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80023a4:	2301      	movs	r3, #1
 80023a6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80023a8:	f7fe fb60 	bl	8000a6c <vPortExitCritical>

    return xReturn;
 80023ac:	69fb      	ldr	r3, [r7, #28]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3720      	adds	r7, #32
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20012d4c 	.word	0x20012d4c
 80023bc:	20012d60 	.word	0x20012d60

080023c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80023c4:	4b03      	ldr	r3, [pc, #12]	; (80023d4 <vTaskMissedYield+0x14>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	20012d5c 	.word	0x20012d5c

080023d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80023e0:	f000 f852 	bl	8002488 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <prvIdleTask+0x28>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d9f9      	bls.n	80023e0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <prvIdleTask+0x2c>)
 80023ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80023fc:	e7f0      	b.n	80023e0 <prvIdleTask+0x8>
 80023fe:	bf00      	nop
 8002400:	20012c74 	.word	0x20012c74
 8002404:	e000ed04 	.word	0xe000ed04

08002408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	e00c      	b.n	800242e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4a12      	ldr	r2, [pc, #72]	; (8002468 <prvInitialiseTaskLists+0x60>)
 8002420:	4413      	add	r3, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe f919 	bl	800065a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3301      	adds	r3, #1
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b04      	cmp	r3, #4
 8002432:	d9ef      	bls.n	8002414 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002434:	480d      	ldr	r0, [pc, #52]	; (800246c <prvInitialiseTaskLists+0x64>)
 8002436:	f7fe f910 	bl	800065a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800243a:	480d      	ldr	r0, [pc, #52]	; (8002470 <prvInitialiseTaskLists+0x68>)
 800243c:	f7fe f90d 	bl	800065a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002440:	480c      	ldr	r0, [pc, #48]	; (8002474 <prvInitialiseTaskLists+0x6c>)
 8002442:	f7fe f90a 	bl	800065a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002446:	480c      	ldr	r0, [pc, #48]	; (8002478 <prvInitialiseTaskLists+0x70>)
 8002448:	f7fe f907 	bl	800065a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800244c:	480b      	ldr	r0, [pc, #44]	; (800247c <prvInitialiseTaskLists+0x74>)
 800244e:	f7fe f904 	bl	800065a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002452:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <prvInitialiseTaskLists+0x78>)
 8002454:	4a05      	ldr	r2, [pc, #20]	; (800246c <prvInitialiseTaskLists+0x64>)
 8002456:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002458:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <prvInitialiseTaskLists+0x7c>)
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <prvInitialiseTaskLists+0x68>)
 800245c:	601a      	str	r2, [r3, #0]
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20012c74 	.word	0x20012c74
 800246c:	20012cd8 	.word	0x20012cd8
 8002470:	20012cec 	.word	0x20012cec
 8002474:	20012d08 	.word	0x20012d08
 8002478:	20012d1c 	.word	0x20012d1c
 800247c:	20012d34 	.word	0x20012d34
 8002480:	20012d00 	.word	0x20012d00
 8002484:	20012d04 	.word	0x20012d04

08002488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800248e:	e019      	b.n	80024c4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002490:	f7fe fabe 	bl	8000a10 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002494:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <prvCheckTasksWaitingTermination+0x4c>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3304      	adds	r3, #4
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe f964 	bl	800076e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <prvCheckTasksWaitingTermination+0x50>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <prvCheckTasksWaitingTermination+0x50>)
 80024ae:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <prvCheckTasksWaitingTermination+0x54>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	4a09      	ldr	r2, [pc, #36]	; (80024dc <prvCheckTasksWaitingTermination+0x54>)
 80024b8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80024ba:	f7fe fad7 	bl	8000a6c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f80e 	bl	80024e0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <prvCheckTasksWaitingTermination+0x54>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e1      	bne.n	8002490 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20012d1c 	.word	0x20012d1c
 80024d8:	20012d48 	.word	0x20012d48
 80024dc:	20012d30 	.word	0x20012d30

080024e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fc71 	bl	8000dd4 <vPortFree>
                vPortFree( pxTCB );
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7fe fc6e 	bl	8000dd4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002504:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <prvResetNextTaskUnblockTime+0x30>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d104      	bne.n	8002518 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <prvResetNextTaskUnblockTime+0x34>)
 8002510:	f04f 32ff 	mov.w	r2, #4294967295
 8002514:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002516:	e005      	b.n	8002524 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <prvResetNextTaskUnblockTime+0x30>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a04      	ldr	r2, [pc, #16]	; (8002534 <prvResetNextTaskUnblockTime+0x34>)
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20012d00 	.word	0x20012d00
 8002534:	20012d68 	.word	0x20012d68

08002538 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800253e:	4b0b      	ldr	r3, [pc, #44]	; (800256c <xTaskGetSchedulerState+0x34>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d102      	bne.n	800254c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002546:	2301      	movs	r3, #1
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	e008      	b.n	800255e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <xTaskGetSchedulerState+0x38>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002554:	2302      	movs	r3, #2
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	e001      	b.n	800255e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800255a:	2300      	movs	r3, #0
 800255c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800255e:	687b      	ldr	r3, [r7, #4]
    }
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	20012d54 	.word	0x20012d54
 8002570:	20012d70 	.word	0x20012d70

08002574 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d061      	beq.n	800264e <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800258a:	4b33      	ldr	r3, [pc, #204]	; (8002658 <xTaskPriorityDisinherit+0xe4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	429a      	cmp	r2, r3
 8002592:	d009      	beq.n	80025a8 <xTaskPriorityDisinherit+0x34>
 8002594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002598:	f383 8811 	msr	BASEPRI, r3
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	e7fe      	b.n	80025a6 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d109      	bne.n	80025c4 <xTaskPriorityDisinherit+0x50>
 80025b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	e7fe      	b.n	80025c2 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c8:	1e5a      	subs	r2, r3, #1
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d039      	beq.n	800264e <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d135      	bne.n	800264e <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	3304      	adds	r3, #4
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe f8c1 	bl	800076e <uxListRemove>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10a      	bne.n	8002608 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	2201      	movs	r2, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43da      	mvns	r2, r3
 80025fe:	4b17      	ldr	r3, [pc, #92]	; (800265c <xTaskPriorityDisinherit+0xe8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4013      	ands	r3, r2
 8002604:	4a15      	ldr	r2, [pc, #84]	; (800265c <xTaskPriorityDisinherit+0xe8>)
 8002606:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	f1c3 0205 	rsb	r2, r3, #5
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	2201      	movs	r2, #1
 8002622:	409a      	lsls	r2, r3
 8002624:	4b0d      	ldr	r3, [pc, #52]	; (800265c <xTaskPriorityDisinherit+0xe8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4313      	orrs	r3, r2
 800262a:	4a0c      	ldr	r2, [pc, #48]	; (800265c <xTaskPriorityDisinherit+0xe8>)
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4a09      	ldr	r2, [pc, #36]	; (8002660 <xTaskPriorityDisinherit+0xec>)
 800263c:	441a      	add	r2, r3
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	3304      	adds	r3, #4
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f7fe f835 	bl	80006b4 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800264a:	2301      	movs	r3, #1
 800264c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800264e:	697b      	ldr	r3, [r7, #20]
    }
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20012c70 	.word	0x20012c70
 800265c:	20012d50 	.word	0x20012d50
 8002660:	20012c74 	.word	0x20012c74

08002664 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800266e:	4b29      	ldr	r3, [pc, #164]	; (8002714 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002674:	4b28      	ldr	r3, [pc, #160]	; (8002718 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3304      	adds	r3, #4
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe f877 	bl	800076e <uxListRemove>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10b      	bne.n	800269e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002686:	4b24      	ldr	r3, [pc, #144]	; (8002718 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	2201      	movs	r2, #1
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43da      	mvns	r2, r3
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4013      	ands	r3, r2
 800269a:	4a20      	ldr	r2, [pc, #128]	; (800271c <prvAddCurrentTaskToDelayedList+0xb8>)
 800269c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d10a      	bne.n	80026bc <prvAddCurrentTaskToDelayedList+0x58>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026ac:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	3304      	adds	r3, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	481a      	ldr	r0, [pc, #104]	; (8002720 <prvAddCurrentTaskToDelayedList+0xbc>)
 80026b6:	f7fd fffd 	bl	80006b4 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80026ba:	e026      	b.n	800270a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d209      	bcs.n	80026e8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026d4:	4b13      	ldr	r3, [pc, #76]	; (8002724 <prvAddCurrentTaskToDelayedList+0xc0>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	3304      	adds	r3, #4
 80026de:	4619      	mov	r1, r3
 80026e0:	4610      	mov	r0, r2
 80026e2:	f7fe f80b 	bl	80006fc <vListInsert>
}
 80026e6:	e010      	b.n	800270a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <prvAddCurrentTaskToDelayedList+0xc4>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <prvAddCurrentTaskToDelayedList+0xb4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	3304      	adds	r3, #4
 80026f2:	4619      	mov	r1, r3
 80026f4:	4610      	mov	r0, r2
 80026f6:	f7fe f801 	bl	80006fc <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <prvAddCurrentTaskToDelayedList+0xc8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	429a      	cmp	r2, r3
 8002702:	d202      	bcs.n	800270a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8002704:	4a09      	ldr	r2, [pc, #36]	; (800272c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	6013      	str	r3, [r2, #0]
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20012d4c 	.word	0x20012d4c
 8002718:	20012c70 	.word	0x20012c70
 800271c:	20012d50 	.word	0x20012d50
 8002720:	20012d34 	.word	0x20012d34
 8002724:	20012d04 	.word	0x20012d04
 8002728:	20012d00 	.word	0x20012d00
 800272c:	20012d68 	.word	0x20012d68

08002730 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800273a:	f000 fad1 	bl	8002ce0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <xTimerCreateTimerTask+0x54>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00b      	beq.n	800275e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <xTimerCreateTimerTask+0x58>)
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	2302      	movs	r3, #2
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	2300      	movs	r3, #0
 8002750:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002754:	490d      	ldr	r1, [pc, #52]	; (800278c <xTimerCreateTimerTask+0x5c>)
 8002756:	480e      	ldr	r0, [pc, #56]	; (8002790 <xTimerCreateTimerTask+0x60>)
 8002758:	f7ff f91a 	bl	8001990 <xTaskCreate>
 800275c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d109      	bne.n	8002778 <xTimerCreateTimerTask+0x48>
 8002764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002768:	f383 8811 	msr	BASEPRI, r3
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	603b      	str	r3, [r7, #0]
 8002776:	e7fe      	b.n	8002776 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8002778:	687b      	ldr	r3, [r7, #4]
    }
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20012da4 	.word	0x20012da4
 8002788:	20012da8 	.word	0x20012da8
 800278c:	080033c8 	.word	0x080033c8
 8002790:	080028c5 	.word	0x080028c5

08002794 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d109      	bne.n	80027c0 <xTimerGenericCommand+0x2c>
 80027ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027b0:	f383 8811 	msr	BASEPRI, r3
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	f3bf 8f4f 	dsb	sy
 80027bc:	623b      	str	r3, [r7, #32]
 80027be:	e7fe      	b.n	80027be <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80027c0:	4b19      	ldr	r3, [pc, #100]	; (8002828 <xTimerGenericCommand+0x94>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d02a      	beq.n	800281e <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b05      	cmp	r3, #5
 80027d8:	dc18      	bgt.n	800280c <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80027da:	f7ff fead 	bl	8002538 <xTaskGetSchedulerState>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d109      	bne.n	80027f8 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80027e4:	4b10      	ldr	r3, [pc, #64]	; (8002828 <xTimerGenericCommand+0x94>)
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	f107 0114 	add.w	r1, r7, #20
 80027ec:	2300      	movs	r3, #0
 80027ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f0:	f7fe fce6 	bl	80011c0 <xQueueGenericSend>
 80027f4:	6278      	str	r0, [r7, #36]	; 0x24
 80027f6:	e012      	b.n	800281e <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <xTimerGenericCommand+0x94>)
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	f107 0114 	add.w	r1, r7, #20
 8002800:	2300      	movs	r3, #0
 8002802:	2200      	movs	r2, #0
 8002804:	f7fe fcdc 	bl	80011c0 <xQueueGenericSend>
 8002808:	6278      	str	r0, [r7, #36]	; 0x24
 800280a:	e008      	b.n	800281e <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <xTimerGenericCommand+0x94>)
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	f107 0114 	add.w	r1, r7, #20
 8002814:	2300      	movs	r3, #0
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	f7fe fdcc 	bl	80013b4 <xQueueGenericSendFromISR>
 800281c:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002820:	4618      	mov	r0, r3
 8002822:	3728      	adds	r7, #40	; 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20012da4 	.word	0x20012da4

0800282c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af02      	add	r7, sp, #8
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002836:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <prvProcessExpiredTimer+0x94>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3304      	adds	r3, #4
 8002844:	4618      	mov	r0, r3
 8002846:	f7fd ff92 	bl	800076e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d021      	beq.n	800289c <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	18d1      	adds	r1, r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	6978      	ldr	r0, [r7, #20]
 8002866:	f000 f8d1 	bl	8002a0c <prvInsertTimerInActiveList>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01e      	beq.n	80028ae <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002870:	2300      	movs	r3, #0
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2300      	movs	r3, #0
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	2100      	movs	r1, #0
 800287a:	6978      	ldr	r0, [r7, #20]
 800287c:	f7ff ff8a 	bl	8002794 <xTimerGenericCommand>
 8002880:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d112      	bne.n	80028ae <prvProcessExpiredTimer+0x82>
 8002888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288c:	f383 8811 	msr	BASEPRI, r3
 8002890:	f3bf 8f6f 	isb	sy
 8002894:	f3bf 8f4f 	dsb	sy
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	e7fe      	b.n	800289a <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	4798      	blx	r3
    }
 80028b6:	bf00      	nop
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20012d9c 	.word	0x20012d9c

080028c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80028cc:	f107 0308 	add.w	r3, r7, #8
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 f857 	bl	8002984 <prvGetNextExpireTime>
 80028d6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4619      	mov	r1, r3
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 f803 	bl	80028e8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80028e2:	f000 f8d5 	bl	8002a90 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80028e6:	e7f1      	b.n	80028cc <prvTimerTask+0x8>

080028e8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80028f2:	f7ff fa6f 	bl	8001dd4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80028f6:	f107 0308 	add.w	r3, r7, #8
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f866 	bl	80029cc <prvSampleTimeNow>
 8002900:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d130      	bne.n	800296a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10a      	bne.n	8002924 <prvProcessTimerOrBlockTask+0x3c>
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	429a      	cmp	r2, r3
 8002914:	d806      	bhi.n	8002924 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002916:	f7ff fa6b 	bl	8001df0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800291a:	68f9      	ldr	r1, [r7, #12]
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff ff85 	bl	800282c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002922:	e024      	b.n	800296e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d008      	beq.n	800293c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800292a:	4b13      	ldr	r3, [pc, #76]	; (8002978 <prvProcessTimerOrBlockTask+0x90>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <prvProcessTimerOrBlockTask+0x50>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <prvProcessTimerOrBlockTask+0x52>
 8002938:	2300      	movs	r3, #0
 800293a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800293c:	4b0f      	ldr	r3, [pc, #60]	; (800297c <prvProcessTimerOrBlockTask+0x94>)
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	4619      	mov	r1, r3
 800294a:	f7fe ffed 	bl	8001928 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800294e:	f7ff fa4f 	bl	8001df0 <xTaskResumeAll>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10a      	bne.n	800296e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002958:	4b09      	ldr	r3, [pc, #36]	; (8002980 <prvProcessTimerOrBlockTask+0x98>)
 800295a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	f3bf 8f6f 	isb	sy
    }
 8002968:	e001      	b.n	800296e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800296a:	f7ff fa41 	bl	8001df0 <xTaskResumeAll>
    }
 800296e:	bf00      	nop
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20012da0 	.word	0x20012da0
 800297c:	20012da4 	.word	0x20012da4
 8002980:	e000ed04 	.word	0xe000ed04

08002984 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <prvGetNextExpireTime+0x44>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <prvGetNextExpireTime+0x16>
 8002996:	2201      	movs	r2, #1
 8002998:	e000      	b.n	800299c <prvGetNextExpireTime+0x18>
 800299a:	2200      	movs	r2, #0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <prvGetNextExpireTime+0x44>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	e001      	b.n	80029b8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80029b8:	68fb      	ldr	r3, [r7, #12]
    }
 80029ba:	4618      	mov	r0, r3
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20012d9c 	.word	0x20012d9c

080029cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80029d4:	f7ff faa8 	bl	8001f28 <xTaskGetTickCount>
 80029d8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <prvSampleTimeNow+0x3c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d205      	bcs.n	80029f0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80029e4:	f000 f918 	bl	8002c18 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e002      	b.n	80029f6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80029f6:	4a04      	ldr	r2, [pc, #16]	; (8002a08 <prvSampleTimeNow+0x3c>)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80029fc:	68fb      	ldr	r3, [r7, #12]
    }
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20012dac 	.word	0x20012dac

08002a0c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d812      	bhi.n	8002a58 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	1ad2      	subs	r2, r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d302      	bcc.n	8002a46 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002a40:	2301      	movs	r3, #1
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	e01b      	b.n	8002a7e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002a46:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <prvInsertTimerInActiveList+0x7c>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4610      	mov	r0, r2
 8002a52:	f7fd fe53 	bl	80006fc <vListInsert>
 8002a56:	e012      	b.n	8002a7e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d206      	bcs.n	8002a6e <prvInsertTimerInActiveList+0x62>
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d302      	bcc.n	8002a6e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	e007      	b.n	8002a7e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002a6e:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <prvInsertTimerInActiveList+0x80>)
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	3304      	adds	r3, #4
 8002a76:	4619      	mov	r1, r3
 8002a78:	4610      	mov	r0, r2
 8002a7a:	f7fd fe3f 	bl	80006fc <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002a7e:	697b      	ldr	r3, [r7, #20]
    }
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20012da0 	.word	0x20012da0
 8002a8c:	20012d9c 	.word	0x20012d9c

08002a90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08c      	sub	sp, #48	; 0x30
 8002a94:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002a96:	e0ac      	b.n	8002bf2 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f2c0 80a9 	blt.w	8002bf2 <prvProcessReceivedCommands+0x162>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d004      	beq.n	8002ab6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	3304      	adds	r3, #4
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd fe5c 	bl	800076e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002ab6:	1d3b      	adds	r3, r7, #4
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff87 	bl	80029cc <prvSampleTimeNow>
 8002abe:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b09      	cmp	r3, #9
 8002ac4:	f200 8094 	bhi.w	8002bf0 <prvProcessReceivedCommands+0x160>
 8002ac8:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <prvProcessReceivedCommands+0x40>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002af9 	.word	0x08002af9
 8002ad4:	08002af9 	.word	0x08002af9
 8002ad8:	08002af9 	.word	0x08002af9
 8002adc:	08002b6b 	.word	0x08002b6b
 8002ae0:	08002b7f 	.word	0x08002b7f
 8002ae4:	08002bc7 	.word	0x08002bc7
 8002ae8:	08002af9 	.word	0x08002af9
 8002aec:	08002af9 	.word	0x08002af9
 8002af0:	08002b6b 	.word	0x08002b6b
 8002af4:	08002b7f 	.word	0x08002b7f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002afe:	f043 0301 	orr.w	r3, r3, #1
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	18d1      	adds	r1, r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a3a      	ldr	r2, [r7, #32]
 8002b16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b18:	f7ff ff78 	bl	8002a0c <prvInsertTimerInActiveList>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d067      	beq.n	8002bf2 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b28:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d05c      	beq.n	8002bf2 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	441a      	add	r2, r3
 8002b40:	2300      	movs	r3, #0
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	2300      	movs	r3, #0
 8002b46:	2100      	movs	r1, #0
 8002b48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b4a:	f7ff fe23 	bl	8002794 <xTimerGenericCommand>
 8002b4e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d14d      	bne.n	8002bf2 <prvProcessReceivedCommands+0x162>
 8002b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5a:	f383 8811 	msr	BASEPRI, r3
 8002b5e:	f3bf 8f6f 	isb	sy
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	61bb      	str	r3, [r7, #24]
 8002b68:	e7fe      	b.n	8002b68 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002b7c:	e039      	b.n	8002bf2 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d109      	bne.n	8002bb2 <prvProcessReceivedCommands+0x122>
 8002b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	e7fe      	b.n	8002bb0 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	18d1      	adds	r1, r2, r3
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	6a3a      	ldr	r2, [r7, #32]
 8002bbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bc0:	f7ff ff24 	bl	8002a0c <prvInsertTimerInActiveList>
                        break;
 8002bc4:	e015      	b.n	8002bf2 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d103      	bne.n	8002bdc <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8002bd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bd6:	f7fe f8fd 	bl	8000dd4 <vPortFree>
 8002bda:	e00a      	b.n	8002bf2 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002be2:	f023 0301 	bic.w	r3, r3, #1
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002bee:	e000      	b.n	8002bf2 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
 8002bf0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <prvProcessReceivedCommands+0x184>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f107 0108 	add.w	r1, r7, #8
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe fc7f 	bl	8001500 <xQueueReceive>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f47f af47 	bne.w	8002a98 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8002c0a:	bf00      	nop
 8002c0c:	3728      	adds	r7, #40	; 0x28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20012da4 	.word	0x20012da4

08002c18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002c1e:	e047      	b.n	8002cb0 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c20:	4b2d      	ldr	r3, [pc, #180]	; (8002cd8 <prvSwitchTimerLists+0xc0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	617b      	str	r3, [r7, #20]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c2a:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <prvSwitchTimerLists+0xc0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	613b      	str	r3, [r7, #16]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	3304      	adds	r3, #4
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fd fd98 	bl	800076e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	6938      	ldr	r0, [r7, #16]
 8002c44:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d02d      	beq.n	8002cb0 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	699a      	ldr	r2, [r3, #24]
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]

                if( xReloadTime > xNextExpireTime )
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d90e      	bls.n	8002c84 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002c72:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <prvSwitchTimerLists+0xc0>)
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	f7fd fd3d 	bl	80006fc <vListInsert>
 8002c82:	e015      	b.n	8002cb0 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002c84:	2300      	movs	r3, #0
 8002c86:	9300      	str	r3, [sp, #0]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	6938      	ldr	r0, [r7, #16]
 8002c90:	f7ff fd80 	bl	8002794 <xTimerGenericCommand>
 8002c94:	60b8      	str	r0, [r7, #8]
                    configASSERT( xResult );
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d109      	bne.n	8002cb0 <prvSwitchTimerLists+0x98>
 8002c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	603b      	str	r3, [r7, #0]
 8002cae:	e7fe      	b.n	8002cae <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002cb0:	4b09      	ldr	r3, [pc, #36]	; (8002cd8 <prvSwitchTimerLists+0xc0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1b2      	bne.n	8002c20 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8002cba:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <prvSwitchTimerLists+0xc0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <prvSwitchTimerLists+0xc4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a04      	ldr	r2, [pc, #16]	; (8002cd8 <prvSwitchTimerLists+0xc0>)
 8002cc6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002cc8:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <prvSwitchTimerLists+0xc4>)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6013      	str	r3, [r2, #0]
    }
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20012d9c 	.word	0x20012d9c
 8002cdc:	20012da0 	.word	0x20012da0

08002ce0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002ce4:	f7fd fe94 	bl	8000a10 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002ce8:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <prvCheckForValidListAndQueue+0x54>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d11d      	bne.n	8002d2c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002cf0:	4811      	ldr	r0, [pc, #68]	; (8002d38 <prvCheckForValidListAndQueue+0x58>)
 8002cf2:	f7fd fcb2 	bl	800065a <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002cf6:	4811      	ldr	r0, [pc, #68]	; (8002d3c <prvCheckForValidListAndQueue+0x5c>)
 8002cf8:	f7fd fcaf 	bl	800065a <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002cfc:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <prvCheckForValidListAndQueue+0x60>)
 8002cfe:	4a0e      	ldr	r2, [pc, #56]	; (8002d38 <prvCheckForValidListAndQueue+0x58>)
 8002d00:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <prvCheckForValidListAndQueue+0x64>)
 8002d04:	4a0d      	ldr	r2, [pc, #52]	; (8002d3c <prvCheckForValidListAndQueue+0x5c>)
 8002d06:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002d08:	2200      	movs	r2, #0
 8002d0a:	210c      	movs	r1, #12
 8002d0c:	200a      	movs	r0, #10
 8002d0e:	f7fe f9e5 	bl	80010dc <xQueueGenericCreate>
 8002d12:	4602      	mov	r2, r0
 8002d14:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <prvCheckForValidListAndQueue+0x54>)
 8002d16:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <prvCheckForValidListAndQueue+0x54>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002d20:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <prvCheckForValidListAndQueue+0x54>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4908      	ldr	r1, [pc, #32]	; (8002d48 <prvCheckForValidListAndQueue+0x68>)
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fdd6 	bl	80018d8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002d2c:	f7fd fe9e 	bl	8000a6c <vPortExitCritical>
    }
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20012da4 	.word	0x20012da4
 8002d38:	20012d74 	.word	0x20012d74
 8002d3c:	20012d88 	.word	0x20012d88
 8002d40:	20012d9c 	.word	0x20012d9c
 8002d44:	20012da0 	.word	0x20012da0
 8002d48:	080033d0 	.word	0x080033d0

08002d4c <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8002d50:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <Audio_MAL_IRQHandler+0xe8>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	4b38      	ldr	r3, [pc, #224]	; (8002e38 <Audio_MAL_IRQHandler+0xec>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	f7fd fae0 	bl	8000320 <DMA_GetFlagStatus>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d064      	beq.n	8002e30 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8002d66:	4b35      	ldr	r3, [pc, #212]	; (8002e3c <Audio_MAL_IRQHandler+0xf0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d04c      	beq.n	8002e08 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8002d6e:	bf00      	nop
 8002d70:	4b30      	ldr	r3, [pc, #192]	; (8002e34 <Audio_MAL_IRQHandler+0xe8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fd fabb 	bl	80002f0 <DMA_GetCmdStatus>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f7      	bne.n	8002d70 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8002d80:	4b2c      	ldr	r3, [pc, #176]	; (8002e34 <Audio_MAL_IRQHandler+0xe8>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b2c      	ldr	r3, [pc, #176]	; (8002e38 <Audio_MAL_IRQHandler+0xec>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	f7fd fb04 	bl	8000398 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8002d90:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <Audio_MAL_IRQHandler+0xf4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	4b2b      	ldr	r3, [pc, #172]	; (8002e44 <Audio_MAL_IRQHandler+0xf8>)
 8002d98:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8002d9a:	4b28      	ldr	r3, [pc, #160]	; (8002e3c <Audio_MAL_IRQHandler+0xf0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002da2:	4293      	cmp	r3, r2
 8002da4:	bf28      	it	cs
 8002da6:	4613      	movcs	r3, r2
 8002da8:	4a26      	ldr	r2, [pc, #152]	; (8002e44 <Audio_MAL_IRQHandler+0xf8>)
 8002daa:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8002dac:	4b21      	ldr	r3, [pc, #132]	; (8002e34 <Audio_MAL_IRQHandler+0xe8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4924      	ldr	r1, [pc, #144]	; (8002e44 <Audio_MAL_IRQHandler+0xf8>)
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd fa28 	bl	8000208 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8002db8:	4b1e      	ldr	r3, [pc, #120]	; (8002e34 <Audio_MAL_IRQHandler+0xe8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fa7a 	bl	80002b8 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8002dc4:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <Audio_MAL_IRQHandler+0xf4>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b1c      	ldr	r3, [pc, #112]	; (8002e3c <Audio_MAL_IRQHandler+0xf0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd0:	d203      	bcs.n	8002dda <Audio_MAL_IRQHandler+0x8e>
 8002dd2:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <Audio_MAL_IRQHandler+0xf0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	e000      	b.n	8002ddc <Audio_MAL_IRQHandler+0x90>
 8002dda:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <Audio_MAL_IRQHandler+0xfc>)
 8002ddc:	4413      	add	r3, r2
 8002dde:	4a18      	ldr	r2, [pc, #96]	; (8002e40 <Audio_MAL_IRQHandler+0xf4>)
 8002de0:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8002de2:	4b16      	ldr	r3, [pc, #88]	; (8002e3c <Audio_MAL_IRQHandler+0xf0>)
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <Audio_MAL_IRQHandler+0xf0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002dee:	428b      	cmp	r3, r1
 8002df0:	bf28      	it	cs
 8002df2:	460b      	movcs	r3, r1
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	4a11      	ldr	r2, [pc, #68]	; (8002e3c <Audio_MAL_IRQHandler+0xf0>)
 8002df8:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <Audio_MAL_IRQHandler+0xe8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2101      	movs	r1, #1
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd fa59 	bl	80002b8 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8002e06:	e013      	b.n	8002e30 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8002e08:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <Audio_MAL_IRQHandler+0xe8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd fa52 	bl	80002b8 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8002e14:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <Audio_MAL_IRQHandler+0xe8>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <Audio_MAL_IRQHandler+0xec>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	f7fd faba 	bl	8000398 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <Audio_MAL_IRQHandler+0xf4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f908 	bl	8003040 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8002e30:	bf00      	nop
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000010 	.word	0x20000010
 8002e38:	20000014 	.word	0x20000014
 8002e3c:	20000008 	.word	0x20000008
 8002e40:	20012df8 	.word	0x20012df8
 8002e44:	20012e38 	.word	0x20012e38
 8002e48:	0001fffe 	.word	0x0001fffe

08002e4c <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002e50:	f7ff ff7c 	bl	8002d4c <Audio_MAL_IRQHandler>
}
 8002e54:	bf00      	nop
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002e5c:	f7ff ff76 	bl	8002d4c <Audio_MAL_IRQHandler>
}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8002e68:	2102      	movs	r1, #2
 8002e6a:	480d      	ldr	r0, [pc, #52]	; (8002ea0 <SPI3_IRQHandler+0x3c>)
 8002e6c:	f7fd fbd9 	bl	8000622 <SPI_I2S_GetFlagStatus>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d011      	beq.n	8002e9a <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002e76:	4b0b      	ldr	r3, [pc, #44]	; (8002ea4 <SPI3_IRQHandler+0x40>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d106      	bne.n	8002e8c <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8002e7e:	f000 f8ea 	bl	8003056 <EVAL_AUDIO_GetSampleCallBack>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4619      	mov	r1, r3
 8002e86:	2004      	movs	r0, #4
 8002e88:	f7fd f9a2 	bl	80001d0 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8002e8c:	f000 f8e3 	bl	8003056 <EVAL_AUDIO_GetSampleCallBack>
 8002e90:	4603      	mov	r3, r0
 8002e92:	4619      	mov	r1, r3
 8002e94:	4802      	ldr	r0, [pc, #8]	; (8002ea0 <SPI3_IRQHandler+0x3c>)
 8002e96:	f7fd fbb5 	bl	8000604 <SPI_I2S_SendData>
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40003c00 	.word	0x40003c00
 8002ea4:	2000000c 	.word	0x2000000c

08002ea8 <main>:
void Task1Handler(void *params);
void Task2Handler(void *params);
void FreeFTOSDelay(uint32_t delay);

int main(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af02      	add	r7, sp, #8
	RCC_DeInit();
 8002eae:	f7fd fb5b 	bl	8000568 <RCC_DeInit>
	SystemCoreClockUpdate();
 8002eb2:	f000 f949 	bl	8003148 <SystemCoreClockUpdate>
	setupConfig();
 8002eb6:	f000 f8bb 	bl	8003030 <setupConfig>
	xTaskCreate(Task1Handler, "Task_1", configMINIMAL_STACK_SIZE, NULL, 4, &task_1handler);
 8002eba:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <main+0x40>)
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	2282      	movs	r2, #130	; 0x82
 8002ec6:	4909      	ldr	r1, [pc, #36]	; (8002eec <main+0x44>)
 8002ec8:	4809      	ldr	r0, [pc, #36]	; (8002ef0 <main+0x48>)
 8002eca:	f7fe fd61 	bl	8001990 <xTaskCreate>
	xTaskCreate(Task2Handler, "Task_2", configMINIMAL_STACK_SIZE, NULL, 3, &task_2handler);
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <main+0x4c>)
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	2282      	movs	r2, #130	; 0x82
 8002eda:	4907      	ldr	r1, [pc, #28]	; (8002ef8 <main+0x50>)
 8002edc:	4807      	ldr	r0, [pc, #28]	; (8002efc <main+0x54>)
 8002ede:	f7fe fd57 	bl	8001990 <xTaskCreate>
	vTaskStartScheduler();
 8002ee2:	f7fe ff27 	bl	8001d34 <vTaskStartScheduler>
  while (1)
 8002ee6:	e7fe      	b.n	8002ee6 <main+0x3e>
 8002ee8:	20012db0 	.word	0x20012db0
 8002eec:	080033d8 	.word	0x080033d8
 8002ef0:	08002f01 	.word	0x08002f01
 8002ef4:	20012db4 	.word	0x20012db4
 8002ef8:	080033e0 	.word	0x080033e0
 8002efc:	08002f51 	.word	0x08002f51

08002f00 <Task1Handler>:
  {

  }
}
void Task1Handler(void *params){
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
	while(1){
		GPIO_ToggleBits(GPIOD,GPIO_Pin_12|GPIO_Pin_13);
 8002f08:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002f0c:	480d      	ldr	r0, [pc, #52]	; (8002f44 <Task1Handler+0x44>)
 8002f0e:	f7fd fb19 	bl	8000544 <GPIO_ToggleBits>
		FreeFTOSDelay(1000);
 8002f12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f16:	f000 f86b 	bl	8002ff0 <FreeFTOSDelay>
		if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0)){
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	480a      	ldr	r0, [pc, #40]	; (8002f48 <Task1Handler+0x48>)
 8002f1e:	f7fd faf7 	bl	8000510 <GPIO_ReadInputDataBit>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0ef      	beq.n	8002f08 <Task1Handler+0x8>
			while(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0));
 8002f28:	bf00      	nop
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	4806      	ldr	r0, [pc, #24]	; (8002f48 <Task1Handler+0x48>)
 8002f2e:	f7fd faef 	bl	8000510 <GPIO_ReadInputDataBit>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1f8      	bne.n	8002f2a <Task1Handler+0x2a>
			vTaskDelete(task_1handler);
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <Task1Handler+0x4c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe fe6b 	bl	8001c18 <vTaskDelete>
		GPIO_ToggleBits(GPIOD,GPIO_Pin_12|GPIO_Pin_13);
 8002f42:	e7e1      	b.n	8002f08 <Task1Handler+0x8>
 8002f44:	40020c00 	.word	0x40020c00
 8002f48:	40020000 	.word	0x40020000
 8002f4c:	20012db0 	.word	0x20012db0

08002f50 <Task2Handler>:
		}
	}

}
void Task2Handler(void *params){
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	while(1){
		GPIO_ToggleBits(GPIOD,GPIO_Pin_14|GPIO_Pin_15);
 8002f58:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002f5c:	4803      	ldr	r0, [pc, #12]	; (8002f6c <Task2Handler+0x1c>)
 8002f5e:	f7fd faf1 	bl	8000544 <GPIO_ToggleBits>
		FreeFTOSDelay(500);
 8002f62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f66:	f000 f843 	bl	8002ff0 <FreeFTOSDelay>
		GPIO_ToggleBits(GPIOD,GPIO_Pin_14|GPIO_Pin_15);
 8002f6a:	e7f5      	b.n	8002f58 <Task2Handler+0x8>
 8002f6c:	40020c00 	.word	0x40020c00

08002f70 <GPIO_Input>:
	}
}

void GPIO_Input(){
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
 8002f74:	2101      	movs	r1, #1
 8002f76:	2001      	movs	r0, #1
 8002f78:	f7fd fb24 	bl	80005c4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <GPIO_Input+0x38>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8002f82:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <GPIO_Input+0x38>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0;
 8002f88:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <GPIO_Input+0x38>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <GPIO_Input+0x38>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <GPIO_Input+0x38>)
 8002f96:	2203      	movs	r2, #3
 8002f98:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOA,&GPIO_InitStruct);
 8002f9a:	4903      	ldr	r1, [pc, #12]	; (8002fa8 <GPIO_Input+0x38>)
 8002f9c:	4803      	ldr	r0, [pc, #12]	; (8002fac <GPIO_Input+0x3c>)
 8002f9e:	f7fd fa29 	bl	80003f4 <GPIO_Init>


}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20012e74 	.word	0x20012e74
 8002fac:	40020000 	.word	0x40020000

08002fb0 <GPIO_Output>:
void GPIO_Output(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	2008      	movs	r0, #8
 8002fb8:	f7fd fb04 	bl	80005c4 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_OUT;
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <GPIO_Output+0x38>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	711a      	strb	r2, [r3, #4]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <GPIO_Output+0x38>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	719a      	strb	r2, [r3, #6]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8002fc8:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <GPIO_Output+0x38>)
 8002fca:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8002fce:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <GPIO_Output+0x38>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	71da      	strb	r2, [r3, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8002fd6:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <GPIO_Output+0x38>)
 8002fd8:	2203      	movs	r2, #3
 8002fda:	715a      	strb	r2, [r3, #5]
	GPIO_Init(GPIOD,&GPIO_InitStruct);
 8002fdc:	4902      	ldr	r1, [pc, #8]	; (8002fe8 <GPIO_Output+0x38>)
 8002fde:	4803      	ldr	r0, [pc, #12]	; (8002fec <GPIO_Output+0x3c>)
 8002fe0:	f7fd fa08 	bl	80003f4 <GPIO_Init>

}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20012e74 	.word	0x20012e74
 8002fec:	40020c00 	.word	0x40020c00

08002ff0 <FreeFTOSDelay>:

void FreeFTOSDelay(uint32_t delay){
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	uint32_t currentTick = xTaskGetTickCount();
 8002ff8:	f7fe ff96 	bl	8001f28 <xTaskGetTickCount>
 8002ffc:	60f8      	str	r0, [r7, #12]
	uint32_t delayTick = pdMS_TO_TICKS(delay);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003004:	fb02 f303 	mul.w	r3, r2, r3
 8003008:	4a08      	ldr	r2, [pc, #32]	; (800302c <FreeFTOSDelay+0x3c>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	099b      	lsrs	r3, r3, #6
 8003010:	60bb      	str	r3, [r7, #8]
	while(xTaskGetTickCount()<(currentTick+delayTick));
 8003012:	bf00      	nop
 8003014:	f7fe ff88 	bl	8001f28 <xTaskGetTickCount>
 8003018:	4601      	mov	r1, r0
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4413      	add	r3, r2
 8003020:	4299      	cmp	r1, r3
 8003022:	d3f7      	bcc.n	8003014 <FreeFTOSDelay+0x24>
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	10624dd3 	.word	0x10624dd3

08003030 <setupConfig>:

void setupConfig(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
	GPIO_Output();
 8003034:	f7ff ffbc 	bl	8002fb0 <GPIO_Output>
	GPIO_Input();
 8003038:	f7ff ff9a 	bl	8002f70 <GPIO_Input>
}
 800303c:	bf00      	nop
 800303e:	bd80      	pop	{r7, pc}

08003040 <EVAL_AUDIO_TransferComplete_CallBack>:

void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 800304a:	bf00      	nop
}
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <EVAL_AUDIO_GetSampleCallBack>:


uint16_t EVAL_AUDIO_GetSampleCallBack(void){
 8003056:	b480      	push	{r7}
 8003058:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return -1;
 800305a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800305e:	4618      	mov	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030a0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800306c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800306e:	e003      	b.n	8003078 <LoopCopyDataInit>

08003070 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003070:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003072:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003074:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003076:	3104      	adds	r1, #4

08003078 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003078:	480b      	ldr	r0, [pc, #44]	; (80030a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800307a:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800307c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800307e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003080:	d3f6      	bcc.n	8003070 <CopyDataInit>
  ldr  r2, =_sbss
 8003082:	4a0b      	ldr	r2, [pc, #44]	; (80030b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003084:	e002      	b.n	800308c <LoopFillZerobss>

08003086 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003086:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003088:	f842 3b04 	str.w	r3, [r2], #4

0800308c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800308e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003090:	d3f9      	bcc.n	8003086 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003092:	f000 f823 	bl	80030dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003096:	f000 f94f 	bl	8003338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800309a:	f7ff ff05 	bl	8002ea8 <main>
  bx  lr    
 800309e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030a0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80030a4:	080033f0 	.word	0x080033f0
  ldr  r0, =_sdata
 80030a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030ac:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 80030b0:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 80030b4:	20012e7c 	.word	0x20012e7c

080030b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030b8:	e7fe      	b.n	80030b8 <ADC_IRQHandler>

080030ba <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80030be:	e7fe      	b.n	80030be <MemManage_Handler+0x4>

080030c0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80030c4:	e7fe      	b.n	80030c4 <BusFault_Handler+0x4>

080030c6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80030ca:	e7fe      	b.n	80030ca <UsageFault_Handler+0x4>

080030cc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030e0:	4a16      	ldr	r2, [pc, #88]	; (800313c <SystemInit+0x60>)
 80030e2:	4b16      	ldr	r3, [pc, #88]	; (800313c <SystemInit+0x60>)
 80030e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80030f0:	4a13      	ldr	r2, [pc, #76]	; (8003140 <SystemInit+0x64>)
 80030f2:	4b13      	ldr	r3, [pc, #76]	; (8003140 <SystemInit+0x64>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80030fc:	4b10      	ldr	r3, [pc, #64]	; (8003140 <SystemInit+0x64>)
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003102:	4a0f      	ldr	r2, [pc, #60]	; (8003140 <SystemInit+0x64>)
 8003104:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <SystemInit+0x64>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800310c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003110:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003112:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <SystemInit+0x64>)
 8003114:	4a0b      	ldr	r2, [pc, #44]	; (8003144 <SystemInit+0x68>)
 8003116:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003118:	4a09      	ldr	r2, [pc, #36]	; (8003140 <SystemInit+0x64>)
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <SystemInit+0x64>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003122:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003124:	4b06      	ldr	r3, [pc, #24]	; (8003140 <SystemInit+0x64>)
 8003126:	2200      	movs	r2, #0
 8003128:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800312a:	f000 f889 	bl	8003240 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800312e:	4b03      	ldr	r3, [pc, #12]	; (800313c <SystemInit+0x60>)
 8003130:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003134:	609a      	str	r2, [r3, #8]
#endif
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	e000ed00 	.word	0xe000ed00
 8003140:	40023800 	.word	0x40023800
 8003144:	24003010 	.word	0x24003010

08003148 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	2302      	movs	r3, #2
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	2302      	movs	r3, #2
 8003160:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003162:	4b32      	ldr	r3, [pc, #200]	; (800322c <SystemCoreClockUpdate+0xe4>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
 800316a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	2b04      	cmp	r3, #4
 8003170:	d007      	beq.n	8003182 <SystemCoreClockUpdate+0x3a>
 8003172:	2b08      	cmp	r3, #8
 8003174:	d009      	beq.n	800318a <SystemCoreClockUpdate+0x42>
 8003176:	2b00      	cmp	r3, #0
 8003178:	d13d      	bne.n	80031f6 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800317a:	4b2d      	ldr	r3, [pc, #180]	; (8003230 <SystemCoreClockUpdate+0xe8>)
 800317c:	4a2d      	ldr	r2, [pc, #180]	; (8003234 <SystemCoreClockUpdate+0xec>)
 800317e:	601a      	str	r2, [r3, #0]
      break;
 8003180:	e03d      	b.n	80031fe <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003182:	4b2b      	ldr	r3, [pc, #172]	; (8003230 <SystemCoreClockUpdate+0xe8>)
 8003184:	4a2c      	ldr	r2, [pc, #176]	; (8003238 <SystemCoreClockUpdate+0xf0>)
 8003186:	601a      	str	r2, [r3, #0]
      break;
 8003188:	e039      	b.n	80031fe <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800318a:	4b28      	ldr	r3, [pc, #160]	; (800322c <SystemCoreClockUpdate+0xe4>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	0d9b      	lsrs	r3, r3, #22
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003196:	4b25      	ldr	r3, [pc, #148]	; (800322c <SystemCoreClockUpdate+0xe4>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800319e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00c      	beq.n	80031c0 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80031a6:	4a24      	ldr	r2, [pc, #144]	; (8003238 <SystemCoreClockUpdate+0xf0>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ae:	4a1f      	ldr	r2, [pc, #124]	; (800322c <SystemCoreClockUpdate+0xe4>)
 80031b0:	6852      	ldr	r2, [r2, #4]
 80031b2:	0992      	lsrs	r2, r2, #6
 80031b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031b8:	fb02 f303 	mul.w	r3, r2, r3
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	e00b      	b.n	80031d8 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80031c0:	4a1c      	ldr	r2, [pc, #112]	; (8003234 <SystemCoreClockUpdate+0xec>)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	4a18      	ldr	r2, [pc, #96]	; (800322c <SystemCoreClockUpdate+0xe4>)
 80031ca:	6852      	ldr	r2, [r2, #4]
 80031cc:	0992      	lsrs	r2, r2, #6
 80031ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80031d8:	4b14      	ldr	r3, [pc, #80]	; (800322c <SystemCoreClockUpdate+0xe4>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	0c1b      	lsrs	r3, r3, #16
 80031de:	f003 0303 	and.w	r3, r3, #3
 80031e2:	3301      	adds	r3, #1
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	4a0f      	ldr	r2, [pc, #60]	; (8003230 <SystemCoreClockUpdate+0xe8>)
 80031f2:	6013      	str	r3, [r2, #0]
      break;
 80031f4:	e003      	b.n	80031fe <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 80031f6:	4b0e      	ldr	r3, [pc, #56]	; (8003230 <SystemCoreClockUpdate+0xe8>)
 80031f8:	4a0e      	ldr	r2, [pc, #56]	; (8003234 <SystemCoreClockUpdate+0xec>)
 80031fa:	601a      	str	r2, [r3, #0]
      break;
 80031fc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80031fe:	4b0b      	ldr	r3, [pc, #44]	; (800322c <SystemCoreClockUpdate+0xe4>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	091b      	lsrs	r3, r3, #4
 8003204:	f003 030f 	and.w	r3, r3, #15
 8003208:	4a0c      	ldr	r2, [pc, #48]	; (800323c <SystemCoreClockUpdate+0xf4>)
 800320a:	5cd3      	ldrb	r3, [r2, r3]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <SystemCoreClockUpdate+0xe8>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	fa22 f303 	lsr.w	r3, r2, r3
 800321a:	4a05      	ldr	r2, [pc, #20]	; (8003230 <SystemCoreClockUpdate+0xe8>)
 800321c:	6013      	str	r3, [r2, #0]
}
 800321e:	bf00      	nop
 8003220:	371c      	adds	r7, #28
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40023800 	.word	0x40023800
 8003230:	20000018 	.word	0x20000018
 8003234:	00f42400 	.word	0x00f42400
 8003238:	007a1200 	.word	0x007a1200
 800323c:	2000001c 	.word	0x2000001c

08003240 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003246:	2300      	movs	r3, #0
 8003248:	607b      	str	r3, [r7, #4]
 800324a:	2300      	movs	r3, #0
 800324c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800324e:	4a36      	ldr	r2, [pc, #216]	; (8003328 <SetSysClock+0xe8>)
 8003250:	4b35      	ldr	r3, [pc, #212]	; (8003328 <SetSysClock+0xe8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800325a:	4b33      	ldr	r3, [pc, #204]	; (8003328 <SetSysClock+0xe8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3301      	adds	r3, #1
 8003268:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d103      	bne.n	8003278 <SetSysClock+0x38>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003276:	d1f0      	bne.n	800325a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <SetSysClock+0xe8>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003284:	2301      	movs	r3, #1
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	e001      	b.n	800328e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800328a:	2300      	movs	r3, #0
 800328c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d142      	bne.n	800331a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003294:	4a24      	ldr	r2, [pc, #144]	; (8003328 <SetSysClock+0xe8>)
 8003296:	4b24      	ldr	r3, [pc, #144]	; (8003328 <SetSysClock+0xe8>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800329e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80032a0:	4a22      	ldr	r2, [pc, #136]	; (800332c <SetSysClock+0xec>)
 80032a2:	4b22      	ldr	r3, [pc, #136]	; (800332c <SetSysClock+0xec>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032aa:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80032ac:	4a1e      	ldr	r2, [pc, #120]	; (8003328 <SetSysClock+0xe8>)
 80032ae:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <SetSysClock+0xe8>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80032b4:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <SetSysClock+0xe8>)
 80032b6:	4b1c      	ldr	r3, [pc, #112]	; (8003328 <SetSysClock+0xe8>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032be:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80032c0:	4a19      	ldr	r2, [pc, #100]	; (8003328 <SetSysClock+0xe8>)
 80032c2:	4b19      	ldr	r3, [pc, #100]	; (8003328 <SetSysClock+0xe8>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80032ca:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <SetSysClock+0xe8>)
 80032ce:	4a18      	ldr	r2, [pc, #96]	; (8003330 <SetSysClock+0xf0>)
 80032d0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80032d2:	4a15      	ldr	r2, [pc, #84]	; (8003328 <SetSysClock+0xe8>)
 80032d4:	4b14      	ldr	r3, [pc, #80]	; (8003328 <SetSysClock+0xe8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032dc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80032de:	bf00      	nop
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <SetSysClock+0xe8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f9      	beq.n	80032e0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80032ec:	4b11      	ldr	r3, [pc, #68]	; (8003334 <SetSysClock+0xf4>)
 80032ee:	f240 6205 	movw	r2, #1541	; 0x605
 80032f2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80032f4:	4a0c      	ldr	r2, [pc, #48]	; (8003328 <SetSysClock+0xe8>)
 80032f6:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <SetSysClock+0xe8>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f023 0303 	bic.w	r3, r3, #3
 80032fe:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003300:	4a09      	ldr	r2, [pc, #36]	; (8003328 <SetSysClock+0xe8>)
 8003302:	4b09      	ldr	r3, [pc, #36]	; (8003328 <SetSysClock+0xe8>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f043 0302 	orr.w	r3, r3, #2
 800330a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800330c:	bf00      	nop
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <SetSysClock+0xe8>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	2b08      	cmp	r3, #8
 8003318:	d1f9      	bne.n	800330e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40023800 	.word	0x40023800
 800332c:	40007000 	.word	0x40007000
 8003330:	07405408 	.word	0x07405408
 8003334:	40023c00 	.word	0x40023c00

08003338 <__libc_init_array>:
 8003338:	b570      	push	{r4, r5, r6, lr}
 800333a:	4e0d      	ldr	r6, [pc, #52]	; (8003370 <__libc_init_array+0x38>)
 800333c:	4c0d      	ldr	r4, [pc, #52]	; (8003374 <__libc_init_array+0x3c>)
 800333e:	1ba4      	subs	r4, r4, r6
 8003340:	10a4      	asrs	r4, r4, #2
 8003342:	2500      	movs	r5, #0
 8003344:	42a5      	cmp	r5, r4
 8003346:	d109      	bne.n	800335c <__libc_init_array+0x24>
 8003348:	4e0b      	ldr	r6, [pc, #44]	; (8003378 <__libc_init_array+0x40>)
 800334a:	4c0c      	ldr	r4, [pc, #48]	; (800337c <__libc_init_array+0x44>)
 800334c:	f000 f82c 	bl	80033a8 <_init>
 8003350:	1ba4      	subs	r4, r4, r6
 8003352:	10a4      	asrs	r4, r4, #2
 8003354:	2500      	movs	r5, #0
 8003356:	42a5      	cmp	r5, r4
 8003358:	d105      	bne.n	8003366 <__libc_init_array+0x2e>
 800335a:	bd70      	pop	{r4, r5, r6, pc}
 800335c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003360:	4798      	blx	r3
 8003362:	3501      	adds	r5, #1
 8003364:	e7ee      	b.n	8003344 <__libc_init_array+0xc>
 8003366:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800336a:	4798      	blx	r3
 800336c:	3501      	adds	r5, #1
 800336e:	e7f2      	b.n	8003356 <__libc_init_array+0x1e>
 8003370:	080033e8 	.word	0x080033e8
 8003374:	080033e8 	.word	0x080033e8
 8003378:	080033e8 	.word	0x080033e8
 800337c:	080033ec 	.word	0x080033ec

08003380 <memcpy>:
 8003380:	b510      	push	{r4, lr}
 8003382:	1e43      	subs	r3, r0, #1
 8003384:	440a      	add	r2, r1
 8003386:	4291      	cmp	r1, r2
 8003388:	d100      	bne.n	800338c <memcpy+0xc>
 800338a:	bd10      	pop	{r4, pc}
 800338c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003390:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003394:	e7f7      	b.n	8003386 <memcpy+0x6>

08003396 <memset>:
 8003396:	4402      	add	r2, r0
 8003398:	4603      	mov	r3, r0
 800339a:	4293      	cmp	r3, r2
 800339c:	d100      	bne.n	80033a0 <memset+0xa>
 800339e:	4770      	bx	lr
 80033a0:	f803 1b01 	strb.w	r1, [r3], #1
 80033a4:	e7f9      	b.n	800339a <memset+0x4>
	...

080033a8 <_init>:
 80033a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033aa:	bf00      	nop
 80033ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ae:	bc08      	pop	{r3}
 80033b0:	469e      	mov	lr, r3
 80033b2:	4770      	bx	lr

080033b4 <_fini>:
 80033b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b6:	bf00      	nop
 80033b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ba:	bc08      	pop	{r3}
 80033bc:	469e      	mov	lr, r3
 80033be:	4770      	bx	lr
