
STM32F4_ADC_SINGLE_CONV_WITH_USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003344  08003344  00013344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033ac  080033ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033b4  080033b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033b4  080033b4  000133b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033b8  080033b8  000133b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080033bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000070  0800342c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  0800342c  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007955  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014d9  00000000  00000000  000279f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000700  00000000  00000000  00028ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  000295d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000208c5  00000000  00000000  00029c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006393  00000000  00000000  0004a4dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6bf9  00000000  00000000  00050870  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00117469  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ec0  00000000  00000000  001174e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800332c 	.word	0x0800332c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800332c 	.word	0x0800332c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <getAdc_Value>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void getAdc_Value(void){
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	af00      	add	r7, sp, #0
	  HAL_ADC_Start(&hadc1);
 8000584:	4824      	ldr	r0, [pc, #144]	; (8000618 <getAdc_Value+0x98>)
 8000586:	f000 fb89 	bl	8000c9c <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 100)==HAL_OK){
 800058a:	2164      	movs	r1, #100	; 0x64
 800058c:	4822      	ldr	r0, [pc, #136]	; (8000618 <getAdc_Value+0x98>)
 800058e:	f000 fc7e 	bl	8000e8e <HAL_ADC_PollForConversion>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d106      	bne.n	80005a6 <getAdc_Value+0x26>
		  getAdcValue =  HAL_ADC_GetValue(&hadc1);
 8000598:	481f      	ldr	r0, [pc, #124]	; (8000618 <getAdc_Value+0x98>)
 800059a:	f000 fcfc 	bl	8000f96 <HAL_ADC_GetValue>
 800059e:	4603      	mov	r3, r0
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4b1e      	ldr	r3, [pc, #120]	; (800061c <getAdc_Value+0x9c>)
 80005a4:	801a      	strh	r2, [r3, #0]
	  }
	  HAL_UART_Transmit(&huart2, str, sprintf(str,"Okunan Adc Degeri :"), 100);
 80005a6:	4a1e      	ldr	r2, [pc, #120]	; (8000620 <getAdc_Value+0xa0>)
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <getAdc_Value+0xa4>)
 80005aa:	4615      	mov	r5, r2
 80005ac:	461c      	mov	r4, r3
 80005ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005b0:	6028      	str	r0, [r5, #0]
 80005b2:	6069      	str	r1, [r5, #4]
 80005b4:	60aa      	str	r2, [r5, #8]
 80005b6:	60eb      	str	r3, [r5, #12]
 80005b8:	6820      	ldr	r0, [r4, #0]
 80005ba:	6128      	str	r0, [r5, #16]
 80005bc:	2313      	movs	r3, #19
 80005be:	b29a      	uxth	r2, r3
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	4917      	ldr	r1, [pc, #92]	; (8000620 <getAdc_Value+0xa0>)
 80005c4:	4818      	ldr	r0, [pc, #96]	; (8000628 <getAdc_Value+0xa8>)
 80005c6:	f001 fe1a 	bl	80021fe <HAL_UART_Transmit>
	  sprintf(str, "%d", getAdcValue);
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <getAdc_Value+0x9c>)
 80005cc:	881b      	ldrh	r3, [r3, #0]
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	461a      	mov	r2, r3
 80005d2:	4916      	ldr	r1, [pc, #88]	; (800062c <getAdc_Value+0xac>)
 80005d4:	4812      	ldr	r0, [pc, #72]	; (8000620 <getAdc_Value+0xa0>)
 80005d6:	f002 faa3 	bl	8002b20 <siprintf>
	  HAL_UART_Transmit(&huart2, str, strlen(str), 100);
 80005da:	4811      	ldr	r0, [pc, #68]	; (8000620 <getAdc_Value+0xa0>)
 80005dc:	f7ff fdf8 	bl	80001d0 <strlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	2364      	movs	r3, #100	; 0x64
 80005e6:	490e      	ldr	r1, [pc, #56]	; (8000620 <getAdc_Value+0xa0>)
 80005e8:	480f      	ldr	r0, [pc, #60]	; (8000628 <getAdc_Value+0xa8>)
 80005ea:	f001 fe08 	bl	80021fe <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, str, sprintf(str,"\n"), 100);
 80005ee:	4a0c      	ldr	r2, [pc, #48]	; (8000620 <getAdc_Value+0xa0>)
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <getAdc_Value+0xb0>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	8013      	strh	r3, [r2, #0]
 80005f6:	2301      	movs	r3, #1
 80005f8:	b29a      	uxth	r2, r3
 80005fa:	2364      	movs	r3, #100	; 0x64
 80005fc:	4908      	ldr	r1, [pc, #32]	; (8000620 <getAdc_Value+0xa0>)
 80005fe:	480a      	ldr	r0, [pc, #40]	; (8000628 <getAdc_Value+0xa8>)
 8000600:	f001 fdfd 	bl	80021fe <HAL_UART_Transmit>
	  HAL_ADC_Stop(&hadc1);
 8000604:	4804      	ldr	r0, [pc, #16]	; (8000618 <getAdc_Value+0x98>)
 8000606:	f000 fc0f 	bl	8000e28 <HAL_ADC_Stop>
	  HAL_Delay(500);
 800060a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800060e:	f000 fadf 	bl	8000bd0 <HAL_Delay>
}
 8000612:	bf00      	nop
 8000614:	bdb0      	pop	{r4, r5, r7, pc}
 8000616:	bf00      	nop
 8000618:	2000009c 	.word	0x2000009c
 800061c:	2000008c 	.word	0x2000008c
 8000620:	20000124 	.word	0x20000124
 8000624:	08003344 	.word	0x08003344
 8000628:	200000e4 	.word	0x200000e4
 800062c:	08003358 	.word	0x08003358
 8000630:	0800335c 	.word	0x0800335c

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fa58 	bl	8000aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f80a 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f000 f8e2 	bl	8000808 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000644:	f000 f864 	bl	8000710 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000648:	f000 f8b4 	bl	80007b4 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  getAdc_Value();
 800064c:	f7ff ff98 	bl	8000580 <getAdc_Value>
 8000650:	e7fc      	b.n	800064c <main+0x18>
	...

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	; 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fa54 	bl	8002b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SystemClock_Config+0xb4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xb4>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	; 0x40
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xb4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b1c      	ldr	r3, [pc, #112]	; (800070c <SystemClock_Config+0xb8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a1b      	ldr	r2, [pc, #108]	; (800070c <SystemClock_Config+0xb8>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b19      	ldr	r3, [pc, #100]	; (800070c <SystemClock_Config+0xb8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 f911 	bl	80018ec <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006d0:	f000 f8b4 	bl	800083c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fb6c 	bl	8001dcc <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006fa:	f000 f89f 	bl	800083c <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <MX_ADC1_Init+0x9c>)
 8000726:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_ADC1_Init+0x98>)
 800072a:	2200      	movs	r2, #0
 800072c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800072e:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000730:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000734:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800073c:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <MX_ADC1_Init+0x98>)
 800073e:	2201      	movs	r2, #1
 8000740:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074a:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <MX_ADC1_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000752:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <MX_ADC1_Init+0xa0>)
 8000754:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000756:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_ADC1_Init+0x98>)
 800075e:	2201      	movs	r2, #1
 8000760:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_ADC1_Init+0x98>)
 800076c:	2201      	movs	r2, #1
 800076e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000772:	f000 fa4f 	bl	8000c14 <HAL_ADC_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800077c:	f000 f85e 	bl	800083c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000780:	2301      	movs	r3, #1
 8000782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800078c:	463b      	mov	r3, r7
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_ADC1_Init+0x98>)
 8000792:	f000 fc0d 	bl	8000fb0 <HAL_ADC_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800079c:	f000 f84e 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000009c 	.word	0x2000009c
 80007ac:	40012000 	.word	0x40012000
 80007b0:	0f000001 	.word	0x0f000001

080007b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <MX_USART2_UART_Init+0x50>)
 80007bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007da:	220c      	movs	r2, #12
 80007dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_USART2_UART_Init+0x4c>)
 80007ec:	f001 fcba 	bl	8002164 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007f6:	f000 f821 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	200000e4 	.word	0x200000e4
 8000804:	40004400 	.word	0x40004400

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_GPIO_Init+0x30>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <MX_GPIO_Init+0x30>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_GPIO_Init+0x30>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000842:	e7fe      	b.n	8000842 <Error_Handler+0x6>

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <HAL_MspInit+0x4c>)
 8000854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000858:	6453      	str	r3, [r2, #68]	; 0x44
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <HAL_MspInit+0x4c>)
 800085c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_MspInit+0x4c>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6413      	str	r3, [r2, #64]	; 0x40
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x4c>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a17      	ldr	r2, [pc, #92]	; (8000910 <HAL_ADC_MspInit+0x7c>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d127      	bne.n	8000906 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <HAL_ADC_MspInit+0x80>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a15      	ldr	r2, [pc, #84]	; (8000914 <HAL_ADC_MspInit+0x80>)
 80008c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <HAL_ADC_MspInit+0x80>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <HAL_ADC_MspInit+0x80>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <HAL_ADC_MspInit+0x80>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <HAL_ADC_MspInit+0x80>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008ee:	2302      	movs	r3, #2
 80008f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f2:	2303      	movs	r3, #3
 80008f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <HAL_ADC_MspInit+0x84>)
 8000902:	f000 fe59 	bl	80015b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000906:	bf00      	nop
 8000908:	3728      	adds	r7, #40	; 0x28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40012000 	.word	0x40012000
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000

0800091c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a19      	ldr	r2, [pc, #100]	; (80009a0 <HAL_UART_MspInit+0x84>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d12b      	bne.n	8000996 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a17      	ldr	r2, [pc, #92]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <HAL_UART_MspInit+0x88>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	; 0x30
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_UART_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000976:	230c      	movs	r3, #12
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000986:	2307      	movs	r3, #7
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <HAL_UART_MspInit+0x8c>)
 8000992:	f000 fe11 	bl	80015b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	; 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40004400 	.word	0x40004400
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40020000 	.word	0x40020000

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <NMI_Handler+0x4>

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <MemManage_Handler+0x4>

080009be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <UsageFault_Handler+0x4>

080009ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f8:	f000 f8ca 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a08:	4a14      	ldr	r2, [pc, #80]	; (8000a5c <_sbrk+0x5c>)
 8000a0a:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <_sbrk+0x60>)
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <_sbrk+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d102      	bne.n	8000a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <_sbrk+0x64>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <_sbrk+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d207      	bcs.n	8000a40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a30:	f002 f844 	bl	8002abc <__errno>
 8000a34:	4602      	mov	r2, r0
 8000a36:	230c      	movs	r3, #12
 8000a38:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	e009      	b.n	8000a54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <_sbrk+0x64>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <_sbrk+0x64>)
 8000a50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a52:	68fb      	ldr	r3, [r7, #12]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	20020000 	.word	0x20020000
 8000a60:	00000400 	.word	0x00000400
 8000a64:	20000090 	.word	0x20000090
 8000a68:	20000160 	.word	0x20000160

08000a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <SystemInit+0x28>)
 8000a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a76:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <SystemInit+0x28>)
 8000a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <SystemInit+0x28>)
 8000a82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a86:	609a      	str	r2, [r3, #8]
#endif
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a9e:	e003      	b.n	8000aa8 <LoopCopyDataInit>

08000aa0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000aa2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000aa4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aa6:	3104      	adds	r1, #4

08000aa8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000aac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000aae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ab0:	d3f6      	bcc.n	8000aa0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ab4:	e002      	b.n	8000abc <LoopFillZerobss>

08000ab6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ab6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ab8:	f842 3b04 	str.w	r3, [r2], #4

08000abc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000abe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ac0:	d3f9      	bcc.n	8000ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ac2:	f7ff ffd3 	bl	8000a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f001 ffff 	bl	8002ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aca:	f7ff fdb3 	bl	8000634 <main>
  bx  lr    
 8000ace:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ad0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ad4:	080033bc 	.word	0x080033bc
  ldr  r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000adc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000ae0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000ae4:	20000160 	.word	0x20000160

08000ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC_IRQHandler>
	...

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <HAL_Init+0x40>)
 8000af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_Init+0x40>)
 8000b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <HAL_Init+0x40>)
 8000b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b14:	2003      	movs	r0, #3
 8000b16:	f000 fd1b 	bl	8001550 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 f808 	bl	8000b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b20:	f7ff fe90 	bl	8000844 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023c00 	.word	0x40023c00

08000b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x54>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_InitTick+0x58>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fd25 	bl	800159e <HAL_SYSTICK_Config>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00e      	b.n	8000b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	d80a      	bhi.n	8000b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f000 fcfb 	bl	8001566 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b70:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <HAL_InitTick+0x5c>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000004 	.word	0x20000004

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000158 	.word	0x20000158

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000158 	.word	0x20000158

08000bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff ffee 	bl	8000bb8 <HAL_GetTick>
 8000bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be8:	d005      	beq.n	8000bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_Delay+0x40>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bf6:	bf00      	nop
 8000bf8:	f7ff ffde 	bl	8000bb8 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d8f7      	bhi.n	8000bf8 <HAL_Delay+0x28>
  {
  }
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	20000008 	.word	0x20000008

08000c14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e033      	b.n	8000c92 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d109      	bne.n	8000c46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fe2e 	bl	8000894 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 0310 	and.w	r3, r3, #16
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d118      	bne.n	8000c84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c5a:	f023 0302 	bic.w	r3, r3, #2
 8000c5e:	f043 0202 	orr.w	r2, r3, #2
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f000 fac4 	bl	80011f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f023 0303 	bic.w	r3, r3, #3
 8000c7a:	f043 0201 	orr.w	r2, r3, #1
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	641a      	str	r2, [r3, #64]	; 0x40
 8000c82:	e001      	b.n	8000c88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d101      	bne.n	8000cb6 <HAL_ADC_Start+0x1a>
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	e0a5      	b.n	8000e02 <HAL_ADC_Start+0x166>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	f003 0301 	and.w	r3, r3, #1
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d018      	beq.n	8000cfe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f042 0201 	orr.w	r2, r2, #1
 8000cda:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000cdc:	4b4c      	ldr	r3, [pc, #304]	; (8000e10 <HAL_ADC_Start+0x174>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a4c      	ldr	r2, [pc, #304]	; (8000e14 <HAL_ADC_Start+0x178>)
 8000ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce6:	0c9a      	lsrs	r2, r3, #18
 8000ce8:	4613      	mov	r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	4413      	add	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000cf0:	e002      	b.n	8000cf8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f9      	bne.n	8000cf2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	689b      	ldr	r3, [r3, #8]
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d179      	bne.n	8000e00 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d14:	f023 0301 	bic.w	r3, r3, #1
 8000d18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d007      	beq.n	8000d3e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d36:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d4a:	d106      	bne.n	8000d5a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d50:	f023 0206 	bic.w	r2, r3, #6
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	645a      	str	r2, [r3, #68]	; 0x44
 8000d58:	e002      	b.n	8000d60 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d68:	4b2b      	ldr	r3, [pc, #172]	; (8000e18 <HAL_ADC_Start+0x17c>)
 8000d6a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000d74:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 031f 	and.w	r3, r3, #31
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d12a      	bne.n	8000dd8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a25      	ldr	r2, [pc, #148]	; (8000e1c <HAL_ADC_Start+0x180>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d015      	beq.n	8000db8 <HAL_ADC_Start+0x11c>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a23      	ldr	r2, [pc, #140]	; (8000e20 <HAL_ADC_Start+0x184>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d105      	bne.n	8000da2 <HAL_ADC_Start+0x106>
 8000d96:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <HAL_ADC_Start+0x17c>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 031f 	and.w	r3, r3, #31
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d00a      	beq.n	8000db8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <HAL_ADC_Start+0x188>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d129      	bne.n	8000e00 <HAL_ADC_Start+0x164>
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <HAL_ADC_Start+0x17c>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 031f 	and.w	r3, r3, #31
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	d823      	bhi.n	8000e00 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d11c      	bne.n	8000e00 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	689a      	ldr	r2, [r3, #8]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	e013      	b.n	8000e00 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0f      	ldr	r2, [pc, #60]	; (8000e1c <HAL_ADC_Start+0x180>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d10e      	bne.n	8000e00 <HAL_ADC_Start+0x164>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d107      	bne.n	8000e00 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000dfe:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000000 	.word	0x20000000
 8000e14:	431bde83 	.word	0x431bde83
 8000e18:	40012300 	.word	0x40012300
 8000e1c:	40012000 	.word	0x40012000
 8000e20:	40012100 	.word	0x40012100
 8000e24:	40012200 	.word	0x40012200

08000e28 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d101      	bne.n	8000e3e <HAL_ADC_Stop+0x16>
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e021      	b.n	8000e82 <HAL_ADC_Stop+0x5a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 0201 	bic.w	r2, r2, #1
 8000e54:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d109      	bne.n	8000e78 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e6c:	f023 0301 	bic.w	r3, r3, #1
 8000e70:	f043 0201 	orr.w	r2, r3, #1
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr

08000e8e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
 8000e96:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eaa:	d113      	bne.n	8000ed4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000eba:	d10b      	bne.n	8000ed4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec0:	f043 0220 	orr.w	r2, r3, #32
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e05c      	b.n	8000f8e <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000ed4:	f7ff fe70 	bl	8000bb8 <HAL_GetTick>
 8000ed8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000eda:	e01a      	b.n	8000f12 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee2:	d016      	beq.n	8000f12 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d007      	beq.n	8000efa <HAL_ADC_PollForConversion+0x6c>
 8000eea:	f7ff fe65 	bl	8000bb8 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	683a      	ldr	r2, [r7, #0]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d20b      	bcs.n	8000f12 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f043 0204 	orr.w	r2, r3, #4
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e03d      	b.n	8000f8e <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d1dd      	bne.n	8000edc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f06f 0212 	mvn.w	r2, #18
 8000f28:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d123      	bne.n	8000f8c <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d11f      	bne.n	8000f8c <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d006      	beq.n	8000f68 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d111      	bne.n	8000f8c <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d105      	bne.n	8000f8c <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f043 0201 	orr.w	r2, r3, #1
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d101      	bne.n	8000fcc <HAL_ADC_ConfigChannel+0x1c>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e105      	b.n	80011d8 <HAL_ADC_ConfigChannel+0x228>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b09      	cmp	r3, #9
 8000fda:	d925      	bls.n	8001028 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68d9      	ldr	r1, [r3, #12]
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	3b1e      	subs	r3, #30
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43da      	mvns	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	400a      	ands	r2, r1
 8001000:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68d9      	ldr	r1, [r3, #12]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	b29b      	uxth	r3, r3
 8001012:	4618      	mov	r0, r3
 8001014:	4603      	mov	r3, r0
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4403      	add	r3, r0
 800101a:	3b1e      	subs	r3, #30
 800101c:	409a      	lsls	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	430a      	orrs	r2, r1
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	e022      	b.n	800106e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6919      	ldr	r1, [r3, #16]
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	b29b      	uxth	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	4613      	mov	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	2207      	movs	r2, #7
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	43da      	mvns	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	400a      	ands	r2, r1
 800104a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6919      	ldr	r1, [r3, #16]
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	b29b      	uxth	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	4603      	mov	r3, r0
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	4403      	add	r3, r0
 8001064:	409a      	lsls	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	430a      	orrs	r2, r1
 800106c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b06      	cmp	r3, #6
 8001074:	d824      	bhi.n	80010c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	3b05      	subs	r3, #5
 8001088:	221f      	movs	r2, #31
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43da      	mvns	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	400a      	ands	r2, r1
 8001096:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4618      	mov	r0, r3
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	3b05      	subs	r3, #5
 80010b2:	fa00 f203 	lsl.w	r2, r0, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	430a      	orrs	r2, r1
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34
 80010be:	e04c      	b.n	800115a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b0c      	cmp	r3, #12
 80010c6:	d824      	bhi.n	8001112 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	3b23      	subs	r3, #35	; 0x23
 80010da:	221f      	movs	r2, #31
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43da      	mvns	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	400a      	ands	r2, r1
 80010e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	3b23      	subs	r3, #35	; 0x23
 8001104:	fa00 f203 	lsl.w	r2, r0, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	430a      	orrs	r2, r1
 800110e:	631a      	str	r2, [r3, #48]	; 0x30
 8001110:	e023      	b.n	800115a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	3b41      	subs	r3, #65	; 0x41
 8001124:	221f      	movs	r2, #31
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	400a      	ands	r2, r1
 8001132:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	b29b      	uxth	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	3b41      	subs	r3, #65	; 0x41
 800114e:	fa00 f203 	lsl.w	r2, r0, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <HAL_ADC_ConfigChannel+0x234>)
 800115c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a21      	ldr	r2, [pc, #132]	; (80011e8 <HAL_ADC_ConfigChannel+0x238>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d109      	bne.n	800117c <HAL_ADC_ConfigChannel+0x1cc>
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b12      	cmp	r3, #18
 800116e:	d105      	bne.n	800117c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <HAL_ADC_ConfigChannel+0x238>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d123      	bne.n	80011ce <HAL_ADC_ConfigChannel+0x21e>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b10      	cmp	r3, #16
 800118c:	d003      	beq.n	8001196 <HAL_ADC_ConfigChannel+0x1e6>
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b11      	cmp	r3, #17
 8001194:	d11b      	bne.n	80011ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2b10      	cmp	r3, #16
 80011a8:	d111      	bne.n	80011ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_ADC_ConfigChannel+0x23c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a10      	ldr	r2, [pc, #64]	; (80011f0 <HAL_ADC_ConfigChannel+0x240>)
 80011b0:	fba2 2303 	umull	r2, r3, r2, r3
 80011b4:	0c9a      	lsrs	r2, r3, #18
 80011b6:	4613      	mov	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011c0:	e002      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f9      	bne.n	80011c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	40012300 	.word	0x40012300
 80011e8:	40012000 	.word	0x40012000
 80011ec:	20000000 	.word	0x20000000
 80011f0:	431bde83 	.word	0x431bde83

080011f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011fc:	4b79      	ldr	r3, [pc, #484]	; (80013e4 <ADC_Init+0x1f0>)
 80011fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	431a      	orrs	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001228:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6859      	ldr	r1, [r3, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	021a      	lsls	r2, r3, #8
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	430a      	orrs	r2, r1
 800123c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800124c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6859      	ldr	r1, [r3, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800126e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6899      	ldr	r1, [r3, #8]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001286:	4a58      	ldr	r2, [pc, #352]	; (80013e8 <ADC_Init+0x1f4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d022      	beq.n	80012d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689a      	ldr	r2, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800129a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6899      	ldr	r1, [r3, #8]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6899      	ldr	r1, [r3, #8]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	e00f      	b.n	80012f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0202 	bic.w	r2, r2, #2
 8001300:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6899      	ldr	r1, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	7e1b      	ldrb	r3, [r3, #24]
 800130c:	005a      	lsls	r2, r3, #1
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3020 	ldrb.w	r3, [r3, #32]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d01b      	beq.n	8001358 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800132e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800133e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6859      	ldr	r1, [r3, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	3b01      	subs	r3, #1
 800134c:	035a      	lsls	r2, r3, #13
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	430a      	orrs	r2, r1
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	e007      	b.n	8001368 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001366:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	3b01      	subs	r3, #1
 8001384:	051a      	lsls	r2, r3, #20
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800139c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6899      	ldr	r1, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013aa:	025a      	lsls	r2, r3, #9
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6899      	ldr	r1, [r3, #8]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	029a      	lsls	r2, r3, #10
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	609a      	str	r2, [r3, #8]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	40012300 	.word	0x40012300
 80013e8:	0f000001 	.word	0x0f000001

080013ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001408:	4013      	ands	r3, r2
 800140a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141e:	4a04      	ldr	r2, [pc, #16]	; (8001430 <__NVIC_SetPriorityGrouping+0x44>)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	60d3      	str	r3, [r2, #12]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001438:	4b04      	ldr	r3, [pc, #16]	; (800144c <__NVIC_GetPriorityGrouping+0x18>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	0a1b      	lsrs	r3, r3, #8
 800143e:	f003 0307 	and.w	r3, r3, #7
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	6039      	str	r1, [r7, #0]
 800145a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	2b00      	cmp	r3, #0
 8001462:	db0a      	blt.n	800147a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	b2da      	uxtb	r2, r3
 8001468:	490c      	ldr	r1, [pc, #48]	; (800149c <__NVIC_SetPriority+0x4c>)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	0112      	lsls	r2, r2, #4
 8001470:	b2d2      	uxtb	r2, r2
 8001472:	440b      	add	r3, r1
 8001474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001478:	e00a      	b.n	8001490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4908      	ldr	r1, [pc, #32]	; (80014a0 <__NVIC_SetPriority+0x50>)
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	f003 030f 	and.w	r3, r3, #15
 8001486:	3b04      	subs	r3, #4
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	440b      	add	r3, r1
 800148e:	761a      	strb	r2, [r3, #24]
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	; 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	f1c3 0307 	rsb	r3, r3, #7
 80014be:	2b04      	cmp	r3, #4
 80014c0:	bf28      	it	cs
 80014c2:	2304      	movcs	r3, #4
 80014c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3304      	adds	r3, #4
 80014ca:	2b06      	cmp	r3, #6
 80014cc:	d902      	bls.n	80014d4 <NVIC_EncodePriority+0x30>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3b03      	subs	r3, #3
 80014d2:	e000      	b.n	80014d6 <NVIC_EncodePriority+0x32>
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	f04f 32ff 	mov.w	r2, #4294967295
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43da      	mvns	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ec:	f04f 31ff 	mov.w	r1, #4294967295
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	4313      	orrs	r3, r2
         );
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3724      	adds	r7, #36	; 0x24
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3b01      	subs	r3, #1
 8001518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800151c:	d301      	bcc.n	8001522 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151e:	2301      	movs	r3, #1
 8001520:	e00f      	b.n	8001542 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <SysTick_Config+0x40>)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3b01      	subs	r3, #1
 8001528:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152a:	210f      	movs	r1, #15
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f7ff ff8e 	bl	8001450 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <SysTick_Config+0x40>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <SysTick_Config+0x40>)
 800153c:	2207      	movs	r2, #7
 800153e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	e000e010 	.word	0xe000e010

08001550 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ff47 	bl	80013ec <__NVIC_SetPriorityGrouping>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	4603      	mov	r3, r0
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
 8001572:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001578:	f7ff ff5c 	bl	8001434 <__NVIC_GetPriorityGrouping>
 800157c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff ff8e 	bl	80014a4 <NVIC_EncodePriority>
 8001588:	4602      	mov	r2, r0
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff5d 	bl	8001450 <__NVIC_SetPriority>
}
 8001596:	bf00      	nop
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ffb0 	bl	800150c <SysTick_Config>
 80015ac:	4603      	mov	r3, r0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
 80015d2:	e16b      	b.n	80018ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d4:	2201      	movs	r2, #1
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	f040 815a 	bne.w	80018a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d00b      	beq.n	8001612 <HAL_GPIO_Init+0x5a>
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001606:	2b11      	cmp	r3, #17
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b12      	cmp	r3, #18
 8001610:	d130      	bne.n	8001674 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001648:	2201      	movs	r2, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 0201 	and.w	r2, r3, #1
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	2203      	movs	r2, #3
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0xfc>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b12      	cmp	r3, #18
 80016b2:	d123      	bne.n	80016fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	08da      	lsrs	r2, r3, #3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3208      	adds	r2, #8
 80016bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	691a      	ldr	r2, [r3, #16]
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	08da      	lsrs	r2, r3, #3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3208      	adds	r2, #8
 80016f6:	69b9      	ldr	r1, [r7, #24]
 80016f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0203 	and.w	r2, r3, #3
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80b4 	beq.w	80018a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b5f      	ldr	r3, [pc, #380]	; (80018c0 <HAL_GPIO_Init+0x308>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	4a5e      	ldr	r2, [pc, #376]	; (80018c0 <HAL_GPIO_Init+0x308>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	4b5c      	ldr	r3, [pc, #368]	; (80018c0 <HAL_GPIO_Init+0x308>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800175a:	4a5a      	ldr	r2, [pc, #360]	; (80018c4 <HAL_GPIO_Init+0x30c>)
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	089b      	lsrs	r3, r3, #2
 8001760:	3302      	adds	r3, #2
 8001762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	220f      	movs	r2, #15
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a51      	ldr	r2, [pc, #324]	; (80018c8 <HAL_GPIO_Init+0x310>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d02b      	beq.n	80017de <HAL_GPIO_Init+0x226>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a50      	ldr	r2, [pc, #320]	; (80018cc <HAL_GPIO_Init+0x314>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d025      	beq.n	80017da <HAL_GPIO_Init+0x222>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4f      	ldr	r2, [pc, #316]	; (80018d0 <HAL_GPIO_Init+0x318>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d01f      	beq.n	80017d6 <HAL_GPIO_Init+0x21e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4e      	ldr	r2, [pc, #312]	; (80018d4 <HAL_GPIO_Init+0x31c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d019      	beq.n	80017d2 <HAL_GPIO_Init+0x21a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4d      	ldr	r2, [pc, #308]	; (80018d8 <HAL_GPIO_Init+0x320>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d013      	beq.n	80017ce <HAL_GPIO_Init+0x216>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4c      	ldr	r2, [pc, #304]	; (80018dc <HAL_GPIO_Init+0x324>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d00d      	beq.n	80017ca <HAL_GPIO_Init+0x212>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4b      	ldr	r2, [pc, #300]	; (80018e0 <HAL_GPIO_Init+0x328>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d007      	beq.n	80017c6 <HAL_GPIO_Init+0x20e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4a      	ldr	r2, [pc, #296]	; (80018e4 <HAL_GPIO_Init+0x32c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_GPIO_Init+0x20a>
 80017be:	2307      	movs	r3, #7
 80017c0:	e00e      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017c2:	2308      	movs	r3, #8
 80017c4:	e00c      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017c6:	2306      	movs	r3, #6
 80017c8:	e00a      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017ca:	2305      	movs	r3, #5
 80017cc:	e008      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017ce:	2304      	movs	r3, #4
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017d2:	2303      	movs	r3, #3
 80017d4:	e004      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e002      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_GPIO_Init+0x228>
 80017de:	2300      	movs	r3, #0
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	f002 0203 	and.w	r2, r2, #3
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	4093      	lsls	r3, r2
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f0:	4934      	ldr	r1, [pc, #208]	; (80018c4 <HAL_GPIO_Init+0x30c>)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017fe:	4b3a      	ldr	r3, [pc, #232]	; (80018e8 <HAL_GPIO_Init+0x330>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001822:	4a31      	ldr	r2, [pc, #196]	; (80018e8 <HAL_GPIO_Init+0x330>)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001828:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <HAL_GPIO_Init+0x330>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800184c:	4a26      	ldr	r2, [pc, #152]	; (80018e8 <HAL_GPIO_Init+0x330>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001852:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <HAL_GPIO_Init+0x330>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	43db      	mvns	r3, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4013      	ands	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001876:	4a1c      	ldr	r2, [pc, #112]	; (80018e8 <HAL_GPIO_Init+0x330>)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_GPIO_Init+0x330>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018a0:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <HAL_GPIO_Init+0x330>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3301      	adds	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	2b0f      	cmp	r3, #15
 80018b0:	f67f ae90 	bls.w	80015d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018b4:	bf00      	nop
 80018b6:	3724      	adds	r7, #36	; 0x24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40013800 	.word	0x40013800
 80018c8:	40020000 	.word	0x40020000
 80018cc:	40020400 	.word	0x40020400
 80018d0:	40020800 	.word	0x40020800
 80018d4:	40020c00 	.word	0x40020c00
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40021400 	.word	0x40021400
 80018e0:	40021800 	.word	0x40021800
 80018e4:	40021c00 	.word	0x40021c00
 80018e8:	40013c00 	.word	0x40013c00

080018ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e25b      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d075      	beq.n	80019f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800190a:	4ba3      	ldr	r3, [pc, #652]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b04      	cmp	r3, #4
 8001914:	d00c      	beq.n	8001930 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001916:	4ba0      	ldr	r3, [pc, #640]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800191e:	2b08      	cmp	r3, #8
 8001920:	d112      	bne.n	8001948 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001922:	4b9d      	ldr	r3, [pc, #628]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800192e:	d10b      	bne.n	8001948 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	4b99      	ldr	r3, [pc, #612]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d05b      	beq.n	80019f4 <HAL_RCC_OscConfig+0x108>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d157      	bne.n	80019f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e236      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001950:	d106      	bne.n	8001960 <HAL_RCC_OscConfig+0x74>
 8001952:	4b91      	ldr	r3, [pc, #580]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a90      	ldr	r2, [pc, #576]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	e01d      	b.n	800199c <HAL_RCC_OscConfig+0xb0>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0x98>
 800196a:	4b8b      	ldr	r3, [pc, #556]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a8a      	ldr	r2, [pc, #552]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	4b88      	ldr	r3, [pc, #544]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a87      	ldr	r2, [pc, #540]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 800197c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e00b      	b.n	800199c <HAL_RCC_OscConfig+0xb0>
 8001984:	4b84      	ldr	r3, [pc, #528]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a83      	ldr	r2, [pc, #524]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 800198a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4b81      	ldr	r3, [pc, #516]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a80      	ldr	r2, [pc, #512]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d013      	beq.n	80019cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff f908 	bl	8000bb8 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ac:	f7ff f904 	bl	8000bb8 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	; 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e1fb      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	4b76      	ldr	r3, [pc, #472]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0xc0>
 80019ca:	e014      	b.n	80019f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff f8f4 	bl	8000bb8 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d4:	f7ff f8f0 	bl	8000bb8 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b64      	cmp	r3, #100	; 0x64
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e1e7      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e6:	4b6c      	ldr	r3, [pc, #432]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0xe8>
 80019f2:	e000      	b.n	80019f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d063      	beq.n	8001aca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a02:	4b65      	ldr	r3, [pc, #404]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 030c 	and.w	r3, r3, #12
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00b      	beq.n	8001a26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a0e:	4b62      	ldr	r3, [pc, #392]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d11c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a1a:	4b5f      	ldr	r3, [pc, #380]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d116      	bne.n	8001a54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a26:	4b5c      	ldr	r3, [pc, #368]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d005      	beq.n	8001a3e <HAL_RCC_OscConfig+0x152>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d001      	beq.n	8001a3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e1bb      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3e:	4b56      	ldr	r3, [pc, #344]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4952      	ldr	r1, [pc, #328]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a52:	e03a      	b.n	8001aca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d020      	beq.n	8001a9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a5c:	4b4f      	ldr	r3, [pc, #316]	; (8001b9c <HAL_RCC_OscConfig+0x2b0>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a62:	f7ff f8a9 	bl	8000bb8 <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a6a:	f7ff f8a5 	bl	8000bb8 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e19c      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7c:	4b46      	ldr	r3, [pc, #280]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0f0      	beq.n	8001a6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a88:	4b43      	ldr	r3, [pc, #268]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	4940      	ldr	r1, [pc, #256]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	600b      	str	r3, [r1, #0]
 8001a9c:	e015      	b.n	8001aca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a9e:	4b3f      	ldr	r3, [pc, #252]	; (8001b9c <HAL_RCC_OscConfig+0x2b0>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f888 	bl	8000bb8 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aac:	f7ff f884 	bl	8000bb8 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e17b      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001abe:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d030      	beq.n	8001b38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d016      	beq.n	8001b0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ade:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <HAL_RCC_OscConfig+0x2b4>)
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7ff f868 	bl	8000bb8 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aec:	f7ff f864 	bl	8000bb8 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e15b      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x200>
 8001b0a:	e015      	b.n	8001b38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_RCC_OscConfig+0x2b4>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b12:	f7ff f851 	bl	8000bb8 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b1a:	f7ff f84d 	bl	8000bb8 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e144      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f0      	bne.n	8001b1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80a0 	beq.w	8001c86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10f      	bne.n	8001b76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b72:	2301      	movs	r3, #1
 8001b74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_OscConfig+0x2b8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d121      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <HAL_RCC_OscConfig+0x2b8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <HAL_RCC_OscConfig+0x2b8>)
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff f813 	bl	8000bb8 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b94:	e011      	b.n	8001bba <HAL_RCC_OscConfig+0x2ce>
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	42470000 	.word	0x42470000
 8001ba0:	42470e80 	.word	0x42470e80
 8001ba4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba8:	f7ff f806 	bl	8000bb8 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e0fd      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bba:	4b81      	ldr	r3, [pc, #516]	; (8001dc0 <HAL_RCC_OscConfig+0x4d4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d106      	bne.n	8001bdc <HAL_RCC_OscConfig+0x2f0>
 8001bce:	4b7d      	ldr	r3, [pc, #500]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd2:	4a7c      	ldr	r2, [pc, #496]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bda:	e01c      	b.n	8001c16 <HAL_RCC_OscConfig+0x32a>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b05      	cmp	r3, #5
 8001be2:	d10c      	bne.n	8001bfe <HAL_RCC_OscConfig+0x312>
 8001be4:	4b77      	ldr	r3, [pc, #476]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be8:	4a76      	ldr	r2, [pc, #472]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	6713      	str	r3, [r2, #112]	; 0x70
 8001bf0:	4b74      	ldr	r3, [pc, #464]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf4:	4a73      	ldr	r2, [pc, #460]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfc:	e00b      	b.n	8001c16 <HAL_RCC_OscConfig+0x32a>
 8001bfe:	4b71      	ldr	r3, [pc, #452]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c02:	4a70      	ldr	r2, [pc, #448]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	6713      	str	r3, [r2, #112]	; 0x70
 8001c0a:	4b6e      	ldr	r3, [pc, #440]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0e:	4a6d      	ldr	r2, [pc, #436]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001c10:	f023 0304 	bic.w	r3, r3, #4
 8001c14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d015      	beq.n	8001c4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7fe ffcb 	bl	8000bb8 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7fe ffc7 	bl	8000bb8 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e0bc      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3c:	4b61      	ldr	r3, [pc, #388]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0ee      	beq.n	8001c26 <HAL_RCC_OscConfig+0x33a>
 8001c48:	e014      	b.n	8001c74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4a:	f7fe ffb5 	bl	8000bb8 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c50:	e00a      	b.n	8001c68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c52:	f7fe ffb1 	bl	8000bb8 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e0a6      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c68:	4b56      	ldr	r3, [pc, #344]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1ee      	bne.n	8001c52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d105      	bne.n	8001c86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c7a:	4b52      	ldr	r3, [pc, #328]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a51      	ldr	r2, [pc, #324]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 8092 	beq.w	8001db4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c90:	4b4c      	ldr	r3, [pc, #304]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d05c      	beq.n	8001d56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d141      	bne.n	8001d28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca4:	4b48      	ldr	r3, [pc, #288]	; (8001dc8 <HAL_RCC_OscConfig+0x4dc>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7fe ff85 	bl	8000bb8 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb2:	f7fe ff81 	bl	8000bb8 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e078      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc4:	4b3f      	ldr	r3, [pc, #252]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f0      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69da      	ldr	r2, [r3, #28]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	019b      	lsls	r3, r3, #6
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	085b      	lsrs	r3, r3, #1
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	041b      	lsls	r3, r3, #16
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	061b      	lsls	r3, r3, #24
 8001cf4:	4933      	ldr	r1, [pc, #204]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cfa:	4b33      	ldr	r3, [pc, #204]	; (8001dc8 <HAL_RCC_OscConfig+0x4dc>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7fe ff5a 	bl	8000bb8 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d08:	f7fe ff56 	bl	8000bb8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e04d      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x41c>
 8001d26:	e045      	b.n	8001db4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <HAL_RCC_OscConfig+0x4dc>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7fe ff43 	bl	8000bb8 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d36:	f7fe ff3f 	bl	8000bb8 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e036      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d48:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f0      	bne.n	8001d36 <HAL_RCC_OscConfig+0x44a>
 8001d54:	e02e      	b.n	8001db4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e029      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_RCC_OscConfig+0x4d8>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d11c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d115      	bne.n	8001db0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d10d      	bne.n	8001db0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d106      	bne.n	8001db0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e000      	b.n	8001db6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3718      	adds	r7, #24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40007000 	.word	0x40007000
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	42470060 	.word	0x42470060

08001dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d101      	bne.n	8001de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0cc      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de0:	4b68      	ldr	r3, [pc, #416]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d90c      	bls.n	8001e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dee:	4b65      	ldr	r3, [pc, #404]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b63      	ldr	r3, [pc, #396]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0b8      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d020      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e20:	4b59      	ldr	r3, [pc, #356]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	4a58      	ldr	r2, [pc, #352]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e38:	4b53      	ldr	r3, [pc, #332]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	4a52      	ldr	r2, [pc, #328]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e44:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	494d      	ldr	r1, [pc, #308]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d044      	beq.n	8001eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	4b47      	ldr	r3, [pc, #284]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d119      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e07f      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d003      	beq.n	8001e8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d109      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e06f      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e067      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eaa:	4b37      	ldr	r3, [pc, #220]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f023 0203 	bic.w	r2, r3, #3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	4934      	ldr	r1, [pc, #208]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ebc:	f7fe fe7c 	bl	8000bb8 <HAL_GetTick>
 8001ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec4:	f7fe fe78 	bl	8000bb8 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e04f      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eda:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 020c 	and.w	r2, r3, #12
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d1eb      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eec:	4b25      	ldr	r3, [pc, #148]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d20c      	bcs.n	8001f14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efa:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	b2d2      	uxtb	r2, r2
 8001f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <HAL_RCC_ClockConfig+0x1b8>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e032      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4916      	ldr	r1, [pc, #88]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	490e      	ldr	r1, [pc, #56]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f52:	f000 f821 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 8001f56:	4601      	mov	r1, r0
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <HAL_RCC_ClockConfig+0x1c0>)
 8001f64:	5cd3      	ldrb	r3, [r2, r3]
 8001f66:	fa21 f303 	lsr.w	r3, r1, r3
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_RCC_ClockConfig+0x1c8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fddc 	bl	8000b30 <HAL_InitTick>

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40023c00 	.word	0x40023c00
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	08003360 	.word	0x08003360
 8001f90:	20000000 	.word	0x20000000
 8001f94:	20000004 	.word	0x20000004

08001f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fae:	4b50      	ldr	r3, [pc, #320]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d007      	beq.n	8001fca <HAL_RCC_GetSysClockFreq+0x32>
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d008      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x38>
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 808d 	bne.w	80020de <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fc4:	4b4b      	ldr	r3, [pc, #300]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001fc6:	60bb      	str	r3, [r7, #8]
       break;
 8001fc8:	e08c      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fca:	4b4b      	ldr	r3, [pc, #300]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fcc:	60bb      	str	r3, [r7, #8]
      break;
 8001fce:	e089      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fd0:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fd8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fda:	4b45      	ldr	r3, [pc, #276]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d023      	beq.n	800202e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe6:	4b42      	ldr	r3, [pc, #264]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	099b      	lsrs	r3, r3, #6
 8001fec:	f04f 0400 	mov.w	r4, #0
 8001ff0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	ea03 0501 	and.w	r5, r3, r1
 8001ffc:	ea04 0602 	and.w	r6, r4, r2
 8002000:	4a3d      	ldr	r2, [pc, #244]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002002:	fb02 f106 	mul.w	r1, r2, r6
 8002006:	2200      	movs	r2, #0
 8002008:	fb02 f205 	mul.w	r2, r2, r5
 800200c:	440a      	add	r2, r1
 800200e:	493a      	ldr	r1, [pc, #232]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002010:	fba5 0101 	umull	r0, r1, r5, r1
 8002014:	1853      	adds	r3, r2, r1
 8002016:	4619      	mov	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f04f 0400 	mov.w	r4, #0
 800201e:	461a      	mov	r2, r3
 8002020:	4623      	mov	r3, r4
 8002022:	f7fe f92d 	bl	8000280 <__aeabi_uldivmod>
 8002026:	4603      	mov	r3, r0
 8002028:	460c      	mov	r4, r1
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	e049      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800202e:	4b30      	ldr	r3, [pc, #192]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x158>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	099b      	lsrs	r3, r3, #6
 8002034:	f04f 0400 	mov.w	r4, #0
 8002038:	f240 11ff 	movw	r1, #511	; 0x1ff
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	ea03 0501 	and.w	r5, r3, r1
 8002044:	ea04 0602 	and.w	r6, r4, r2
 8002048:	4629      	mov	r1, r5
 800204a:	4632      	mov	r2, r6
 800204c:	f04f 0300 	mov.w	r3, #0
 8002050:	f04f 0400 	mov.w	r4, #0
 8002054:	0154      	lsls	r4, r2, #5
 8002056:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800205a:	014b      	lsls	r3, r1, #5
 800205c:	4619      	mov	r1, r3
 800205e:	4622      	mov	r2, r4
 8002060:	1b49      	subs	r1, r1, r5
 8002062:	eb62 0206 	sbc.w	r2, r2, r6
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	f04f 0400 	mov.w	r4, #0
 800206e:	0194      	lsls	r4, r2, #6
 8002070:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002074:	018b      	lsls	r3, r1, #6
 8002076:	1a5b      	subs	r3, r3, r1
 8002078:	eb64 0402 	sbc.w	r4, r4, r2
 800207c:	f04f 0100 	mov.w	r1, #0
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	00e2      	lsls	r2, r4, #3
 8002086:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800208a:	00d9      	lsls	r1, r3, #3
 800208c:	460b      	mov	r3, r1
 800208e:	4614      	mov	r4, r2
 8002090:	195b      	adds	r3, r3, r5
 8002092:	eb44 0406 	adc.w	r4, r4, r6
 8002096:	f04f 0100 	mov.w	r1, #0
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	02a2      	lsls	r2, r4, #10
 80020a0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80020a4:	0299      	lsls	r1, r3, #10
 80020a6:	460b      	mov	r3, r1
 80020a8:	4614      	mov	r4, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	4621      	mov	r1, r4
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f04f 0400 	mov.w	r4, #0
 80020b4:	461a      	mov	r2, r3
 80020b6:	4623      	mov	r3, r4
 80020b8:	f7fe f8e2 	bl	8000280 <__aeabi_uldivmod>
 80020bc:	4603      	mov	r3, r0
 80020be:	460c      	mov	r4, r1
 80020c0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x158>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	0c1b      	lsrs	r3, r3, #16
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	3301      	adds	r3, #1
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020da:	60bb      	str	r3, [r7, #8]
      break;
 80020dc:	e002      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020de:	4b05      	ldr	r3, [pc, #20]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80020e0:	60bb      	str	r3, [r7, #8]
      break;
 80020e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e4:	68bb      	ldr	r3, [r7, #8]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023800 	.word	0x40023800
 80020f4:	00f42400 	.word	0x00f42400
 80020f8:	017d7840 	.word	0x017d7840

080020fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <HAL_RCC_GetHCLKFreq+0x14>)
 8002102:	681b      	ldr	r3, [r3, #0]
}
 8002104:	4618      	mov	r0, r3
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000000 	.word	0x20000000

08002114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002118:	f7ff fff0 	bl	80020fc <HAL_RCC_GetHCLKFreq>
 800211c:	4601      	mov	r1, r0
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	0a9b      	lsrs	r3, r3, #10
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	4a03      	ldr	r2, [pc, #12]	; (8002138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800212a:	5cd3      	ldrb	r3, [r2, r3]
 800212c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40023800 	.word	0x40023800
 8002138:	08003370 	.word	0x08003370

0800213c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002140:	f7ff ffdc 	bl	80020fc <HAL_RCC_GetHCLKFreq>
 8002144:	4601      	mov	r1, r0
 8002146:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	0b5b      	lsrs	r3, r3, #13
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	4a03      	ldr	r2, [pc, #12]	; (8002160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002152:	5cd3      	ldrb	r3, [r2, r3]
 8002154:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40023800 	.word	0x40023800
 8002160:	08003370 	.word	0x08003370

08002164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e03f      	b.n	80021f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7fe fbc6 	bl	800091c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2224      	movs	r2, #36	; 0x24
 8002194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 f90b 	bl	80023c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2220      	movs	r2, #32
 80021e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2220      	movs	r2, #32
 80021f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b088      	sub	sp, #32
 8002202:	af02      	add	r7, sp, #8
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	603b      	str	r3, [r7, #0]
 800220a:	4613      	mov	r3, r2
 800220c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b20      	cmp	r3, #32
 800221c:	f040 8083 	bne.w	8002326 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_UART_Transmit+0x2e>
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e07b      	b.n	8002328 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_UART_Transmit+0x40>
 800223a:	2302      	movs	r3, #2
 800223c:	e074      	b.n	8002328 <HAL_UART_Transmit+0x12a>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2221      	movs	r2, #33	; 0x21
 8002250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002254:	f7fe fcb0 	bl	8000bb8 <HAL_GetTick>
 8002258:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	88fa      	ldrh	r2, [r7, #6]
 800225e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800226e:	e042      	b.n	80022f6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002286:	d122      	bne.n	80022ce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	2200      	movs	r2, #0
 8002290:	2180      	movs	r1, #128	; 0x80
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f84c 	bl	8002330 <UART_WaitOnFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e042      	b.n	8002328 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022b4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d103      	bne.n	80022c6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	3302      	adds	r3, #2
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	e017      	b.n	80022f6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3301      	adds	r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	e013      	b.n	80022f6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	2200      	movs	r2, #0
 80022d6:	2180      	movs	r1, #128	; 0x80
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f829 	bl	8002330 <UART_WaitOnFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e01f      	b.n	8002328 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	60ba      	str	r2, [r7, #8]
 80022ee:	781a      	ldrb	r2, [r3, #0]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1b7      	bne.n	8002270 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2200      	movs	r2, #0
 8002308:	2140      	movs	r1, #64	; 0x40
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f810 	bl	8002330 <UART_WaitOnFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e006      	b.n	8002328 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e000      	b.n	8002328 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002326:	2302      	movs	r3, #2
  }
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002340:	e02c      	b.n	800239c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d028      	beq.n	800239c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d007      	beq.n	8002360 <UART_WaitOnFlagUntilTimeout+0x30>
 8002350:	f7fe fc32 	bl	8000bb8 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	429a      	cmp	r2, r3
 800235e:	d21d      	bcs.n	800239c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800236e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695a      	ldr	r2, [r3, #20]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e00f      	b.n	80023bc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	4013      	ands	r3, r2
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	bf0c      	ite	eq
 80023ac:	2301      	moveq	r3, #1
 80023ae:	2300      	movne	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	461a      	mov	r2, r3
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d0c3      	beq.n	8002342 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023c8:	b085      	sub	sp, #20
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	431a      	orrs	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002406:	f023 030c 	bic.w	r3, r3, #12
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	68f9      	ldr	r1, [r7, #12]
 8002410:	430b      	orrs	r3, r1
 8002412:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002432:	f040 818b 	bne.w	800274c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4ac1      	ldr	r2, [pc, #772]	; (8002740 <UART_SetConfig+0x37c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d005      	beq.n	800244c <UART_SetConfig+0x88>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4abf      	ldr	r2, [pc, #764]	; (8002744 <UART_SetConfig+0x380>)
 8002446:	4293      	cmp	r3, r2
 8002448:	f040 80bd 	bne.w	80025c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800244c:	f7ff fe76 	bl	800213c <HAL_RCC_GetPCLK2Freq>
 8002450:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	461d      	mov	r5, r3
 8002456:	f04f 0600 	mov.w	r6, #0
 800245a:	46a8      	mov	r8, r5
 800245c:	46b1      	mov	r9, r6
 800245e:	eb18 0308 	adds.w	r3, r8, r8
 8002462:	eb49 0409 	adc.w	r4, r9, r9
 8002466:	4698      	mov	r8, r3
 8002468:	46a1      	mov	r9, r4
 800246a:	eb18 0805 	adds.w	r8, r8, r5
 800246e:	eb49 0906 	adc.w	r9, r9, r6
 8002472:	f04f 0100 	mov.w	r1, #0
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800247e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002482:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002486:	4688      	mov	r8, r1
 8002488:	4691      	mov	r9, r2
 800248a:	eb18 0005 	adds.w	r0, r8, r5
 800248e:	eb49 0106 	adc.w	r1, r9, r6
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	461d      	mov	r5, r3
 8002498:	f04f 0600 	mov.w	r6, #0
 800249c:	196b      	adds	r3, r5, r5
 800249e:	eb46 0406 	adc.w	r4, r6, r6
 80024a2:	461a      	mov	r2, r3
 80024a4:	4623      	mov	r3, r4
 80024a6:	f7fd feeb 	bl	8000280 <__aeabi_uldivmod>
 80024aa:	4603      	mov	r3, r0
 80024ac:	460c      	mov	r4, r1
 80024ae:	461a      	mov	r2, r3
 80024b0:	4ba5      	ldr	r3, [pc, #660]	; (8002748 <UART_SetConfig+0x384>)
 80024b2:	fba3 2302 	umull	r2, r3, r3, r2
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	461d      	mov	r5, r3
 80024c0:	f04f 0600 	mov.w	r6, #0
 80024c4:	46a9      	mov	r9, r5
 80024c6:	46b2      	mov	sl, r6
 80024c8:	eb19 0309 	adds.w	r3, r9, r9
 80024cc:	eb4a 040a 	adc.w	r4, sl, sl
 80024d0:	4699      	mov	r9, r3
 80024d2:	46a2      	mov	sl, r4
 80024d4:	eb19 0905 	adds.w	r9, r9, r5
 80024d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80024dc:	f04f 0100 	mov.w	r1, #0
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024f0:	4689      	mov	r9, r1
 80024f2:	4692      	mov	sl, r2
 80024f4:	eb19 0005 	adds.w	r0, r9, r5
 80024f8:	eb4a 0106 	adc.w	r1, sl, r6
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	461d      	mov	r5, r3
 8002502:	f04f 0600 	mov.w	r6, #0
 8002506:	196b      	adds	r3, r5, r5
 8002508:	eb46 0406 	adc.w	r4, r6, r6
 800250c:	461a      	mov	r2, r3
 800250e:	4623      	mov	r3, r4
 8002510:	f7fd feb6 	bl	8000280 <__aeabi_uldivmod>
 8002514:	4603      	mov	r3, r0
 8002516:	460c      	mov	r4, r1
 8002518:	461a      	mov	r2, r3
 800251a:	4b8b      	ldr	r3, [pc, #556]	; (8002748 <UART_SetConfig+0x384>)
 800251c:	fba3 1302 	umull	r1, r3, r3, r2
 8002520:	095b      	lsrs	r3, r3, #5
 8002522:	2164      	movs	r1, #100	; 0x64
 8002524:	fb01 f303 	mul.w	r3, r1, r3
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	3332      	adds	r3, #50	; 0x32
 800252e:	4a86      	ldr	r2, [pc, #536]	; (8002748 <UART_SetConfig+0x384>)
 8002530:	fba2 2303 	umull	r2, r3, r2, r3
 8002534:	095b      	lsrs	r3, r3, #5
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800253c:	4498      	add	r8, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	461d      	mov	r5, r3
 8002542:	f04f 0600 	mov.w	r6, #0
 8002546:	46a9      	mov	r9, r5
 8002548:	46b2      	mov	sl, r6
 800254a:	eb19 0309 	adds.w	r3, r9, r9
 800254e:	eb4a 040a 	adc.w	r4, sl, sl
 8002552:	4699      	mov	r9, r3
 8002554:	46a2      	mov	sl, r4
 8002556:	eb19 0905 	adds.w	r9, r9, r5
 800255a:	eb4a 0a06 	adc.w	sl, sl, r6
 800255e:	f04f 0100 	mov.w	r1, #0
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800256a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800256e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002572:	4689      	mov	r9, r1
 8002574:	4692      	mov	sl, r2
 8002576:	eb19 0005 	adds.w	r0, r9, r5
 800257a:	eb4a 0106 	adc.w	r1, sl, r6
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	461d      	mov	r5, r3
 8002584:	f04f 0600 	mov.w	r6, #0
 8002588:	196b      	adds	r3, r5, r5
 800258a:	eb46 0406 	adc.w	r4, r6, r6
 800258e:	461a      	mov	r2, r3
 8002590:	4623      	mov	r3, r4
 8002592:	f7fd fe75 	bl	8000280 <__aeabi_uldivmod>
 8002596:	4603      	mov	r3, r0
 8002598:	460c      	mov	r4, r1
 800259a:	461a      	mov	r2, r3
 800259c:	4b6a      	ldr	r3, [pc, #424]	; (8002748 <UART_SetConfig+0x384>)
 800259e:	fba3 1302 	umull	r1, r3, r3, r2
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2164      	movs	r1, #100	; 0x64
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	3332      	adds	r3, #50	; 0x32
 80025b0:	4a65      	ldr	r2, [pc, #404]	; (8002748 <UART_SetConfig+0x384>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	095b      	lsrs	r3, r3, #5
 80025b8:	f003 0207 	and.w	r2, r3, #7
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4442      	add	r2, r8
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	e26f      	b.n	8002aa6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025c6:	f7ff fda5 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 80025ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	461d      	mov	r5, r3
 80025d0:	f04f 0600 	mov.w	r6, #0
 80025d4:	46a8      	mov	r8, r5
 80025d6:	46b1      	mov	r9, r6
 80025d8:	eb18 0308 	adds.w	r3, r8, r8
 80025dc:	eb49 0409 	adc.w	r4, r9, r9
 80025e0:	4698      	mov	r8, r3
 80025e2:	46a1      	mov	r9, r4
 80025e4:	eb18 0805 	adds.w	r8, r8, r5
 80025e8:	eb49 0906 	adc.w	r9, r9, r6
 80025ec:	f04f 0100 	mov.w	r1, #0
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002600:	4688      	mov	r8, r1
 8002602:	4691      	mov	r9, r2
 8002604:	eb18 0005 	adds.w	r0, r8, r5
 8002608:	eb49 0106 	adc.w	r1, r9, r6
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	461d      	mov	r5, r3
 8002612:	f04f 0600 	mov.w	r6, #0
 8002616:	196b      	adds	r3, r5, r5
 8002618:	eb46 0406 	adc.w	r4, r6, r6
 800261c:	461a      	mov	r2, r3
 800261e:	4623      	mov	r3, r4
 8002620:	f7fd fe2e 	bl	8000280 <__aeabi_uldivmod>
 8002624:	4603      	mov	r3, r0
 8002626:	460c      	mov	r4, r1
 8002628:	461a      	mov	r2, r3
 800262a:	4b47      	ldr	r3, [pc, #284]	; (8002748 <UART_SetConfig+0x384>)
 800262c:	fba3 2302 	umull	r2, r3, r3, r2
 8002630:	095b      	lsrs	r3, r3, #5
 8002632:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	461d      	mov	r5, r3
 800263a:	f04f 0600 	mov.w	r6, #0
 800263e:	46a9      	mov	r9, r5
 8002640:	46b2      	mov	sl, r6
 8002642:	eb19 0309 	adds.w	r3, r9, r9
 8002646:	eb4a 040a 	adc.w	r4, sl, sl
 800264a:	4699      	mov	r9, r3
 800264c:	46a2      	mov	sl, r4
 800264e:	eb19 0905 	adds.w	r9, r9, r5
 8002652:	eb4a 0a06 	adc.w	sl, sl, r6
 8002656:	f04f 0100 	mov.w	r1, #0
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002662:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002666:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800266a:	4689      	mov	r9, r1
 800266c:	4692      	mov	sl, r2
 800266e:	eb19 0005 	adds.w	r0, r9, r5
 8002672:	eb4a 0106 	adc.w	r1, sl, r6
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	461d      	mov	r5, r3
 800267c:	f04f 0600 	mov.w	r6, #0
 8002680:	196b      	adds	r3, r5, r5
 8002682:	eb46 0406 	adc.w	r4, r6, r6
 8002686:	461a      	mov	r2, r3
 8002688:	4623      	mov	r3, r4
 800268a:	f7fd fdf9 	bl	8000280 <__aeabi_uldivmod>
 800268e:	4603      	mov	r3, r0
 8002690:	460c      	mov	r4, r1
 8002692:	461a      	mov	r2, r3
 8002694:	4b2c      	ldr	r3, [pc, #176]	; (8002748 <UART_SetConfig+0x384>)
 8002696:	fba3 1302 	umull	r1, r3, r3, r2
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	2164      	movs	r1, #100	; 0x64
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	3332      	adds	r3, #50	; 0x32
 80026a8:	4a27      	ldr	r2, [pc, #156]	; (8002748 <UART_SetConfig+0x384>)
 80026aa:	fba2 2303 	umull	r2, r3, r2, r3
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026b6:	4498      	add	r8, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	461d      	mov	r5, r3
 80026bc:	f04f 0600 	mov.w	r6, #0
 80026c0:	46a9      	mov	r9, r5
 80026c2:	46b2      	mov	sl, r6
 80026c4:	eb19 0309 	adds.w	r3, r9, r9
 80026c8:	eb4a 040a 	adc.w	r4, sl, sl
 80026cc:	4699      	mov	r9, r3
 80026ce:	46a2      	mov	sl, r4
 80026d0:	eb19 0905 	adds.w	r9, r9, r5
 80026d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80026d8:	f04f 0100 	mov.w	r1, #0
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80026e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80026e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026ec:	4689      	mov	r9, r1
 80026ee:	4692      	mov	sl, r2
 80026f0:	eb19 0005 	adds.w	r0, r9, r5
 80026f4:	eb4a 0106 	adc.w	r1, sl, r6
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	461d      	mov	r5, r3
 80026fe:	f04f 0600 	mov.w	r6, #0
 8002702:	196b      	adds	r3, r5, r5
 8002704:	eb46 0406 	adc.w	r4, r6, r6
 8002708:	461a      	mov	r2, r3
 800270a:	4623      	mov	r3, r4
 800270c:	f7fd fdb8 	bl	8000280 <__aeabi_uldivmod>
 8002710:	4603      	mov	r3, r0
 8002712:	460c      	mov	r4, r1
 8002714:	461a      	mov	r2, r3
 8002716:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <UART_SetConfig+0x384>)
 8002718:	fba3 1302 	umull	r1, r3, r3, r2
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	2164      	movs	r1, #100	; 0x64
 8002720:	fb01 f303 	mul.w	r3, r1, r3
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	3332      	adds	r3, #50	; 0x32
 800272a:	4a07      	ldr	r2, [pc, #28]	; (8002748 <UART_SetConfig+0x384>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	f003 0207 	and.w	r2, r3, #7
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4442      	add	r2, r8
 800273c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800273e:	e1b2      	b.n	8002aa6 <UART_SetConfig+0x6e2>
 8002740:	40011000 	.word	0x40011000
 8002744:	40011400 	.word	0x40011400
 8002748:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4ad7      	ldr	r2, [pc, #860]	; (8002ab0 <UART_SetConfig+0x6ec>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d005      	beq.n	8002762 <UART_SetConfig+0x39e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4ad6      	ldr	r2, [pc, #856]	; (8002ab4 <UART_SetConfig+0x6f0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	f040 80d1 	bne.w	8002904 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002762:	f7ff fceb 	bl	800213c <HAL_RCC_GetPCLK2Freq>
 8002766:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	469a      	mov	sl, r3
 800276c:	f04f 0b00 	mov.w	fp, #0
 8002770:	46d0      	mov	r8, sl
 8002772:	46d9      	mov	r9, fp
 8002774:	eb18 0308 	adds.w	r3, r8, r8
 8002778:	eb49 0409 	adc.w	r4, r9, r9
 800277c:	4698      	mov	r8, r3
 800277e:	46a1      	mov	r9, r4
 8002780:	eb18 080a 	adds.w	r8, r8, sl
 8002784:	eb49 090b 	adc.w	r9, r9, fp
 8002788:	f04f 0100 	mov.w	r1, #0
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002794:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002798:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800279c:	4688      	mov	r8, r1
 800279e:	4691      	mov	r9, r2
 80027a0:	eb1a 0508 	adds.w	r5, sl, r8
 80027a4:	eb4b 0609 	adc.w	r6, fp, r9
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	4619      	mov	r1, r3
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	f04f 0400 	mov.w	r4, #0
 80027ba:	0094      	lsls	r4, r2, #2
 80027bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027c0:	008b      	lsls	r3, r1, #2
 80027c2:	461a      	mov	r2, r3
 80027c4:	4623      	mov	r3, r4
 80027c6:	4628      	mov	r0, r5
 80027c8:	4631      	mov	r1, r6
 80027ca:	f7fd fd59 	bl	8000280 <__aeabi_uldivmod>
 80027ce:	4603      	mov	r3, r0
 80027d0:	460c      	mov	r4, r1
 80027d2:	461a      	mov	r2, r3
 80027d4:	4bb8      	ldr	r3, [pc, #736]	; (8002ab8 <UART_SetConfig+0x6f4>)
 80027d6:	fba3 2302 	umull	r2, r3, r3, r2
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	469b      	mov	fp, r3
 80027e4:	f04f 0c00 	mov.w	ip, #0
 80027e8:	46d9      	mov	r9, fp
 80027ea:	46e2      	mov	sl, ip
 80027ec:	eb19 0309 	adds.w	r3, r9, r9
 80027f0:	eb4a 040a 	adc.w	r4, sl, sl
 80027f4:	4699      	mov	r9, r3
 80027f6:	46a2      	mov	sl, r4
 80027f8:	eb19 090b 	adds.w	r9, r9, fp
 80027fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002800:	f04f 0100 	mov.w	r1, #0
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800280c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002810:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002814:	4689      	mov	r9, r1
 8002816:	4692      	mov	sl, r2
 8002818:	eb1b 0509 	adds.w	r5, fp, r9
 800281c:	eb4c 060a 	adc.w	r6, ip, sl
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	4619      	mov	r1, r3
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	f04f 0400 	mov.w	r4, #0
 8002832:	0094      	lsls	r4, r2, #2
 8002834:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002838:	008b      	lsls	r3, r1, #2
 800283a:	461a      	mov	r2, r3
 800283c:	4623      	mov	r3, r4
 800283e:	4628      	mov	r0, r5
 8002840:	4631      	mov	r1, r6
 8002842:	f7fd fd1d 	bl	8000280 <__aeabi_uldivmod>
 8002846:	4603      	mov	r3, r0
 8002848:	460c      	mov	r4, r1
 800284a:	461a      	mov	r2, r3
 800284c:	4b9a      	ldr	r3, [pc, #616]	; (8002ab8 <UART_SetConfig+0x6f4>)
 800284e:	fba3 1302 	umull	r1, r3, r3, r2
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	2164      	movs	r1, #100	; 0x64
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	3332      	adds	r3, #50	; 0x32
 8002860:	4a95      	ldr	r2, [pc, #596]	; (8002ab8 <UART_SetConfig+0x6f4>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800286c:	4498      	add	r8, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	469b      	mov	fp, r3
 8002872:	f04f 0c00 	mov.w	ip, #0
 8002876:	46d9      	mov	r9, fp
 8002878:	46e2      	mov	sl, ip
 800287a:	eb19 0309 	adds.w	r3, r9, r9
 800287e:	eb4a 040a 	adc.w	r4, sl, sl
 8002882:	4699      	mov	r9, r3
 8002884:	46a2      	mov	sl, r4
 8002886:	eb19 090b 	adds.w	r9, r9, fp
 800288a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800288e:	f04f 0100 	mov.w	r1, #0
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800289a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800289e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028a2:	4689      	mov	r9, r1
 80028a4:	4692      	mov	sl, r2
 80028a6:	eb1b 0509 	adds.w	r5, fp, r9
 80028aa:	eb4c 060a 	adc.w	r6, ip, sl
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4619      	mov	r1, r3
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	f04f 0400 	mov.w	r4, #0
 80028c0:	0094      	lsls	r4, r2, #2
 80028c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028c6:	008b      	lsls	r3, r1, #2
 80028c8:	461a      	mov	r2, r3
 80028ca:	4623      	mov	r3, r4
 80028cc:	4628      	mov	r0, r5
 80028ce:	4631      	mov	r1, r6
 80028d0:	f7fd fcd6 	bl	8000280 <__aeabi_uldivmod>
 80028d4:	4603      	mov	r3, r0
 80028d6:	460c      	mov	r4, r1
 80028d8:	461a      	mov	r2, r3
 80028da:	4b77      	ldr	r3, [pc, #476]	; (8002ab8 <UART_SetConfig+0x6f4>)
 80028dc:	fba3 1302 	umull	r1, r3, r3, r2
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	2164      	movs	r1, #100	; 0x64
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	3332      	adds	r3, #50	; 0x32
 80028ee:	4a72      	ldr	r2, [pc, #456]	; (8002ab8 <UART_SetConfig+0x6f4>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	f003 020f 	and.w	r2, r3, #15
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4442      	add	r2, r8
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	e0d0      	b.n	8002aa6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002904:	f7ff fc06 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8002908:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	469a      	mov	sl, r3
 800290e:	f04f 0b00 	mov.w	fp, #0
 8002912:	46d0      	mov	r8, sl
 8002914:	46d9      	mov	r9, fp
 8002916:	eb18 0308 	adds.w	r3, r8, r8
 800291a:	eb49 0409 	adc.w	r4, r9, r9
 800291e:	4698      	mov	r8, r3
 8002920:	46a1      	mov	r9, r4
 8002922:	eb18 080a 	adds.w	r8, r8, sl
 8002926:	eb49 090b 	adc.w	r9, r9, fp
 800292a:	f04f 0100 	mov.w	r1, #0
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002936:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800293a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800293e:	4688      	mov	r8, r1
 8002940:	4691      	mov	r9, r2
 8002942:	eb1a 0508 	adds.w	r5, sl, r8
 8002946:	eb4b 0609 	adc.w	r6, fp, r9
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4619      	mov	r1, r3
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	f04f 0400 	mov.w	r4, #0
 800295c:	0094      	lsls	r4, r2, #2
 800295e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002962:	008b      	lsls	r3, r1, #2
 8002964:	461a      	mov	r2, r3
 8002966:	4623      	mov	r3, r4
 8002968:	4628      	mov	r0, r5
 800296a:	4631      	mov	r1, r6
 800296c:	f7fd fc88 	bl	8000280 <__aeabi_uldivmod>
 8002970:	4603      	mov	r3, r0
 8002972:	460c      	mov	r4, r1
 8002974:	461a      	mov	r2, r3
 8002976:	4b50      	ldr	r3, [pc, #320]	; (8002ab8 <UART_SetConfig+0x6f4>)
 8002978:	fba3 2302 	umull	r2, r3, r3, r2
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	469b      	mov	fp, r3
 8002986:	f04f 0c00 	mov.w	ip, #0
 800298a:	46d9      	mov	r9, fp
 800298c:	46e2      	mov	sl, ip
 800298e:	eb19 0309 	adds.w	r3, r9, r9
 8002992:	eb4a 040a 	adc.w	r4, sl, sl
 8002996:	4699      	mov	r9, r3
 8002998:	46a2      	mov	sl, r4
 800299a:	eb19 090b 	adds.w	r9, r9, fp
 800299e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80029a2:	f04f 0100 	mov.w	r1, #0
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029b6:	4689      	mov	r9, r1
 80029b8:	4692      	mov	sl, r2
 80029ba:	eb1b 0509 	adds.w	r5, fp, r9
 80029be:	eb4c 060a 	adc.w	r6, ip, sl
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4619      	mov	r1, r3
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	f04f 0400 	mov.w	r4, #0
 80029d4:	0094      	lsls	r4, r2, #2
 80029d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029da:	008b      	lsls	r3, r1, #2
 80029dc:	461a      	mov	r2, r3
 80029de:	4623      	mov	r3, r4
 80029e0:	4628      	mov	r0, r5
 80029e2:	4631      	mov	r1, r6
 80029e4:	f7fd fc4c 	bl	8000280 <__aeabi_uldivmod>
 80029e8:	4603      	mov	r3, r0
 80029ea:	460c      	mov	r4, r1
 80029ec:	461a      	mov	r2, r3
 80029ee:	4b32      	ldr	r3, [pc, #200]	; (8002ab8 <UART_SetConfig+0x6f4>)
 80029f0:	fba3 1302 	umull	r1, r3, r3, r2
 80029f4:	095b      	lsrs	r3, r3, #5
 80029f6:	2164      	movs	r1, #100	; 0x64
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	3332      	adds	r3, #50	; 0x32
 8002a02:	4a2d      	ldr	r2, [pc, #180]	; (8002ab8 <UART_SetConfig+0x6f4>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a0e:	4498      	add	r8, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	469b      	mov	fp, r3
 8002a14:	f04f 0c00 	mov.w	ip, #0
 8002a18:	46d9      	mov	r9, fp
 8002a1a:	46e2      	mov	sl, ip
 8002a1c:	eb19 0309 	adds.w	r3, r9, r9
 8002a20:	eb4a 040a 	adc.w	r4, sl, sl
 8002a24:	4699      	mov	r9, r3
 8002a26:	46a2      	mov	sl, r4
 8002a28:	eb19 090b 	adds.w	r9, r9, fp
 8002a2c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002a30:	f04f 0100 	mov.w	r1, #0
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a44:	4689      	mov	r9, r1
 8002a46:	4692      	mov	sl, r2
 8002a48:	eb1b 0509 	adds.w	r5, fp, r9
 8002a4c:	eb4c 060a 	adc.w	r6, ip, sl
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4619      	mov	r1, r3
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	f04f 0400 	mov.w	r4, #0
 8002a62:	0094      	lsls	r4, r2, #2
 8002a64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a68:	008b      	lsls	r3, r1, #2
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4623      	mov	r3, r4
 8002a6e:	4628      	mov	r0, r5
 8002a70:	4631      	mov	r1, r6
 8002a72:	f7fd fc05 	bl	8000280 <__aeabi_uldivmod>
 8002a76:	4603      	mov	r3, r0
 8002a78:	460c      	mov	r4, r1
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <UART_SetConfig+0x6f4>)
 8002a7e:	fba3 1302 	umull	r1, r3, r3, r2
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	2164      	movs	r1, #100	; 0x64
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	3332      	adds	r3, #50	; 0x32
 8002a90:	4a09      	ldr	r2, [pc, #36]	; (8002ab8 <UART_SetConfig+0x6f4>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	f003 020f 	and.w	r2, r3, #15
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4442      	add	r2, r8
 8002aa2:	609a      	str	r2, [r3, #8]
}
 8002aa4:	e7ff      	b.n	8002aa6 <UART_SetConfig+0x6e2>
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ab0:	40011000 	.word	0x40011000
 8002ab4:	40011400 	.word	0x40011400
 8002ab8:	51eb851f 	.word	0x51eb851f

08002abc <__errno>:
 8002abc:	4b01      	ldr	r3, [pc, #4]	; (8002ac4 <__errno+0x8>)
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	2000000c 	.word	0x2000000c

08002ac8 <__libc_init_array>:
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	4e0d      	ldr	r6, [pc, #52]	; (8002b00 <__libc_init_array+0x38>)
 8002acc:	4c0d      	ldr	r4, [pc, #52]	; (8002b04 <__libc_init_array+0x3c>)
 8002ace:	1ba4      	subs	r4, r4, r6
 8002ad0:	10a4      	asrs	r4, r4, #2
 8002ad2:	2500      	movs	r5, #0
 8002ad4:	42a5      	cmp	r5, r4
 8002ad6:	d109      	bne.n	8002aec <__libc_init_array+0x24>
 8002ad8:	4e0b      	ldr	r6, [pc, #44]	; (8002b08 <__libc_init_array+0x40>)
 8002ada:	4c0c      	ldr	r4, [pc, #48]	; (8002b0c <__libc_init_array+0x44>)
 8002adc:	f000 fc26 	bl	800332c <_init>
 8002ae0:	1ba4      	subs	r4, r4, r6
 8002ae2:	10a4      	asrs	r4, r4, #2
 8002ae4:	2500      	movs	r5, #0
 8002ae6:	42a5      	cmp	r5, r4
 8002ae8:	d105      	bne.n	8002af6 <__libc_init_array+0x2e>
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
 8002aec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002af0:	4798      	blx	r3
 8002af2:	3501      	adds	r5, #1
 8002af4:	e7ee      	b.n	8002ad4 <__libc_init_array+0xc>
 8002af6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002afa:	4798      	blx	r3
 8002afc:	3501      	adds	r5, #1
 8002afe:	e7f2      	b.n	8002ae6 <__libc_init_array+0x1e>
 8002b00:	080033b4 	.word	0x080033b4
 8002b04:	080033b4 	.word	0x080033b4
 8002b08:	080033b4 	.word	0x080033b4
 8002b0c:	080033b8 	.word	0x080033b8

08002b10 <memset>:
 8002b10:	4402      	add	r2, r0
 8002b12:	4603      	mov	r3, r0
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d100      	bne.n	8002b1a <memset+0xa>
 8002b18:	4770      	bx	lr
 8002b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b1e:	e7f9      	b.n	8002b14 <memset+0x4>

08002b20 <siprintf>:
 8002b20:	b40e      	push	{r1, r2, r3}
 8002b22:	b500      	push	{lr}
 8002b24:	b09c      	sub	sp, #112	; 0x70
 8002b26:	ab1d      	add	r3, sp, #116	; 0x74
 8002b28:	9002      	str	r0, [sp, #8]
 8002b2a:	9006      	str	r0, [sp, #24]
 8002b2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b30:	4809      	ldr	r0, [pc, #36]	; (8002b58 <siprintf+0x38>)
 8002b32:	9107      	str	r1, [sp, #28]
 8002b34:	9104      	str	r1, [sp, #16]
 8002b36:	4909      	ldr	r1, [pc, #36]	; (8002b5c <siprintf+0x3c>)
 8002b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b3c:	9105      	str	r1, [sp, #20]
 8002b3e:	6800      	ldr	r0, [r0, #0]
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	a902      	add	r1, sp, #8
 8002b44:	f000 f866 	bl	8002c14 <_svfiprintf_r>
 8002b48:	9b02      	ldr	r3, [sp, #8]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	b01c      	add	sp, #112	; 0x70
 8002b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b54:	b003      	add	sp, #12
 8002b56:	4770      	bx	lr
 8002b58:	2000000c 	.word	0x2000000c
 8002b5c:	ffff0208 	.word	0xffff0208

08002b60 <__ssputs_r>:
 8002b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b64:	688e      	ldr	r6, [r1, #8]
 8002b66:	429e      	cmp	r6, r3
 8002b68:	4682      	mov	sl, r0
 8002b6a:	460c      	mov	r4, r1
 8002b6c:	4690      	mov	r8, r2
 8002b6e:	4699      	mov	r9, r3
 8002b70:	d837      	bhi.n	8002be2 <__ssputs_r+0x82>
 8002b72:	898a      	ldrh	r2, [r1, #12]
 8002b74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b78:	d031      	beq.n	8002bde <__ssputs_r+0x7e>
 8002b7a:	6825      	ldr	r5, [r4, #0]
 8002b7c:	6909      	ldr	r1, [r1, #16]
 8002b7e:	1a6f      	subs	r7, r5, r1
 8002b80:	6965      	ldr	r5, [r4, #20]
 8002b82:	2302      	movs	r3, #2
 8002b84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b88:	fb95 f5f3 	sdiv	r5, r5, r3
 8002b8c:	f109 0301 	add.w	r3, r9, #1
 8002b90:	443b      	add	r3, r7
 8002b92:	429d      	cmp	r5, r3
 8002b94:	bf38      	it	cc
 8002b96:	461d      	movcc	r5, r3
 8002b98:	0553      	lsls	r3, r2, #21
 8002b9a:	d530      	bpl.n	8002bfe <__ssputs_r+0x9e>
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	f000 fb2b 	bl	80031f8 <_malloc_r>
 8002ba2:	4606      	mov	r6, r0
 8002ba4:	b950      	cbnz	r0, 8002bbc <__ssputs_r+0x5c>
 8002ba6:	230c      	movs	r3, #12
 8002ba8:	f8ca 3000 	str.w	r3, [sl]
 8002bac:	89a3      	ldrh	r3, [r4, #12]
 8002bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bb2:	81a3      	strh	r3, [r4, #12]
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bbc:	463a      	mov	r2, r7
 8002bbe:	6921      	ldr	r1, [r4, #16]
 8002bc0:	f000 faa8 	bl	8003114 <memcpy>
 8002bc4:	89a3      	ldrh	r3, [r4, #12]
 8002bc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bce:	81a3      	strh	r3, [r4, #12]
 8002bd0:	6126      	str	r6, [r4, #16]
 8002bd2:	6165      	str	r5, [r4, #20]
 8002bd4:	443e      	add	r6, r7
 8002bd6:	1bed      	subs	r5, r5, r7
 8002bd8:	6026      	str	r6, [r4, #0]
 8002bda:	60a5      	str	r5, [r4, #8]
 8002bdc:	464e      	mov	r6, r9
 8002bde:	454e      	cmp	r6, r9
 8002be0:	d900      	bls.n	8002be4 <__ssputs_r+0x84>
 8002be2:	464e      	mov	r6, r9
 8002be4:	4632      	mov	r2, r6
 8002be6:	4641      	mov	r1, r8
 8002be8:	6820      	ldr	r0, [r4, #0]
 8002bea:	f000 fa9e 	bl	800312a <memmove>
 8002bee:	68a3      	ldr	r3, [r4, #8]
 8002bf0:	1b9b      	subs	r3, r3, r6
 8002bf2:	60a3      	str	r3, [r4, #8]
 8002bf4:	6823      	ldr	r3, [r4, #0]
 8002bf6:	441e      	add	r6, r3
 8002bf8:	6026      	str	r6, [r4, #0]
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	e7dc      	b.n	8002bb8 <__ssputs_r+0x58>
 8002bfe:	462a      	mov	r2, r5
 8002c00:	f000 fb54 	bl	80032ac <_realloc_r>
 8002c04:	4606      	mov	r6, r0
 8002c06:	2800      	cmp	r0, #0
 8002c08:	d1e2      	bne.n	8002bd0 <__ssputs_r+0x70>
 8002c0a:	6921      	ldr	r1, [r4, #16]
 8002c0c:	4650      	mov	r0, sl
 8002c0e:	f000 faa5 	bl	800315c <_free_r>
 8002c12:	e7c8      	b.n	8002ba6 <__ssputs_r+0x46>

08002c14 <_svfiprintf_r>:
 8002c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c18:	461d      	mov	r5, r3
 8002c1a:	898b      	ldrh	r3, [r1, #12]
 8002c1c:	061f      	lsls	r7, r3, #24
 8002c1e:	b09d      	sub	sp, #116	; 0x74
 8002c20:	4680      	mov	r8, r0
 8002c22:	460c      	mov	r4, r1
 8002c24:	4616      	mov	r6, r2
 8002c26:	d50f      	bpl.n	8002c48 <_svfiprintf_r+0x34>
 8002c28:	690b      	ldr	r3, [r1, #16]
 8002c2a:	b96b      	cbnz	r3, 8002c48 <_svfiprintf_r+0x34>
 8002c2c:	2140      	movs	r1, #64	; 0x40
 8002c2e:	f000 fae3 	bl	80031f8 <_malloc_r>
 8002c32:	6020      	str	r0, [r4, #0]
 8002c34:	6120      	str	r0, [r4, #16]
 8002c36:	b928      	cbnz	r0, 8002c44 <_svfiprintf_r+0x30>
 8002c38:	230c      	movs	r3, #12
 8002c3a:	f8c8 3000 	str.w	r3, [r8]
 8002c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c42:	e0c8      	b.n	8002dd6 <_svfiprintf_r+0x1c2>
 8002c44:	2340      	movs	r3, #64	; 0x40
 8002c46:	6163      	str	r3, [r4, #20]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c52:	2330      	movs	r3, #48	; 0x30
 8002c54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c58:	9503      	str	r5, [sp, #12]
 8002c5a:	f04f 0b01 	mov.w	fp, #1
 8002c5e:	4637      	mov	r7, r6
 8002c60:	463d      	mov	r5, r7
 8002c62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002c66:	b10b      	cbz	r3, 8002c6c <_svfiprintf_r+0x58>
 8002c68:	2b25      	cmp	r3, #37	; 0x25
 8002c6a:	d13e      	bne.n	8002cea <_svfiprintf_r+0xd6>
 8002c6c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002c70:	d00b      	beq.n	8002c8a <_svfiprintf_r+0x76>
 8002c72:	4653      	mov	r3, sl
 8002c74:	4632      	mov	r2, r6
 8002c76:	4621      	mov	r1, r4
 8002c78:	4640      	mov	r0, r8
 8002c7a:	f7ff ff71 	bl	8002b60 <__ssputs_r>
 8002c7e:	3001      	adds	r0, #1
 8002c80:	f000 80a4 	beq.w	8002dcc <_svfiprintf_r+0x1b8>
 8002c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c86:	4453      	add	r3, sl
 8002c88:	9309      	str	r3, [sp, #36]	; 0x24
 8002c8a:	783b      	ldrb	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 809d 	beq.w	8002dcc <_svfiprintf_r+0x1b8>
 8002c92:	2300      	movs	r3, #0
 8002c94:	f04f 32ff 	mov.w	r2, #4294967295
 8002c98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c9c:	9304      	str	r3, [sp, #16]
 8002c9e:	9307      	str	r3, [sp, #28]
 8002ca0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ca4:	931a      	str	r3, [sp, #104]	; 0x68
 8002ca6:	462f      	mov	r7, r5
 8002ca8:	2205      	movs	r2, #5
 8002caa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002cae:	4850      	ldr	r0, [pc, #320]	; (8002df0 <_svfiprintf_r+0x1dc>)
 8002cb0:	f7fd fa96 	bl	80001e0 <memchr>
 8002cb4:	9b04      	ldr	r3, [sp, #16]
 8002cb6:	b9d0      	cbnz	r0, 8002cee <_svfiprintf_r+0xda>
 8002cb8:	06d9      	lsls	r1, r3, #27
 8002cba:	bf44      	itt	mi
 8002cbc:	2220      	movmi	r2, #32
 8002cbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002cc2:	071a      	lsls	r2, r3, #28
 8002cc4:	bf44      	itt	mi
 8002cc6:	222b      	movmi	r2, #43	; 0x2b
 8002cc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ccc:	782a      	ldrb	r2, [r5, #0]
 8002cce:	2a2a      	cmp	r2, #42	; 0x2a
 8002cd0:	d015      	beq.n	8002cfe <_svfiprintf_r+0xea>
 8002cd2:	9a07      	ldr	r2, [sp, #28]
 8002cd4:	462f      	mov	r7, r5
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	250a      	movs	r5, #10
 8002cda:	4639      	mov	r1, r7
 8002cdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ce0:	3b30      	subs	r3, #48	; 0x30
 8002ce2:	2b09      	cmp	r3, #9
 8002ce4:	d94d      	bls.n	8002d82 <_svfiprintf_r+0x16e>
 8002ce6:	b1b8      	cbz	r0, 8002d18 <_svfiprintf_r+0x104>
 8002ce8:	e00f      	b.n	8002d0a <_svfiprintf_r+0xf6>
 8002cea:	462f      	mov	r7, r5
 8002cec:	e7b8      	b.n	8002c60 <_svfiprintf_r+0x4c>
 8002cee:	4a40      	ldr	r2, [pc, #256]	; (8002df0 <_svfiprintf_r+0x1dc>)
 8002cf0:	1a80      	subs	r0, r0, r2
 8002cf2:	fa0b f000 	lsl.w	r0, fp, r0
 8002cf6:	4318      	orrs	r0, r3
 8002cf8:	9004      	str	r0, [sp, #16]
 8002cfa:	463d      	mov	r5, r7
 8002cfc:	e7d3      	b.n	8002ca6 <_svfiprintf_r+0x92>
 8002cfe:	9a03      	ldr	r2, [sp, #12]
 8002d00:	1d11      	adds	r1, r2, #4
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	9103      	str	r1, [sp, #12]
 8002d06:	2a00      	cmp	r2, #0
 8002d08:	db01      	blt.n	8002d0e <_svfiprintf_r+0xfa>
 8002d0a:	9207      	str	r2, [sp, #28]
 8002d0c:	e004      	b.n	8002d18 <_svfiprintf_r+0x104>
 8002d0e:	4252      	negs	r2, r2
 8002d10:	f043 0302 	orr.w	r3, r3, #2
 8002d14:	9207      	str	r2, [sp, #28]
 8002d16:	9304      	str	r3, [sp, #16]
 8002d18:	783b      	ldrb	r3, [r7, #0]
 8002d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8002d1c:	d10c      	bne.n	8002d38 <_svfiprintf_r+0x124>
 8002d1e:	787b      	ldrb	r3, [r7, #1]
 8002d20:	2b2a      	cmp	r3, #42	; 0x2a
 8002d22:	d133      	bne.n	8002d8c <_svfiprintf_r+0x178>
 8002d24:	9b03      	ldr	r3, [sp, #12]
 8002d26:	1d1a      	adds	r2, r3, #4
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	9203      	str	r2, [sp, #12]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bfb8      	it	lt
 8002d30:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d34:	3702      	adds	r7, #2
 8002d36:	9305      	str	r3, [sp, #20]
 8002d38:	4d2e      	ldr	r5, [pc, #184]	; (8002df4 <_svfiprintf_r+0x1e0>)
 8002d3a:	7839      	ldrb	r1, [r7, #0]
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	4628      	mov	r0, r5
 8002d40:	f7fd fa4e 	bl	80001e0 <memchr>
 8002d44:	b138      	cbz	r0, 8002d56 <_svfiprintf_r+0x142>
 8002d46:	2340      	movs	r3, #64	; 0x40
 8002d48:	1b40      	subs	r0, r0, r5
 8002d4a:	fa03 f000 	lsl.w	r0, r3, r0
 8002d4e:	9b04      	ldr	r3, [sp, #16]
 8002d50:	4303      	orrs	r3, r0
 8002d52:	3701      	adds	r7, #1
 8002d54:	9304      	str	r3, [sp, #16]
 8002d56:	7839      	ldrb	r1, [r7, #0]
 8002d58:	4827      	ldr	r0, [pc, #156]	; (8002df8 <_svfiprintf_r+0x1e4>)
 8002d5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d5e:	2206      	movs	r2, #6
 8002d60:	1c7e      	adds	r6, r7, #1
 8002d62:	f7fd fa3d 	bl	80001e0 <memchr>
 8002d66:	2800      	cmp	r0, #0
 8002d68:	d038      	beq.n	8002ddc <_svfiprintf_r+0x1c8>
 8002d6a:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <_svfiprintf_r+0x1e8>)
 8002d6c:	bb13      	cbnz	r3, 8002db4 <_svfiprintf_r+0x1a0>
 8002d6e:	9b03      	ldr	r3, [sp, #12]
 8002d70:	3307      	adds	r3, #7
 8002d72:	f023 0307 	bic.w	r3, r3, #7
 8002d76:	3308      	adds	r3, #8
 8002d78:	9303      	str	r3, [sp, #12]
 8002d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d7c:	444b      	add	r3, r9
 8002d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d80:	e76d      	b.n	8002c5e <_svfiprintf_r+0x4a>
 8002d82:	fb05 3202 	mla	r2, r5, r2, r3
 8002d86:	2001      	movs	r0, #1
 8002d88:	460f      	mov	r7, r1
 8002d8a:	e7a6      	b.n	8002cda <_svfiprintf_r+0xc6>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	3701      	adds	r7, #1
 8002d90:	9305      	str	r3, [sp, #20]
 8002d92:	4619      	mov	r1, r3
 8002d94:	250a      	movs	r5, #10
 8002d96:	4638      	mov	r0, r7
 8002d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d9c:	3a30      	subs	r2, #48	; 0x30
 8002d9e:	2a09      	cmp	r2, #9
 8002da0:	d903      	bls.n	8002daa <_svfiprintf_r+0x196>
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0c8      	beq.n	8002d38 <_svfiprintf_r+0x124>
 8002da6:	9105      	str	r1, [sp, #20]
 8002da8:	e7c6      	b.n	8002d38 <_svfiprintf_r+0x124>
 8002daa:	fb05 2101 	mla	r1, r5, r1, r2
 8002dae:	2301      	movs	r3, #1
 8002db0:	4607      	mov	r7, r0
 8002db2:	e7f0      	b.n	8002d96 <_svfiprintf_r+0x182>
 8002db4:	ab03      	add	r3, sp, #12
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	4622      	mov	r2, r4
 8002dba:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <_svfiprintf_r+0x1ec>)
 8002dbc:	a904      	add	r1, sp, #16
 8002dbe:	4640      	mov	r0, r8
 8002dc0:	f3af 8000 	nop.w
 8002dc4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002dc8:	4681      	mov	r9, r0
 8002dca:	d1d6      	bne.n	8002d7a <_svfiprintf_r+0x166>
 8002dcc:	89a3      	ldrh	r3, [r4, #12]
 8002dce:	065b      	lsls	r3, r3, #25
 8002dd0:	f53f af35 	bmi.w	8002c3e <_svfiprintf_r+0x2a>
 8002dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002dd6:	b01d      	add	sp, #116	; 0x74
 8002dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ddc:	ab03      	add	r3, sp, #12
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	4622      	mov	r2, r4
 8002de2:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <_svfiprintf_r+0x1ec>)
 8002de4:	a904      	add	r1, sp, #16
 8002de6:	4640      	mov	r0, r8
 8002de8:	f000 f882 	bl	8002ef0 <_printf_i>
 8002dec:	e7ea      	b.n	8002dc4 <_svfiprintf_r+0x1b0>
 8002dee:	bf00      	nop
 8002df0:	08003378 	.word	0x08003378
 8002df4:	0800337e 	.word	0x0800337e
 8002df8:	08003382 	.word	0x08003382
 8002dfc:	00000000 	.word	0x00000000
 8002e00:	08002b61 	.word	0x08002b61

08002e04 <_printf_common>:
 8002e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e08:	4691      	mov	r9, r2
 8002e0a:	461f      	mov	r7, r3
 8002e0c:	688a      	ldr	r2, [r1, #8]
 8002e0e:	690b      	ldr	r3, [r1, #16]
 8002e10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e14:	4293      	cmp	r3, r2
 8002e16:	bfb8      	it	lt
 8002e18:	4613      	movlt	r3, r2
 8002e1a:	f8c9 3000 	str.w	r3, [r9]
 8002e1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e22:	4606      	mov	r6, r0
 8002e24:	460c      	mov	r4, r1
 8002e26:	b112      	cbz	r2, 8002e2e <_printf_common+0x2a>
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f8c9 3000 	str.w	r3, [r9]
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	0699      	lsls	r1, r3, #26
 8002e32:	bf42      	ittt	mi
 8002e34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e38:	3302      	addmi	r3, #2
 8002e3a:	f8c9 3000 	strmi.w	r3, [r9]
 8002e3e:	6825      	ldr	r5, [r4, #0]
 8002e40:	f015 0506 	ands.w	r5, r5, #6
 8002e44:	d107      	bne.n	8002e56 <_printf_common+0x52>
 8002e46:	f104 0a19 	add.w	sl, r4, #25
 8002e4a:	68e3      	ldr	r3, [r4, #12]
 8002e4c:	f8d9 2000 	ldr.w	r2, [r9]
 8002e50:	1a9b      	subs	r3, r3, r2
 8002e52:	42ab      	cmp	r3, r5
 8002e54:	dc28      	bgt.n	8002ea8 <_printf_common+0xa4>
 8002e56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002e5a:	6822      	ldr	r2, [r4, #0]
 8002e5c:	3300      	adds	r3, #0
 8002e5e:	bf18      	it	ne
 8002e60:	2301      	movne	r3, #1
 8002e62:	0692      	lsls	r2, r2, #26
 8002e64:	d42d      	bmi.n	8002ec2 <_printf_common+0xbe>
 8002e66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e6a:	4639      	mov	r1, r7
 8002e6c:	4630      	mov	r0, r6
 8002e6e:	47c0      	blx	r8
 8002e70:	3001      	adds	r0, #1
 8002e72:	d020      	beq.n	8002eb6 <_printf_common+0xb2>
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	68e5      	ldr	r5, [r4, #12]
 8002e78:	f8d9 2000 	ldr.w	r2, [r9]
 8002e7c:	f003 0306 	and.w	r3, r3, #6
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	bf08      	it	eq
 8002e84:	1aad      	subeq	r5, r5, r2
 8002e86:	68a3      	ldr	r3, [r4, #8]
 8002e88:	6922      	ldr	r2, [r4, #16]
 8002e8a:	bf0c      	ite	eq
 8002e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e90:	2500      	movne	r5, #0
 8002e92:	4293      	cmp	r3, r2
 8002e94:	bfc4      	itt	gt
 8002e96:	1a9b      	subgt	r3, r3, r2
 8002e98:	18ed      	addgt	r5, r5, r3
 8002e9a:	f04f 0900 	mov.w	r9, #0
 8002e9e:	341a      	adds	r4, #26
 8002ea0:	454d      	cmp	r5, r9
 8002ea2:	d11a      	bne.n	8002eda <_printf_common+0xd6>
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	e008      	b.n	8002eba <_printf_common+0xb6>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	4652      	mov	r2, sl
 8002eac:	4639      	mov	r1, r7
 8002eae:	4630      	mov	r0, r6
 8002eb0:	47c0      	blx	r8
 8002eb2:	3001      	adds	r0, #1
 8002eb4:	d103      	bne.n	8002ebe <_printf_common+0xba>
 8002eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ebe:	3501      	adds	r5, #1
 8002ec0:	e7c3      	b.n	8002e4a <_printf_common+0x46>
 8002ec2:	18e1      	adds	r1, r4, r3
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	2030      	movs	r0, #48	; 0x30
 8002ec8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ecc:	4422      	add	r2, r4
 8002ece:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ed2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	e7c5      	b.n	8002e66 <_printf_common+0x62>
 8002eda:	2301      	movs	r3, #1
 8002edc:	4622      	mov	r2, r4
 8002ede:	4639      	mov	r1, r7
 8002ee0:	4630      	mov	r0, r6
 8002ee2:	47c0      	blx	r8
 8002ee4:	3001      	adds	r0, #1
 8002ee6:	d0e6      	beq.n	8002eb6 <_printf_common+0xb2>
 8002ee8:	f109 0901 	add.w	r9, r9, #1
 8002eec:	e7d8      	b.n	8002ea0 <_printf_common+0x9c>
	...

08002ef0 <_printf_i>:
 8002ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ef4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002ef8:	460c      	mov	r4, r1
 8002efa:	7e09      	ldrb	r1, [r1, #24]
 8002efc:	b085      	sub	sp, #20
 8002efe:	296e      	cmp	r1, #110	; 0x6e
 8002f00:	4617      	mov	r7, r2
 8002f02:	4606      	mov	r6, r0
 8002f04:	4698      	mov	r8, r3
 8002f06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f08:	f000 80b3 	beq.w	8003072 <_printf_i+0x182>
 8002f0c:	d822      	bhi.n	8002f54 <_printf_i+0x64>
 8002f0e:	2963      	cmp	r1, #99	; 0x63
 8002f10:	d036      	beq.n	8002f80 <_printf_i+0x90>
 8002f12:	d80a      	bhi.n	8002f2a <_printf_i+0x3a>
 8002f14:	2900      	cmp	r1, #0
 8002f16:	f000 80b9 	beq.w	800308c <_printf_i+0x19c>
 8002f1a:	2958      	cmp	r1, #88	; 0x58
 8002f1c:	f000 8083 	beq.w	8003026 <_printf_i+0x136>
 8002f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f24:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002f28:	e032      	b.n	8002f90 <_printf_i+0xa0>
 8002f2a:	2964      	cmp	r1, #100	; 0x64
 8002f2c:	d001      	beq.n	8002f32 <_printf_i+0x42>
 8002f2e:	2969      	cmp	r1, #105	; 0x69
 8002f30:	d1f6      	bne.n	8002f20 <_printf_i+0x30>
 8002f32:	6820      	ldr	r0, [r4, #0]
 8002f34:	6813      	ldr	r3, [r2, #0]
 8002f36:	0605      	lsls	r5, r0, #24
 8002f38:	f103 0104 	add.w	r1, r3, #4
 8002f3c:	d52a      	bpl.n	8002f94 <_printf_i+0xa4>
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6011      	str	r1, [r2, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	da03      	bge.n	8002f4e <_printf_i+0x5e>
 8002f46:	222d      	movs	r2, #45	; 0x2d
 8002f48:	425b      	negs	r3, r3
 8002f4a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002f4e:	486f      	ldr	r0, [pc, #444]	; (800310c <_printf_i+0x21c>)
 8002f50:	220a      	movs	r2, #10
 8002f52:	e039      	b.n	8002fc8 <_printf_i+0xd8>
 8002f54:	2973      	cmp	r1, #115	; 0x73
 8002f56:	f000 809d 	beq.w	8003094 <_printf_i+0x1a4>
 8002f5a:	d808      	bhi.n	8002f6e <_printf_i+0x7e>
 8002f5c:	296f      	cmp	r1, #111	; 0x6f
 8002f5e:	d020      	beq.n	8002fa2 <_printf_i+0xb2>
 8002f60:	2970      	cmp	r1, #112	; 0x70
 8002f62:	d1dd      	bne.n	8002f20 <_printf_i+0x30>
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	f043 0320 	orr.w	r3, r3, #32
 8002f6a:	6023      	str	r3, [r4, #0]
 8002f6c:	e003      	b.n	8002f76 <_printf_i+0x86>
 8002f6e:	2975      	cmp	r1, #117	; 0x75
 8002f70:	d017      	beq.n	8002fa2 <_printf_i+0xb2>
 8002f72:	2978      	cmp	r1, #120	; 0x78
 8002f74:	d1d4      	bne.n	8002f20 <_printf_i+0x30>
 8002f76:	2378      	movs	r3, #120	; 0x78
 8002f78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f7c:	4864      	ldr	r0, [pc, #400]	; (8003110 <_printf_i+0x220>)
 8002f7e:	e055      	b.n	800302c <_printf_i+0x13c>
 8002f80:	6813      	ldr	r3, [r2, #0]
 8002f82:	1d19      	adds	r1, r3, #4
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6011      	str	r1, [r2, #0]
 8002f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f90:	2301      	movs	r3, #1
 8002f92:	e08c      	b.n	80030ae <_printf_i+0x1be>
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6011      	str	r1, [r2, #0]
 8002f98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f9c:	bf18      	it	ne
 8002f9e:	b21b      	sxthne	r3, r3
 8002fa0:	e7cf      	b.n	8002f42 <_printf_i+0x52>
 8002fa2:	6813      	ldr	r3, [r2, #0]
 8002fa4:	6825      	ldr	r5, [r4, #0]
 8002fa6:	1d18      	adds	r0, r3, #4
 8002fa8:	6010      	str	r0, [r2, #0]
 8002faa:	0628      	lsls	r0, r5, #24
 8002fac:	d501      	bpl.n	8002fb2 <_printf_i+0xc2>
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	e002      	b.n	8002fb8 <_printf_i+0xc8>
 8002fb2:	0668      	lsls	r0, r5, #25
 8002fb4:	d5fb      	bpl.n	8002fae <_printf_i+0xbe>
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	4854      	ldr	r0, [pc, #336]	; (800310c <_printf_i+0x21c>)
 8002fba:	296f      	cmp	r1, #111	; 0x6f
 8002fbc:	bf14      	ite	ne
 8002fbe:	220a      	movne	r2, #10
 8002fc0:	2208      	moveq	r2, #8
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002fc8:	6865      	ldr	r5, [r4, #4]
 8002fca:	60a5      	str	r5, [r4, #8]
 8002fcc:	2d00      	cmp	r5, #0
 8002fce:	f2c0 8095 	blt.w	80030fc <_printf_i+0x20c>
 8002fd2:	6821      	ldr	r1, [r4, #0]
 8002fd4:	f021 0104 	bic.w	r1, r1, #4
 8002fd8:	6021      	str	r1, [r4, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d13d      	bne.n	800305a <_printf_i+0x16a>
 8002fde:	2d00      	cmp	r5, #0
 8002fe0:	f040 808e 	bne.w	8003100 <_printf_i+0x210>
 8002fe4:	4665      	mov	r5, ip
 8002fe6:	2a08      	cmp	r2, #8
 8002fe8:	d10b      	bne.n	8003002 <_printf_i+0x112>
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	07db      	lsls	r3, r3, #31
 8002fee:	d508      	bpl.n	8003002 <_printf_i+0x112>
 8002ff0:	6923      	ldr	r3, [r4, #16]
 8002ff2:	6862      	ldr	r2, [r4, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	bfde      	ittt	le
 8002ff8:	2330      	movle	r3, #48	; 0x30
 8002ffa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ffe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003002:	ebac 0305 	sub.w	r3, ip, r5
 8003006:	6123      	str	r3, [r4, #16]
 8003008:	f8cd 8000 	str.w	r8, [sp]
 800300c:	463b      	mov	r3, r7
 800300e:	aa03      	add	r2, sp, #12
 8003010:	4621      	mov	r1, r4
 8003012:	4630      	mov	r0, r6
 8003014:	f7ff fef6 	bl	8002e04 <_printf_common>
 8003018:	3001      	adds	r0, #1
 800301a:	d14d      	bne.n	80030b8 <_printf_i+0x1c8>
 800301c:	f04f 30ff 	mov.w	r0, #4294967295
 8003020:	b005      	add	sp, #20
 8003022:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003026:	4839      	ldr	r0, [pc, #228]	; (800310c <_printf_i+0x21c>)
 8003028:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800302c:	6813      	ldr	r3, [r2, #0]
 800302e:	6821      	ldr	r1, [r4, #0]
 8003030:	1d1d      	adds	r5, r3, #4
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6015      	str	r5, [r2, #0]
 8003036:	060a      	lsls	r2, r1, #24
 8003038:	d50b      	bpl.n	8003052 <_printf_i+0x162>
 800303a:	07ca      	lsls	r2, r1, #31
 800303c:	bf44      	itt	mi
 800303e:	f041 0120 	orrmi.w	r1, r1, #32
 8003042:	6021      	strmi	r1, [r4, #0]
 8003044:	b91b      	cbnz	r3, 800304e <_printf_i+0x15e>
 8003046:	6822      	ldr	r2, [r4, #0]
 8003048:	f022 0220 	bic.w	r2, r2, #32
 800304c:	6022      	str	r2, [r4, #0]
 800304e:	2210      	movs	r2, #16
 8003050:	e7b7      	b.n	8002fc2 <_printf_i+0xd2>
 8003052:	064d      	lsls	r5, r1, #25
 8003054:	bf48      	it	mi
 8003056:	b29b      	uxthmi	r3, r3
 8003058:	e7ef      	b.n	800303a <_printf_i+0x14a>
 800305a:	4665      	mov	r5, ip
 800305c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003060:	fb02 3311 	mls	r3, r2, r1, r3
 8003064:	5cc3      	ldrb	r3, [r0, r3]
 8003066:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800306a:	460b      	mov	r3, r1
 800306c:	2900      	cmp	r1, #0
 800306e:	d1f5      	bne.n	800305c <_printf_i+0x16c>
 8003070:	e7b9      	b.n	8002fe6 <_printf_i+0xf6>
 8003072:	6813      	ldr	r3, [r2, #0]
 8003074:	6825      	ldr	r5, [r4, #0]
 8003076:	6961      	ldr	r1, [r4, #20]
 8003078:	1d18      	adds	r0, r3, #4
 800307a:	6010      	str	r0, [r2, #0]
 800307c:	0628      	lsls	r0, r5, #24
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	d501      	bpl.n	8003086 <_printf_i+0x196>
 8003082:	6019      	str	r1, [r3, #0]
 8003084:	e002      	b.n	800308c <_printf_i+0x19c>
 8003086:	066a      	lsls	r2, r5, #25
 8003088:	d5fb      	bpl.n	8003082 <_printf_i+0x192>
 800308a:	8019      	strh	r1, [r3, #0]
 800308c:	2300      	movs	r3, #0
 800308e:	6123      	str	r3, [r4, #16]
 8003090:	4665      	mov	r5, ip
 8003092:	e7b9      	b.n	8003008 <_printf_i+0x118>
 8003094:	6813      	ldr	r3, [r2, #0]
 8003096:	1d19      	adds	r1, r3, #4
 8003098:	6011      	str	r1, [r2, #0]
 800309a:	681d      	ldr	r5, [r3, #0]
 800309c:	6862      	ldr	r2, [r4, #4]
 800309e:	2100      	movs	r1, #0
 80030a0:	4628      	mov	r0, r5
 80030a2:	f7fd f89d 	bl	80001e0 <memchr>
 80030a6:	b108      	cbz	r0, 80030ac <_printf_i+0x1bc>
 80030a8:	1b40      	subs	r0, r0, r5
 80030aa:	6060      	str	r0, [r4, #4]
 80030ac:	6863      	ldr	r3, [r4, #4]
 80030ae:	6123      	str	r3, [r4, #16]
 80030b0:	2300      	movs	r3, #0
 80030b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030b6:	e7a7      	b.n	8003008 <_printf_i+0x118>
 80030b8:	6923      	ldr	r3, [r4, #16]
 80030ba:	462a      	mov	r2, r5
 80030bc:	4639      	mov	r1, r7
 80030be:	4630      	mov	r0, r6
 80030c0:	47c0      	blx	r8
 80030c2:	3001      	adds	r0, #1
 80030c4:	d0aa      	beq.n	800301c <_printf_i+0x12c>
 80030c6:	6823      	ldr	r3, [r4, #0]
 80030c8:	079b      	lsls	r3, r3, #30
 80030ca:	d413      	bmi.n	80030f4 <_printf_i+0x204>
 80030cc:	68e0      	ldr	r0, [r4, #12]
 80030ce:	9b03      	ldr	r3, [sp, #12]
 80030d0:	4298      	cmp	r0, r3
 80030d2:	bfb8      	it	lt
 80030d4:	4618      	movlt	r0, r3
 80030d6:	e7a3      	b.n	8003020 <_printf_i+0x130>
 80030d8:	2301      	movs	r3, #1
 80030da:	464a      	mov	r2, r9
 80030dc:	4639      	mov	r1, r7
 80030de:	4630      	mov	r0, r6
 80030e0:	47c0      	blx	r8
 80030e2:	3001      	adds	r0, #1
 80030e4:	d09a      	beq.n	800301c <_printf_i+0x12c>
 80030e6:	3501      	adds	r5, #1
 80030e8:	68e3      	ldr	r3, [r4, #12]
 80030ea:	9a03      	ldr	r2, [sp, #12]
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	42ab      	cmp	r3, r5
 80030f0:	dcf2      	bgt.n	80030d8 <_printf_i+0x1e8>
 80030f2:	e7eb      	b.n	80030cc <_printf_i+0x1dc>
 80030f4:	2500      	movs	r5, #0
 80030f6:	f104 0919 	add.w	r9, r4, #25
 80030fa:	e7f5      	b.n	80030e8 <_printf_i+0x1f8>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1ac      	bne.n	800305a <_printf_i+0x16a>
 8003100:	7803      	ldrb	r3, [r0, #0]
 8003102:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003106:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800310a:	e76c      	b.n	8002fe6 <_printf_i+0xf6>
 800310c:	08003389 	.word	0x08003389
 8003110:	0800339a 	.word	0x0800339a

08003114 <memcpy>:
 8003114:	b510      	push	{r4, lr}
 8003116:	1e43      	subs	r3, r0, #1
 8003118:	440a      	add	r2, r1
 800311a:	4291      	cmp	r1, r2
 800311c:	d100      	bne.n	8003120 <memcpy+0xc>
 800311e:	bd10      	pop	{r4, pc}
 8003120:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003124:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003128:	e7f7      	b.n	800311a <memcpy+0x6>

0800312a <memmove>:
 800312a:	4288      	cmp	r0, r1
 800312c:	b510      	push	{r4, lr}
 800312e:	eb01 0302 	add.w	r3, r1, r2
 8003132:	d807      	bhi.n	8003144 <memmove+0x1a>
 8003134:	1e42      	subs	r2, r0, #1
 8003136:	4299      	cmp	r1, r3
 8003138:	d00a      	beq.n	8003150 <memmove+0x26>
 800313a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800313e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003142:	e7f8      	b.n	8003136 <memmove+0xc>
 8003144:	4283      	cmp	r3, r0
 8003146:	d9f5      	bls.n	8003134 <memmove+0xa>
 8003148:	1881      	adds	r1, r0, r2
 800314a:	1ad2      	subs	r2, r2, r3
 800314c:	42d3      	cmn	r3, r2
 800314e:	d100      	bne.n	8003152 <memmove+0x28>
 8003150:	bd10      	pop	{r4, pc}
 8003152:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003156:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800315a:	e7f7      	b.n	800314c <memmove+0x22>

0800315c <_free_r>:
 800315c:	b538      	push	{r3, r4, r5, lr}
 800315e:	4605      	mov	r5, r0
 8003160:	2900      	cmp	r1, #0
 8003162:	d045      	beq.n	80031f0 <_free_r+0x94>
 8003164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003168:	1f0c      	subs	r4, r1, #4
 800316a:	2b00      	cmp	r3, #0
 800316c:	bfb8      	it	lt
 800316e:	18e4      	addlt	r4, r4, r3
 8003170:	f000 f8d2 	bl	8003318 <__malloc_lock>
 8003174:	4a1f      	ldr	r2, [pc, #124]	; (80031f4 <_free_r+0x98>)
 8003176:	6813      	ldr	r3, [r2, #0]
 8003178:	4610      	mov	r0, r2
 800317a:	b933      	cbnz	r3, 800318a <_free_r+0x2e>
 800317c:	6063      	str	r3, [r4, #4]
 800317e:	6014      	str	r4, [r2, #0]
 8003180:	4628      	mov	r0, r5
 8003182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003186:	f000 b8c8 	b.w	800331a <__malloc_unlock>
 800318a:	42a3      	cmp	r3, r4
 800318c:	d90c      	bls.n	80031a8 <_free_r+0x4c>
 800318e:	6821      	ldr	r1, [r4, #0]
 8003190:	1862      	adds	r2, r4, r1
 8003192:	4293      	cmp	r3, r2
 8003194:	bf04      	itt	eq
 8003196:	681a      	ldreq	r2, [r3, #0]
 8003198:	685b      	ldreq	r3, [r3, #4]
 800319a:	6063      	str	r3, [r4, #4]
 800319c:	bf04      	itt	eq
 800319e:	1852      	addeq	r2, r2, r1
 80031a0:	6022      	streq	r2, [r4, #0]
 80031a2:	6004      	str	r4, [r0, #0]
 80031a4:	e7ec      	b.n	8003180 <_free_r+0x24>
 80031a6:	4613      	mov	r3, r2
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	b10a      	cbz	r2, 80031b0 <_free_r+0x54>
 80031ac:	42a2      	cmp	r2, r4
 80031ae:	d9fa      	bls.n	80031a6 <_free_r+0x4a>
 80031b0:	6819      	ldr	r1, [r3, #0]
 80031b2:	1858      	adds	r0, r3, r1
 80031b4:	42a0      	cmp	r0, r4
 80031b6:	d10b      	bne.n	80031d0 <_free_r+0x74>
 80031b8:	6820      	ldr	r0, [r4, #0]
 80031ba:	4401      	add	r1, r0
 80031bc:	1858      	adds	r0, r3, r1
 80031be:	4282      	cmp	r2, r0
 80031c0:	6019      	str	r1, [r3, #0]
 80031c2:	d1dd      	bne.n	8003180 <_free_r+0x24>
 80031c4:	6810      	ldr	r0, [r2, #0]
 80031c6:	6852      	ldr	r2, [r2, #4]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	4401      	add	r1, r0
 80031cc:	6019      	str	r1, [r3, #0]
 80031ce:	e7d7      	b.n	8003180 <_free_r+0x24>
 80031d0:	d902      	bls.n	80031d8 <_free_r+0x7c>
 80031d2:	230c      	movs	r3, #12
 80031d4:	602b      	str	r3, [r5, #0]
 80031d6:	e7d3      	b.n	8003180 <_free_r+0x24>
 80031d8:	6820      	ldr	r0, [r4, #0]
 80031da:	1821      	adds	r1, r4, r0
 80031dc:	428a      	cmp	r2, r1
 80031de:	bf04      	itt	eq
 80031e0:	6811      	ldreq	r1, [r2, #0]
 80031e2:	6852      	ldreq	r2, [r2, #4]
 80031e4:	6062      	str	r2, [r4, #4]
 80031e6:	bf04      	itt	eq
 80031e8:	1809      	addeq	r1, r1, r0
 80031ea:	6021      	streq	r1, [r4, #0]
 80031ec:	605c      	str	r4, [r3, #4]
 80031ee:	e7c7      	b.n	8003180 <_free_r+0x24>
 80031f0:	bd38      	pop	{r3, r4, r5, pc}
 80031f2:	bf00      	nop
 80031f4:	20000094 	.word	0x20000094

080031f8 <_malloc_r>:
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	1ccd      	adds	r5, r1, #3
 80031fc:	f025 0503 	bic.w	r5, r5, #3
 8003200:	3508      	adds	r5, #8
 8003202:	2d0c      	cmp	r5, #12
 8003204:	bf38      	it	cc
 8003206:	250c      	movcc	r5, #12
 8003208:	2d00      	cmp	r5, #0
 800320a:	4606      	mov	r6, r0
 800320c:	db01      	blt.n	8003212 <_malloc_r+0x1a>
 800320e:	42a9      	cmp	r1, r5
 8003210:	d903      	bls.n	800321a <_malloc_r+0x22>
 8003212:	230c      	movs	r3, #12
 8003214:	6033      	str	r3, [r6, #0]
 8003216:	2000      	movs	r0, #0
 8003218:	bd70      	pop	{r4, r5, r6, pc}
 800321a:	f000 f87d 	bl	8003318 <__malloc_lock>
 800321e:	4a21      	ldr	r2, [pc, #132]	; (80032a4 <_malloc_r+0xac>)
 8003220:	6814      	ldr	r4, [r2, #0]
 8003222:	4621      	mov	r1, r4
 8003224:	b991      	cbnz	r1, 800324c <_malloc_r+0x54>
 8003226:	4c20      	ldr	r4, [pc, #128]	; (80032a8 <_malloc_r+0xb0>)
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	b91b      	cbnz	r3, 8003234 <_malloc_r+0x3c>
 800322c:	4630      	mov	r0, r6
 800322e:	f000 f863 	bl	80032f8 <_sbrk_r>
 8003232:	6020      	str	r0, [r4, #0]
 8003234:	4629      	mov	r1, r5
 8003236:	4630      	mov	r0, r6
 8003238:	f000 f85e 	bl	80032f8 <_sbrk_r>
 800323c:	1c43      	adds	r3, r0, #1
 800323e:	d124      	bne.n	800328a <_malloc_r+0x92>
 8003240:	230c      	movs	r3, #12
 8003242:	6033      	str	r3, [r6, #0]
 8003244:	4630      	mov	r0, r6
 8003246:	f000 f868 	bl	800331a <__malloc_unlock>
 800324a:	e7e4      	b.n	8003216 <_malloc_r+0x1e>
 800324c:	680b      	ldr	r3, [r1, #0]
 800324e:	1b5b      	subs	r3, r3, r5
 8003250:	d418      	bmi.n	8003284 <_malloc_r+0x8c>
 8003252:	2b0b      	cmp	r3, #11
 8003254:	d90f      	bls.n	8003276 <_malloc_r+0x7e>
 8003256:	600b      	str	r3, [r1, #0]
 8003258:	50cd      	str	r5, [r1, r3]
 800325a:	18cc      	adds	r4, r1, r3
 800325c:	4630      	mov	r0, r6
 800325e:	f000 f85c 	bl	800331a <__malloc_unlock>
 8003262:	f104 000b 	add.w	r0, r4, #11
 8003266:	1d23      	adds	r3, r4, #4
 8003268:	f020 0007 	bic.w	r0, r0, #7
 800326c:	1ac3      	subs	r3, r0, r3
 800326e:	d0d3      	beq.n	8003218 <_malloc_r+0x20>
 8003270:	425a      	negs	r2, r3
 8003272:	50e2      	str	r2, [r4, r3]
 8003274:	e7d0      	b.n	8003218 <_malloc_r+0x20>
 8003276:	428c      	cmp	r4, r1
 8003278:	684b      	ldr	r3, [r1, #4]
 800327a:	bf16      	itet	ne
 800327c:	6063      	strne	r3, [r4, #4]
 800327e:	6013      	streq	r3, [r2, #0]
 8003280:	460c      	movne	r4, r1
 8003282:	e7eb      	b.n	800325c <_malloc_r+0x64>
 8003284:	460c      	mov	r4, r1
 8003286:	6849      	ldr	r1, [r1, #4]
 8003288:	e7cc      	b.n	8003224 <_malloc_r+0x2c>
 800328a:	1cc4      	adds	r4, r0, #3
 800328c:	f024 0403 	bic.w	r4, r4, #3
 8003290:	42a0      	cmp	r0, r4
 8003292:	d005      	beq.n	80032a0 <_malloc_r+0xa8>
 8003294:	1a21      	subs	r1, r4, r0
 8003296:	4630      	mov	r0, r6
 8003298:	f000 f82e 	bl	80032f8 <_sbrk_r>
 800329c:	3001      	adds	r0, #1
 800329e:	d0cf      	beq.n	8003240 <_malloc_r+0x48>
 80032a0:	6025      	str	r5, [r4, #0]
 80032a2:	e7db      	b.n	800325c <_malloc_r+0x64>
 80032a4:	20000094 	.word	0x20000094
 80032a8:	20000098 	.word	0x20000098

080032ac <_realloc_r>:
 80032ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ae:	4607      	mov	r7, r0
 80032b0:	4614      	mov	r4, r2
 80032b2:	460e      	mov	r6, r1
 80032b4:	b921      	cbnz	r1, 80032c0 <_realloc_r+0x14>
 80032b6:	4611      	mov	r1, r2
 80032b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80032bc:	f7ff bf9c 	b.w	80031f8 <_malloc_r>
 80032c0:	b922      	cbnz	r2, 80032cc <_realloc_r+0x20>
 80032c2:	f7ff ff4b 	bl	800315c <_free_r>
 80032c6:	4625      	mov	r5, r4
 80032c8:	4628      	mov	r0, r5
 80032ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032cc:	f000 f826 	bl	800331c <_malloc_usable_size_r>
 80032d0:	42a0      	cmp	r0, r4
 80032d2:	d20f      	bcs.n	80032f4 <_realloc_r+0x48>
 80032d4:	4621      	mov	r1, r4
 80032d6:	4638      	mov	r0, r7
 80032d8:	f7ff ff8e 	bl	80031f8 <_malloc_r>
 80032dc:	4605      	mov	r5, r0
 80032de:	2800      	cmp	r0, #0
 80032e0:	d0f2      	beq.n	80032c8 <_realloc_r+0x1c>
 80032e2:	4631      	mov	r1, r6
 80032e4:	4622      	mov	r2, r4
 80032e6:	f7ff ff15 	bl	8003114 <memcpy>
 80032ea:	4631      	mov	r1, r6
 80032ec:	4638      	mov	r0, r7
 80032ee:	f7ff ff35 	bl	800315c <_free_r>
 80032f2:	e7e9      	b.n	80032c8 <_realloc_r+0x1c>
 80032f4:	4635      	mov	r5, r6
 80032f6:	e7e7      	b.n	80032c8 <_realloc_r+0x1c>

080032f8 <_sbrk_r>:
 80032f8:	b538      	push	{r3, r4, r5, lr}
 80032fa:	4c06      	ldr	r4, [pc, #24]	; (8003314 <_sbrk_r+0x1c>)
 80032fc:	2300      	movs	r3, #0
 80032fe:	4605      	mov	r5, r0
 8003300:	4608      	mov	r0, r1
 8003302:	6023      	str	r3, [r4, #0]
 8003304:	f7fd fb7c 	bl	8000a00 <_sbrk>
 8003308:	1c43      	adds	r3, r0, #1
 800330a:	d102      	bne.n	8003312 <_sbrk_r+0x1a>
 800330c:	6823      	ldr	r3, [r4, #0]
 800330e:	b103      	cbz	r3, 8003312 <_sbrk_r+0x1a>
 8003310:	602b      	str	r3, [r5, #0]
 8003312:	bd38      	pop	{r3, r4, r5, pc}
 8003314:	2000015c 	.word	0x2000015c

08003318 <__malloc_lock>:
 8003318:	4770      	bx	lr

0800331a <__malloc_unlock>:
 800331a:	4770      	bx	lr

0800331c <_malloc_usable_size_r>:
 800331c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003320:	1f18      	subs	r0, r3, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	bfbc      	itt	lt
 8003326:	580b      	ldrlt	r3, [r1, r0]
 8003328:	18c0      	addlt	r0, r0, r3
 800332a:	4770      	bx	lr

0800332c <_init>:
 800332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332e:	bf00      	nop
 8003330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003332:	bc08      	pop	{r3}
 8003334:	469e      	mov	lr, r3
 8003336:	4770      	bx	lr

08003338 <_fini>:
 8003338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333a:	bf00      	nop
 800333c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333e:	bc08      	pop	{r3}
 8003340:	469e      	mov	lr, r3
 8003342:	4770      	bx	lr
