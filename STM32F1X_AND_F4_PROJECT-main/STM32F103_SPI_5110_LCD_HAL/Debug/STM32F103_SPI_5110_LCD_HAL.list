
STM32F103_SPI_5110_LCD_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bfc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08002d08  08002d08  00012d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fc0  08002fc0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002fc0  08002fc0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fc0  08002fc0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fc0  08002fc0  00012fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fc4  08002fc4  00012fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000010  08002fd8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08002fd8  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ff6  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001792  00000000  00000000  0002802f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000758  00000000  00000000  000297c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00016b79  00000000  00000000  00029f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00006d67  00000000  00000000  00040a99  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00080ab1  00000000  00000000  00047800  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000c82b1  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00000688  00000000  00000000  000c8330  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00001be4  00000000  00000000  000c89b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cf0 	.word	0x08002cf0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002cf0 	.word	0x08002cf0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_SPI_TxCpltCallback>:

uint8_t FrameBuffer[N5110_PIXEL];
static const uint8_t *CurrentFont = SmallFont;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi->Instance == SPI2)
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a08      	ldr	r2, [pc, #32]	; (800018c <HAL_SPI_TxCpltCallback+0x30>)
 800016a:	4293      	cmp	r3, r2
 800016c:	d10a      	bne.n	8000184 <HAL_SPI_TxCpltCallback+0x28>
  {
    SPI_Deselect();
 800016e:	2201      	movs	r2, #1
 8000170:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000174:	4806      	ldr	r0, [pc, #24]	; (8000190 <HAL_SPI_TxCpltCallback+0x34>)
 8000176:	f001 fdec 	bl	8001d52 <HAL_GPIO_WritePin>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800017a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800017e:	4805      	ldr	r0, [pc, #20]	; (8000194 <HAL_SPI_TxCpltCallback+0x38>)
 8000180:	f001 fdff 	bl	8001d82 <HAL_GPIO_TogglePin>
  }
}
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	40003800 	.word	0x40003800
 8000190:	40010800 	.word	0x40010800
 8000194:	40011000 	.word	0x40011000

08000198 <N5110_Write>:


static bool N5110_Write(uint8_t data, uint8_t mode)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	4603      	mov	r3, r0
 80001a0:	460a      	mov	r2, r1
 80001a2:	71fb      	strb	r3, [r7, #7]
 80001a4:	4613      	mov	r3, r2
 80001a6:	71bb      	strb	r3, [r7, #6]
  SPI_Select();
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ae:	4815      	ldr	r0, [pc, #84]	; (8000204 <N5110_Write+0x6c>)
 80001b0:	f001 fdcf 	bl	8001d52 <HAL_GPIO_WritePin>

  if(mode == N5110_CMD)
 80001b4:	79bb      	ldrb	r3, [r7, #6]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d106      	bne.n	80001c8 <N5110_Write+0x30>
  {
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80001ba:	2200      	movs	r2, #0
 80001bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001c0:	4810      	ldr	r0, [pc, #64]	; (8000204 <N5110_Write+0x6c>)
 80001c2:	f001 fdc6 	bl	8001d52 <HAL_GPIO_WritePin>
 80001c6:	e011      	b.n	80001ec <N5110_Write+0x54>
  }
  else if(mode == N5110_DATA)
 80001c8:	79bb      	ldrb	r3, [r7, #6]
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	d106      	bne.n	80001dc <N5110_Write+0x44>
  {
    HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 80001ce:	2201      	movs	r2, #1
 80001d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001d4:	480b      	ldr	r0, [pc, #44]	; (8000204 <N5110_Write+0x6c>)
 80001d6:	f001 fdbc 	bl	8001d52 <HAL_GPIO_WritePin>
 80001da:	e007      	b.n	80001ec <N5110_Write+0x54>
  }
  else
  {
    SPI_Deselect();
 80001dc:	2201      	movs	r2, #1
 80001de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001e2:	4808      	ldr	r0, [pc, #32]	; (8000204 <N5110_Write+0x6c>)
 80001e4:	f001 fdb5 	bl	8001d52 <HAL_GPIO_WritePin>
    return false;
 80001e8:	2300      	movs	r3, #0
 80001ea:	e006      	b.n	80001fa <N5110_Write+0x62>
  }

  HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
 80001ec:	1dfb      	adds	r3, r7, #7
 80001ee:	2201      	movs	r2, #1
 80001f0:	4619      	mov	r1, r3
 80001f2:	4805      	ldr	r0, [pc, #20]	; (8000208 <N5110_Write+0x70>)
 80001f4:	f002 fa64 	bl	80026c0 <HAL_SPI_Transmit_DMA>
  //HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
  //SPI_Deselect();

  return true;
 80001f8:	2301      	movs	r3, #1
}
 80001fa:	4618      	mov	r0, r3
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	40010800 	.word	0x40010800
 8000208:	2000022c 	.word	0x2000022c

0800020c <N5110_BufferWrite>:

static bool N5110_BufferWrite(uint8_t *data, uint16_t len)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	460b      	mov	r3, r1
 8000216:	807b      	strh	r3, [r7, #2]
  SPI_Select();
 8000218:	2200      	movs	r2, #0
 800021a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800021e:	480a      	ldr	r0, [pc, #40]	; (8000248 <N5110_BufferWrite+0x3c>)
 8000220:	f001 fd97 	bl	8001d52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 8000224:	2201      	movs	r2, #1
 8000226:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800022a:	4807      	ldr	r0, [pc, #28]	; (8000248 <N5110_BufferWrite+0x3c>)
 800022c:	f001 fd91 	bl	8001d52 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit_DMA(&hspi2, data, len);
 8000230:	887b      	ldrh	r3, [r7, #2]
 8000232:	461a      	mov	r2, r3
 8000234:	6879      	ldr	r1, [r7, #4]
 8000236:	4805      	ldr	r0, [pc, #20]	; (800024c <N5110_BufferWrite+0x40>)
 8000238:	f002 fa42 	bl	80026c0 <HAL_SPI_Transmit_DMA>
  //HAL_SPI_Transmit(&hspi2, data, len, HAL_MAX_DELAY);
  //SPI_Deselect();

  return true;
 800023c:	2301      	movs	r3, #1
}
 800023e:	4618      	mov	r0, r3
 8000240:	3708      	adds	r7, #8
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40010800 	.word	0x40010800
 800024c:	2000022c 	.word	0x2000022c

08000250 <N5110_Init>:

bool N5110_Init()
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  N5110_Reset();
 8000254:	f000 f84c 	bl	80002f0 <N5110_Reset>
  if(!N5110_Write(PCD8544_CMD_FUNCTIONSET | PCD8544_BIT_EXTENDED, N5110_CMD)) return false;
 8000258:	2100      	movs	r1, #0
 800025a:	2021      	movs	r0, #33	; 0x21
 800025c:	f7ff ff9c 	bl	8000198 <N5110_Write>
 8000260:	4603      	mov	r3, r0
 8000262:	f083 0301 	eor.w	r3, r3, #1
 8000266:	b2db      	uxtb	r3, r3
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <N5110_Init+0x20>
 800026c:	2300      	movs	r3, #0
 800026e:	e03c      	b.n	80002ea <N5110_Init+0x9a>
  if(!N5110_Write(PCD8544_CMD_SETVOP | PCD8544_DEFAULT_CONTRAST, N5110_CMD)) return false;
 8000270:	2100      	movs	r1, #0
 8000272:	20c0      	movs	r0, #192	; 0xc0
 8000274:	f7ff ff90 	bl	8000198 <N5110_Write>
 8000278:	4603      	mov	r3, r0
 800027a:	f083 0301 	eor.w	r3, r3, #1
 800027e:	b2db      	uxtb	r3, r3
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <N5110_Init+0x38>
 8000284:	2300      	movs	r3, #0
 8000286:	e030      	b.n	80002ea <N5110_Init+0x9a>
  if(!N5110_Write(PCD8544_CMD_SETTEMP | PCD8544_DEFAULT_TEMP, N5110_CMD)) return false;
 8000288:	2100      	movs	r1, #0
 800028a:	2007      	movs	r0, #7
 800028c:	f7ff ff84 	bl	8000198 <N5110_Write>
 8000290:	4603      	mov	r3, r0
 8000292:	f083 0301 	eor.w	r3, r3, #1
 8000296:	b2db      	uxtb	r3, r3
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <N5110_Init+0x50>
 800029c:	2300      	movs	r3, #0
 800029e:	e024      	b.n	80002ea <N5110_Init+0x9a>
  if(!N5110_Write(PCD8544_CMD_SETBIAS | PCD8544_DEFAULT_BIAS, N5110_CMD)) return false;
 80002a0:	2100      	movs	r1, #0
 80002a2:	2013      	movs	r0, #19
 80002a4:	f7ff ff78 	bl	8000198 <N5110_Write>
 80002a8:	4603      	mov	r3, r0
 80002aa:	f083 0301 	eor.w	r3, r3, #1
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <N5110_Init+0x68>
 80002b4:	2300      	movs	r3, #0
 80002b6:	e018      	b.n	80002ea <N5110_Init+0x9a>
  if(!N5110_Write(PCD8544_CMD_FUNCTIONSET, N5110_CMD)) return false;
 80002b8:	2100      	movs	r1, #0
 80002ba:	2020      	movs	r0, #32
 80002bc:	f7ff ff6c 	bl	8000198 <N5110_Write>
 80002c0:	4603      	mov	r3, r0
 80002c2:	f083 0301 	eor.w	r3, r3, #1
 80002c6:	b2db      	uxtb	r3, r3
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <N5110_Init+0x80>
 80002cc:	2300      	movs	r3, #0
 80002ce:	e00c      	b.n	80002ea <N5110_Init+0x9a>
  if(!N5110_Write(PCD8544_CMD_DISPLAYCONTROL | PCD8544_BIT_DISPLAYNORMAL, N5110_CMD)) return false;
 80002d0:	2100      	movs	r1, #0
 80002d2:	200c      	movs	r0, #12
 80002d4:	f7ff ff60 	bl	8000198 <N5110_Write>
 80002d8:	4603      	mov	r3, r0
 80002da:	f083 0301 	eor.w	r3, r3, #1
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d001      	beq.n	80002e8 <N5110_Init+0x98>
 80002e4:	2300      	movs	r3, #0
 80002e6:	e000      	b.n	80002ea <N5110_Init+0x9a>

  return true;
 80002e8:	2301      	movs	r3, #1
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <N5110_Reset>:

void N5110_Reset()
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002fa:	4807      	ldr	r0, [pc, #28]	; (8000318 <N5110_Reset+0x28>)
 80002fc:	f001 fd29 	bl	8001d52 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000300:	2064      	movs	r0, #100	; 0x64
 8000302:	f001 f821 	bl	8001348 <HAL_Delay>
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000306:	2201      	movs	r2, #1
 8000308:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800030c:	4802      	ldr	r0, [pc, #8]	; (8000318 <N5110_Reset+0x28>)
 800030e:	f001 fd20 	bl	8001d52 <HAL_GPIO_WritePin>
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40010800 	.word	0x40010800

0800031c <N5110_Update>:

  return true;
}

bool N5110_Update()
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* Move to (0,0) position */
  if(!N5110_Write(PCD8544_CMD_SETXADDR, N5110_CMD)) return false;
 8000320:	2100      	movs	r1, #0
 8000322:	2080      	movs	r0, #128	; 0x80
 8000324:	f7ff ff38 	bl	8000198 <N5110_Write>
 8000328:	4603      	mov	r3, r0
 800032a:	f083 0301 	eor.w	r3, r3, #1
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <N5110_Update+0x1c>
 8000334:	2300      	movs	r3, #0
 8000336:	e01c      	b.n	8000372 <N5110_Update+0x56>
  if(!N5110_Write(PCD8544_CMD_SETYADDR, N5110_CMD)) return false;
 8000338:	2100      	movs	r1, #0
 800033a:	2040      	movs	r0, #64	; 0x40
 800033c:	f7ff ff2c 	bl	8000198 <N5110_Write>
 8000340:	4603      	mov	r3, r0
 8000342:	f083 0301 	eor.w	r3, r3, #1
 8000346:	b2db      	uxtb	r3, r3
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <N5110_Update+0x34>
 800034c:	2300      	movs	r3, #0
 800034e:	e010      	b.n	8000372 <N5110_Update+0x56>

  if(!N5110_BufferWrite(FrameBuffer, N5110_PIXEL)) return false;
 8000350:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000354:	4808      	ldr	r0, [pc, #32]	; (8000378 <N5110_Update+0x5c>)
 8000356:	f7ff ff59 	bl	800020c <N5110_BufferWrite>
 800035a:	4603      	mov	r3, r0
 800035c:	f083 0301 	eor.w	r3, r3, #1
 8000360:	b2db      	uxtb	r3, r3
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <N5110_Update+0x4e>
 8000366:	2300      	movs	r3, #0
 8000368:	e003      	b.n	8000372 <N5110_Update+0x56>
  HAL_Delay(10);
 800036a:	200a      	movs	r0, #10
 800036c:	f000 ffec 	bl	8001348 <HAL_Delay>

  return true;
 8000370:	2301      	movs	r3, #1
}
 8000372:	4618      	mov	r0, r3
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000034 	.word	0x20000034

0800037c <N5110_Clear>:

void N5110_Clear()
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
  for(int i = 0; i < N5110_PIXEL; i++)
 8000382:	2300      	movs	r3, #0
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	e007      	b.n	8000398 <N5110_Clear+0x1c>
  {
    FrameBuffer[i] = 0x00;
 8000388:	4a08      	ldr	r2, [pc, #32]	; (80003ac <N5110_Clear+0x30>)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4413      	add	r3, r2
 800038e:	2200      	movs	r2, #0
 8000390:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < N5110_PIXEL; i++)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	3301      	adds	r3, #1
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800039e:	dbf3      	blt.n	8000388 <N5110_Clear+0xc>
  }
}
 80003a0:	bf00      	nop
 80003a2:	370c      	adds	r7, #12
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	20000034 	.word	0x20000034

080003b0 <N5110_SetPixel>:
    FrameBuffer[i] = 0xFF;
  }
}

void N5110_SetPixel(uint8_t x, uint8_t y, bool set)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
 80003ba:	460b      	mov	r3, r1
 80003bc:	71bb      	strb	r3, [r7, #6]
 80003be:	4613      	mov	r3, r2
 80003c0:	717b      	strb	r3, [r7, #5]
  uint16_t by;
  uint8_t  bi;

  if(x < 0 || x >= N5110_MAX_WIDTH || y < 0 || y >= N5110_MAX_HEIGHT) return;
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	2b53      	cmp	r3, #83	; 0x53
 80003c6:	d83b      	bhi.n	8000440 <N5110_SetPixel+0x90>
 80003c8:	79bb      	ldrb	r3, [r7, #6]
 80003ca:	2b2f      	cmp	r3, #47	; 0x2f
 80003cc:	d838      	bhi.n	8000440 <N5110_SetPixel+0x90>

  by = (y / 8) * N5110_MAX_WIDTH + x;
 80003ce:	79bb      	ldrb	r3, [r7, #6]
 80003d0:	08db      	lsrs	r3, r3, #3
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	461a      	mov	r2, r3
 80003d8:	0052      	lsls	r2, r2, #1
 80003da:	4413      	add	r3, r2
 80003dc:	461a      	mov	r2, r3
 80003de:	00d2      	lsls	r2, r2, #3
 80003e0:	1ad3      	subs	r3, r2, r3
 80003e2:	009b      	lsls	r3, r3, #2
 80003e4:	b29a      	uxth	r2, r3
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	b29b      	uxth	r3, r3
 80003ea:	4413      	add	r3, r2
 80003ec:	81fb      	strh	r3, [r7, #14]
  bi = y % 8;
 80003ee:	79bb      	ldrb	r3, [r7, #6]
 80003f0:	f003 0307 	and.w	r3, r3, #7
 80003f4:	737b      	strb	r3, [r7, #13]

  if(set)
 80003f6:	797b      	ldrb	r3, [r7, #5]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d00f      	beq.n	800041c <N5110_SetPixel+0x6c>
  {
    FrameBuffer[by] |= (1 << bi);
 80003fc:	89fb      	ldrh	r3, [r7, #14]
 80003fe:	4a13      	ldr	r2, [pc, #76]	; (800044c <N5110_SetPixel+0x9c>)
 8000400:	5cd3      	ldrb	r3, [r2, r3]
 8000402:	b25a      	sxtb	r2, r3
 8000404:	7b7b      	ldrb	r3, [r7, #13]
 8000406:	2101      	movs	r1, #1
 8000408:	fa01 f303 	lsl.w	r3, r1, r3
 800040c:	b25b      	sxtb	r3, r3
 800040e:	4313      	orrs	r3, r2
 8000410:	b25a      	sxtb	r2, r3
 8000412:	89fb      	ldrh	r3, [r7, #14]
 8000414:	b2d1      	uxtb	r1, r2
 8000416:	4a0d      	ldr	r2, [pc, #52]	; (800044c <N5110_SetPixel+0x9c>)
 8000418:	54d1      	strb	r1, [r2, r3]
 800041a:	e012      	b.n	8000442 <N5110_SetPixel+0x92>
  }
  else
  {
    FrameBuffer[by] &= ~(1 << bi);
 800041c:	89fb      	ldrh	r3, [r7, #14]
 800041e:	4a0b      	ldr	r2, [pc, #44]	; (800044c <N5110_SetPixel+0x9c>)
 8000420:	5cd3      	ldrb	r3, [r2, r3]
 8000422:	b25a      	sxtb	r2, r3
 8000424:	7b7b      	ldrb	r3, [r7, #13]
 8000426:	2101      	movs	r1, #1
 8000428:	fa01 f303 	lsl.w	r3, r1, r3
 800042c:	b25b      	sxtb	r3, r3
 800042e:	43db      	mvns	r3, r3
 8000430:	b25b      	sxtb	r3, r3
 8000432:	4013      	ands	r3, r2
 8000434:	b25a      	sxtb	r2, r3
 8000436:	89fb      	ldrh	r3, [r7, #14]
 8000438:	b2d1      	uxtb	r1, r2
 800043a:	4a04      	ldr	r2, [pc, #16]	; (800044c <N5110_SetPixel+0x9c>)
 800043c:	54d1      	strb	r1, [r2, r3]
 800043e:	e000      	b.n	8000442 <N5110_SetPixel+0x92>
  if(x < 0 || x >= N5110_MAX_WIDTH || y < 0 || y >= N5110_MAX_HEIGHT) return;
 8000440:	bf00      	nop
  }
}
 8000442:	3714      	adds	r7, #20
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	20000034 	.word	0x20000034

08000450 <N5110_SetFont>:

void N5110_SetFont(const uint8_t * font)
{
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  CurrentFont = font;
 8000458:	4a03      	ldr	r2, [pc, #12]	; (8000468 <N5110_SetFont+0x18>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6013      	str	r3, [r2, #0]
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	20000000 	.word	0x20000000

0800046c <N5110_PrintChar>:

void N5110_PrintChar(uint8_t x, uint8_t y, char ch, bool set)
{
 800046c:	b590      	push	{r4, r7, lr}
 800046e:	b08b      	sub	sp, #44	; 0x2c
 8000470:	af00      	add	r7, sp, #0
 8000472:	4604      	mov	r4, r0
 8000474:	4608      	mov	r0, r1
 8000476:	4611      	mov	r1, r2
 8000478:	461a      	mov	r2, r3
 800047a:	4623      	mov	r3, r4
 800047c:	71fb      	strb	r3, [r7, #7]
 800047e:	4603      	mov	r3, r0
 8000480:	71bb      	strb	r3, [r7, #6]
 8000482:	460b      	mov	r3, r1
 8000484:	717b      	strb	r3, [r7, #5]
 8000486:	4613      	mov	r3, r2
 8000488:	713b      	strb	r3, [r7, #4]
  uint8_t f_width  = CurrentFont[0];
 800048a:	4b83      	ldr	r3, [pc, #524]	; (8000698 <N5110_PrintChar+0x22c>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	73fb      	strb	r3, [r7, #15]
  uint8_t f_height = CurrentFont[1];
 8000492:	4b81      	ldr	r3, [pc, #516]	; (8000698 <N5110_PrintChar+0x22c>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	785b      	ldrb	r3, [r3, #1]
 8000498:	73bb      	strb	r3, [r7, #14]
  uint8_t f_offset = CurrentFont[2];
 800049a:	4b7f      	ldr	r3, [pc, #508]	; (8000698 <N5110_PrintChar+0x22c>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	789b      	ldrb	r3, [r3, #2]
 80004a0:	737b      	strb	r3, [r7, #13]

  if((f_height % 8) == 0)
 80004a2:	7bbb      	ldrb	r3, [r7, #14]
 80004a4:	f003 0307 	and.w	r3, r3, #7
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d17b      	bne.n	80005a6 <N5110_PrintChar+0x13a>
  {
    uint16_t f_index = (ch - f_offset) * (f_width * f_height / 8) + FONT_HEADER_SIZE;
 80004ae:	797a      	ldrb	r2, [r7, #5]
 80004b0:	7b7b      	ldrb	r3, [r7, #13]
 80004b2:	1ad3      	subs	r3, r2, r3
 80004b4:	b29a      	uxth	r2, r3
 80004b6:	7bfb      	ldrb	r3, [r7, #15]
 80004b8:	7bb9      	ldrb	r1, [r7, #14]
 80004ba:	fb01 f303 	mul.w	r3, r1, r3
 80004be:	2b00      	cmp	r3, #0
 80004c0:	da00      	bge.n	80004c4 <N5110_PrintChar+0x58>
 80004c2:	3307      	adds	r3, #7
 80004c4:	10db      	asrs	r3, r3, #3
 80004c6:	b29b      	uxth	r3, r3
 80004c8:	fb03 f302 	mul.w	r3, r3, r2
 80004cc:	b29b      	uxth	r3, r3
 80004ce:	3304      	adds	r3, #4
 80004d0:	817b      	strh	r3, [r7, #10]
    for(int row = 0; row < f_height / 8; row++)
 80004d2:	2300      	movs	r3, #0
 80004d4:	627b      	str	r3, [r7, #36]	; 0x24
 80004d6:	e05e      	b.n	8000596 <N5110_PrintChar+0x12a>
    {
      for(int cx = 0; cx < f_width; cx++)
 80004d8:	2300      	movs	r3, #0
 80004da:	623b      	str	r3, [r7, #32]
 80004dc:	e054      	b.n	8000588 <N5110_PrintChar+0x11c>
      {
        for(int bi = 0; bi < 8; bi++)
 80004de:	2300      	movs	r3, #0
 80004e0:	61fb      	str	r3, [r7, #28]
 80004e2:	e04b      	b.n	800057c <N5110_PrintChar+0x110>
        {
          uint8_t cbyte = CurrentFont[f_index + cx + (row * f_width)];
 80004e4:	4b6c      	ldr	r3, [pc, #432]	; (8000698 <N5110_PrintChar+0x22c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	8979      	ldrh	r1, [r7, #10]
 80004ea:	6a3a      	ldr	r2, [r7, #32]
 80004ec:	4411      	add	r1, r2
 80004ee:	7bfa      	ldrb	r2, [r7, #15]
 80004f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80004f2:	fb00 f202 	mul.w	r2, r0, r2
 80004f6:	440a      	add	r2, r1
 80004f8:	4413      	add	r3, r2
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	727b      	strb	r3, [r7, #9]
          if((cbyte & (1 << bi)) != 0)
 80004fe:	7a7a      	ldrb	r2, [r7, #9]
 8000500:	69fb      	ldr	r3, [r7, #28]
 8000502:	fa42 f303 	asr.w	r3, r2, r3
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	2b00      	cmp	r3, #0
 800050c:	d014      	beq.n	8000538 <N5110_PrintChar+0xcc>
          {
            N5110_SetPixel(x + cx, y + row * 8 + bi, set);
 800050e:	6a3b      	ldr	r3, [r7, #32]
 8000510:	b2da      	uxtb	r2, r3
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	4413      	add	r3, r2
 8000516:	b2d8      	uxtb	r0, r3
 8000518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051a:	b2db      	uxtb	r3, r3
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	b2da      	uxtb	r2, r3
 8000520:	79bb      	ldrb	r3, [r7, #6]
 8000522:	4413      	add	r3, r2
 8000524:	b2da      	uxtb	r2, r3
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	4413      	add	r3, r2
 800052c:	b2db      	uxtb	r3, r3
 800052e:	793a      	ldrb	r2, [r7, #4]
 8000530:	4619      	mov	r1, r3
 8000532:	f7ff ff3d 	bl	80003b0 <N5110_SetPixel>
 8000536:	e01e      	b.n	8000576 <N5110_PrintChar+0x10a>
          }
          else
          {
            N5110_SetPixel(x + cx, y + row * 8 + bi, !set);
 8000538:	6a3b      	ldr	r3, [r7, #32]
 800053a:	b2da      	uxtb	r2, r3
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	4413      	add	r3, r2
 8000540:	b2d8      	uxtb	r0, r3
 8000542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000544:	b2db      	uxtb	r3, r3
 8000546:	00db      	lsls	r3, r3, #3
 8000548:	b2da      	uxtb	r2, r3
 800054a:	79bb      	ldrb	r3, [r7, #6]
 800054c:	4413      	add	r3, r2
 800054e:	b2da      	uxtb	r2, r3
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	4413      	add	r3, r2
 8000556:	b2d9      	uxtb	r1, r3
 8000558:	793b      	ldrb	r3, [r7, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	bf14      	ite	ne
 800055e:	2301      	movne	r3, #1
 8000560:	2300      	moveq	r3, #0
 8000562:	b2db      	uxtb	r3, r3
 8000564:	f083 0301 	eor.w	r3, r3, #1
 8000568:	b2db      	uxtb	r3, r3
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	b2db      	uxtb	r3, r3
 8000570:	461a      	mov	r2, r3
 8000572:	f7ff ff1d 	bl	80003b0 <N5110_SetPixel>
        for(int bi = 0; bi < 8; bi++)
 8000576:	69fb      	ldr	r3, [r7, #28]
 8000578:	3301      	adds	r3, #1
 800057a:	61fb      	str	r3, [r7, #28]
 800057c:	69fb      	ldr	r3, [r7, #28]
 800057e:	2b07      	cmp	r3, #7
 8000580:	ddb0      	ble.n	80004e4 <N5110_PrintChar+0x78>
      for(int cx = 0; cx < f_width; cx++)
 8000582:	6a3b      	ldr	r3, [r7, #32]
 8000584:	3301      	adds	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	6a3a      	ldr	r2, [r7, #32]
 800058c:	429a      	cmp	r2, r3
 800058e:	dba6      	blt.n	80004de <N5110_PrintChar+0x72>
    for(int row = 0; row < f_height / 8; row++)
 8000590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000592:	3301      	adds	r3, #1
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	08db      	lsrs	r3, r3, #3
 800059a:	b2db      	uxtb	r3, r3
 800059c:	461a      	mov	r2, r3
 800059e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a0:	4293      	cmp	r3, r2
 80005a2:	db99      	blt.n	80004d8 <N5110_PrintChar+0x6c>
          cbyte = CurrentFont[f_index];
        }
      }
    }
  }
}
 80005a4:	e073      	b.n	800068e <N5110_PrintChar+0x222>
    uint16_t f_index = (ch - f_offset) * (f_width * f_height / 8) + FONT_HEADER_SIZE;
 80005a6:	797a      	ldrb	r2, [r7, #5]
 80005a8:	7b7b      	ldrb	r3, [r7, #13]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	7bb9      	ldrb	r1, [r7, #14]
 80005b2:	fb01 f303 	mul.w	r3, r1, r3
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	da00      	bge.n	80005bc <N5110_PrintChar+0x150>
 80005ba:	3307      	adds	r3, #7
 80005bc:	10db      	asrs	r3, r3, #3
 80005be:	b29b      	uxth	r3, r3
 80005c0:	fb03 f302 	mul.w	r3, r3, r2
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	3304      	adds	r3, #4
 80005c8:	837b      	strh	r3, [r7, #26]
    uint8_t cbyte = CurrentFont[f_index];
 80005ca:	4b33      	ldr	r3, [pc, #204]	; (8000698 <N5110_PrintChar+0x22c>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	8b7b      	ldrh	r3, [r7, #26]
 80005d0:	4413      	add	r3, r2
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	767b      	strb	r3, [r7, #25]
    int8_t bi = 7;
 80005d6:	2307      	movs	r3, #7
 80005d8:	763b      	strb	r3, [r7, #24]
    for(int cx = 0; cx < f_width; cx++)
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	e052      	b.n	8000686 <N5110_PrintChar+0x21a>
      for(int cy = 0; cy < f_height; cy++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	e048      	b.n	8000678 <N5110_PrintChar+0x20c>
        if((cbyte & (1 << bi)) != 0)
 80005e6:	7e7a      	ldrb	r2, [r7, #25]
 80005e8:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80005ec:	fa42 f303 	asr.w	r3, r2, r3
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d00e      	beq.n	8000616 <N5110_PrintChar+0x1aa>
          N5110_SetPixel(x+cx, y+cy, set);
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	4413      	add	r3, r2
 8000600:	b2d8      	uxtb	r0, r3
 8000602:	693b      	ldr	r3, [r7, #16]
 8000604:	b2da      	uxtb	r2, r3
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	4413      	add	r3, r2
 800060a:	b2db      	uxtb	r3, r3
 800060c:	793a      	ldrb	r2, [r7, #4]
 800060e:	4619      	mov	r1, r3
 8000610:	f7ff fece 	bl	80003b0 <N5110_SetPixel>
 8000614:	e018      	b.n	8000648 <N5110_PrintChar+0x1dc>
          N5110_SetPixel(x+cx, y+cy, !set);
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4413      	add	r3, r2
 800061e:	b2d8      	uxtb	r0, r3
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	b2da      	uxtb	r2, r3
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	4413      	add	r3, r2
 8000628:	b2d9      	uxtb	r1, r3
 800062a:	793b      	ldrb	r3, [r7, #4]
 800062c:	2b00      	cmp	r3, #0
 800062e:	bf14      	ite	ne
 8000630:	2301      	movne	r3, #1
 8000632:	2300      	moveq	r3, #0
 8000634:	b2db      	uxtb	r3, r3
 8000636:	f083 0301 	eor.w	r3, r3, #1
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	b2db      	uxtb	r3, r3
 8000642:	461a      	mov	r2, r3
 8000644:	f7ff feb4 	bl	80003b0 <N5110_SetPixel>
        bi--;
 8000648:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	3b01      	subs	r3, #1
 8000650:	b2db      	uxtb	r3, r3
 8000652:	763b      	strb	r3, [r7, #24]
        if(bi < 0)
 8000654:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8000658:	2b00      	cmp	r3, #0
 800065a:	da0a      	bge.n	8000672 <N5110_PrintChar+0x206>
          bi = 7;
 800065c:	2307      	movs	r3, #7
 800065e:	763b      	strb	r3, [r7, #24]
          f_index++;
 8000660:	8b7b      	ldrh	r3, [r7, #26]
 8000662:	3301      	adds	r3, #1
 8000664:	837b      	strh	r3, [r7, #26]
          cbyte = CurrentFont[f_index];
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <N5110_PrintChar+0x22c>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	8b7b      	ldrh	r3, [r7, #26]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	767b      	strb	r3, [r7, #25]
      for(int cy = 0; cy < f_height; cy++)
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	3301      	adds	r3, #1
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	7bbb      	ldrb	r3, [r7, #14]
 800067a:	693a      	ldr	r2, [r7, #16]
 800067c:	429a      	cmp	r2, r3
 800067e:	dbb2      	blt.n	80005e6 <N5110_PrintChar+0x17a>
    for(int cx = 0; cx < f_width; cx++)
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	3301      	adds	r3, #1
 8000684:	617b      	str	r3, [r7, #20]
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	697a      	ldr	r2, [r7, #20]
 800068a:	429a      	cmp	r2, r3
 800068c:	dba8      	blt.n	80005e0 <N5110_PrintChar+0x174>
}
 800068e:	bf00      	nop
 8000690:	372c      	adds	r7, #44	; 0x2c
 8000692:	46bd      	mov	sp, r7
 8000694:	bd90      	pop	{r4, r7, pc}
 8000696:	bf00      	nop
 8000698:	20000000 	.word	0x20000000

0800069c <N5110_PrintStr>:

void N5110_PrintStr(uint8_t x, uint8_t y, char *str, bool set)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	603a      	str	r2, [r7, #0]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
 80006aa:	460b      	mov	r3, r1
 80006ac:	71bb      	strb	r3, [r7, #6]
 80006ae:	4613      	mov	r3, r2
 80006b0:	717b      	strb	r3, [r7, #5]
  uint8_t f_width  = CurrentFont[0];
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <N5110_PrintStr+0x68>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	72fb      	strb	r3, [r7, #11]
  uint8_t length = strlen(str);
 80006ba:	6838      	ldr	r0, [r7, #0]
 80006bc:	f7ff fd46 	bl	800014c <strlen>
 80006c0:	4603      	mov	r3, r0
 80006c2:	72bb      	strb	r3, [r7, #10]

  for(int i = 0; i < length; i++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e013      	b.n	80006f2 <N5110_PrintStr+0x56>
  {
    N5110_PrintChar(x + (i * f_width), y, *str++, set);
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	7afa      	ldrb	r2, [r7, #11]
 80006d0:	fb02 f303 	mul.w	r3, r2, r3
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	4413      	add	r3, r2
 80006da:	b2d8      	uxtb	r0, r3
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	603a      	str	r2, [r7, #0]
 80006e2:	781a      	ldrb	r2, [r3, #0]
 80006e4:	797b      	ldrb	r3, [r7, #5]
 80006e6:	79b9      	ldrb	r1, [r7, #6]
 80006e8:	f7ff fec0 	bl	800046c <N5110_PrintChar>
  for(int i = 0; i < length; i++)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3301      	adds	r3, #1
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	7abb      	ldrb	r3, [r7, #10]
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	dbe7      	blt.n	80006ca <N5110_PrintStr+0x2e>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000000 	.word	0x20000000

08000708 <N5110_DrawHLine>:

void N5110_DrawHLine(uint8_t x, uint8_t y, uint8_t length, bool set)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	4604      	mov	r4, r0
 8000710:	4608      	mov	r0, r1
 8000712:	4611      	mov	r1, r2
 8000714:	461a      	mov	r2, r3
 8000716:	4623      	mov	r3, r4
 8000718:	71fb      	strb	r3, [r7, #7]
 800071a:	4603      	mov	r3, r0
 800071c:	71bb      	strb	r3, [r7, #6]
 800071e:	460b      	mov	r3, r1
 8000720:	717b      	strb	r3, [r7, #5]
 8000722:	4613      	mov	r3, r2
 8000724:	713b      	strb	r3, [r7, #4]
  for(int cx = 0; cx < length; cx++)
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	e00c      	b.n	8000746 <N5110_DrawHLine+0x3e>
  {
    N5110_SetPixel(x+cx, y, set);
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	b2da      	uxtb	r2, r3
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	4413      	add	r3, r2
 8000734:	b2db      	uxtb	r3, r3
 8000736:	793a      	ldrb	r2, [r7, #4]
 8000738:	79b9      	ldrb	r1, [r7, #6]
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fe38 	bl	80003b0 <N5110_SetPixel>
  for(int cx = 0; cx < length; cx++)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	3301      	adds	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	797b      	ldrb	r3, [r7, #5]
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	429a      	cmp	r2, r3
 800074c:	dbee      	blt.n	800072c <N5110_DrawHLine+0x24>
  }
}
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	bd90      	pop	{r4, r7, pc}

08000756 <N5110_DrawVLine>:

void N5110_DrawVLine(uint8_t x, uint8_t y, uint8_t length, bool set)
{
 8000756:	b590      	push	{r4, r7, lr}
 8000758:	b085      	sub	sp, #20
 800075a:	af00      	add	r7, sp, #0
 800075c:	4604      	mov	r4, r0
 800075e:	4608      	mov	r0, r1
 8000760:	4611      	mov	r1, r2
 8000762:	461a      	mov	r2, r3
 8000764:	4623      	mov	r3, r4
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	4603      	mov	r3, r0
 800076a:	71bb      	strb	r3, [r7, #6]
 800076c:	460b      	mov	r3, r1
 800076e:	717b      	strb	r3, [r7, #5]
 8000770:	4613      	mov	r3, r2
 8000772:	713b      	strb	r3, [r7, #4]
  for(int cy = 0; cy < length; cy++)
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	e00c      	b.n	8000794 <N5110_DrawVLine+0x3e>
  {
    N5110_SetPixel(x, y+cy, set);
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	79bb      	ldrb	r3, [r7, #6]
 8000780:	4413      	add	r3, r2
 8000782:	b2d9      	uxtb	r1, r3
 8000784:	793a      	ldrb	r2, [r7, #4]
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fe11 	bl	80003b0 <N5110_SetPixel>
  for(int cy = 0; cy < length; cy++)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	3301      	adds	r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	797b      	ldrb	r3, [r7, #5]
 8000796:	68fa      	ldr	r2, [r7, #12]
 8000798:	429a      	cmp	r2, r3
 800079a:	dbee      	blt.n	800077a <N5110_DrawVLine+0x24>
  }
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd90      	pop	{r4, r7, pc}

080007a4 <baslangic>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void baslangic(){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	  N5110_Clear();
 80007a8:	f7ff fde8 	bl	800037c <N5110_Clear>
	  N5110_SetFont(SmallFont);
 80007ac:	4809      	ldr	r0, [pc, #36]	; (80007d4 <baslangic+0x30>)
 80007ae:	f7ff fe4f 	bl	8000450 <N5110_SetFont>
	  N5110_PrintStr(3, 5, "LED MENU 1", true);
 80007b2:	2301      	movs	r3, #1
 80007b4:	4a08      	ldr	r2, [pc, #32]	; (80007d8 <baslangic+0x34>)
 80007b6:	2105      	movs	r1, #5
 80007b8:	2003      	movs	r0, #3
 80007ba:	f7ff ff6f 	bl	800069c <N5110_PrintStr>
	  N5110_SetFont(SmallFont);
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <baslangic+0x30>)
 80007c0:	f7ff fe46 	bl	8000450 <N5110_SetFont>
	  N5110_PrintStr(3, 21, "LED MENU 2", true);
 80007c4:	2301      	movs	r3, #1
 80007c6:	4a05      	ldr	r2, [pc, #20]	; (80007dc <baslangic+0x38>)
 80007c8:	2115      	movs	r1, #21
 80007ca:	2003      	movs	r0, #3
 80007cc:	f7ff ff66 	bl	800069c <N5110_PrintStr>
	  /*N5110_SetFont(SmallFont);
	  N5110_PrintStr(3, 37, "LED 3 AC!", true);*/
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	08002d70 	.word	0x08002d70
 80007d8:	08002d08 	.word	0x08002d08
 80007dc:	08002d14 	.word	0x08002d14

080007e0 <HAL_GPIO_EXTI_Callback>:
void backmenu(){
	  N5110_Clear();
	  baslangic();
	  N5110_Update();
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	80fb      	strh	r3, [r7, #6]
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)){
 80007ea:	2104      	movs	r1, #4
 80007ec:	4868      	ldr	r0, [pc, #416]	; (8000990 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80007ee:	f001 fa99 	bl	8001d24 <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d028      	beq.n	800084a <HAL_GPIO_EXTI_Callback+0x6a>
		if(menu_sec == 0)
 80007f8:	4b66      	ldr	r3, [pc, #408]	; (8000994 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d102      	bne.n	8000806 <HAL_GPIO_EXTI_Callback+0x26>
			menu_say = 1;
 8000800:	4b65      	ldr	r3, [pc, #404]	; (8000998 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
		//////////////////////////////////

		if(aq == 2){
 8000806:	4b65      	ldr	r3, [pc, #404]	; (800099c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b02      	cmp	r3, #2
 800080c:	d10c      	bne.n	8000828 <HAL_GPIO_EXTI_Callback+0x48>
			menu_pick1++;
 800080e:	4b64      	ldr	r3, [pc, #400]	; (80009a0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b62      	ldr	r3, [pc, #392]	; (80009a0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000818:	701a      	strb	r2, [r3, #0]
			if(menu_pick1 == 3)
 800081a:	4b61      	ldr	r3, [pc, #388]	; (80009a0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b03      	cmp	r3, #3
 8000820:	d102      	bne.n	8000828 <HAL_GPIO_EXTI_Callback+0x48>
				menu_pick1 = 0;
 8000822:	4b5f      	ldr	r3, [pc, #380]	; (80009a0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
		}
		if(aq == 3){
 8000828:	4b5c      	ldr	r3, [pc, #368]	; (800099c <HAL_GPIO_EXTI_Callback+0x1bc>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b03      	cmp	r3, #3
 800082e:	d10c      	bne.n	800084a <HAL_GPIO_EXTI_Callback+0x6a>
			menu_pick2++;
 8000830:	4b5c      	ldr	r3, [pc, #368]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	3301      	adds	r3, #1
 8000836:	b2da      	uxtb	r2, r3
 8000838:	4b5a      	ldr	r3, [pc, #360]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800083a:	701a      	strb	r2, [r3, #0]
			if(menu_pick2 == 3)
 800083c:	4b59      	ldr	r3, [pc, #356]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b03      	cmp	r3, #3
 8000842:	d102      	bne.n	800084a <HAL_GPIO_EXTI_Callback+0x6a>
			menu_pick2 = 0;
 8000844:	4b57      	ldr	r3, [pc, #348]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
		}
		///////////////////////////////


	}
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1)){
 800084a:	2102      	movs	r1, #2
 800084c:	4850      	ldr	r0, [pc, #320]	; (8000990 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800084e:	f001 fa69 	bl	8001d24 <HAL_GPIO_ReadPin>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d01a      	beq.n	800088e <HAL_GPIO_EXTI_Callback+0xae>
		if(menu_sec == 0){
 8000858:	4b4e      	ldr	r3, [pc, #312]	; (8000994 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d102      	bne.n	8000866 <HAL_GPIO_EXTI_Callback+0x86>
			menu_say = 0;
 8000860:	4b4d      	ldr	r3, [pc, #308]	; (8000998 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
		}

			///////////////////////////

			if(aq == 2){
 8000866:	4b4d      	ldr	r3, [pc, #308]	; (800099c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d105      	bne.n	800087a <HAL_GPIO_EXTI_Callback+0x9a>
				menu_pick1--;
 800086e:	4b4c      	ldr	r3, [pc, #304]	; (80009a0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	3b01      	subs	r3, #1
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b4a      	ldr	r3, [pc, #296]	; (80009a0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000878:	701a      	strb	r2, [r3, #0]
				if(menu_pick1 < 0)
					menu_pick1 = 0;
			}
			if(aq == 3){
 800087a:	4b48      	ldr	r3, [pc, #288]	; (800099c <HAL_GPIO_EXTI_Callback+0x1bc>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b03      	cmp	r3, #3
 8000880:	d105      	bne.n	800088e <HAL_GPIO_EXTI_Callback+0xae>
				menu_pick2--;
 8000882:	4b48      	ldr	r3, [pc, #288]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	3b01      	subs	r3, #1
 8000888:	b2da      	uxtb	r2, r3
 800088a:	4b46      	ldr	r3, [pc, #280]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800088c:	701a      	strb	r2, [r3, #0]
		/////////////////////////////////



	}
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3)){
 800088e:	2108      	movs	r1, #8
 8000890:	483f      	ldr	r0, [pc, #252]	; (8000990 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8000892:	f001 fa47 	bl	8001d24 <HAL_GPIO_ReadPin>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d074      	beq.n	8000986 <HAL_GPIO_EXTI_Callback+0x1a6>

		if(menu_sec == 0)
 800089c:	4b3d      	ldr	r3, [pc, #244]	; (8000994 <HAL_GPIO_EXTI_Callback+0x1b4>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <HAL_GPIO_EXTI_Callback+0xca>
			menu_sec = 1;
 80008a4:	4b3b      	ldr	r3, [pc, #236]	; (8000994 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	701a      	strb	r2, [r3, #0]
		if(menu_say == 0 ){
 80008aa:	4b3b      	ldr	r3, [pc, #236]	; (8000998 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d132      	bne.n	8000918 <HAL_GPIO_EXTI_Callback+0x138>
			led_state++;
 80008b2:	4b3d      	ldr	r3, [pc, #244]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	4b3b      	ldr	r3, [pc, #236]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80008bc:	701a      	strb	r2, [r3, #0]
			if(menu_pick1 == 2){
 80008be:	4b38      	ldr	r3, [pc, #224]	; (80009a0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b02      	cmp	r3, #2
 80008c4:	d105      	bne.n	80008d2 <HAL_GPIO_EXTI_Callback+0xf2>
				menu_sec = 0;
 80008c6:	4b33      	ldr	r3, [pc, #204]	; (8000994 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	701a      	strb	r2, [r3, #0]
			    led_state = 0;
 80008cc:	4b36      	ldr	r3, [pc, #216]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
			}
			if(menu_pick1 == 0)
 80008d2:	4b33      	ldr	r3, [pc, #204]	; (80009a0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d115      	bne.n	8000906 <HAL_GPIO_EXTI_Callback+0x126>
				if(led_state == 2){
 80008da:	4b33      	ldr	r3, [pc, #204]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d111      	bne.n	8000906 <HAL_GPIO_EXTI_Callback+0x126>
					for(int i=0;i<200000;i++);
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	e002      	b.n	80008ee <HAL_GPIO_EXTI_Callback+0x10e>
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	3301      	adds	r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4a2e      	ldr	r2, [pc, #184]	; (80009ac <HAL_GPIO_EXTI_Callback+0x1cc>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	ddf8      	ble.n	80008e8 <HAL_GPIO_EXTI_Callback+0x108>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2140      	movs	r1, #64	; 0x40
 80008fa:	482d      	ldr	r0, [pc, #180]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80008fc:	f001 fa29 	bl	8001d52 <HAL_GPIO_WritePin>
					led_state = 0;
 8000900:	4b29      	ldr	r3, [pc, #164]	; (80009a8 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000902:	2200      	movs	r2, #0
 8000904:	701a      	strb	r2, [r3, #0]
				}

			if(menu_pick1 == 1)
 8000906:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d104      	bne.n	8000918 <HAL_GPIO_EXTI_Callback+0x138>

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2140      	movs	r1, #64	; 0x40
 8000912:	4827      	ldr	r0, [pc, #156]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000914:	f001 fa1d 	bl	8001d52 <HAL_GPIO_WritePin>
		}


		if(menu_say == 1 ){
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b01      	cmp	r3, #1
 800091e:	d132      	bne.n	8000986 <HAL_GPIO_EXTI_Callback+0x1a6>
			led2++;
 8000920:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	b2da      	uxtb	r2, r3
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800092a:	701a      	strb	r2, [r3, #0]
			if(menu_pick2 == 2){
 800092c:	4b1d      	ldr	r3, [pc, #116]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b02      	cmp	r3, #2
 8000932:	d105      	bne.n	8000940 <HAL_GPIO_EXTI_Callback+0x160>
				menu_sec = 0;
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
				led2 = 0;
 800093a:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800093c:	2200      	movs	r2, #0
 800093e:	701a      	strb	r2, [r3, #0]
			}
			if(menu_pick2 == 0)
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d115      	bne.n	8000974 <HAL_GPIO_EXTI_Callback+0x194>
				if(led2 == 2){
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b02      	cmp	r3, #2
 800094e:	d111      	bne.n	8000974 <HAL_GPIO_EXTI_Callback+0x194>
					for(int i=0;i<200000;i++);
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	e002      	b.n	800095c <HAL_GPIO_EXTI_Callback+0x17c>
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	3301      	adds	r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	4a13      	ldr	r2, [pc, #76]	; (80009ac <HAL_GPIO_EXTI_Callback+0x1cc>)
 8000960:	4293      	cmp	r3, r2
 8000962:	ddf8      	ble.n	8000956 <HAL_GPIO_EXTI_Callback+0x176>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 8000964:	2201      	movs	r2, #1
 8000966:	2180      	movs	r1, #128	; 0x80
 8000968:	4811      	ldr	r0, [pc, #68]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x1d0>)
 800096a:	f001 f9f2 	bl	8001d52 <HAL_GPIO_WritePin>
					led2 = 0;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
				}

			if(menu_pick2 == 1)
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d104      	bne.n	8000986 <HAL_GPIO_EXTI_Callback+0x1a6>

				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2180      	movs	r1, #128	; 0x80
 8000980:	480b      	ldr	r0, [pc, #44]	; (80009b0 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8000982:	f001 f9e6 	bl	8001d52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);

		}*/

	}
}
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40010800 	.word	0x40010800
 8000994:	2000002c 	.word	0x2000002c
 8000998:	2000002d 	.word	0x2000002d
 800099c:	20000030 	.word	0x20000030
 80009a0:	2000002e 	.word	0x2000002e
 80009a4:	2000002f 	.word	0x2000002f
 80009a8:	20000031 	.word	0x20000031
 80009ac:	00030d3f 	.word	0x00030d3f
 80009b0:	40010c00 	.word	0x40010c00
 80009b4:	20000032 	.word	0x20000032

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009bc:	f000 fc62 	bl	8001284 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c0:	f000 fa0e 	bl	8000de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c4:	f000 fa9c 	bl	8000f00 <MX_GPIO_Init>
  MX_DMA_Init();
 80009c8:	f000 fa7c 	bl	8000ec4 <MX_DMA_Init>
  MX_SPI2_Init();
 80009cc:	f000 fa44 	bl	8000e58 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  N5110_Init();
 80009d0:	f7ff fc3e 	bl	8000250 <N5110_Init>
  baslangic();
 80009d4:	f7ff fee6 	bl	80007a4 <baslangic>
  N5110_Update();
 80009d8:	f7ff fca0 	bl	800031c <N5110_Update>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(menu_sec == 1){
 80009dc:	4bcd      	ldr	r3, [pc, #820]	; (8000d14 <main+0x35c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	f040 81ad 	bne.w	8000d40 <main+0x388>

		  if(menu_say == 0){
 80009e6:	4bcc      	ldr	r3, [pc, #816]	; (8000d18 <main+0x360>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f040 80c7 	bne.w	8000b7e <main+0x1c6>
			  	  	  	aq = 2;
 80009f0:	4bca      	ldr	r3, [pc, #808]	; (8000d1c <main+0x364>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	701a      	strb	r2, [r3, #0]
			  	  	  	if(menu_pick1 == 0){
 80009f6:	4bca      	ldr	r3, [pc, #808]	; (8000d20 <main+0x368>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d13c      	bne.n	8000a78 <main+0xc0>
				  			N5110_Clear();
 80009fe:	f7ff fcbd 	bl	800037c <N5110_Clear>
					       	N5110_DrawHLine(0, 0, N5110_MAX_WIDTH, true);
 8000a02:	2301      	movs	r3, #1
 8000a04:	2254      	movs	r2, #84	; 0x54
 8000a06:	2100      	movs	r1, #0
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f7ff fe7d 	bl	8000708 <N5110_DrawHLine>
					        N5110_DrawHLine(0, 16, N5110_MAX_WIDTH, true);
 8000a0e:	2301      	movs	r3, #1
 8000a10:	2254      	movs	r2, #84	; 0x54
 8000a12:	2110      	movs	r1, #16
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff fe77 	bl	8000708 <N5110_DrawHLine>
					        N5110_DrawVLine(0, 0, 16, true);
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	2210      	movs	r2, #16
 8000a1e:	2100      	movs	r1, #0
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff fe98 	bl	8000756 <N5110_DrawVLine>
					        N5110_DrawVLine(N5110_MAX_WIDTH-1, 0, 16, true);
 8000a26:	2301      	movs	r3, #1
 8000a28:	2210      	movs	r2, #16
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2053      	movs	r0, #83	; 0x53
 8000a2e:	f7ff fe92 	bl	8000756 <N5110_DrawVLine>
						    N5110_Update();
 8000a32:	f7ff fc73 	bl	800031c <N5110_Update>
				  			N5110_SetFont(SmallFont);
 8000a36:	48bb      	ldr	r0, [pc, #748]	; (8000d24 <main+0x36c>)
 8000a38:	f7ff fd0a 	bl	8000450 <N5110_SetFont>
				  			N5110_PrintStr(3, 5, "LED 1 ON", true);
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	4aba      	ldr	r2, [pc, #744]	; (8000d28 <main+0x370>)
 8000a40:	2105      	movs	r1, #5
 8000a42:	2003      	movs	r0, #3
 8000a44:	f7ff fe2a 	bl	800069c <N5110_PrintStr>
				  			N5110_SetFont(SmallFont);
 8000a48:	48b6      	ldr	r0, [pc, #728]	; (8000d24 <main+0x36c>)
 8000a4a:	f7ff fd01 	bl	8000450 <N5110_SetFont>
				  			N5110_PrintStr(3, 21, "LED 1 OFF", true);
 8000a4e:	2301      	movs	r3, #1
 8000a50:	4ab6      	ldr	r2, [pc, #728]	; (8000d2c <main+0x374>)
 8000a52:	2115      	movs	r1, #21
 8000a54:	2003      	movs	r0, #3
 8000a56:	f7ff fe21 	bl	800069c <N5110_PrintStr>
				  			N5110_SetFont(SmallFont);
 8000a5a:	48b2      	ldr	r0, [pc, #712]	; (8000d24 <main+0x36c>)
 8000a5c:	f7ff fcf8 	bl	8000450 <N5110_SetFont>
				  			N5110_PrintStr(3, 37, "BACK MENU", true);
 8000a60:	2301      	movs	r3, #1
 8000a62:	4ab3      	ldr	r2, [pc, #716]	; (8000d30 <main+0x378>)
 8000a64:	2125      	movs	r1, #37	; 0x25
 8000a66:	2003      	movs	r0, #3
 8000a68:	f7ff fe18 	bl	800069c <N5110_PrintStr>
				  			N5110_Update();
 8000a6c:	f7ff fc56 	bl	800031c <N5110_Update>
				  			HAL_Delay(100);
 8000a70:	2064      	movs	r0, #100	; 0x64
 8000a72:	f000 fc69 	bl	8001348 <HAL_Delay>
 8000a76:	e7b1      	b.n	80009dc <main+0x24>
			  	  	  	}
			  	  	  	else if(menu_pick1 == 1){
 8000a78:	4ba9      	ldr	r3, [pc, #676]	; (8000d20 <main+0x368>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d13c      	bne.n	8000afa <main+0x142>
				  			N5110_Clear();
 8000a80:	f7ff fc7c 	bl	800037c <N5110_Clear>
					        N5110_DrawHLine(0, 16, N5110_MAX_WIDTH, true);
 8000a84:	2301      	movs	r3, #1
 8000a86:	2254      	movs	r2, #84	; 0x54
 8000a88:	2110      	movs	r1, #16
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff fe3c 	bl	8000708 <N5110_DrawHLine>
					        N5110_DrawHLine(0, 32, N5110_MAX_WIDTH, true);
 8000a90:	2301      	movs	r3, #1
 8000a92:	2254      	movs	r2, #84	; 0x54
 8000a94:	2120      	movs	r1, #32
 8000a96:	2000      	movs	r0, #0
 8000a98:	f7ff fe36 	bl	8000708 <N5110_DrawHLine>
					        N5110_DrawVLine(0, 16, 16, true);
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	2210      	movs	r2, #16
 8000aa0:	2110      	movs	r1, #16
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f7ff fe57 	bl	8000756 <N5110_DrawVLine>
					        N5110_DrawVLine(N5110_MAX_WIDTH-1, 16, 16, true);
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	2210      	movs	r2, #16
 8000aac:	2110      	movs	r1, #16
 8000aae:	2053      	movs	r0, #83	; 0x53
 8000ab0:	f7ff fe51 	bl	8000756 <N5110_DrawVLine>
						    N5110_Update();
 8000ab4:	f7ff fc32 	bl	800031c <N5110_Update>
				  			N5110_SetFont(SmallFont);
 8000ab8:	489a      	ldr	r0, [pc, #616]	; (8000d24 <main+0x36c>)
 8000aba:	f7ff fcc9 	bl	8000450 <N5110_SetFont>
				  			N5110_PrintStr(3, 5, "LED 1 ON", true);
 8000abe:	2301      	movs	r3, #1
 8000ac0:	4a99      	ldr	r2, [pc, #612]	; (8000d28 <main+0x370>)
 8000ac2:	2105      	movs	r1, #5
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f7ff fde9 	bl	800069c <N5110_PrintStr>
				  			N5110_SetFont(SmallFont);
 8000aca:	4896      	ldr	r0, [pc, #600]	; (8000d24 <main+0x36c>)
 8000acc:	f7ff fcc0 	bl	8000450 <N5110_SetFont>
				  			N5110_PrintStr(3, 21, "LED 1 OFF", true);
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	4a96      	ldr	r2, [pc, #600]	; (8000d2c <main+0x374>)
 8000ad4:	2115      	movs	r1, #21
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	f7ff fde0 	bl	800069c <N5110_PrintStr>
				  			N5110_SetFont(SmallFont);
 8000adc:	4891      	ldr	r0, [pc, #580]	; (8000d24 <main+0x36c>)
 8000ade:	f7ff fcb7 	bl	8000450 <N5110_SetFont>
				  			N5110_PrintStr(3, 37, "BACK MENU", true);
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	4a92      	ldr	r2, [pc, #584]	; (8000d30 <main+0x378>)
 8000ae6:	2125      	movs	r1, #37	; 0x25
 8000ae8:	2003      	movs	r0, #3
 8000aea:	f7ff fdd7 	bl	800069c <N5110_PrintStr>
				  			N5110_Update();
 8000aee:	f7ff fc15 	bl	800031c <N5110_Update>
				  			HAL_Delay(100);
 8000af2:	2064      	movs	r0, #100	; 0x64
 8000af4:	f000 fc28 	bl	8001348 <HAL_Delay>
 8000af8:	e770      	b.n	80009dc <main+0x24>

			  	  	  	}
			  	  	  	else if(menu_pick1 == 2){
 8000afa:	4b89      	ldr	r3, [pc, #548]	; (8000d20 <main+0x368>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	f47f af6c 	bne.w	80009dc <main+0x24>
				  			N5110_Clear();
 8000b04:	f7ff fc3a 	bl	800037c <N5110_Clear>
	 	       		        N5110_DrawHLine(0, 32, N5110_MAX_WIDTH, true);
 8000b08:	2301      	movs	r3, #1
 8000b0a:	2254      	movs	r2, #84	; 0x54
 8000b0c:	2120      	movs	r1, #32
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f7ff fdfa 	bl	8000708 <N5110_DrawHLine>
	 	       		        N5110_DrawHLine(0, 47, N5110_MAX_WIDTH, true);
 8000b14:	2301      	movs	r3, #1
 8000b16:	2254      	movs	r2, #84	; 0x54
 8000b18:	212f      	movs	r1, #47	; 0x2f
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fdf4 	bl	8000708 <N5110_DrawHLine>
	 	       		        N5110_DrawVLine(0, 32, 16, true);
 8000b20:	2301      	movs	r3, #1
 8000b22:	2210      	movs	r2, #16
 8000b24:	2120      	movs	r1, #32
 8000b26:	2000      	movs	r0, #0
 8000b28:	f7ff fe15 	bl	8000756 <N5110_DrawVLine>
	 	       		        N5110_DrawVLine(N5110_MAX_WIDTH-1, 32, 16, true);
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	2210      	movs	r2, #16
 8000b30:	2120      	movs	r1, #32
 8000b32:	2053      	movs	r0, #83	; 0x53
 8000b34:	f7ff fe0f 	bl	8000756 <N5110_DrawVLine>
						    N5110_Update();
 8000b38:	f7ff fbf0 	bl	800031c <N5110_Update>
				  			N5110_SetFont(SmallFont);
 8000b3c:	4879      	ldr	r0, [pc, #484]	; (8000d24 <main+0x36c>)
 8000b3e:	f7ff fc87 	bl	8000450 <N5110_SetFont>
				  			N5110_PrintStr(3, 5, "LED 1 ON", true);
 8000b42:	2301      	movs	r3, #1
 8000b44:	4a78      	ldr	r2, [pc, #480]	; (8000d28 <main+0x370>)
 8000b46:	2105      	movs	r1, #5
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f7ff fda7 	bl	800069c <N5110_PrintStr>
				  			N5110_SetFont(SmallFont);
 8000b4e:	4875      	ldr	r0, [pc, #468]	; (8000d24 <main+0x36c>)
 8000b50:	f7ff fc7e 	bl	8000450 <N5110_SetFont>
				  			N5110_PrintStr(3, 21, "LED 1 OFF", true);
 8000b54:	2301      	movs	r3, #1
 8000b56:	4a75      	ldr	r2, [pc, #468]	; (8000d2c <main+0x374>)
 8000b58:	2115      	movs	r1, #21
 8000b5a:	2003      	movs	r0, #3
 8000b5c:	f7ff fd9e 	bl	800069c <N5110_PrintStr>
				  			N5110_SetFont(SmallFont);
 8000b60:	4870      	ldr	r0, [pc, #448]	; (8000d24 <main+0x36c>)
 8000b62:	f7ff fc75 	bl	8000450 <N5110_SetFont>
				  			N5110_PrintStr(3, 37, "BACK MENU", true);
 8000b66:	2301      	movs	r3, #1
 8000b68:	4a71      	ldr	r2, [pc, #452]	; (8000d30 <main+0x378>)
 8000b6a:	2125      	movs	r1, #37	; 0x25
 8000b6c:	2003      	movs	r0, #3
 8000b6e:	f7ff fd95 	bl	800069c <N5110_PrintStr>
				  			N5110_Update();
 8000b72:	f7ff fbd3 	bl	800031c <N5110_Update>
				  			HAL_Delay(100);
 8000b76:	2064      	movs	r0, #100	; 0x64
 8000b78:	f000 fbe6 	bl	8001348 <HAL_Delay>
 8000b7c:	e72e      	b.n	80009dc <main+0x24>

			  	  	  	}
			  		}

			  	else if(menu_say == 1)
 8000b7e:	4b66      	ldr	r3, [pc, #408]	; (8000d18 <main+0x360>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	f47f af2a 	bne.w	80009dc <main+0x24>
			  	{
			  	     	aq = 3;
 8000b88:	4b64      	ldr	r3, [pc, #400]	; (8000d1c <main+0x364>)
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	701a      	strb	r2, [r3, #0]
			  	     	if(menu_pick2 == 0){
 8000b8e:	4b69      	ldr	r3, [pc, #420]	; (8000d34 <main+0x37c>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d13b      	bne.n	8000c0e <main+0x256>
			  	  				  			N5110_Clear();
 8000b96:	f7ff fbf1 	bl	800037c <N5110_Clear>
			  	  					       	N5110_DrawHLine(0, 0, N5110_MAX_WIDTH, true);
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	2254      	movs	r2, #84	; 0x54
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2000      	movs	r0, #0
 8000ba2:	f7ff fdb1 	bl	8000708 <N5110_DrawHLine>
			  	  					        N5110_DrawHLine(0, 16, N5110_MAX_WIDTH, true);
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	2254      	movs	r2, #84	; 0x54
 8000baa:	2110      	movs	r1, #16
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff fdab 	bl	8000708 <N5110_DrawHLine>
			  	  					        N5110_DrawVLine(0, 0, 16, true);
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	2210      	movs	r2, #16
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff fdcc 	bl	8000756 <N5110_DrawVLine>
			  	  					        N5110_DrawVLine(N5110_MAX_WIDTH-1, 0, 16, true);
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	2210      	movs	r2, #16
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2053      	movs	r0, #83	; 0x53
 8000bc6:	f7ff fdc6 	bl	8000756 <N5110_DrawVLine>
			  	  						    N5110_Update();
 8000bca:	f7ff fba7 	bl	800031c <N5110_Update>
			  	  				  			N5110_SetFont(SmallFont);
 8000bce:	4855      	ldr	r0, [pc, #340]	; (8000d24 <main+0x36c>)
 8000bd0:	f7ff fc3e 	bl	8000450 <N5110_SetFont>
			  	  				  			N5110_PrintStr(3, 5, "LED 2 ON", true);
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	4a58      	ldr	r2, [pc, #352]	; (8000d38 <main+0x380>)
 8000bd8:	2105      	movs	r1, #5
 8000bda:	2003      	movs	r0, #3
 8000bdc:	f7ff fd5e 	bl	800069c <N5110_PrintStr>
			  	  				  			N5110_SetFont(SmallFont);
 8000be0:	4850      	ldr	r0, [pc, #320]	; (8000d24 <main+0x36c>)
 8000be2:	f7ff fc35 	bl	8000450 <N5110_SetFont>
			  	  				  			N5110_PrintStr(3, 21, "LED 2 OFF", true);
 8000be6:	2301      	movs	r3, #1
 8000be8:	4a54      	ldr	r2, [pc, #336]	; (8000d3c <main+0x384>)
 8000bea:	2115      	movs	r1, #21
 8000bec:	2003      	movs	r0, #3
 8000bee:	f7ff fd55 	bl	800069c <N5110_PrintStr>
			  	  				  			N5110_SetFont(SmallFont);
 8000bf2:	484c      	ldr	r0, [pc, #304]	; (8000d24 <main+0x36c>)
 8000bf4:	f7ff fc2c 	bl	8000450 <N5110_SetFont>
			  	  				  			N5110_PrintStr(3, 37, "BACK MENU", true);
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	4a4d      	ldr	r2, [pc, #308]	; (8000d30 <main+0x378>)
 8000bfc:	2125      	movs	r1, #37	; 0x25
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f7ff fd4c 	bl	800069c <N5110_PrintStr>
			  	  				  			N5110_Update();
 8000c04:	f7ff fb8a 	bl	800031c <N5110_Update>
			  	  				  			HAL_Delay(100);
 8000c08:	2064      	movs	r0, #100	; 0x64
 8000c0a:	f000 fb9d 	bl	8001348 <HAL_Delay>

			  	  			  	  	  	}
			  	  			  	  	  	if(menu_pick2 == 1){
 8000c0e:	4b49      	ldr	r3, [pc, #292]	; (8000d34 <main+0x37c>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d13b      	bne.n	8000c8e <main+0x2d6>
			  	  				  			N5110_Clear();
 8000c16:	f7ff fbb1 	bl	800037c <N5110_Clear>
			  	  					        N5110_DrawHLine(0, 16, N5110_MAX_WIDTH, true);
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	2254      	movs	r2, #84	; 0x54
 8000c1e:	2110      	movs	r1, #16
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff fd71 	bl	8000708 <N5110_DrawHLine>
			  	  					        N5110_DrawHLine(0, 32, N5110_MAX_WIDTH, true);
 8000c26:	2301      	movs	r3, #1
 8000c28:	2254      	movs	r2, #84	; 0x54
 8000c2a:	2120      	movs	r1, #32
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff fd6b 	bl	8000708 <N5110_DrawHLine>
			  	  					        N5110_DrawVLine(0, 16, 16, true);
 8000c32:	2301      	movs	r3, #1
 8000c34:	2210      	movs	r2, #16
 8000c36:	2110      	movs	r1, #16
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f7ff fd8c 	bl	8000756 <N5110_DrawVLine>
			  	  					        N5110_DrawVLine(N5110_MAX_WIDTH-1, 16, 16, true);
 8000c3e:	2301      	movs	r3, #1
 8000c40:	2210      	movs	r2, #16
 8000c42:	2110      	movs	r1, #16
 8000c44:	2053      	movs	r0, #83	; 0x53
 8000c46:	f7ff fd86 	bl	8000756 <N5110_DrawVLine>
			  	  						    N5110_Update();
 8000c4a:	f7ff fb67 	bl	800031c <N5110_Update>
			  	  				  			N5110_SetFont(SmallFont);
 8000c4e:	4835      	ldr	r0, [pc, #212]	; (8000d24 <main+0x36c>)
 8000c50:	f7ff fbfe 	bl	8000450 <N5110_SetFont>
			  	  				  			N5110_PrintStr(3, 5, "LED 2 ON", true);
 8000c54:	2301      	movs	r3, #1
 8000c56:	4a38      	ldr	r2, [pc, #224]	; (8000d38 <main+0x380>)
 8000c58:	2105      	movs	r1, #5
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	f7ff fd1e 	bl	800069c <N5110_PrintStr>
			  	  				  			N5110_SetFont(SmallFont);
 8000c60:	4830      	ldr	r0, [pc, #192]	; (8000d24 <main+0x36c>)
 8000c62:	f7ff fbf5 	bl	8000450 <N5110_SetFont>
			  	  				  			N5110_PrintStr(3, 21, "LED 2 OFF", true);
 8000c66:	2301      	movs	r3, #1
 8000c68:	4a34      	ldr	r2, [pc, #208]	; (8000d3c <main+0x384>)
 8000c6a:	2115      	movs	r1, #21
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f7ff fd15 	bl	800069c <N5110_PrintStr>
			  	  				  			N5110_SetFont(SmallFont);
 8000c72:	482c      	ldr	r0, [pc, #176]	; (8000d24 <main+0x36c>)
 8000c74:	f7ff fbec 	bl	8000450 <N5110_SetFont>
			  	  				  			N5110_PrintStr(3, 37, "BACK MENU", true);
 8000c78:	2301      	movs	r3, #1
 8000c7a:	4a2d      	ldr	r2, [pc, #180]	; (8000d30 <main+0x378>)
 8000c7c:	2125      	movs	r1, #37	; 0x25
 8000c7e:	2003      	movs	r0, #3
 8000c80:	f7ff fd0c 	bl	800069c <N5110_PrintStr>
			  	  				  			N5110_Update();
 8000c84:	f7ff fb4a 	bl	800031c <N5110_Update>
			  	  				  			HAL_Delay(100);
 8000c88:	2064      	movs	r0, #100	; 0x64
 8000c8a:	f000 fb5d 	bl	8001348 <HAL_Delay>

			  	  			  	  	  	}
			  	  			  	  	  	if(menu_pick2 == 2){
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <main+0x37c>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	f47f aea2 	bne.w	80009dc <main+0x24>
			  	  				  			N5110_Clear();
 8000c98:	f7ff fb70 	bl	800037c <N5110_Clear>
			  	  	 	       		        N5110_DrawHLine(0, 32, N5110_MAX_WIDTH, true);
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	2254      	movs	r2, #84	; 0x54
 8000ca0:	2120      	movs	r1, #32
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f7ff fd30 	bl	8000708 <N5110_DrawHLine>
			  	  	 	       		        N5110_DrawHLine(0, 47, N5110_MAX_WIDTH, true);
 8000ca8:	2301      	movs	r3, #1
 8000caa:	2254      	movs	r2, #84	; 0x54
 8000cac:	212f      	movs	r1, #47	; 0x2f
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f7ff fd2a 	bl	8000708 <N5110_DrawHLine>
			  	  	 	       		        N5110_DrawVLine(0, 32, 16, true);
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	2210      	movs	r2, #16
 8000cb8:	2120      	movs	r1, #32
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f7ff fd4b 	bl	8000756 <N5110_DrawVLine>
			  	  	 	       		        N5110_DrawVLine(N5110_MAX_WIDTH-1, 32, 16, true);
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	2210      	movs	r2, #16
 8000cc4:	2120      	movs	r1, #32
 8000cc6:	2053      	movs	r0, #83	; 0x53
 8000cc8:	f7ff fd45 	bl	8000756 <N5110_DrawVLine>
			  	  						    N5110_Update();
 8000ccc:	f7ff fb26 	bl	800031c <N5110_Update>
			  	  				  			N5110_SetFont(SmallFont);
 8000cd0:	4814      	ldr	r0, [pc, #80]	; (8000d24 <main+0x36c>)
 8000cd2:	f7ff fbbd 	bl	8000450 <N5110_SetFont>
			  	  				  			N5110_PrintStr(3, 5, "LED 2 ON", true);
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	4a17      	ldr	r2, [pc, #92]	; (8000d38 <main+0x380>)
 8000cda:	2105      	movs	r1, #5
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f7ff fcdd 	bl	800069c <N5110_PrintStr>
			  	  				  			N5110_SetFont(SmallFont);
 8000ce2:	4810      	ldr	r0, [pc, #64]	; (8000d24 <main+0x36c>)
 8000ce4:	f7ff fbb4 	bl	8000450 <N5110_SetFont>
			  	  				  			N5110_PrintStr(3, 21, "LED 2 OFF", true);
 8000ce8:	2301      	movs	r3, #1
 8000cea:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <main+0x384>)
 8000cec:	2115      	movs	r1, #21
 8000cee:	2003      	movs	r0, #3
 8000cf0:	f7ff fcd4 	bl	800069c <N5110_PrintStr>
			  	  				  			N5110_SetFont(SmallFont);
 8000cf4:	480b      	ldr	r0, [pc, #44]	; (8000d24 <main+0x36c>)
 8000cf6:	f7ff fbab 	bl	8000450 <N5110_SetFont>
			  	  				  			N5110_PrintStr(3, 37, "BACK MENU", true);
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	4a0c      	ldr	r2, [pc, #48]	; (8000d30 <main+0x378>)
 8000cfe:	2125      	movs	r1, #37	; 0x25
 8000d00:	2003      	movs	r0, #3
 8000d02:	f7ff fccb 	bl	800069c <N5110_PrintStr>
			  	  				  			N5110_Update();
 8000d06:	f7ff fb09 	bl	800031c <N5110_Update>
			  	  				  			HAL_Delay(100);
 8000d0a:	2064      	movs	r0, #100	; 0x64
 8000d0c:	f000 fb1c 	bl	8001348 <HAL_Delay>
 8000d10:	e664      	b.n	80009dc <main+0x24>
 8000d12:	bf00      	nop
 8000d14:	2000002c 	.word	0x2000002c
 8000d18:	2000002d 	.word	0x2000002d
 8000d1c:	20000030 	.word	0x20000030
 8000d20:	2000002e 	.word	0x2000002e
 8000d24:	08002d70 	.word	0x08002d70
 8000d28:	08002d20 	.word	0x08002d20
 8000d2c:	08002d2c 	.word	0x08002d2c
 8000d30:	08002d38 	.word	0x08002d38
 8000d34:	2000002f 	.word	0x2000002f
 8000d38:	08002d44 	.word	0x08002d44
 8000d3c:	08002d50 	.word	0x08002d50

			  	  			  	  	  	}
			  	}
	  }
	  else if (menu_sec ==0)
 8000d40:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <main+0x420>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f47f ae49 	bne.w	80009dc <main+0x24>
	  {
		  if(menu_say == 0){
 8000d4a:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <main+0x424>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d11e      	bne.n	8000d90 <main+0x3d8>
				  N5110_Clear();
 8000d52:	f7ff fb13 	bl	800037c <N5110_Clear>
				  baslangic();
 8000d56:	f7ff fd25 	bl	80007a4 <baslangic>
		       	  N5110_DrawHLine(0, 0, N5110_MAX_WIDTH, true);
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	2254      	movs	r2, #84	; 0x54
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff fcd1 	bl	8000708 <N5110_DrawHLine>
		          N5110_DrawHLine(0, 16, N5110_MAX_WIDTH, true);
 8000d66:	2301      	movs	r3, #1
 8000d68:	2254      	movs	r2, #84	; 0x54
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff fccb 	bl	8000708 <N5110_DrawHLine>
		          N5110_DrawVLine(0, 0, 16, true);
 8000d72:	2301      	movs	r3, #1
 8000d74:	2210      	movs	r2, #16
 8000d76:	2100      	movs	r1, #0
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f7ff fcec 	bl	8000756 <N5110_DrawVLine>
		          N5110_DrawVLine(N5110_MAX_WIDTH-1, 0, 16, true);
 8000d7e:	2301      	movs	r3, #1
 8000d80:	2210      	movs	r2, #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	2053      	movs	r0, #83	; 0x53
 8000d86:	f7ff fce6 	bl	8000756 <N5110_DrawVLine>
			      N5110_Update();
 8000d8a:	f7ff fac7 	bl	800031c <N5110_Update>
 8000d8e:	e625      	b.n	80009dc <main+0x24>
		  }
		  else if(menu_say == 1)
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <main+0x424>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	f47f ae21 	bne.w	80009dc <main+0x24>
		  {
					N5110_Clear();
 8000d9a:	f7ff faef 	bl	800037c <N5110_Clear>
					baslangic();
 8000d9e:	f7ff fd01 	bl	80007a4 <baslangic>
			        N5110_DrawHLine(0, 16, N5110_MAX_WIDTH, true);
 8000da2:	2301      	movs	r3, #1
 8000da4:	2254      	movs	r2, #84	; 0x54
 8000da6:	2110      	movs	r1, #16
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff fcad 	bl	8000708 <N5110_DrawHLine>
			        N5110_DrawHLine(0, 32, N5110_MAX_WIDTH, true);
 8000dae:	2301      	movs	r3, #1
 8000db0:	2254      	movs	r2, #84	; 0x54
 8000db2:	2120      	movs	r1, #32
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff fca7 	bl	8000708 <N5110_DrawHLine>
			        N5110_DrawVLine(0, 16, 16, true);
 8000dba:	2301      	movs	r3, #1
 8000dbc:	2210      	movs	r2, #16
 8000dbe:	2110      	movs	r1, #16
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff fcc8 	bl	8000756 <N5110_DrawVLine>
			        N5110_DrawVLine(N5110_MAX_WIDTH-1, 16, 16, true);
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	2210      	movs	r2, #16
 8000dca:	2110      	movs	r1, #16
 8000dcc:	2053      	movs	r0, #83	; 0x53
 8000dce:	f7ff fcc2 	bl	8000756 <N5110_DrawVLine>
			        N5110_Update();
 8000dd2:	f7ff faa3 	bl	800031c <N5110_Update>
	  if(menu_sec == 1){
 8000dd6:	e601      	b.n	80009dc <main+0x24>
 8000dd8:	2000002c 	.word	0x2000002c
 8000ddc:	2000002d 	.word	0x2000002d

08000de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b090      	sub	sp, #64	; 0x40
 8000de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 0318 	add.w	r3, r7, #24
 8000dea:	2228      	movs	r2, #40	; 0x28
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 ff76 	bl	8002ce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e06:	2301      	movs	r3, #1
 8000e08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e12:	f107 0318 	add.w	r3, r7, #24
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 ffe4 	bl	8001de4 <HAL_RCC_OscConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e22:	f000 f90b 	bl	800103c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e26:	230f      	movs	r3, #15
 8000e28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e36:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 fa4f 	bl	80022e4 <HAL_RCC_ClockConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000e4c:	f000 f8f6 	bl	800103c <Error_Handler>
  }
}
 8000e50:	bf00      	nop
 8000e52:	3740      	adds	r7, #64	; 0x40
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_SPI2_Init+0x64>)
 8000e5e:	4a18      	ldr	r2, [pc, #96]	; (8000ec0 <MX_SPI2_Init+0x68>)
 8000e60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e62:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_SPI2_Init+0x64>)
 8000e64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_SPI2_Init+0x64>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_SPI2_Init+0x64>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_SPI2_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_SPI2_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_SPI2_Init+0x64>)
 8000e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e88:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_SPI2_Init+0x64>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e90:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <MX_SPI2_Init+0x64>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_SPI2_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e9c:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <MX_SPI2_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_SPI2_Init+0x64>)
 8000ea4:	220a      	movs	r2, #10
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <MX_SPI2_Init+0x64>)
 8000eaa:	f001 fb85 	bl	80025b8 <HAL_SPI_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000eb4:	f000 f8c2 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000022c 	.word	0x2000022c
 8000ec0:	40003800 	.word	0x40003800

08000ec4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_DMA_Init+0x38>)
 8000ecc:	695b      	ldr	r3, [r3, #20]
 8000ece:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <MX_DMA_Init+0x38>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6153      	str	r3, [r2, #20]
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_DMA_Init+0x38>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	200f      	movs	r0, #15
 8000ee8:	f000 fb27 	bl	800153a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000eec:	200f      	movs	r0, #15
 8000eee:	f000 fb40 	bl	8001572 <HAL_NVIC_EnableIRQ>

}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000

08000f00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 0310 	add.w	r3, r7, #16
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f14:	4b44      	ldr	r3, [pc, #272]	; (8001028 <MX_GPIO_Init+0x128>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a43      	ldr	r2, [pc, #268]	; (8001028 <MX_GPIO_Init+0x128>)
 8000f1a:	f043 0310 	orr.w	r3, r3, #16
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b41      	ldr	r3, [pc, #260]	; (8001028 <MX_GPIO_Init+0x128>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <MX_GPIO_Init+0x128>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a3d      	ldr	r2, [pc, #244]	; (8001028 <MX_GPIO_Init+0x128>)
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <MX_GPIO_Init+0x128>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b38      	ldr	r3, [pc, #224]	; (8001028 <MX_GPIO_Init+0x128>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a37      	ldr	r2, [pc, #220]	; (8001028 <MX_GPIO_Init+0x128>)
 8000f4a:	f043 0308 	orr.w	r3, r3, #8
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b35      	ldr	r3, [pc, #212]	; (8001028 <MX_GPIO_Init+0x128>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f62:	4832      	ldr	r0, [pc, #200]	; (800102c <MX_GPIO_Init+0x12c>)
 8000f64:	f000 fef5 	bl	8001d52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_Pin|RST_Pin|CE_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000f6e:	4830      	ldr	r0, [pc, #192]	; (8001030 <MX_GPIO_Init+0x130>)
 8000f70:	f000 feef 	bl	8001d52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	21c0      	movs	r1, #192	; 0xc0
 8000f78:	482e      	ldr	r0, [pc, #184]	; (8001034 <MX_GPIO_Init+0x134>)
 8000f7a:	f000 feea 	bl	8001d52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	4619      	mov	r1, r3
 8000f96:	4825      	ldr	r0, [pc, #148]	; (800102c <MX_GPIO_Init+0x12c>)
 8000f98:	f000 fd6a 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f9c:	230e      	movs	r3, #14
 8000f9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <MX_GPIO_Init+0x138>)
 8000fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4619      	mov	r1, r3
 8000fae:	4820      	ldr	r0, [pc, #128]	; (8001030 <MX_GPIO_Init+0x130>)
 8000fb0:	f000 fd5e 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin RST_Pin CE_Pin */
  GPIO_InitStruct.Pin = DC_Pin|RST_Pin|CE_Pin;
 8000fb4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000fb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4818      	ldr	r0, [pc, #96]	; (8001030 <MX_GPIO_Init+0x130>)
 8000fce:	f000 fd4f 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fd2:	23c0      	movs	r3, #192	; 0xc0
 8000fd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4812      	ldr	r0, [pc, #72]	; (8001034 <MX_GPIO_Init+0x134>)
 8000fea:	f000 fd41 	bl	8001a70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	2007      	movs	r0, #7
 8000ff4:	f000 faa1 	bl	800153a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ff8:	2007      	movs	r0, #7
 8000ffa:	f000 faba 	bl	8001572 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	2008      	movs	r0, #8
 8001004:	f000 fa99 	bl	800153a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001008:	2008      	movs	r0, #8
 800100a:	f000 fab2 	bl	8001572 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2009      	movs	r0, #9
 8001014:	f000 fa91 	bl	800153a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001018:	2009      	movs	r0, #9
 800101a:	f000 faaa 	bl	8001572 <HAL_NVIC_EnableIRQ>

}
 800101e:	bf00      	nop
 8001020:	3720      	adds	r7, #32
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000
 800102c:	40011000 	.word	0x40011000
 8001030:	40010800 	.word	0x40010800
 8001034:	40010c00 	.word	0x40010c00
 8001038:	10110000 	.word	0x10110000

0800103c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001040:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001042:	e7fe      	b.n	8001042 <Error_Handler+0x6>

08001044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_MspInit+0x5c>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <HAL_MspInit+0x5c>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6193      	str	r3, [r2, #24]
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_MspInit+0x5c>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <HAL_MspInit+0x5c>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <HAL_MspInit+0x5c>)
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106c:	61d3      	str	r3, [r2, #28]
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <HAL_MspInit+0x5c>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_MspInit+0x60>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <HAL_MspInit+0x60>)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010000 	.word	0x40010000

080010a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a2d      	ldr	r2, [pc, #180]	; (8001178 <HAL_SPI_MspInit+0xd0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d152      	bne.n	800116e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010c8:	4b2c      	ldr	r3, [pc, #176]	; (800117c <HAL_SPI_MspInit+0xd4>)
 80010ca:	69db      	ldr	r3, [r3, #28]
 80010cc:	4a2b      	ldr	r2, [pc, #172]	; (800117c <HAL_SPI_MspInit+0xd4>)
 80010ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d2:	61d3      	str	r3, [r2, #28]
 80010d4:	4b29      	ldr	r3, [pc, #164]	; (800117c <HAL_SPI_MspInit+0xd4>)
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e0:	4b26      	ldr	r3, [pc, #152]	; (800117c <HAL_SPI_MspInit+0xd4>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	4a25      	ldr	r2, [pc, #148]	; (800117c <HAL_SPI_MspInit+0xd4>)
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	6193      	str	r3, [r2, #24]
 80010ec:	4b23      	ldr	r3, [pc, #140]	; (800117c <HAL_SPI_MspInit+0xd4>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	f003 0308 	and.w	r3, r3, #8
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80010f8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80010fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	481c      	ldr	r0, [pc, #112]	; (8001180 <HAL_SPI_MspInit+0xd8>)
 800110e:	f000 fcaf 	bl	8001a70 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <HAL_SPI_MspInit+0xdc>)
 8001114:	4a1c      	ldr	r2, [pc, #112]	; (8001188 <HAL_SPI_MspInit+0xe0>)
 8001116:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <HAL_SPI_MspInit+0xdc>)
 800111a:	2210      	movs	r2, #16
 800111c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_SPI_MspInit+0xdc>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_SPI_MspInit+0xdc>)
 8001126:	2280      	movs	r2, #128	; 0x80
 8001128:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_SPI_MspInit+0xdc>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_SPI_MspInit+0xdc>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_SPI_MspInit+0xdc>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_SPI_MspInit+0xdc>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001142:	4810      	ldr	r0, [pc, #64]	; (8001184 <HAL_SPI_MspInit+0xdc>)
 8001144:	f000 fa30 	bl	80015a8 <HAL_DMA_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <HAL_SPI_MspInit+0xaa>
    {
      Error_Handler();
 800114e:	f7ff ff75 	bl	800103c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <HAL_SPI_MspInit+0xdc>)
 8001156:	649a      	str	r2, [r3, #72]	; 0x48
 8001158:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <HAL_SPI_MspInit+0xdc>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	2024      	movs	r0, #36	; 0x24
 8001164:	f000 f9e9 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001168:	2024      	movs	r0, #36	; 0x24
 800116a:	f000 fa02 	bl	8001572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800116e:	bf00      	nop
 8001170:	3720      	adds	r7, #32
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40003800 	.word	0x40003800
 800117c:	40021000 	.word	0x40021000
 8001180:	40010c00 	.word	0x40010c00
 8001184:	20000284 	.word	0x20000284
 8001188:	40020058 	.word	0x40020058

0800118c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <NMI_Handler+0x4>

08001192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <HardFault_Handler+0x4>

08001198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <MemManage_Handler+0x4>

0800119e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <BusFault_Handler+0x4>

080011a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <UsageFault_Handler+0x4>

080011aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr

080011b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr

080011c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d2:	f000 f89d 	bl	8001310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}

080011da <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80011de:	2002      	movs	r0, #2
 80011e0:	f000 fde8 	bl	8001db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80011ec:	2004      	movs	r0, #4
 80011ee:	f000 fde1 	bl	8001db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80011fa:	2008      	movs	r0, #8
 80011fc:	f000 fdda 	bl	8001db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}

08001204 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <DMA1_Channel5_IRQHandler+0x10>)
 800120a:	f000 fafd 	bl	8001808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000284 	.word	0x20000284

08001218 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800121c:	4802      	ldr	r0, [pc, #8]	; (8001228 <SPI2_IRQHandler+0x10>)
 800121e:	f001 fb05 	bl	800282c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000022c 	.word	0x2000022c

0800122c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001238:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800123a:	e003      	b.n	8001244 <LoopCopyDataInit>

0800123c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800123e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001240:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001242:	3104      	adds	r1, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001244:	480a      	ldr	r0, [pc, #40]	; (8001270 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001248:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800124a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800124c:	d3f6      	bcc.n	800123c <CopyDataInit>
  ldr r2, =_sbss
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001250:	e002      	b.n	8001258 <LoopFillZerobss>

08001252 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001252:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001254:	f842 3b04 	str.w	r3, [r2], #4

08001258 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800125a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800125c:	d3f9      	bcc.n	8001252 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800125e:	f7ff ffe5 	bl	800122c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001262:	f001 fd19 	bl	8002c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001266:	f7ff fba7 	bl	80009b8 <main>
  bx lr
 800126a:	4770      	bx	lr
  ldr r3, =_sidata
 800126c:	08002fc8 	.word	0x08002fc8
  ldr r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001274:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001278:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800127c:	200002cc 	.word	0x200002cc

08001280 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001280:	e7fe      	b.n	8001280 <ADC1_2_IRQHandler>
	...

08001284 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_Init+0x28>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_Init+0x28>)
 800128e:	f043 0310 	orr.w	r3, r3, #16
 8001292:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001294:	2003      	movs	r0, #3
 8001296:	f000 f945 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129a:	2000      	movs	r0, #0
 800129c:	f000 f808 	bl	80012b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a0:	f7ff fed0 	bl	8001044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40022000 	.word	0x40022000

080012b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_InitTick+0x54>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x58>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f95d 	bl	800158e <HAL_SYSTICK_Config>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e00e      	b.n	80012fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0f      	cmp	r3, #15
 80012e2:	d80a      	bhi.n	80012fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f000 f925 	bl	800153a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <HAL_InitTick+0x5c>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e000      	b.n	80012fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000004 	.word	0x20000004
 8001308:	2000000c 	.word	0x2000000c
 800130c:	20000008 	.word	0x20000008

08001310 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <HAL_IncTick+0x1c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_IncTick+0x20>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4413      	add	r3, r2
 8001320:	4a03      	ldr	r2, [pc, #12]	; (8001330 <HAL_IncTick+0x20>)
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	2000000c 	.word	0x2000000c
 8001330:	200002c8 	.word	0x200002c8

08001334 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b02      	ldr	r3, [pc, #8]	; (8001344 <HAL_GetTick+0x10>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	200002c8 	.word	0x200002c8

08001348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001350:	f7ff fff0 	bl	8001334 <HAL_GetTick>
 8001354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001360:	d005      	beq.n	800136e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_Delay+0x40>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800136e:	bf00      	nop
 8001370:	f7ff ffe0 	bl	8001334 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	429a      	cmp	r2, r3
 800137e:	d8f7      	bhi.n	8001370 <HAL_Delay+0x28>
  {
  }
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000000c 	.word	0x2000000c

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db0b      	blt.n	800141a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	4906      	ldr	r1, [pc, #24]	; (8001424 <__NVIC_EnableIRQ+0x34>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2001      	movs	r0, #1
 8001412:	fa00 f202 	lsl.w	r2, r0, r2
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100

08001428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	db0a      	blt.n	8001452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	490c      	ldr	r1, [pc, #48]	; (8001474 <__NVIC_SetPriority+0x4c>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	440b      	add	r3, r1
 800144c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001450:	e00a      	b.n	8001468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4908      	ldr	r1, [pc, #32]	; (8001478 <__NVIC_SetPriority+0x50>)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	3b04      	subs	r3, #4
 8001460:	0112      	lsls	r2, r2, #4
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	440b      	add	r3, r1
 8001466:	761a      	strb	r2, [r3, #24]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f1c3 0307 	rsb	r3, r3, #7
 8001496:	2b04      	cmp	r3, #4
 8001498:	bf28      	it	cs
 800149a:	2304      	movcs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3304      	adds	r3, #4
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d902      	bls.n	80014ac <NVIC_EncodePriority+0x30>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3b03      	subs	r3, #3
 80014aa:	e000      	b.n	80014ae <NVIC_EncodePriority+0x32>
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43d9      	mvns	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	4313      	orrs	r3, r2
         );
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f7ff ff90 	bl	8001428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff2d 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800154c:	f7ff ff42 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 8001550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f7ff ff90 	bl	800147c <NVIC_EncodePriority>
 800155c:	4602      	mov	r2, r0
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff5f 	bl	8001428 <__NVIC_SetPriority>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff35 	bl	80013f0 <__NVIC_EnableIRQ>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffa2 	bl	80014e0 <SysTick_Config>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e043      	b.n	8001646 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <HAL_DMA_Init+0xa8>)
 80015c6:	4413      	add	r3, r2
 80015c8:	4a22      	ldr	r2, [pc, #136]	; (8001654 <HAL_DMA_Init+0xac>)
 80015ca:	fba2 2303 	umull	r2, r3, r2, r3
 80015ce:	091b      	lsrs	r3, r3, #4
 80015d0:	009a      	lsls	r2, r3, #2
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a1f      	ldr	r2, [pc, #124]	; (8001658 <HAL_DMA_Init+0xb0>)
 80015da:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2202      	movs	r2, #2
 80015e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015f2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800160c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001620:	68fa      	ldr	r2, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	bffdfff8 	.word	0xbffdfff8
 8001654:	cccccccd 	.word	0xcccccccd
 8001658:	40020000 	.word	0x40020000

0800165c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
 8001668:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <HAL_DMA_Start_IT+0x20>
 8001678:	2302      	movs	r3, #2
 800167a:	e04a      	b.n	8001712 <HAL_DMA_Start_IT+0xb6>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800168a:	2b01      	cmp	r3, #1
 800168c:	d13a      	bne.n	8001704 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2202      	movs	r2, #2
 8001692:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 f9ae 	bl	8001a14 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 020e 	orr.w	r2, r2, #14
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e00f      	b.n	80016f2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0204 	bic.w	r2, r2, #4
 80016e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f042 020a 	orr.w	r2, r2, #10
 80016f0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f042 0201 	orr.w	r2, r2, #1
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e005      	b.n	8001710 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800170c:	2302      	movs	r3, #2
 800170e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001710:	7dfb      	ldrb	r3, [r7, #23]
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800172e:	2b02      	cmp	r3, #2
 8001730:	d005      	beq.n	800173e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2204      	movs	r2, #4
 8001736:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
 800173c:	e051      	b.n	80017e2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 020e 	bic.w	r2, r2, #14
 800174c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0201 	bic.w	r2, r2, #1
 800175c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a22      	ldr	r2, [pc, #136]	; (80017ec <HAL_DMA_Abort_IT+0xd0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d029      	beq.n	80017bc <HAL_DMA_Abort_IT+0xa0>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <HAL_DMA_Abort_IT+0xd4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d022      	beq.n	80017b8 <HAL_DMA_Abort_IT+0x9c>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a1f      	ldr	r2, [pc, #124]	; (80017f4 <HAL_DMA_Abort_IT+0xd8>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d01a      	beq.n	80017b2 <HAL_DMA_Abort_IT+0x96>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_DMA_Abort_IT+0xdc>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d012      	beq.n	80017ac <HAL_DMA_Abort_IT+0x90>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <HAL_DMA_Abort_IT+0xe0>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d00a      	beq.n	80017a6 <HAL_DMA_Abort_IT+0x8a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <HAL_DMA_Abort_IT+0xe4>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d102      	bne.n	80017a0 <HAL_DMA_Abort_IT+0x84>
 800179a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800179e:	e00e      	b.n	80017be <HAL_DMA_Abort_IT+0xa2>
 80017a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017a4:	e00b      	b.n	80017be <HAL_DMA_Abort_IT+0xa2>
 80017a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017aa:	e008      	b.n	80017be <HAL_DMA_Abort_IT+0xa2>
 80017ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b0:	e005      	b.n	80017be <HAL_DMA_Abort_IT+0xa2>
 80017b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b6:	e002      	b.n	80017be <HAL_DMA_Abort_IT+0xa2>
 80017b8:	2310      	movs	r3, #16
 80017ba:	e000      	b.n	80017be <HAL_DMA_Abort_IT+0xa2>
 80017bc:	2301      	movs	r3, #1
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <HAL_DMA_Abort_IT+0xe8>)
 80017c0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	4798      	blx	r3
    } 
  }
  return status;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40020008 	.word	0x40020008
 80017f0:	4002001c 	.word	0x4002001c
 80017f4:	40020030 	.word	0x40020030
 80017f8:	40020044 	.word	0x40020044
 80017fc:	40020058 	.word	0x40020058
 8001800:	4002006c 	.word	0x4002006c
 8001804:	40020000 	.word	0x40020000

08001808 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	2204      	movs	r2, #4
 8001826:	409a      	lsls	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d04f      	beq.n	80018d0 <HAL_DMA_IRQHandler+0xc8>
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	2b00      	cmp	r3, #0
 8001838:	d04a      	beq.n	80018d0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0320 	and.w	r3, r3, #32
 8001844:	2b00      	cmp	r3, #0
 8001846:	d107      	bne.n	8001858 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0204 	bic.w	r2, r2, #4
 8001856:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a66      	ldr	r2, [pc, #408]	; (80019f8 <HAL_DMA_IRQHandler+0x1f0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d029      	beq.n	80018b6 <HAL_DMA_IRQHandler+0xae>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a65      	ldr	r2, [pc, #404]	; (80019fc <HAL_DMA_IRQHandler+0x1f4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d022      	beq.n	80018b2 <HAL_DMA_IRQHandler+0xaa>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a63      	ldr	r2, [pc, #396]	; (8001a00 <HAL_DMA_IRQHandler+0x1f8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d01a      	beq.n	80018ac <HAL_DMA_IRQHandler+0xa4>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a62      	ldr	r2, [pc, #392]	; (8001a04 <HAL_DMA_IRQHandler+0x1fc>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d012      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x9e>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a60      	ldr	r2, [pc, #384]	; (8001a08 <HAL_DMA_IRQHandler+0x200>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d00a      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x98>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a5f      	ldr	r2, [pc, #380]	; (8001a0c <HAL_DMA_IRQHandler+0x204>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d102      	bne.n	800189a <HAL_DMA_IRQHandler+0x92>
 8001894:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001898:	e00e      	b.n	80018b8 <HAL_DMA_IRQHandler+0xb0>
 800189a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800189e:	e00b      	b.n	80018b8 <HAL_DMA_IRQHandler+0xb0>
 80018a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80018a4:	e008      	b.n	80018b8 <HAL_DMA_IRQHandler+0xb0>
 80018a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018aa:	e005      	b.n	80018b8 <HAL_DMA_IRQHandler+0xb0>
 80018ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018b0:	e002      	b.n	80018b8 <HAL_DMA_IRQHandler+0xb0>
 80018b2:	2340      	movs	r3, #64	; 0x40
 80018b4:	e000      	b.n	80018b8 <HAL_DMA_IRQHandler+0xb0>
 80018b6:	2304      	movs	r3, #4
 80018b8:	4a55      	ldr	r2, [pc, #340]	; (8001a10 <HAL_DMA_IRQHandler+0x208>)
 80018ba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 8094 	beq.w	80019ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80018ce:	e08e      	b.n	80019ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	2202      	movs	r2, #2
 80018d6:	409a      	lsls	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d056      	beq.n	800198e <HAL_DMA_IRQHandler+0x186>
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d051      	beq.n	800198e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0320 	and.w	r3, r3, #32
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10b      	bne.n	8001910 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 020a 	bic.w	r2, r2, #10
 8001906:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a38      	ldr	r2, [pc, #224]	; (80019f8 <HAL_DMA_IRQHandler+0x1f0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d029      	beq.n	800196e <HAL_DMA_IRQHandler+0x166>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a37      	ldr	r2, [pc, #220]	; (80019fc <HAL_DMA_IRQHandler+0x1f4>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d022      	beq.n	800196a <HAL_DMA_IRQHandler+0x162>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a35      	ldr	r2, [pc, #212]	; (8001a00 <HAL_DMA_IRQHandler+0x1f8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01a      	beq.n	8001964 <HAL_DMA_IRQHandler+0x15c>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a34      	ldr	r2, [pc, #208]	; (8001a04 <HAL_DMA_IRQHandler+0x1fc>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d012      	beq.n	800195e <HAL_DMA_IRQHandler+0x156>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a32      	ldr	r2, [pc, #200]	; (8001a08 <HAL_DMA_IRQHandler+0x200>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00a      	beq.n	8001958 <HAL_DMA_IRQHandler+0x150>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a31      	ldr	r2, [pc, #196]	; (8001a0c <HAL_DMA_IRQHandler+0x204>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d102      	bne.n	8001952 <HAL_DMA_IRQHandler+0x14a>
 800194c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001950:	e00e      	b.n	8001970 <HAL_DMA_IRQHandler+0x168>
 8001952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001956:	e00b      	b.n	8001970 <HAL_DMA_IRQHandler+0x168>
 8001958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800195c:	e008      	b.n	8001970 <HAL_DMA_IRQHandler+0x168>
 800195e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001962:	e005      	b.n	8001970 <HAL_DMA_IRQHandler+0x168>
 8001964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001968:	e002      	b.n	8001970 <HAL_DMA_IRQHandler+0x168>
 800196a:	2320      	movs	r3, #32
 800196c:	e000      	b.n	8001970 <HAL_DMA_IRQHandler+0x168>
 800196e:	2302      	movs	r3, #2
 8001970:	4a27      	ldr	r2, [pc, #156]	; (8001a10 <HAL_DMA_IRQHandler+0x208>)
 8001972:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	2b00      	cmp	r3, #0
 8001982:	d034      	beq.n	80019ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800198c:	e02f      	b.n	80019ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	2208      	movs	r2, #8
 8001994:	409a      	lsls	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4013      	ands	r3, r2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d028      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x1e8>
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	f003 0308 	and.w	r3, r3, #8
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d023      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 020e 	bic.w	r2, r2, #14
 80019b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c0:	2101      	movs	r1, #1
 80019c2:	fa01 f202 	lsl.w	r2, r1, r2
 80019c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d004      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	4798      	blx	r3
    }
  }
  return;
 80019ee:	bf00      	nop
 80019f0:	bf00      	nop
}
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40020008 	.word	0x40020008
 80019fc:	4002001c 	.word	0x4002001c
 8001a00:	40020030 	.word	0x40020030
 8001a04:	40020044 	.word	0x40020044
 8001a08:	40020058 	.word	0x40020058
 8001a0c:	4002006c 	.word	0x4002006c
 8001a10:	40020000 	.word	0x40020000

08001a14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b10      	cmp	r3, #16
 8001a40:	d108      	bne.n	8001a54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a52:	e007      	b.n	8001a64 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	60da      	str	r2, [r3, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
	...

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b08b      	sub	sp, #44	; 0x2c
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a82:	e127      	b.n	8001cd4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a84:	2201      	movs	r2, #1
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	69fa      	ldr	r2, [r7, #28]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	f040 8116 	bne.w	8001cce <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b12      	cmp	r3, #18
 8001aa8:	d034      	beq.n	8001b14 <HAL_GPIO_Init+0xa4>
 8001aaa:	2b12      	cmp	r3, #18
 8001aac:	d80d      	bhi.n	8001aca <HAL_GPIO_Init+0x5a>
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d02b      	beq.n	8001b0a <HAL_GPIO_Init+0x9a>
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d804      	bhi.n	8001ac0 <HAL_GPIO_Init+0x50>
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d031      	beq.n	8001b1e <HAL_GPIO_Init+0xae>
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d01c      	beq.n	8001af8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001abe:	e048      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	d043      	beq.n	8001b4c <HAL_GPIO_Init+0xdc>
 8001ac4:	2b11      	cmp	r3, #17
 8001ac6:	d01b      	beq.n	8001b00 <HAL_GPIO_Init+0x90>
          break;
 8001ac8:	e043      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001aca:	4a89      	ldr	r2, [pc, #548]	; (8001cf0 <HAL_GPIO_Init+0x280>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d026      	beq.n	8001b1e <HAL_GPIO_Init+0xae>
 8001ad0:	4a87      	ldr	r2, [pc, #540]	; (8001cf0 <HAL_GPIO_Init+0x280>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d806      	bhi.n	8001ae4 <HAL_GPIO_Init+0x74>
 8001ad6:	4a87      	ldr	r2, [pc, #540]	; (8001cf4 <HAL_GPIO_Init+0x284>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d020      	beq.n	8001b1e <HAL_GPIO_Init+0xae>
 8001adc:	4a86      	ldr	r2, [pc, #536]	; (8001cf8 <HAL_GPIO_Init+0x288>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d01d      	beq.n	8001b1e <HAL_GPIO_Init+0xae>
          break;
 8001ae2:	e036      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ae4:	4a85      	ldr	r2, [pc, #532]	; (8001cfc <HAL_GPIO_Init+0x28c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d019      	beq.n	8001b1e <HAL_GPIO_Init+0xae>
 8001aea:	4a85      	ldr	r2, [pc, #532]	; (8001d00 <HAL_GPIO_Init+0x290>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d016      	beq.n	8001b1e <HAL_GPIO_Init+0xae>
 8001af0:	4a84      	ldr	r2, [pc, #528]	; (8001d04 <HAL_GPIO_Init+0x294>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d013      	beq.n	8001b1e <HAL_GPIO_Init+0xae>
          break;
 8001af6:	e02c      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	623b      	str	r3, [r7, #32]
          break;
 8001afe:	e028      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	3304      	adds	r3, #4
 8001b06:	623b      	str	r3, [r7, #32]
          break;
 8001b08:	e023      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	3308      	adds	r3, #8
 8001b10:	623b      	str	r3, [r7, #32]
          break;
 8001b12:	e01e      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	330c      	adds	r3, #12
 8001b1a:	623b      	str	r3, [r7, #32]
          break;
 8001b1c:	e019      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d102      	bne.n	8001b2c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b26:	2304      	movs	r3, #4
 8001b28:	623b      	str	r3, [r7, #32]
          break;
 8001b2a:	e012      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d105      	bne.n	8001b40 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b34:	2308      	movs	r3, #8
 8001b36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	611a      	str	r2, [r3, #16]
          break;
 8001b3e:	e008      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b40:	2308      	movs	r3, #8
 8001b42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69fa      	ldr	r2, [r7, #28]
 8001b48:	615a      	str	r2, [r3, #20]
          break;
 8001b4a:	e002      	b.n	8001b52 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
          break;
 8001b50:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	2bff      	cmp	r3, #255	; 0xff
 8001b56:	d801      	bhi.n	8001b5c <HAL_GPIO_Init+0xec>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	e001      	b.n	8001b60 <HAL_GPIO_Init+0xf0>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3304      	adds	r3, #4
 8001b60:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2bff      	cmp	r3, #255	; 0xff
 8001b66:	d802      	bhi.n	8001b6e <HAL_GPIO_Init+0xfe>
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_Init+0x104>
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	3b08      	subs	r3, #8
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	210f      	movs	r1, #15
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	401a      	ands	r2, r3
 8001b86:	6a39      	ldr	r1, [r7, #32]
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 8096 	beq.w	8001cce <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ba2:	4b59      	ldr	r3, [pc, #356]	; (8001d08 <HAL_GPIO_Init+0x298>)
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	4a58      	ldr	r2, [pc, #352]	; (8001d08 <HAL_GPIO_Init+0x298>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6193      	str	r3, [r2, #24]
 8001bae:	4b56      	ldr	r3, [pc, #344]	; (8001d08 <HAL_GPIO_Init+0x298>)
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bba:	4a54      	ldr	r2, [pc, #336]	; (8001d0c <HAL_GPIO_Init+0x29c>)
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	089b      	lsrs	r3, r3, #2
 8001bc0:	3302      	adds	r3, #2
 8001bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	220f      	movs	r2, #15
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4b      	ldr	r2, [pc, #300]	; (8001d10 <HAL_GPIO_Init+0x2a0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0x19e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4a      	ldr	r2, [pc, #296]	; (8001d14 <HAL_GPIO_Init+0x2a4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00d      	beq.n	8001c0a <HAL_GPIO_Init+0x19a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a49      	ldr	r2, [pc, #292]	; (8001d18 <HAL_GPIO_Init+0x2a8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <HAL_GPIO_Init+0x196>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a48      	ldr	r2, [pc, #288]	; (8001d1c <HAL_GPIO_Init+0x2ac>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_GPIO_Init+0x192>
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e006      	b.n	8001c10 <HAL_GPIO_Init+0x1a0>
 8001c02:	2304      	movs	r3, #4
 8001c04:	e004      	b.n	8001c10 <HAL_GPIO_Init+0x1a0>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e002      	b.n	8001c10 <HAL_GPIO_Init+0x1a0>
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_GPIO_Init+0x1a0>
 8001c0e:	2300      	movs	r3, #0
 8001c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c12:	f002 0203 	and.w	r2, r2, #3
 8001c16:	0092      	lsls	r2, r2, #2
 8001c18:	4093      	lsls	r3, r2
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c20:	493a      	ldr	r1, [pc, #232]	; (8001d0c <HAL_GPIO_Init+0x29c>)
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	089b      	lsrs	r3, r3, #2
 8001c26:	3302      	adds	r3, #2
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d006      	beq.n	8001c48 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c3a:	4b39      	ldr	r3, [pc, #228]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4938      	ldr	r1, [pc, #224]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
 8001c46:	e006      	b.n	8001c56 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c48:	4b35      	ldr	r3, [pc, #212]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	4933      	ldr	r1, [pc, #204]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d006      	beq.n	8001c70 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c62:	4b2f      	ldr	r3, [pc, #188]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	492e      	ldr	r1, [pc, #184]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	604b      	str	r3, [r1, #4]
 8001c6e:	e006      	b.n	8001c7e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c70:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	4929      	ldr	r1, [pc, #164]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d006      	beq.n	8001c98 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c8a:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	4924      	ldr	r1, [pc, #144]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	608b      	str	r3, [r1, #8]
 8001c96:	e006      	b.n	8001ca6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c98:	4b21      	ldr	r3, [pc, #132]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	491f      	ldr	r1, [pc, #124]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d006      	beq.n	8001cc0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	491a      	ldr	r1, [pc, #104]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60cb      	str	r3, [r1, #12]
 8001cbe:	e006      	b.n	8001cce <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cc0:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	4915      	ldr	r1, [pc, #84]	; (8001d20 <HAL_GPIO_Init+0x2b0>)
 8001cca:	4013      	ands	r3, r2
 8001ccc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	fa22 f303 	lsr.w	r3, r2, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f47f aed0 	bne.w	8001a84 <HAL_GPIO_Init+0x14>
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	372c      	adds	r7, #44	; 0x2c
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	10210000 	.word	0x10210000
 8001cf4:	10110000 	.word	0x10110000
 8001cf8:	10120000 	.word	0x10120000
 8001cfc:	10310000 	.word	0x10310000
 8001d00:	10320000 	.word	0x10320000
 8001d04:	10220000 	.word	0x10220000
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40010000 	.word	0x40010000
 8001d10:	40010800 	.word	0x40010800
 8001d14:	40010c00 	.word	0x40010c00
 8001d18:	40011000 	.word	0x40011000
 8001d1c:	40011400 	.word	0x40011400
 8001d20:	40010400 	.word	0x40010400

08001d24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	887b      	ldrh	r3, [r7, #2]
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	73fb      	strb	r3, [r7, #15]
 8001d40:	e001      	b.n	8001d46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d42:	2300      	movs	r3, #0
 8001d44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr

08001d52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	807b      	strh	r3, [r7, #2]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d62:	787b      	ldrb	r3, [r7, #1]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d68:	887a      	ldrh	r2, [r7, #2]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001d6e:	e003      	b.n	8001d78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	041a      	lsls	r2, r3, #16
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	611a      	str	r2, [r3, #16]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b085      	sub	sp, #20
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d94:	887a      	ldrh	r2, [r7, #2]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	041a      	lsls	r2, r3, #16
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	400b      	ands	r3, r1
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	611a      	str	r2, [r3, #16]
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr

08001db4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dca:	4a05      	ldr	r2, [pc, #20]	; (8001de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fd04 	bl	80007e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40010400 	.word	0x40010400

08001de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e26c      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8087 	beq.w	8001f12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e04:	4b92      	ldr	r3, [pc, #584]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d00c      	beq.n	8001e2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e10:	4b8f      	ldr	r3, [pc, #572]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 030c 	and.w	r3, r3, #12
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d112      	bne.n	8001e42 <HAL_RCC_OscConfig+0x5e>
 8001e1c:	4b8c      	ldr	r3, [pc, #560]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e28:	d10b      	bne.n	8001e42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e2a:	4b89      	ldr	r3, [pc, #548]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d06c      	beq.n	8001f10 <HAL_RCC_OscConfig+0x12c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d168      	bne.n	8001f10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e246      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e4a:	d106      	bne.n	8001e5a <HAL_RCC_OscConfig+0x76>
 8001e4c:	4b80      	ldr	r3, [pc, #512]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a7f      	ldr	r2, [pc, #508]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	e02e      	b.n	8001eb8 <HAL_RCC_OscConfig+0xd4>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10c      	bne.n	8001e7c <HAL_RCC_OscConfig+0x98>
 8001e62:	4b7b      	ldr	r3, [pc, #492]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a7a      	ldr	r2, [pc, #488]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b78      	ldr	r3, [pc, #480]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a77      	ldr	r2, [pc, #476]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e01d      	b.n	8001eb8 <HAL_RCC_OscConfig+0xd4>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0xbc>
 8001e86:	4b72      	ldr	r3, [pc, #456]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a71      	ldr	r2, [pc, #452]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	4b6f      	ldr	r3, [pc, #444]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a6e      	ldr	r2, [pc, #440]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	e00b      	b.n	8001eb8 <HAL_RCC_OscConfig+0xd4>
 8001ea0:	4b6b      	ldr	r3, [pc, #428]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a6a      	ldr	r2, [pc, #424]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b68      	ldr	r3, [pc, #416]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a67      	ldr	r2, [pc, #412]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d013      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fa38 	bl	8001334 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7ff fa34 	bl	8001334 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e1fa      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	4b5d      	ldr	r3, [pc, #372]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0xe4>
 8001ee6:	e014      	b.n	8001f12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fa24 	bl	8001334 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7ff fa20 	bl	8001334 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	; 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e1e6      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f02:	4b53      	ldr	r3, [pc, #332]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x10c>
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d063      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f1e:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 030c 	and.w	r3, r3, #12
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00b      	beq.n	8001f42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f2a:	4b49      	ldr	r3, [pc, #292]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 030c 	and.w	r3, r3, #12
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d11c      	bne.n	8001f70 <HAL_RCC_OscConfig+0x18c>
 8001f36:	4b46      	ldr	r3, [pc, #280]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d116      	bne.n	8001f70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f42:	4b43      	ldr	r3, [pc, #268]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d005      	beq.n	8001f5a <HAL_RCC_OscConfig+0x176>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e1ba      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5a:	4b3d      	ldr	r3, [pc, #244]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4939      	ldr	r1, [pc, #228]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6e:	e03a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d020      	beq.n	8001fba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f78:	4b36      	ldr	r3, [pc, #216]	; (8002054 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7ff f9d9 	bl	8001334 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f86:	f7ff f9d5 	bl	8001334 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e19b      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f98:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d0f0      	beq.n	8001f86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa4:	4b2a      	ldr	r3, [pc, #168]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4927      	ldr	r1, [pc, #156]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	600b      	str	r3, [r1, #0]
 8001fb8:	e015      	b.n	8001fe6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <HAL_RCC_OscConfig+0x270>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc0:	f7ff f9b8 	bl	8001334 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc8:	f7ff f9b4 	bl	8001334 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e17a      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d03a      	beq.n	8002068 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d019      	beq.n	800202e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffa:	4b17      	ldr	r3, [pc, #92]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002000:	f7ff f998 	bl	8001334 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002008:	f7ff f994 	bl	8001334 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e15a      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <HAL_RCC_OscConfig+0x26c>)
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002026:	2001      	movs	r0, #1
 8002028:	f000 faa8 	bl	800257c <RCC_Delay>
 800202c:	e01c      	b.n	8002068 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_RCC_OscConfig+0x274>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002034:	f7ff f97e 	bl	8001334 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203a:	e00f      	b.n	800205c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203c:	f7ff f97a 	bl	8001334 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d908      	bls.n	800205c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e140      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
 8002054:	42420000 	.word	0x42420000
 8002058:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205c:	4b9e      	ldr	r3, [pc, #632]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1e9      	bne.n	800203c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80a6 	beq.w	80021c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207a:	4b97      	ldr	r3, [pc, #604]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10d      	bne.n	80020a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	4b94      	ldr	r3, [pc, #592]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	4a93      	ldr	r2, [pc, #588]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002090:	61d3      	str	r3, [r2, #28]
 8002092:	4b91      	ldr	r3, [pc, #580]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209e:	2301      	movs	r3, #1
 80020a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a2:	4b8e      	ldr	r3, [pc, #568]	; (80022dc <HAL_RCC_OscConfig+0x4f8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d118      	bne.n	80020e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ae:	4b8b      	ldr	r3, [pc, #556]	; (80022dc <HAL_RCC_OscConfig+0x4f8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a8a      	ldr	r2, [pc, #552]	; (80022dc <HAL_RCC_OscConfig+0x4f8>)
 80020b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ba:	f7ff f93b 	bl	8001334 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c2:	f7ff f937 	bl	8001334 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b64      	cmp	r3, #100	; 0x64
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e0fd      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	4b81      	ldr	r3, [pc, #516]	; (80022dc <HAL_RCC_OscConfig+0x4f8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d106      	bne.n	80020f6 <HAL_RCC_OscConfig+0x312>
 80020e8:	4b7b      	ldr	r3, [pc, #492]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	4a7a      	ldr	r2, [pc, #488]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6213      	str	r3, [r2, #32]
 80020f4:	e02d      	b.n	8002152 <HAL_RCC_OscConfig+0x36e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0x334>
 80020fe:	4b76      	ldr	r3, [pc, #472]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4a75      	ldr	r2, [pc, #468]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	6213      	str	r3, [r2, #32]
 800210a:	4b73      	ldr	r3, [pc, #460]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	6a1b      	ldr	r3, [r3, #32]
 800210e:	4a72      	ldr	r2, [pc, #456]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002110:	f023 0304 	bic.w	r3, r3, #4
 8002114:	6213      	str	r3, [r2, #32]
 8002116:	e01c      	b.n	8002152 <HAL_RCC_OscConfig+0x36e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2b05      	cmp	r3, #5
 800211e:	d10c      	bne.n	800213a <HAL_RCC_OscConfig+0x356>
 8002120:	4b6d      	ldr	r3, [pc, #436]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	4a6c      	ldr	r2, [pc, #432]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	6213      	str	r3, [r2, #32]
 800212c:	4b6a      	ldr	r3, [pc, #424]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	4a69      	ldr	r2, [pc, #420]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6213      	str	r3, [r2, #32]
 8002138:	e00b      	b.n	8002152 <HAL_RCC_OscConfig+0x36e>
 800213a:	4b67      	ldr	r3, [pc, #412]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	4a66      	ldr	r2, [pc, #408]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6213      	str	r3, [r2, #32]
 8002146:	4b64      	ldr	r3, [pc, #400]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	4a63      	ldr	r2, [pc, #396]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	f023 0304 	bic.w	r3, r3, #4
 8002150:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d015      	beq.n	8002186 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215a:	f7ff f8eb 	bl	8001334 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002160:	e00a      	b.n	8002178 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002162:	f7ff f8e7 	bl	8001334 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002170:	4293      	cmp	r3, r2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e0ab      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002178:	4b57      	ldr	r3, [pc, #348]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0ee      	beq.n	8002162 <HAL_RCC_OscConfig+0x37e>
 8002184:	e014      	b.n	80021b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002186:	f7ff f8d5 	bl	8001334 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800218c:	e00a      	b.n	80021a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7ff f8d1 	bl	8001334 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	; 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e095      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a4:	4b4c      	ldr	r3, [pc, #304]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1ee      	bne.n	800218e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021b0:	7dfb      	ldrb	r3, [r7, #23]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d105      	bne.n	80021c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b6:	4b48      	ldr	r3, [pc, #288]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	4a47      	ldr	r2, [pc, #284]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8081 	beq.w	80022ce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021cc:	4b42      	ldr	r3, [pc, #264]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 030c 	and.w	r3, r3, #12
 80021d4:	2b08      	cmp	r3, #8
 80021d6:	d061      	beq.n	800229c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69db      	ldr	r3, [r3, #28]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d146      	bne.n	800226e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e0:	4b3f      	ldr	r3, [pc, #252]	; (80022e0 <HAL_RCC_OscConfig+0x4fc>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7ff f8a5 	bl	8001334 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ee:	f7ff f8a1 	bl	8001334 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e067      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002200:	4b35      	ldr	r3, [pc, #212]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f0      	bne.n	80021ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002214:	d108      	bne.n	8002228 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002216:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	492d      	ldr	r1, [pc, #180]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002228:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a19      	ldr	r1, [r3, #32]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	430b      	orrs	r3, r1
 800223a:	4927      	ldr	r1, [pc, #156]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002240:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <HAL_RCC_OscConfig+0x4fc>)
 8002242:	2201      	movs	r2, #1
 8002244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002246:	f7ff f875 	bl	8001334 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224e:	f7ff f871 	bl	8001334 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e037      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002260:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x46a>
 800226c:	e02f      	b.n	80022ce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226e:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <HAL_RCC_OscConfig+0x4fc>)
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff f85e 	bl	8001334 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227c:	f7ff f85a 	bl	8001334 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e020      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x498>
 800229a:	e018      	b.n	80022ce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e013      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_OscConfig+0x4f4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d106      	bne.n	80022ca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40007000 	.word	0x40007000
 80022e0:	42420060 	.word	0x42420060

080022e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0d0      	b.n	800249a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022f8:	4b6a      	ldr	r3, [pc, #424]	; (80024a4 <HAL_RCC_ClockConfig+0x1c0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d910      	bls.n	8002328 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b67      	ldr	r3, [pc, #412]	; (80024a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 0207 	bic.w	r2, r3, #7
 800230e:	4965      	ldr	r1, [pc, #404]	; (80024a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b63      	ldr	r3, [pc, #396]	; (80024a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0b8      	b.n	800249a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d020      	beq.n	8002376 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d005      	beq.n	800234c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002340:	4b59      	ldr	r3, [pc, #356]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a58      	ldr	r2, [pc, #352]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002346:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800234a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002358:	4b53      	ldr	r3, [pc, #332]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	4a52      	ldr	r2, [pc, #328]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002362:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002364:	4b50      	ldr	r3, [pc, #320]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	494d      	ldr	r1, [pc, #308]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	4313      	orrs	r3, r2
 8002374:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d040      	beq.n	8002404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d107      	bne.n	800239a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238a:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d115      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e07f      	b.n	800249a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023a2:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e073      	b.n	800249a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b2:	4b3d      	ldr	r3, [pc, #244]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e06b      	b.n	800249a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f023 0203 	bic.w	r2, r3, #3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	4936      	ldr	r1, [pc, #216]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023d4:	f7fe ffae 	bl	8001334 <HAL_GetTick>
 80023d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023da:	e00a      	b.n	80023f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023dc:	f7fe ffaa 	bl	8001334 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e053      	b.n	800249a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	4b2d      	ldr	r3, [pc, #180]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 020c 	and.w	r2, r3, #12
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	429a      	cmp	r2, r3
 8002402:	d1eb      	bne.n	80023dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002404:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d210      	bcs.n	8002434 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 0207 	bic.w	r2, r3, #7
 800241a:	4922      	ldr	r1, [pc, #136]	; (80024a4 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e032      	b.n	800249a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	4916      	ldr	r1, [pc, #88]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	4313      	orrs	r3, r2
 8002450:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d009      	beq.n	8002472 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800245e:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	490e      	ldr	r1, [pc, #56]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002472:	f000 f821 	bl	80024b8 <HAL_RCC_GetSysClockFreq>
 8002476:	4601      	mov	r1, r0
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <HAL_RCC_ClockConfig+0x1c8>)
 8002484:	5cd3      	ldrb	r3, [r2, r3]
 8002486:	fa21 f303 	lsr.w	r3, r1, r3
 800248a:	4a09      	ldr	r2, [pc, #36]	; (80024b0 <HAL_RCC_ClockConfig+0x1cc>)
 800248c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe ff0c 	bl	80012b0 <HAL_InitTick>

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	40022000 	.word	0x40022000
 80024a8:	40021000 	.word	0x40021000
 80024ac:	08002fb0 	.word	0x08002fb0
 80024b0:	20000004 	.word	0x20000004
 80024b4:	20000008 	.word	0x20000008

080024b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b8:	b490      	push	{r4, r7}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 80024bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024be:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024c0:	1d3c      	adds	r4, r7, #4
 80024c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024c8:	4b28      	ldr	r3, [pc, #160]	; (800256c <HAL_RCC_GetSysClockFreq+0xb4>)
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	2300      	movs	r3, #0
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024e2:	4b23      	ldr	r3, [pc, #140]	; (8002570 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d002      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x40>
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d003      	beq.n	80024fe <HAL_RCC_GetSysClockFreq+0x46>
 80024f6:	e02d      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024f8:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024fa:	623b      	str	r3, [r7, #32]
      break;
 80024fc:	e02d      	b.n	800255a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	0c9b      	lsrs	r3, r3, #18
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800250a:	4413      	add	r3, r2
 800250c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002510:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d013      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800251c:	4b14      	ldr	r3, [pc, #80]	; (8002570 <HAL_RCC_GetSysClockFreq+0xb8>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	0c5b      	lsrs	r3, r3, #17
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800252a:	4413      	add	r3, r2
 800252c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002530:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	4a0f      	ldr	r2, [pc, #60]	; (8002574 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002536:	fb02 f203 	mul.w	r2, r2, r3
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002540:	627b      	str	r3, [r7, #36]	; 0x24
 8002542:	e004      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	4a0c      	ldr	r2, [pc, #48]	; (8002578 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002548:	fb02 f303 	mul.w	r3, r2, r3
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	623b      	str	r3, [r7, #32]
      break;
 8002552:	e002      	b.n	800255a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002554:	4b07      	ldr	r3, [pc, #28]	; (8002574 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002556:	623b      	str	r3, [r7, #32]
      break;
 8002558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800255a:	6a3b      	ldr	r3, [r7, #32]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3728      	adds	r7, #40	; 0x28
 8002560:	46bd      	mov	sp, r7
 8002562:	bc90      	pop	{r4, r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	08002d5c 	.word	0x08002d5c
 800256c:	08002d6c 	.word	0x08002d6c
 8002570:	40021000 	.word	0x40021000
 8002574:	007a1200 	.word	0x007a1200
 8002578:	003d0900 	.word	0x003d0900

0800257c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002584:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <RCC_Delay+0x34>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0a      	ldr	r2, [pc, #40]	; (80025b4 <RCC_Delay+0x38>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	0a5b      	lsrs	r3, r3, #9
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002598:	bf00      	nop
  }
  while (Delay --);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1e5a      	subs	r2, r3, #1
 800259e:	60fa      	str	r2, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f9      	bne.n	8002598 <RCC_Delay+0x1c>
}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000004 	.word	0x20000004
 80025b4:	10624dd3 	.word	0x10624dd3

080025b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e076      	b.n	80026b8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d108      	bne.n	80025e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025da:	d009      	beq.n	80025f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	61da      	str	r2, [r3, #28]
 80025e2:	e005      	b.n	80025f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d106      	bne.n	8002610 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7fe fd4c 	bl	80010a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2202      	movs	r2, #2
 8002614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002626:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	ea42 0103 	orr.w	r1, r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	0c1a      	lsrs	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f002 0204 	and.w	r2, r2, #4
 8002696:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	69da      	ldr	r2, [r3, #28]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	4613      	mov	r3, r2
 80026cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_SPI_Transmit_DMA+0x20>
 80026dc:	2302      	movs	r3, #2
 80026de:	e09b      	b.n	8002818 <HAL_SPI_Transmit_DMA+0x158>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d002      	beq.n	80026fa <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80026f4:	2302      	movs	r3, #2
 80026f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80026f8:	e089      	b.n	800280e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HAL_SPI_Transmit_DMA+0x46>
 8002700:	88fb      	ldrh	r3, [r7, #6]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d102      	bne.n	800270c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	75fb      	strb	r3, [r7, #23]
    goto error;
 800270a:	e080      	b.n	800280e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2203      	movs	r2, #3
 8002710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	88fa      	ldrh	r2, [r7, #6]
 8002724:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	88fa      	ldrh	r2, [r7, #6]
 800272a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002752:	d10f      	bne.n	8002774 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002762:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002772:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002778:	4a29      	ldr	r2, [pc, #164]	; (8002820 <HAL_SPI_Transmit_DMA+0x160>)
 800277a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002780:	4a28      	ldr	r2, [pc, #160]	; (8002824 <HAL_SPI_Transmit_DMA+0x164>)
 8002782:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002788:	4a27      	ldr	r2, [pc, #156]	; (8002828 <HAL_SPI_Transmit_DMA+0x168>)
 800278a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002790:	2200      	movs	r2, #0
 8002792:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	4619      	mov	r1, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	330c      	adds	r3, #12
 80027a4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80027ac:	f7fe ff56 	bl	800165c <HAL_DMA_Start_IT>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00c      	beq.n	80027d0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ba:	f043 0210 	orr.w	r2, r3, #16
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80027ce:	e01e      	b.n	800280e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	2b40      	cmp	r3, #64	; 0x40
 80027dc:	d007      	beq.n	80027ee <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027ec:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0220 	orr.w	r2, r2, #32
 80027fc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0202 	orr.w	r2, r2, #2
 800280c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002816:	7dfb      	ldrb	r3, [r7, #23]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	08002ac7 	.word	0x08002ac7
 8002824:	08002a21 	.word	0x08002a21
 8002828:	08002ae3 	.word	0x08002ae3

0800282c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	099b      	lsrs	r3, r3, #6
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10f      	bne.n	8002870 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	099b      	lsrs	r3, r3, #6
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d004      	beq.n	8002870 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4798      	blx	r3
    return;
 800286e:	e0bf      	b.n	80029f0 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	085b      	lsrs	r3, r3, #1
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_SPI_IRQHandler+0x66>
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	09db      	lsrs	r3, r3, #7
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4798      	blx	r3
    return;
 8002890:	e0ae      	b.n	80029f0 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d106      	bne.n	80028ac <HAL_SPI_IRQHandler+0x80>
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	099b      	lsrs	r3, r3, #6
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 80a2 	beq.w	80029f0 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 809b 	beq.w	80029f0 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	099b      	lsrs	r3, r3, #6
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d023      	beq.n	800290e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d011      	beq.n	80028f6 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d6:	f043 0204 	orr.w	r2, r3, #4
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	e00b      	b.n	800290e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	693b      	ldr	r3, [r7, #16]
        return;
 800290c:	e070      	b.n	80029f0 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	095b      	lsrs	r3, r3, #5
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d014      	beq.n	8002944 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002948:	2b00      	cmp	r3, #0
 800294a:	d050      	beq.n	80029ee <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800295a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d104      	bne.n	8002978 <HAL_SPI_IRQHandler+0x14c>
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d034      	beq.n	80029e2 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0203 	bic.w	r2, r2, #3
 8002986:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298c:	2b00      	cmp	r3, #0
 800298e:	d011      	beq.n	80029b4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002994:	4a18      	ldr	r2, [pc, #96]	; (80029f8 <HAL_SPI_IRQHandler+0x1cc>)
 8002996:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299c:	4618      	mov	r0, r3
 800299e:	f7fe febd 	bl	800171c <HAL_DMA_Abort_IT>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d016      	beq.n	80029ea <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c0:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <HAL_SPI_IRQHandler+0x1cc>)
 80029c2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe fea7 	bl	800171c <HAL_DMA_Abort_IT>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80029e0:	e003      	b.n	80029ea <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f813 	bl	8002a0e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80029e8:	e000      	b.n	80029ec <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80029ea:	bf00      	nop
    return;
 80029ec:	bf00      	nop
 80029ee:	bf00      	nop
  }
}
 80029f0:	3720      	adds	r7, #32
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	08002b23 	.word	0x08002b23

080029fc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bc80      	pop	{r7}
 8002a0c:	4770      	bx	lr

08002a0e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bc80      	pop	{r7}
 8002a1e:	4770      	bx	lr

08002a20 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a2e:	f7fe fc81 	bl	8001334 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b20      	cmp	r3, #32
 8002a40:	d03b      	beq.n	8002aba <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0220 	bic.w	r2, r2, #32
 8002a50:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0202 	bic.w	r2, r2, #2
 8002a60:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	2164      	movs	r1, #100	; 0x64
 8002a66:	6978      	ldr	r0, [r7, #20]
 8002a68:	f000 f8f8 	bl	8002c5c <SPI_EndRxTxTransaction>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a76:	f043 0220 	orr.w	r2, r3, #32
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10a      	bne.n	8002a9c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002ab2:	6978      	ldr	r0, [r7, #20]
 8002ab4:	f7ff ffab 	bl	8002a0e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002ab8:	e002      	b.n	8002ac0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8002aba:	6978      	ldr	r0, [r7, #20]
 8002abc:	f7fd fb4e 	bl	800015c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f7ff ff91 	bl	80029fc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0203 	bic.w	r2, r2, #3
 8002afe:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b04:	f043 0210 	orr.w	r2, r3, #16
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7ff ff7a 	bl	8002a0e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b1a:	bf00      	nop
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff ff66 	bl	8002a0e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b5c:	f7fe fbea 	bl	8001334 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	4413      	add	r3, r2
 8002b6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b6c:	f7fe fbe2 	bl	8001334 <HAL_GetTick>
 8002b70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b72:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	015b      	lsls	r3, r3, #5
 8002b78:	0d1b      	lsrs	r3, r3, #20
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	fb02 f303 	mul.w	r3, r2, r3
 8002b80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b82:	e054      	b.n	8002c2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8a:	d050      	beq.n	8002c2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b8c:	f7fe fbd2 	bl	8001334 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d902      	bls.n	8002ba2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d13d      	bne.n	8002c1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bba:	d111      	bne.n	8002be0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc4:	d004      	beq.n	8002bd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bce:	d107      	bne.n	8002be0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be8:	d10f      	bne.n	8002c0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e017      	b.n	8002c4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4013      	ands	r3, r2
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	bf0c      	ite	eq
 8002c3e:	2301      	moveq	r3, #1
 8002c40:	2300      	movne	r3, #0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	461a      	mov	r2, r3
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d19b      	bne.n	8002b84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3720      	adds	r7, #32
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000004 	.word	0x20000004

08002c5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2180      	movs	r1, #128	; 0x80
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f7ff ff6a 	bl	8002b4c <SPI_WaitFlagStateUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d007      	beq.n	8002c8e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c82:	f043 0220 	orr.w	r2, r3, #32
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e000      	b.n	8002c90 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <__libc_init_array>:
 8002c98:	b570      	push	{r4, r5, r6, lr}
 8002c9a:	2500      	movs	r5, #0
 8002c9c:	4e0c      	ldr	r6, [pc, #48]	; (8002cd0 <__libc_init_array+0x38>)
 8002c9e:	4c0d      	ldr	r4, [pc, #52]	; (8002cd4 <__libc_init_array+0x3c>)
 8002ca0:	1ba4      	subs	r4, r4, r6
 8002ca2:	10a4      	asrs	r4, r4, #2
 8002ca4:	42a5      	cmp	r5, r4
 8002ca6:	d109      	bne.n	8002cbc <__libc_init_array+0x24>
 8002ca8:	f000 f822 	bl	8002cf0 <_init>
 8002cac:	2500      	movs	r5, #0
 8002cae:	4e0a      	ldr	r6, [pc, #40]	; (8002cd8 <__libc_init_array+0x40>)
 8002cb0:	4c0a      	ldr	r4, [pc, #40]	; (8002cdc <__libc_init_array+0x44>)
 8002cb2:	1ba4      	subs	r4, r4, r6
 8002cb4:	10a4      	asrs	r4, r4, #2
 8002cb6:	42a5      	cmp	r5, r4
 8002cb8:	d105      	bne.n	8002cc6 <__libc_init_array+0x2e>
 8002cba:	bd70      	pop	{r4, r5, r6, pc}
 8002cbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cc0:	4798      	blx	r3
 8002cc2:	3501      	adds	r5, #1
 8002cc4:	e7ee      	b.n	8002ca4 <__libc_init_array+0xc>
 8002cc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cca:	4798      	blx	r3
 8002ccc:	3501      	adds	r5, #1
 8002cce:	e7f2      	b.n	8002cb6 <__libc_init_array+0x1e>
 8002cd0:	08002fc0 	.word	0x08002fc0
 8002cd4:	08002fc0 	.word	0x08002fc0
 8002cd8:	08002fc0 	.word	0x08002fc0
 8002cdc:	08002fc4 	.word	0x08002fc4

08002ce0 <memset>:
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	4402      	add	r2, r0
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d100      	bne.n	8002cea <memset+0xa>
 8002ce8:	4770      	bx	lr
 8002cea:	f803 1b01 	strb.w	r1, [r3], #1
 8002cee:	e7f9      	b.n	8002ce4 <memset+0x4>

08002cf0 <_init>:
 8002cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf2:	bf00      	nop
 8002cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf6:	bc08      	pop	{r3}
 8002cf8:	469e      	mov	lr, r3
 8002cfa:	4770      	bx	lr

08002cfc <_fini>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	bf00      	nop
 8002d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d02:	bc08      	pop	{r3}
 8002d04:	469e      	mov	lr, r3
 8002d06:	4770      	bx	lr
