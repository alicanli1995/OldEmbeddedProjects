
004_LED_CONTROL_WITH_BUTTON_AND_NOTIFY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080030dc  080030dc  000130dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003144  08003144  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003144  08003144  00013144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800314c  0800314c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800314c  0800314c  0001314c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fc8  20000010  08003164  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003fd8  08003164  00023fd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a150  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c2c  00000000  00000000  0002a190  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a0  00000000  00000000  0002bdc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007b8  00000000  00000000  0002c660  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000206ac  00000000  00000000  0002ce18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b2b  00000000  00000000  0004d4c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6cb5  00000000  00000000  00054fef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011bca4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002118  00000000  00000000  0011bd20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080030c4 	.word	0x080030c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080030c4 	.word	0x080030c4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000080 	.word	0x20000080

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b08e      	sub	sp, #56	; 0x38
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 f9af 	bl	800086c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f831 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f88d 	bl	8000630 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ledState */
   osThreadDef(ledState, myLedTask, osPriorityNormal, 0, 128);
 8000516:	4b13      	ldr	r3, [pc, #76]	; (8000564 <main+0x60>)
 8000518:	f107 041c 	add.w	r4, r7, #28
 800051c:	461d      	mov	r5, r3
 800051e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000522:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000526:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledStateHandle = osThreadCreate(osThread(ledState), NULL);
 800052a:	f107 031c 	add.w	r3, r7, #28
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f001 f912 	bl	800175a <osThreadCreate>
 8000536:	4602      	mov	r2, r0
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <main+0x64>)
 800053a:	601a      	str	r2, [r3, #0]
/*  xTaskCreate(myLedTask, "Led_Task_1", 750, NULL, 2, &myLed);
  xTaskCreate(myButtonTask, "Button_State_Task", 750, NULL, 2, &myButton);*/
  /* definition and creation of buttonState */
  osThreadDef(buttonState, myButtonTask, osPriorityIdle, 0, 128);
 800053c:	4b0b      	ldr	r3, [pc, #44]	; (800056c <main+0x68>)
 800053e:	463c      	mov	r4, r7
 8000540:	461d      	mov	r5, r3
 8000542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000546:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonStateHandle = osThreadCreate(osThread(buttonState), NULL);
 800054e:	463b      	mov	r3, r7
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f001 f901 	bl	800175a <osThreadCreate>
 8000558:	4602      	mov	r2, r0
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <main+0x6c>)
 800055c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800055e:	f001 f8f5 	bl	800174c <osKernelStart>
 // vTaskStartScheduler();
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000562:	e7fe      	b.n	8000562 <main+0x5e>
 8000564:	080030e8 	.word	0x080030e8
 8000568:	20003fcc 	.word	0x20003fcc
 800056c:	08003110 	.word	0x08003110
 8000570:	20003fd0 	.word	0x20003fd0

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	; 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fd96 	bl	80030b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b22      	ldr	r3, [pc, #136]	; (8000628 <SystemClock_Config+0xb4>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a21      	ldr	r2, [pc, #132]	; (8000628 <SystemClock_Config+0xb4>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <SystemClock_Config+0xb4>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <SystemClock_Config+0xb8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1b      	ldr	r2, [pc, #108]	; (800062c <SystemClock_Config+0xb8>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <SystemClock_Config+0xb8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005dc:	2300      	movs	r3, #0
 80005de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fc7f 	bl	8000ee8 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005f0:	f000 f8a8 	bl	8000744 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f000 feda 	bl	80013c8 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800061a:	f000 f893 	bl	8000744 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	; 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_GPIO_Init+0x98>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <MX_GPIO_Init+0x98>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_GPIO_Init+0x98>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_GPIO_Init+0x98>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <MX_GPIO_Init+0x98>)
 800066c:	f043 0308 	orr.w	r3, r3, #8
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_GPIO_Init+0x98>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0308 	and.w	r3, r3, #8
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000684:	4811      	ldr	r0, [pc, #68]	; (80006cc <MX_GPIO_Init+0x9c>)
 8000686:	f000 fbfb 	bl	8000e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800068a:	2301      	movs	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	4619      	mov	r1, r3
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <MX_GPIO_Init+0xa0>)
 800069e:	f000 fa3d 	bl	8000b1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006a2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	4619      	mov	r1, r3
 80006ba:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_GPIO_Init+0x9c>)
 80006bc:	f000 fa2e 	bl	8000b1c <HAL_GPIO_Init>

}
 80006c0:	bf00      	nop
 80006c2:	3720      	adds	r7, #32
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020c00 	.word	0x40020c00
 80006d0:	40020000 	.word	0x40020000

080006d4 <myLedTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_myLedTask */
void myLedTask(void const * argument)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b086      	sub	sp, #24
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t pulNotificationValue = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
  for(;;)
  {
	 if(osSignalWait(&pulNotificationValue, 100).status== osEventSignal){
 80006e0:	f107 0108 	add.w	r1, r7, #8
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2264      	movs	r2, #100	; 0x64
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f8c2 	bl	8001874 <osSignalWait>
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b08      	cmp	r3, #8
 80006f4:	d1f4      	bne.n	80006e0 <myLedTask+0xc>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_All);
 80006f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006fa:	4802      	ldr	r0, [pc, #8]	; (8000704 <myLedTask+0x30>)
 80006fc:	f000 fbd9 	bl	8000eb2 <HAL_GPIO_TogglePin>
	 if(osSignalWait(&pulNotificationValue, 100).status== osEventSignal){
 8000700:	e7ee      	b.n	80006e0 <myLedTask+0xc>
 8000702:	bf00      	nop
 8000704:	40020c00 	.word	0x40020c00

08000708 <myButtonTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_myButtonTask */
void myButtonTask(void const * argument)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN myButtonTask */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET){
 8000710:	2101      	movs	r1, #1
 8000712:	480a      	ldr	r0, [pc, #40]	; (800073c <myButtonTask+0x34>)
 8000714:	f000 fb9c 	bl	8000e50 <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b01      	cmp	r3, #1
 800071c:	d1f8      	bne.n	8000710 <myButtonTask+0x8>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
 800071e:	bf00      	nop
 8000720:	2101      	movs	r1, #1
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <myButtonTask+0x34>)
 8000724:	f000 fb94 	bl	8000e50 <HAL_GPIO_ReadPin>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1f8      	bne.n	8000720 <myButtonTask+0x18>
		  osSignalSet(ledStateHandle, 0x00);
 800072e:	4b04      	ldr	r3, [pc, #16]	; (8000740 <myButtonTask+0x38>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f001 f85d 	bl	80017f4 <osSignalSet>
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET){
 800073a:	e7e9      	b.n	8000710 <myButtonTask+0x8>
 800073c:	40020000 	.word	0x40020000
 8000740:	20003fcc 	.word	0x20003fcc

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074a:	e7fe      	b.n	800074a <Error_Handler+0x6>

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_MspInit+0x54>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	4a11      	ldr	r2, [pc, #68]	; (80007a0 <HAL_MspInit+0x54>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6453      	str	r3, [r2, #68]	; 0x44
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_MspInit+0x54>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <HAL_MspInit+0x54>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <HAL_MspInit+0x54>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_MspInit+0x54>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	210f      	movs	r1, #15
 800078e:	f06f 0001 	mvn.w	r0, #1
 8000792:	f000 f99a 	bl	8000aca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <NMI_Handler+0x4>

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <MemManage_Handler+0x4>

080007b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d4:	f000 f89c 	bl	8000910 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007d8:	f001 fdc8 	bl	800236c <xTaskGetSchedulerState>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d001      	beq.n	80007e6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007e2:	f002 f9e1 	bl	8002ba8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <SystemInit+0x28>)
 80007f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f6:	4a07      	ldr	r2, [pc, #28]	; (8000814 <SystemInit+0x28>)
 80007f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <SystemInit+0x28>)
 8000802:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000806:	609a      	str	r2, [r3, #8]
#endif
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000850 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800081c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800081e:	e003      	b.n	8000828 <LoopCopyDataInit>

08000820 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000822:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000824:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000826:	3104      	adds	r1, #4

08000828 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000828:	480b      	ldr	r0, [pc, #44]	; (8000858 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800082c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800082e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000830:	d3f6      	bcc.n	8000820 <CopyDataInit>
  ldr  r2, =_sbss
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000834:	e002      	b.n	800083c <LoopFillZerobss>

08000836 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000836:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000838:	f842 3b04 	str.w	r3, [r2], #4

0800083c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800083e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000840:	d3f9      	bcc.n	8000836 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000842:	f7ff ffd3 	bl	80007ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000846:	f002 fc11 	bl	800306c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800084a:	f7ff fe5b 	bl	8000504 <main>
  bx  lr    
 800084e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000850:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000854:	08003154 	.word	0x08003154
  ldr  r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800085c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000860:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000864:	20003fd8 	.word	0x20003fd8

08000868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC_IRQHandler>
	...

0800086c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <HAL_Init+0x40>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0d      	ldr	r2, [pc, #52]	; (80008ac <HAL_Init+0x40>)
 8000876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800087a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <HAL_Init+0x40>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <HAL_Init+0x40>)
 8000882:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <HAL_Init+0x40>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <HAL_Init+0x40>)
 800088e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000894:	2003      	movs	r0, #3
 8000896:	f000 f90d 	bl	8000ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800089a:	200f      	movs	r0, #15
 800089c:	f000 f808 	bl	80008b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008a0:	f7ff ff54 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a4:	2300      	movs	r3, #0
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40023c00 	.word	0x40023c00

080008b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_InitTick+0x54>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_InitTick+0x58>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f917 	bl	8000b02 <HAL_SYSTICK_Config>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e00e      	b.n	80008fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b0f      	cmp	r3, #15
 80008e2:	d80a      	bhi.n	80008fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e4:	2200      	movs	r2, #0
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ec:	f000 f8ed 	bl	8000aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008f0:	4a06      	ldr	r2, [pc, #24]	; (800090c <HAL_InitTick+0x5c>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008f6:	2300      	movs	r3, #0
 80008f8:	e000      	b.n	80008fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000000 	.word	0x20000000
 8000908:	20000008 	.word	0x20000008
 800090c:	20000004 	.word	0x20000004

08000910 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_IncTick+0x20>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_IncTick+0x24>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_IncTick+0x24>)
 8000922:	6013      	str	r3, [r2, #0]
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20000008 	.word	0x20000008
 8000934:	20003fd4 	.word	0x20003fd4

08000938 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  return uwTick;
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <HAL_GetTick+0x14>)
 800093e:	681b      	ldr	r3, [r3, #0]
}
 8000940:	4618      	mov	r0, r3
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	20003fd4 	.word	0x20003fd4

08000950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800096c:	4013      	ands	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000982:	4a04      	ldr	r2, [pc, #16]	; (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	60d3      	str	r3, [r2, #12]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <__NVIC_GetPriorityGrouping+0x18>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	f003 0307 	and.w	r3, r3, #7
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	db0a      	blt.n	80009de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	490c      	ldr	r1, [pc, #48]	; (8000a00 <__NVIC_SetPriority+0x4c>)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	0112      	lsls	r2, r2, #4
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	440b      	add	r3, r1
 80009d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009dc:	e00a      	b.n	80009f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4908      	ldr	r1, [pc, #32]	; (8000a04 <__NVIC_SetPriority+0x50>)
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	f003 030f 	and.w	r3, r3, #15
 80009ea:	3b04      	subs	r3, #4
 80009ec:	0112      	lsls	r2, r2, #4
 80009ee:	b2d2      	uxtb	r2, r2
 80009f0:	440b      	add	r3, r1
 80009f2:	761a      	strb	r2, [r3, #24]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000e100 	.word	0xe000e100
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b089      	sub	sp, #36	; 0x24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	f1c3 0307 	rsb	r3, r3, #7
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	bf28      	it	cs
 8000a26:	2304      	movcs	r3, #4
 8000a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	2b06      	cmp	r3, #6
 8000a30:	d902      	bls.n	8000a38 <NVIC_EncodePriority+0x30>
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3b03      	subs	r3, #3
 8000a36:	e000      	b.n	8000a3a <NVIC_EncodePriority+0x32>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43da      	mvns	r2, r3
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a50:	f04f 31ff 	mov.w	r1, #4294967295
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5a:	43d9      	mvns	r1, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	4313      	orrs	r3, r2
         );
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3724      	adds	r7, #36	; 0x24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a80:	d301      	bcc.n	8000a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a82:	2301      	movs	r3, #1
 8000a84:	e00f      	b.n	8000aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <SysTick_Config+0x40>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8e:	210f      	movs	r1, #15
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f7ff ff8e 	bl	80009b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <SysTick_Config+0x40>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9e:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <SysTick_Config+0x40>)
 8000aa0:	2207      	movs	r2, #7
 8000aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	e000e010 	.word	0xe000e010

08000ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ff47 	bl	8000950 <__NVIC_SetPriorityGrouping>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b086      	sub	sp, #24
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
 8000ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000adc:	f7ff ff5c 	bl	8000998 <__NVIC_GetPriorityGrouping>
 8000ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	68b9      	ldr	r1, [r7, #8]
 8000ae6:	6978      	ldr	r0, [r7, #20]
 8000ae8:	f7ff ff8e 	bl	8000a08 <NVIC_EncodePriority>
 8000aec:	4602      	mov	r2, r0
 8000aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff5d 	bl	80009b4 <__NVIC_SetPriority>
}
 8000afa:	bf00      	nop
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff ffb0 	bl	8000a70 <SysTick_Config>
 8000b10:	4603      	mov	r3, r0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b089      	sub	sp, #36	; 0x24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
 8000b36:	e16b      	b.n	8000e10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b38:	2201      	movs	r2, #1
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	697a      	ldr	r2, [r7, #20]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	f040 815a 	bne.w	8000e0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d00b      	beq.n	8000b76 <HAL_GPIO_Init+0x5a>
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d007      	beq.n	8000b76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b6a:	2b11      	cmp	r3, #17
 8000b6c:	d003      	beq.n	8000b76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	2b12      	cmp	r3, #18
 8000b74:	d130      	bne.n	8000bd8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2203      	movs	r2, #3
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bac:	2201      	movs	r2, #1
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	091b      	lsrs	r3, r3, #4
 8000bc2:	f003 0201 	and.w	r2, r3, #1
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	689a      	ldr	r2, [r3, #8]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b02      	cmp	r3, #2
 8000c0e:	d003      	beq.n	8000c18 <HAL_GPIO_Init+0xfc>
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	2b12      	cmp	r3, #18
 8000c16:	d123      	bne.n	8000c60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	08da      	lsrs	r2, r3, #3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3208      	adds	r2, #8
 8000c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	f003 0307 	and.w	r3, r3, #7
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	220f      	movs	r2, #15
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	691a      	ldr	r2, [r3, #16]
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	69ba      	ldr	r2, [r7, #24]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	08da      	lsrs	r2, r3, #3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3208      	adds	r2, #8
 8000c5a:	69b9      	ldr	r1, [r7, #24]
 8000c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0203 	and.w	r2, r3, #3
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	69ba      	ldr	r2, [r7, #24]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	f000 80b4 	beq.w	8000e0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b5f      	ldr	r3, [pc, #380]	; (8000e24 <HAL_GPIO_Init+0x308>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	4a5e      	ldr	r2, [pc, #376]	; (8000e24 <HAL_GPIO_Init+0x308>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb2:	4b5c      	ldr	r3, [pc, #368]	; (8000e24 <HAL_GPIO_Init+0x308>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cbe:	4a5a      	ldr	r2, [pc, #360]	; (8000e28 <HAL_GPIO_Init+0x30c>)
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	089b      	lsrs	r3, r3, #2
 8000cc4:	3302      	adds	r3, #2
 8000cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f003 0303 	and.w	r3, r3, #3
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	220f      	movs	r2, #15
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a51      	ldr	r2, [pc, #324]	; (8000e2c <HAL_GPIO_Init+0x310>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d02b      	beq.n	8000d42 <HAL_GPIO_Init+0x226>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a50      	ldr	r2, [pc, #320]	; (8000e30 <HAL_GPIO_Init+0x314>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d025      	beq.n	8000d3e <HAL_GPIO_Init+0x222>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a4f      	ldr	r2, [pc, #316]	; (8000e34 <HAL_GPIO_Init+0x318>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d01f      	beq.n	8000d3a <HAL_GPIO_Init+0x21e>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a4e      	ldr	r2, [pc, #312]	; (8000e38 <HAL_GPIO_Init+0x31c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d019      	beq.n	8000d36 <HAL_GPIO_Init+0x21a>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a4d      	ldr	r2, [pc, #308]	; (8000e3c <HAL_GPIO_Init+0x320>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d013      	beq.n	8000d32 <HAL_GPIO_Init+0x216>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a4c      	ldr	r2, [pc, #304]	; (8000e40 <HAL_GPIO_Init+0x324>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d00d      	beq.n	8000d2e <HAL_GPIO_Init+0x212>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a4b      	ldr	r2, [pc, #300]	; (8000e44 <HAL_GPIO_Init+0x328>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d007      	beq.n	8000d2a <HAL_GPIO_Init+0x20e>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a4a      	ldr	r2, [pc, #296]	; (8000e48 <HAL_GPIO_Init+0x32c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d101      	bne.n	8000d26 <HAL_GPIO_Init+0x20a>
 8000d22:	2307      	movs	r3, #7
 8000d24:	e00e      	b.n	8000d44 <HAL_GPIO_Init+0x228>
 8000d26:	2308      	movs	r3, #8
 8000d28:	e00c      	b.n	8000d44 <HAL_GPIO_Init+0x228>
 8000d2a:	2306      	movs	r3, #6
 8000d2c:	e00a      	b.n	8000d44 <HAL_GPIO_Init+0x228>
 8000d2e:	2305      	movs	r3, #5
 8000d30:	e008      	b.n	8000d44 <HAL_GPIO_Init+0x228>
 8000d32:	2304      	movs	r3, #4
 8000d34:	e006      	b.n	8000d44 <HAL_GPIO_Init+0x228>
 8000d36:	2303      	movs	r3, #3
 8000d38:	e004      	b.n	8000d44 <HAL_GPIO_Init+0x228>
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	e002      	b.n	8000d44 <HAL_GPIO_Init+0x228>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <HAL_GPIO_Init+0x228>
 8000d42:	2300      	movs	r3, #0
 8000d44:	69fa      	ldr	r2, [r7, #28]
 8000d46:	f002 0203 	and.w	r2, r2, #3
 8000d4a:	0092      	lsls	r2, r2, #2
 8000d4c:	4093      	lsls	r3, r2
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d54:	4934      	ldr	r1, [pc, #208]	; (8000e28 <HAL_GPIO_Init+0x30c>)
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d62:	4b3a      	ldr	r3, [pc, #232]	; (8000e4c <HAL_GPIO_Init+0x330>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d003      	beq.n	8000d86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d86:	4a31      	ldr	r2, [pc, #196]	; (8000e4c <HAL_GPIO_Init+0x330>)
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d8c:	4b2f      	ldr	r3, [pc, #188]	; (8000e4c <HAL_GPIO_Init+0x330>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d003      	beq.n	8000db0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000db0:	4a26      	ldr	r2, [pc, #152]	; (8000e4c <HAL_GPIO_Init+0x330>)
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000db6:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <HAL_GPIO_Init+0x330>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dda:	4a1c      	ldr	r2, [pc, #112]	; (8000e4c <HAL_GPIO_Init+0x330>)
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <HAL_GPIO_Init+0x330>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d003      	beq.n	8000e04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e04:	4a11      	ldr	r2, [pc, #68]	; (8000e4c <HAL_GPIO_Init+0x330>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	61fb      	str	r3, [r7, #28]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	2b0f      	cmp	r3, #15
 8000e14:	f67f ae90 	bls.w	8000b38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e18:	bf00      	nop
 8000e1a:	3724      	adds	r7, #36	; 0x24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40013800 	.word	0x40013800
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020400 	.word	0x40020400
 8000e34:	40020800 	.word	0x40020800
 8000e38:	40020c00 	.word	0x40020c00
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40021400 	.word	0x40021400
 8000e44:	40021800 	.word	0x40021800
 8000e48:	40021c00 	.word	0x40021c00
 8000e4c:	40013c00 	.word	0x40013c00

08000e50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	887b      	ldrh	r3, [r7, #2]
 8000e62:	4013      	ands	r3, r2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d002      	beq.n	8000e6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
 8000e6c:	e001      	b.n	8000e72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	807b      	strh	r3, [r7, #2]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e90:	787b      	ldrb	r3, [r7, #1]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d003      	beq.n	8000e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e96:	887a      	ldrh	r2, [r7, #2]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e9c:	e003      	b.n	8000ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e9e:	887b      	ldrh	r3, [r7, #2]
 8000ea0:	041a      	lsls	r2, r3, #16
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	619a      	str	r2, [r3, #24]
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	695a      	ldr	r2, [r3, #20]
 8000ec2:	887b      	ldrh	r3, [r7, #2]
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	887b      	ldrh	r3, [r7, #2]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d104      	bne.n	8000ed6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ecc:	887b      	ldrh	r3, [r7, #2]
 8000ece:	041a      	lsls	r2, r3, #16
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	619a      	str	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e25b      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d075      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f06:	4ba3      	ldr	r3, [pc, #652]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f003 030c 	and.w	r3, r3, #12
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d00c      	beq.n	8000f2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f12:	4ba0      	ldr	r3, [pc, #640]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d112      	bne.n	8000f44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f1e:	4b9d      	ldr	r3, [pc, #628]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f2a:	d10b      	bne.n	8000f44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2c:	4b99      	ldr	r3, [pc, #612]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d05b      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x108>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d157      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e236      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f4c:	d106      	bne.n	8000f5c <HAL_RCC_OscConfig+0x74>
 8000f4e:	4b91      	ldr	r3, [pc, #580]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a90      	ldr	r2, [pc, #576]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8000f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e01d      	b.n	8000f98 <HAL_RCC_OscConfig+0xb0>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f64:	d10c      	bne.n	8000f80 <HAL_RCC_OscConfig+0x98>
 8000f66:	4b8b      	ldr	r3, [pc, #556]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a8a      	ldr	r2, [pc, #552]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8000f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	4b88      	ldr	r3, [pc, #544]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a87      	ldr	r2, [pc, #540]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8000f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f7c:	6013      	str	r3, [r2, #0]
 8000f7e:	e00b      	b.n	8000f98 <HAL_RCC_OscConfig+0xb0>
 8000f80:	4b84      	ldr	r3, [pc, #528]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a83      	ldr	r2, [pc, #524]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8000f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	4b81      	ldr	r3, [pc, #516]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a80      	ldr	r2, [pc, #512]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8000f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d013      	beq.n	8000fc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa0:	f7ff fcca 	bl	8000938 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa8:	f7ff fcc6 	bl	8000938 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b64      	cmp	r3, #100	; 0x64
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e1fb      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fba:	4b76      	ldr	r3, [pc, #472]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d0f0      	beq.n	8000fa8 <HAL_RCC_OscConfig+0xc0>
 8000fc6:	e014      	b.n	8000ff2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fcb6 	bl	8000938 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd0:	f7ff fcb2 	bl	8000938 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b64      	cmp	r3, #100	; 0x64
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e1e7      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe2:	4b6c      	ldr	r3, [pc, #432]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f0      	bne.n	8000fd0 <HAL_RCC_OscConfig+0xe8>
 8000fee:	e000      	b.n	8000ff2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d063      	beq.n	80010c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ffe:	4b65      	ldr	r3, [pc, #404]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 030c 	and.w	r3, r3, #12
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00b      	beq.n	8001022 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800100a:	4b62      	ldr	r3, [pc, #392]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001012:	2b08      	cmp	r3, #8
 8001014:	d11c      	bne.n	8001050 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001016:	4b5f      	ldr	r3, [pc, #380]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d116      	bne.n	8001050 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001022:	4b5c      	ldr	r3, [pc, #368]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d005      	beq.n	800103a <HAL_RCC_OscConfig+0x152>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d001      	beq.n	800103a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e1bb      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103a:	4b56      	ldr	r3, [pc, #344]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4952      	ldr	r1, [pc, #328]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 800104a:	4313      	orrs	r3, r2
 800104c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104e:	e03a      	b.n	80010c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d020      	beq.n	800109a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001058:	4b4f      	ldr	r3, [pc, #316]	; (8001198 <HAL_RCC_OscConfig+0x2b0>)
 800105a:	2201      	movs	r2, #1
 800105c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800105e:	f7ff fc6b 	bl	8000938 <HAL_GetTick>
 8001062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001064:	e008      	b.n	8001078 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001066:	f7ff fc67 	bl	8000938 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e19c      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001078:	4b46      	ldr	r3, [pc, #280]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f0      	beq.n	8001066 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001084:	4b43      	ldr	r3, [pc, #268]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	4940      	ldr	r1, [pc, #256]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8001094:	4313      	orrs	r3, r2
 8001096:	600b      	str	r3, [r1, #0]
 8001098:	e015      	b.n	80010c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800109a:	4b3f      	ldr	r3, [pc, #252]	; (8001198 <HAL_RCC_OscConfig+0x2b0>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a0:	f7ff fc4a 	bl	8000938 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a8:	f7ff fc46 	bl	8000938 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e17b      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ba:	4b36      	ldr	r3, [pc, #216]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f0      	bne.n	80010a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d030      	beq.n	8001134 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d016      	beq.n	8001108 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010da:	4b30      	ldr	r3, [pc, #192]	; (800119c <HAL_RCC_OscConfig+0x2b4>)
 80010dc:	2201      	movs	r2, #1
 80010de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010e0:	f7ff fc2a 	bl	8000938 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e8:	f7ff fc26 	bl	8000938 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e15b      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010fa:	4b26      	ldr	r3, [pc, #152]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 80010fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0f0      	beq.n	80010e8 <HAL_RCC_OscConfig+0x200>
 8001106:	e015      	b.n	8001134 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001108:	4b24      	ldr	r3, [pc, #144]	; (800119c <HAL_RCC_OscConfig+0x2b4>)
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110e:	f7ff fc13 	bl	8000938 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001114:	e008      	b.n	8001128 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001116:	f7ff fc0f 	bl	8000938 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d901      	bls.n	8001128 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	e144      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 800112a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1f0      	bne.n	8001116 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f003 0304 	and.w	r3, r3, #4
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 80a0 	beq.w	8001282 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001142:	2300      	movs	r3, #0
 8001144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d10f      	bne.n	8001172 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <HAL_RCC_OscConfig+0x2ac>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800116e:	2301      	movs	r3, #1
 8001170:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <HAL_RCC_OscConfig+0x2b8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117a:	2b00      	cmp	r3, #0
 800117c:	d121      	bne.n	80011c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_RCC_OscConfig+0x2b8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_RCC_OscConfig+0x2b8>)
 8001184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800118a:	f7ff fbd5 	bl	8000938 <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001190:	e011      	b.n	80011b6 <HAL_RCC_OscConfig+0x2ce>
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	42470000 	.word	0x42470000
 800119c:	42470e80 	.word	0x42470e80
 80011a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011a4:	f7ff fbc8 	bl	8000938 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e0fd      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b6:	4b81      	ldr	r3, [pc, #516]	; (80013bc <HAL_RCC_OscConfig+0x4d4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f0      	beq.n	80011a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d106      	bne.n	80011d8 <HAL_RCC_OscConfig+0x2f0>
 80011ca:	4b7d      	ldr	r3, [pc, #500]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 80011cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ce:	4a7c      	ldr	r2, [pc, #496]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6713      	str	r3, [r2, #112]	; 0x70
 80011d6:	e01c      	b.n	8001212 <HAL_RCC_OscConfig+0x32a>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2b05      	cmp	r3, #5
 80011de:	d10c      	bne.n	80011fa <HAL_RCC_OscConfig+0x312>
 80011e0:	4b77      	ldr	r3, [pc, #476]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 80011e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e4:	4a76      	ldr	r2, [pc, #472]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 80011e6:	f043 0304 	orr.w	r3, r3, #4
 80011ea:	6713      	str	r3, [r2, #112]	; 0x70
 80011ec:	4b74      	ldr	r3, [pc, #464]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 80011ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f0:	4a73      	ldr	r2, [pc, #460]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6713      	str	r3, [r2, #112]	; 0x70
 80011f8:	e00b      	b.n	8001212 <HAL_RCC_OscConfig+0x32a>
 80011fa:	4b71      	ldr	r3, [pc, #452]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 80011fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fe:	4a70      	ldr	r2, [pc, #448]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 8001200:	f023 0301 	bic.w	r3, r3, #1
 8001204:	6713      	str	r3, [r2, #112]	; 0x70
 8001206:	4b6e      	ldr	r3, [pc, #440]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 8001208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800120a:	4a6d      	ldr	r2, [pc, #436]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 800120c:	f023 0304 	bic.w	r3, r3, #4
 8001210:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d015      	beq.n	8001246 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121a:	f7ff fb8d 	bl	8000938 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001220:	e00a      	b.n	8001238 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f7ff fb89 	bl	8000938 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001230:	4293      	cmp	r3, r2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e0bc      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001238:	4b61      	ldr	r3, [pc, #388]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 800123a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0ee      	beq.n	8001222 <HAL_RCC_OscConfig+0x33a>
 8001244:	e014      	b.n	8001270 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001246:	f7ff fb77 	bl	8000938 <HAL_GetTick>
 800124a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800124c:	e00a      	b.n	8001264 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800124e:	f7ff fb73 	bl	8000938 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	f241 3288 	movw	r2, #5000	; 0x1388
 800125c:	4293      	cmp	r3, r2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e0a6      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001264:	4b56      	ldr	r3, [pc, #344]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 8001266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1ee      	bne.n	800124e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d105      	bne.n	8001282 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001276:	4b52      	ldr	r3, [pc, #328]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	4a51      	ldr	r2, [pc, #324]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 800127c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001280:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 8092 	beq.w	80013b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800128c:	4b4c      	ldr	r3, [pc, #304]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b08      	cmp	r3, #8
 8001296:	d05c      	beq.n	8001352 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	2b02      	cmp	r3, #2
 800129e:	d141      	bne.n	8001324 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a0:	4b48      	ldr	r3, [pc, #288]	; (80013c4 <HAL_RCC_OscConfig+0x4dc>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a6:	f7ff fb47 	bl	8000938 <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012ae:	f7ff fb43 	bl	8000938 <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e078      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012c0:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1f0      	bne.n	80012ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69da      	ldr	r2, [r3, #28]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	019b      	lsls	r3, r3, #6
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e2:	085b      	lsrs	r3, r3, #1
 80012e4:	3b01      	subs	r3, #1
 80012e6:	041b      	lsls	r3, r3, #16
 80012e8:	431a      	orrs	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ee:	061b      	lsls	r3, r3, #24
 80012f0:	4933      	ldr	r1, [pc, #204]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012f6:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <HAL_RCC_OscConfig+0x4dc>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fb1c 	bl	8000938 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001304:	f7ff fb18 	bl	8000938 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e04d      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0x41c>
 8001322:	e045      	b.n	80013b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <HAL_RCC_OscConfig+0x4dc>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fb05 	bl	8000938 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001332:	f7ff fb01 	bl	8000938 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e036      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001344:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1f0      	bne.n	8001332 <HAL_RCC_OscConfig+0x44a>
 8001350:	e02e      	b.n	80013b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e029      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <HAL_RCC_OscConfig+0x4d8>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	429a      	cmp	r2, r3
 8001370:	d11c      	bne.n	80013ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800137c:	429a      	cmp	r2, r3
 800137e:	d115      	bne.n	80013ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001386:	4013      	ands	r3, r2
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800138c:	4293      	cmp	r3, r2
 800138e:	d10d      	bne.n	80013ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800139a:	429a      	cmp	r2, r3
 800139c:	d106      	bne.n	80013ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d001      	beq.n	80013b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40007000 	.word	0x40007000
 80013c0:	40023800 	.word	0x40023800
 80013c4:	42470060 	.word	0x42470060

080013c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d101      	bne.n	80013dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0cc      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013dc:	4b68      	ldr	r3, [pc, #416]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d90c      	bls.n	8001404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b65      	ldr	r3, [pc, #404]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f2:	4b63      	ldr	r3, [pc, #396]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e0b8      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d020      	beq.n	8001452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800141c:	4b59      	ldr	r3, [pc, #356]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4a58      	ldr	r2, [pc, #352]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001426:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001434:	4b53      	ldr	r3, [pc, #332]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	4a52      	ldr	r2, [pc, #328]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800143e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001440:	4b50      	ldr	r3, [pc, #320]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	494d      	ldr	r1, [pc, #308]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800144e:	4313      	orrs	r3, r2
 8001450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d044      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d107      	bne.n	8001476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	4b47      	ldr	r3, [pc, #284]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d119      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e07f      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d003      	beq.n	8001486 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001482:	2b03      	cmp	r3, #3
 8001484:	d107      	bne.n	8001496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001486:	4b3f      	ldr	r3, [pc, #252]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d109      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e06f      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001496:	4b3b      	ldr	r3, [pc, #236]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e067      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014a6:	4b37      	ldr	r3, [pc, #220]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f023 0203 	bic.w	r2, r3, #3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4934      	ldr	r1, [pc, #208]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014b8:	f7ff fa3e 	bl	8000938 <HAL_GetTick>
 80014bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c0:	f7ff fa3a 	bl	8000938 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e04f      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 020c 	and.w	r2, r3, #12
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d1eb      	bne.n	80014c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014e8:	4b25      	ldr	r3, [pc, #148]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 030f 	and.w	r3, r3, #15
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d20c      	bcs.n	8001510 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f6:	4b22      	ldr	r3, [pc, #136]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e032      	b.n	8001576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d008      	beq.n	800152e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	4916      	ldr	r1, [pc, #88]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	4313      	orrs	r3, r2
 800152c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0308 	and.w	r3, r3, #8
 8001536:	2b00      	cmp	r3, #0
 8001538:	d009      	beq.n	800154e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800153a:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	490e      	ldr	r1, [pc, #56]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	4313      	orrs	r3, r2
 800154c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800154e:	f000 f821 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 8001552:	4601      	mov	r1, r0
 8001554:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	4a0a      	ldr	r2, [pc, #40]	; (8001588 <HAL_RCC_ClockConfig+0x1c0>)
 8001560:	5cd3      	ldrb	r3, [r2, r3]
 8001562:	fa21 f303 	lsr.w	r3, r1, r3
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <HAL_RCC_ClockConfig+0x1c4>)
 8001568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_RCC_ClockConfig+0x1c8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff f99e 	bl	80008b0 <HAL_InitTick>

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023c00 	.word	0x40023c00
 8001584:	40023800 	.word	0x40023800
 8001588:	08003134 	.word	0x08003134
 800158c:	20000000 	.word	0x20000000
 8001590:	20000004 	.word	0x20000004

08001594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015aa:	4b50      	ldr	r3, [pc, #320]	; (80016ec <HAL_RCC_GetSysClockFreq+0x158>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	d007      	beq.n	80015c6 <HAL_RCC_GetSysClockFreq+0x32>
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d008      	beq.n	80015cc <HAL_RCC_GetSysClockFreq+0x38>
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f040 808d 	bne.w	80016da <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015c0:	4b4b      	ldr	r3, [pc, #300]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80015c2:	60bb      	str	r3, [r7, #8]
       break;
 80015c4:	e08c      	b.n	80016e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015c6:	4b4b      	ldr	r3, [pc, #300]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80015c8:	60bb      	str	r3, [r7, #8]
      break;
 80015ca:	e089      	b.n	80016e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015cc:	4b47      	ldr	r3, [pc, #284]	; (80016ec <HAL_RCC_GetSysClockFreq+0x158>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015d6:	4b45      	ldr	r3, [pc, #276]	; (80016ec <HAL_RCC_GetSysClockFreq+0x158>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d023      	beq.n	800162a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e2:	4b42      	ldr	r3, [pc, #264]	; (80016ec <HAL_RCC_GetSysClockFreq+0x158>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	099b      	lsrs	r3, r3, #6
 80015e8:	f04f 0400 	mov.w	r4, #0
 80015ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	ea03 0501 	and.w	r5, r3, r1
 80015f8:	ea04 0602 	and.w	r6, r4, r2
 80015fc:	4a3d      	ldr	r2, [pc, #244]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80015fe:	fb02 f106 	mul.w	r1, r2, r6
 8001602:	2200      	movs	r2, #0
 8001604:	fb02 f205 	mul.w	r2, r2, r5
 8001608:	440a      	add	r2, r1
 800160a:	493a      	ldr	r1, [pc, #232]	; (80016f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800160c:	fba5 0101 	umull	r0, r1, r5, r1
 8001610:	1853      	adds	r3, r2, r1
 8001612:	4619      	mov	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f04f 0400 	mov.w	r4, #0
 800161a:	461a      	mov	r2, r3
 800161c:	4623      	mov	r3, r4
 800161e:	f7fe fdd7 	bl	80001d0 <__aeabi_uldivmod>
 8001622:	4603      	mov	r3, r0
 8001624:	460c      	mov	r4, r1
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	e049      	b.n	80016be <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800162a:	4b30      	ldr	r3, [pc, #192]	; (80016ec <HAL_RCC_GetSysClockFreq+0x158>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	099b      	lsrs	r3, r3, #6
 8001630:	f04f 0400 	mov.w	r4, #0
 8001634:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	ea03 0501 	and.w	r5, r3, r1
 8001640:	ea04 0602 	and.w	r6, r4, r2
 8001644:	4629      	mov	r1, r5
 8001646:	4632      	mov	r2, r6
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	f04f 0400 	mov.w	r4, #0
 8001650:	0154      	lsls	r4, r2, #5
 8001652:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001656:	014b      	lsls	r3, r1, #5
 8001658:	4619      	mov	r1, r3
 800165a:	4622      	mov	r2, r4
 800165c:	1b49      	subs	r1, r1, r5
 800165e:	eb62 0206 	sbc.w	r2, r2, r6
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	f04f 0400 	mov.w	r4, #0
 800166a:	0194      	lsls	r4, r2, #6
 800166c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001670:	018b      	lsls	r3, r1, #6
 8001672:	1a5b      	subs	r3, r3, r1
 8001674:	eb64 0402 	sbc.w	r4, r4, r2
 8001678:	f04f 0100 	mov.w	r1, #0
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	00e2      	lsls	r2, r4, #3
 8001682:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001686:	00d9      	lsls	r1, r3, #3
 8001688:	460b      	mov	r3, r1
 800168a:	4614      	mov	r4, r2
 800168c:	195b      	adds	r3, r3, r5
 800168e:	eb44 0406 	adc.w	r4, r4, r6
 8001692:	f04f 0100 	mov.w	r1, #0
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	02a2      	lsls	r2, r4, #10
 800169c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016a0:	0299      	lsls	r1, r3, #10
 80016a2:	460b      	mov	r3, r1
 80016a4:	4614      	mov	r4, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	4621      	mov	r1, r4
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f04f 0400 	mov.w	r4, #0
 80016b0:	461a      	mov	r2, r3
 80016b2:	4623      	mov	r3, r4
 80016b4:	f7fe fd8c 	bl	80001d0 <__aeabi_uldivmod>
 80016b8:	4603      	mov	r3, r0
 80016ba:	460c      	mov	r4, r1
 80016bc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_RCC_GetSysClockFreq+0x158>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	0c1b      	lsrs	r3, r3, #16
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	3301      	adds	r3, #1
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	60bb      	str	r3, [r7, #8]
      break;
 80016d8:	e002      	b.n	80016e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80016dc:	60bb      	str	r3, [r7, #8]
      break;
 80016de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016e0:	68bb      	ldr	r3, [r7, #8]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800
 80016f0:	00f42400 	.word	0x00f42400
 80016f4:	017d7840 	.word	0x017d7840

080016f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800170a:	2b84      	cmp	r3, #132	; 0x84
 800170c:	d005      	beq.n	800171a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800170e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4413      	add	r3, r2
 8001716:	3303      	adds	r3, #3
 8001718:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800172e:	f3ef 8305 	mrs	r3, IPSR
 8001732:	607b      	str	r3, [r7, #4]
  return(result);
 8001734:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001736:	2b00      	cmp	r3, #0
 8001738:	bf14      	ite	ne
 800173a:	2301      	movne	r3, #1
 800173c:	2300      	moveq	r3, #0
 800173e:	b2db      	uxtb	r3, r3
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001750:	f000 fb20 	bl	8001d94 <vTaskStartScheduler>
  
  return osOK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	bd80      	pop	{r7, pc}

0800175a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800175a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800175c:	b089      	sub	sp, #36	; 0x24
 800175e:	af04      	add	r7, sp, #16
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <osThreadCreate+0x54>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d01c      	beq.n	80017ae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685c      	ldr	r4, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681d      	ldr	r5, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691e      	ldr	r6, [r3, #16]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ffb6 	bl	80016f8 <makeFreeRtosPriority>
 800178c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001796:	9202      	str	r2, [sp, #8]
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	9100      	str	r1, [sp, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	4632      	mov	r2, r6
 80017a0:	4629      	mov	r1, r5
 80017a2:	4620      	mov	r0, r4
 80017a4:	f000 f966 	bl	8001a74 <xTaskCreateStatic>
 80017a8:	4603      	mov	r3, r0
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	e01c      	b.n	80017e8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685c      	ldr	r4, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017ba:	b29e      	uxth	r6, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ff98 	bl	80016f8 <makeFreeRtosPriority>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	9200      	str	r2, [sp, #0]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	4632      	mov	r2, r6
 80017d6:	4629      	mov	r1, r5
 80017d8:	4620      	mov	r0, r4
 80017da:	f000 f9a5 	bl	8001b28 <xTaskCreate>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d001      	beq.n	80017e8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	e000      	b.n	80017ea <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080017f4 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af02      	add	r7, sp, #8
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8001806:	f7ff ff8f 	bl	8001728 <inHandlerMode>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d01c      	beq.n	800184a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8001810:	6839      	ldr	r1, [r7, #0]
 8001812:	f107 0208 	add.w	r2, r7, #8
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	4613      	mov	r3, r2
 800181e:	2201      	movs	r2, #1
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 fecd 	bl	80025c0 <xTaskGenericNotifyFromISR>
 8001826:	4603      	mov	r3, r0
 8001828:	2b01      	cmp	r3, #1
 800182a:	d002      	beq.n	8001832 <osSignalSet+0x3e>
      return 0x80000000;
 800182c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001830:	e019      	b.n	8001866 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d015      	beq.n	8001864 <osSignalSet+0x70>
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <osSignalSet+0x7c>)
 800183a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	f3bf 8f4f 	dsb	sy
 8001844:	f3bf 8f6f 	isb	sy
 8001848:	e00c      	b.n	8001864 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800184a:	6839      	ldr	r1, [r7, #0]
 800184c:	f107 0308 	add.w	r3, r7, #8
 8001850:	2201      	movs	r2, #1
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 fe02 	bl	800245c <xTaskGenericNotify>
 8001858:	4603      	mov	r3, r0
 800185a:	2b01      	cmp	r3, #1
 800185c:	d002      	beq.n	8001864 <osSignalSet+0x70>
    return 0x80000000;
 800185e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001862:	e000      	b.n	8001866 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8001864:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	e000ed04 	.word	0xe000ed04

08001874 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800188e:	d103      	bne.n	8001898 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	e009      	b.n	80018ac <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d006      	beq.n	80018ac <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <osSignalWait+0x38>
      ticks = 1;
 80018a8:	2301      	movs	r3, #1
 80018aa:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 80018ac:	f7ff ff3c 	bl	8001728 <inHandlerMode>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 80018b6:	2382      	movs	r3, #130	; 0x82
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	e01b      	b.n	80018f4 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 80018bc:	68b9      	ldr	r1, [r7, #8]
 80018be:	f107 0310 	add.w	r3, r7, #16
 80018c2:	1d1a      	adds	r2, r3, #4
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	2000      	movs	r0, #0
 80018c8:	f000 fd6e 	bl	80023a8 <xTaskNotifyWait>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d008      	beq.n	80018e4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <osSignalWait+0x6a>
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	e00a      	b.n	80018f4 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 80018de:	2340      	movs	r3, #64	; 0x40
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	e007      	b.n	80018f4 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	da02      	bge.n	80018f0 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 80018ea:	2386      	movs	r3, #134	; 0x86
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	e001      	b.n	80018f4 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 80018f0:	2308      	movs	r3, #8
 80018f2:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	461c      	mov	r4, r3
 80018f8:	f107 0310 	add.w	r3, r7, #16
 80018fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001900:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	3724      	adds	r7, #36	; 0x24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd90      	pop	{r4, r7, pc}

0800190c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f103 0208 	add.w	r2, r3, #8
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f103 0208 	add.w	r2, r3, #8
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f103 0208 	add.w	r2, r3, #8
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001966:	b480      	push	{r7}
 8001968:	b085      	sub	sp, #20
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	601a      	str	r2, [r3, #0]
}
 80019a2:	bf00      	nop
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80019ae:	b480      	push	{r7}
 80019b0:	b085      	sub	sp, #20
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c4:	d103      	bne.n	80019ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	691b      	ldr	r3, [r3, #16]
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	e00c      	b.n	80019e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3308      	adds	r3, #8
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	e002      	b.n	80019dc <vListInsert+0x2e>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d2f6      	bcs.n	80019d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	601a      	str	r2, [r3, #0]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6892      	ldr	r2, [r2, #8]
 8001a36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6852      	ldr	r2, [r2, #4]
 8001a40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d103      	bne.n	8001a54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	1e5a      	subs	r2, r3, #1
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08e      	sub	sp, #56	; 0x38
 8001a78:	af04      	add	r7, sp, #16
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d109      	bne.n	8001a9c <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a8c:	f383 8811 	msr	BASEPRI, r3
 8001a90:	f3bf 8f6f 	isb	sy
 8001a94:	f3bf 8f4f 	dsb	sy
 8001a98:	623b      	str	r3, [r7, #32]
 8001a9a:	e7fe      	b.n	8001a9a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8001a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <xTaskCreateStatic+0x42>
 8001aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa6:	f383 8811 	msr	BASEPRI, r3
 8001aaa:	f3bf 8f6f 	isb	sy
 8001aae:	f3bf 8f4f 	dsb	sy
 8001ab2:	61fb      	str	r3, [r7, #28]
 8001ab4:	e7fe      	b.n	8001ab4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001ab6:	2354      	movs	r3, #84	; 0x54
 8001ab8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	2b54      	cmp	r3, #84	; 0x54
 8001abe:	d009      	beq.n	8001ad4 <xTaskCreateStatic+0x60>
 8001ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ac4:	f383 8811 	msr	BASEPRI, r3
 8001ac8:	f3bf 8f6f 	isb	sy
 8001acc:	f3bf 8f4f 	dsb	sy
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	e7fe      	b.n	8001ad2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001ad4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01e      	beq.n	8001b1a <xTaskCreateStatic+0xa6>
 8001adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d01b      	beq.n	8001b1a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001aea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001af4:	2300      	movs	r3, #0
 8001af6:	9303      	str	r3, [sp, #12]
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	9302      	str	r3, [sp, #8]
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f850 	bl	8001bb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001b12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b14:	f000 f8d4 	bl	8001cc0 <prvAddNewTaskToReadyList>
 8001b18:	e001      	b.n	8001b1e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001b1e:	697b      	ldr	r3, [r7, #20]
	}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3728      	adds	r7, #40	; 0x28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08c      	sub	sp, #48	; 0x30
 8001b2c:	af04      	add	r7, sp, #16
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	4613      	mov	r3, r2
 8001b36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001b38:	88fb      	ldrh	r3, [r7, #6]
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f001 f8bf 	bl	8002cc0 <pvPortMalloc>
 8001b42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00e      	beq.n	8001b68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001b4a:	2054      	movs	r0, #84	; 0x54
 8001b4c:	f001 f8b8 	bl	8002cc0 <pvPortMalloc>
 8001b50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b5e:	e005      	b.n	8001b6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001b60:	6978      	ldr	r0, [r7, #20]
 8001b62:	f001 f96f 	bl	8002e44 <vPortFree>
 8001b66:	e001      	b.n	8001b6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d017      	beq.n	8001ba2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001b7a:	88fa      	ldrh	r2, [r7, #6]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9303      	str	r3, [sp, #12]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	9302      	str	r3, [sp, #8]
 8001b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68b9      	ldr	r1, [r7, #8]
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f000 f80e 	bl	8001bb2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001b96:	69f8      	ldr	r0, [r7, #28]
 8001b98:	f000 f892 	bl	8001cc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	61bb      	str	r3, [r7, #24]
 8001ba0:	e002      	b.n	8001ba8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001ba8:	69bb      	ldr	r3, [r7, #24]
	}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3720      	adds	r7, #32
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b088      	sub	sp, #32
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	f023 0307 	bic.w	r3, r3, #7
 8001bd8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d009      	beq.n	8001bf8 <prvInitialiseNewTask+0x46>
 8001be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001be8:	f383 8811 	msr	BASEPRI, r3
 8001bec:	f3bf 8f6f 	isb	sy
 8001bf0:	f3bf 8f4f 	dsb	sy
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	e7fe      	b.n	8001bf6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d01f      	beq.n	8001c3e <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
 8001c02:	e012      	b.n	8001c2a <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	4413      	add	r3, r2
 8001c0a:	7819      	ldrb	r1, [r3, #0]
 8001c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	4413      	add	r3, r2
 8001c12:	3334      	adds	r3, #52	; 0x34
 8001c14:	460a      	mov	r2, r1
 8001c16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d006      	beq.n	8001c32 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	3301      	adds	r3, #1
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	2b0f      	cmp	r3, #15
 8001c2e:	d9e9      	bls.n	8001c04 <prvInitialiseNewTask+0x52>
 8001c30:	e000      	b.n	8001c34 <prvInitialiseNewTask+0x82>
			{
				break;
 8001c32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c3c:	e003      	b.n	8001c46 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c48:	2b06      	cmp	r3, #6
 8001c4a:	d901      	bls.n	8001c50 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001c4c:	2306      	movs	r3, #6
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c5e:	2200      	movs	r2, #0
 8001c60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c64:	3304      	adds	r3, #4
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fe70 	bl	800194c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6e:	3318      	adds	r3, #24
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff fe6b 	bl	800194c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7e:	f1c3 0207 	rsb	r2, r3, #7
 8001c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8e:	2200      	movs	r2, #0
 8001c90:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	68f9      	ldr	r1, [r7, #12]
 8001c9e:	69b8      	ldr	r0, [r7, #24]
 8001ca0:	f000 fdcc 	bl	800283c <pxPortInitialiseStack>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001cb6:	bf00      	nop
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001cc8:	f000 fee0 	bl	8002a8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001ccc:	4b2a      	ldr	r3, [pc, #168]	; (8001d78 <prvAddNewTaskToReadyList+0xb8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	4a29      	ldr	r2, [pc, #164]	; (8001d78 <prvAddNewTaskToReadyList+0xb8>)
 8001cd4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001cd6:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <prvAddNewTaskToReadyList+0xbc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d109      	bne.n	8001cf2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001cde:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <prvAddNewTaskToReadyList+0xbc>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <prvAddNewTaskToReadyList+0xb8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d110      	bne.n	8001d0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001cec:	f000 fa84 	bl	80021f8 <prvInitialiseTaskLists>
 8001cf0:	e00d      	b.n	8001d0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001cf2:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <prvAddNewTaskToReadyList+0xc0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001cfa:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <prvAddNewTaskToReadyList+0xbc>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d802      	bhi.n	8001d0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001d08:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <prvAddNewTaskToReadyList+0xbc>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001d0e:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <prvAddNewTaskToReadyList+0xc4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	4a1b      	ldr	r2, [pc, #108]	; (8001d84 <prvAddNewTaskToReadyList+0xc4>)
 8001d16:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <prvAddNewTaskToReadyList+0xc8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	4a18      	ldr	r2, [pc, #96]	; (8001d88 <prvAddNewTaskToReadyList+0xc8>)
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4a15      	ldr	r2, [pc, #84]	; (8001d8c <prvAddNewTaskToReadyList+0xcc>)
 8001d38:	441a      	add	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4610      	mov	r0, r2
 8001d42:	f7ff fe10 	bl	8001966 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001d46:	f000 fecf 	bl	8002ae8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <prvAddNewTaskToReadyList+0xc0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00e      	beq.n	8001d70 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <prvAddNewTaskToReadyList+0xbc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d207      	bcs.n	8001d70 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <prvAddNewTaskToReadyList+0xd0>)
 8001d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	f3bf 8f4f 	dsb	sy
 8001d6c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000380 	.word	0x20000380
 8001d7c:	20000280 	.word	0x20000280
 8001d80:	2000038c 	.word	0x2000038c
 8001d84:	2000039c 	.word	0x2000039c
 8001d88:	20000388 	.word	0x20000388
 8001d8c:	20000284 	.word	0x20000284
 8001d90:	e000ed04 	.word	0xe000ed04

08001d94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	; 0x28
 8001d98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001da2:	463a      	mov	r2, r7
 8001da4:	1d39      	adds	r1, r7, #4
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fb90 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001db0:	6839      	ldr	r1, [r7, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	9202      	str	r2, [sp, #8]
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	491d      	ldr	r1, [pc, #116]	; (8001e38 <vTaskStartScheduler+0xa4>)
 8001dc4:	481d      	ldr	r0, [pc, #116]	; (8001e3c <vTaskStartScheduler+0xa8>)
 8001dc6:	f7ff fe55 	bl	8001a74 <xTaskCreateStatic>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <vTaskStartScheduler+0xac>)
 8001dce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <vTaskStartScheduler+0xac>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	e001      	b.n	8001de2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d115      	bne.n	8001e14 <vTaskStartScheduler+0x80>
 8001de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dec:	f383 8811 	msr	BASEPRI, r3
 8001df0:	f3bf 8f6f 	isb	sy
 8001df4:	f3bf 8f4f 	dsb	sy
 8001df8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <vTaskStartScheduler+0xb0>)
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001e00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <vTaskStartScheduler+0xb4>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001e08:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <vTaskStartScheduler+0xb8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001e0e:	f000 fd9f 	bl	8002950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001e12:	e00d      	b.n	8001e30 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1a:	d109      	bne.n	8001e30 <vTaskStartScheduler+0x9c>
 8001e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e20:	f383 8811 	msr	BASEPRI, r3
 8001e24:	f3bf 8f6f 	isb	sy
 8001e28:	f3bf 8f4f 	dsb	sy
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	e7fe      	b.n	8001e2e <vTaskStartScheduler+0x9a>
}
 8001e30:	bf00      	nop
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	0800312c 	.word	0x0800312c
 8001e3c:	080021c9 	.word	0x080021c9
 8001e40:	200003a4 	.word	0x200003a4
 8001e44:	200003a0 	.word	0x200003a0
 8001e48:	2000038c 	.word	0x2000038c
 8001e4c:	20000384 	.word	0x20000384

08001e50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <vTaskSuspendAll+0x18>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	4a03      	ldr	r2, [pc, #12]	; (8001e68 <vTaskSuspendAll+0x18>)
 8001e5c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	200003a8 	.word	0x200003a8

08001e6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001e7a:	4b41      	ldr	r3, [pc, #260]	; (8001f80 <xTaskResumeAll+0x114>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <xTaskResumeAll+0x2a>
 8001e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e86:	f383 8811 	msr	BASEPRI, r3
 8001e8a:	f3bf 8f6f 	isb	sy
 8001e8e:	f3bf 8f4f 	dsb	sy
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	e7fe      	b.n	8001e94 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001e96:	f000 fdf9 	bl	8002a8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001e9a:	4b39      	ldr	r3, [pc, #228]	; (8001f80 <xTaskResumeAll+0x114>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	4a37      	ldr	r2, [pc, #220]	; (8001f80 <xTaskResumeAll+0x114>)
 8001ea2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ea4:	4b36      	ldr	r3, [pc, #216]	; (8001f80 <xTaskResumeAll+0x114>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d161      	bne.n	8001f70 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001eac:	4b35      	ldr	r3, [pc, #212]	; (8001f84 <xTaskResumeAll+0x118>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d05d      	beq.n	8001f70 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001eb4:	e02e      	b.n	8001f14 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001eb6:	4b34      	ldr	r3, [pc, #208]	; (8001f88 <xTaskResumeAll+0x11c>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3318      	adds	r3, #24
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fdac 	bl	8001a20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fda7 	bl	8001a20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	409a      	lsls	r2, r3
 8001eda:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <xTaskResumeAll+0x120>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	4a2a      	ldr	r2, [pc, #168]	; (8001f8c <xTaskResumeAll+0x120>)
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4a27      	ldr	r2, [pc, #156]	; (8001f90 <xTaskResumeAll+0x124>)
 8001ef2:	441a      	add	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f7ff fd33 	bl	8001966 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f04:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <xTaskResumeAll+0x128>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d302      	bcc.n	8001f14 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001f0e:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <xTaskResumeAll+0x12c>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f14:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <xTaskResumeAll+0x11c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1cc      	bne.n	8001eb6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001f22:	f000 fa03 	bl	800232c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001f26:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <xTaskResumeAll+0x130>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d010      	beq.n	8001f54 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001f32:	f000 f837 	bl	8001fa4 <xTaskIncrementTick>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <xTaskResumeAll+0x12c>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f1      	bne.n	8001f32 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001f4e:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <xTaskResumeAll+0x130>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001f54:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <xTaskResumeAll+0x12c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d009      	beq.n	8001f70 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <xTaskResumeAll+0x134>)
 8001f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	f3bf 8f4f 	dsb	sy
 8001f6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001f70:	f000 fdba 	bl	8002ae8 <vPortExitCritical>

	return xAlreadyYielded;
 8001f74:	68bb      	ldr	r3, [r7, #8]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200003a8 	.word	0x200003a8
 8001f84:	20000380 	.word	0x20000380
 8001f88:	20000340 	.word	0x20000340
 8001f8c:	20000388 	.word	0x20000388
 8001f90:	20000284 	.word	0x20000284
 8001f94:	20000280 	.word	0x20000280
 8001f98:	20000394 	.word	0x20000394
 8001f9c:	20000390 	.word	0x20000390
 8001fa0:	e000ed04 	.word	0xe000ed04

08001fa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fae:	4b4e      	ldr	r3, [pc, #312]	; (80020e8 <xTaskIncrementTick+0x144>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f040 8087 	bne.w	80020c6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001fb8:	4b4c      	ldr	r3, [pc, #304]	; (80020ec <xTaskIncrementTick+0x148>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001fc0:	4a4a      	ldr	r2, [pc, #296]	; (80020ec <xTaskIncrementTick+0x148>)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d11f      	bne.n	800200c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001fcc:	4b48      	ldr	r3, [pc, #288]	; (80020f0 <xTaskIncrementTick+0x14c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d009      	beq.n	8001fea <xTaskIncrementTick+0x46>
 8001fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fda:	f383 8811 	msr	BASEPRI, r3
 8001fde:	f3bf 8f6f 	isb	sy
 8001fe2:	f3bf 8f4f 	dsb	sy
 8001fe6:	603b      	str	r3, [r7, #0]
 8001fe8:	e7fe      	b.n	8001fe8 <xTaskIncrementTick+0x44>
 8001fea:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <xTaskIncrementTick+0x14c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	4b40      	ldr	r3, [pc, #256]	; (80020f4 <xTaskIncrementTick+0x150>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a3e      	ldr	r2, [pc, #248]	; (80020f0 <xTaskIncrementTick+0x14c>)
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4a3e      	ldr	r2, [pc, #248]	; (80020f4 <xTaskIncrementTick+0x150>)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b3e      	ldr	r3, [pc, #248]	; (80020f8 <xTaskIncrementTick+0x154>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3301      	adds	r3, #1
 8002004:	4a3c      	ldr	r2, [pc, #240]	; (80020f8 <xTaskIncrementTick+0x154>)
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	f000 f990 	bl	800232c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800200c:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <xTaskIncrementTick+0x158>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	429a      	cmp	r2, r3
 8002014:	d348      	bcc.n	80020a8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002016:	4b36      	ldr	r3, [pc, #216]	; (80020f0 <xTaskIncrementTick+0x14c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d104      	bne.n	800202a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002020:	4b36      	ldr	r3, [pc, #216]	; (80020fc <xTaskIncrementTick+0x158>)
 8002022:	f04f 32ff 	mov.w	r2, #4294967295
 8002026:	601a      	str	r2, [r3, #0]
					break;
 8002028:	e03e      	b.n	80020a8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800202a:	4b31      	ldr	r3, [pc, #196]	; (80020f0 <xTaskIncrementTick+0x14c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	429a      	cmp	r2, r3
 8002040:	d203      	bcs.n	800204a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002042:	4a2e      	ldr	r2, [pc, #184]	; (80020fc <xTaskIncrementTick+0x158>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002048:	e02e      	b.n	80020a8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	3304      	adds	r3, #4
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fce6 	bl	8001a20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	2b00      	cmp	r3, #0
 800205a:	d004      	beq.n	8002066 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	3318      	adds	r3, #24
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fcdd 	bl	8001a20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	2201      	movs	r2, #1
 800206c:	409a      	lsls	r2, r3
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <xTaskIncrementTick+0x15c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4313      	orrs	r3, r2
 8002074:	4a22      	ldr	r2, [pc, #136]	; (8002100 <xTaskIncrementTick+0x15c>)
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4a1f      	ldr	r2, [pc, #124]	; (8002104 <xTaskIncrementTick+0x160>)
 8002086:	441a      	add	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	3304      	adds	r3, #4
 800208c:	4619      	mov	r1, r3
 800208e:	4610      	mov	r0, r2
 8002090:	f7ff fc69 	bl	8001966 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <xTaskIncrementTick+0x164>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	429a      	cmp	r2, r3
 80020a0:	d3b9      	bcc.n	8002016 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80020a2:	2301      	movs	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020a6:	e7b6      	b.n	8002016 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80020a8:	4b17      	ldr	r3, [pc, #92]	; (8002108 <xTaskIncrementTick+0x164>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ae:	4915      	ldr	r1, [pc, #84]	; (8002104 <xTaskIncrementTick+0x160>)
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d907      	bls.n	80020d0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80020c0:	2301      	movs	r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	e004      	b.n	80020d0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <xTaskIncrementTick+0x168>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	3301      	adds	r3, #1
 80020cc:	4a0f      	ldr	r2, [pc, #60]	; (800210c <xTaskIncrementTick+0x168>)
 80020ce:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80020d0:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <xTaskIncrementTick+0x16c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80020d8:	2301      	movs	r3, #1
 80020da:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80020dc:	697b      	ldr	r3, [r7, #20]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3718      	adds	r7, #24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	200003a8 	.word	0x200003a8
 80020ec:	20000384 	.word	0x20000384
 80020f0:	20000338 	.word	0x20000338
 80020f4:	2000033c 	.word	0x2000033c
 80020f8:	20000398 	.word	0x20000398
 80020fc:	200003a0 	.word	0x200003a0
 8002100:	20000388 	.word	0x20000388
 8002104:	20000284 	.word	0x20000284
 8002108:	20000280 	.word	0x20000280
 800210c:	20000390 	.word	0x20000390
 8002110:	20000394 	.word	0x20000394

08002114 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800211a:	4b26      	ldr	r3, [pc, #152]	; (80021b4 <vTaskSwitchContext+0xa0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002122:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <vTaskSwitchContext+0xa4>)
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002128:	e03e      	b.n	80021a8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800212a:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <vTaskSwitchContext+0xa4>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002130:	4b22      	ldr	r3, [pc, #136]	; (80021bc <vTaskSwitchContext+0xa8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	fab3 f383 	clz	r3, r3
 800213c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800213e:	7afb      	ldrb	r3, [r7, #11]
 8002140:	f1c3 031f 	rsb	r3, r3, #31
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	491e      	ldr	r1, [pc, #120]	; (80021c0 <vTaskSwitchContext+0xac>)
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d109      	bne.n	800216e <vTaskSwitchContext+0x5a>
	__asm volatile
 800215a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215e:	f383 8811 	msr	BASEPRI, r3
 8002162:	f3bf 8f6f 	isb	sy
 8002166:	f3bf 8f4f 	dsb	sy
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	e7fe      	b.n	800216c <vTaskSwitchContext+0x58>
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4a11      	ldr	r2, [pc, #68]	; (80021c0 <vTaskSwitchContext+0xac>)
 800217a:	4413      	add	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	3308      	adds	r3, #8
 8002190:	429a      	cmp	r2, r3
 8002192:	d104      	bne.n	800219e <vTaskSwitchContext+0x8a>
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <vTaskSwitchContext+0xb0>)
 80021a6:	6013      	str	r3, [r2, #0]
}
 80021a8:	bf00      	nop
 80021aa:	371c      	adds	r7, #28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	200003a8 	.word	0x200003a8
 80021b8:	20000394 	.word	0x20000394
 80021bc:	20000388 	.word	0x20000388
 80021c0:	20000284 	.word	0x20000284
 80021c4:	20000280 	.word	0x20000280

080021c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80021d0:	f000 f852 	bl	8002278 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <prvIdleTask+0x28>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d9f9      	bls.n	80021d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <prvIdleTask+0x2c>)
 80021de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	f3bf 8f4f 	dsb	sy
 80021e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80021ec:	e7f0      	b.n	80021d0 <prvIdleTask+0x8>
 80021ee:	bf00      	nop
 80021f0:	20000284 	.word	0x20000284
 80021f4:	e000ed04 	.word	0xe000ed04

080021f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	e00c      	b.n	800221e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <prvInitialiseTaskLists+0x60>)
 8002210:	4413      	add	r3, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fb7a 	bl	800190c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3301      	adds	r3, #1
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b06      	cmp	r3, #6
 8002222:	d9ef      	bls.n	8002204 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002224:	480d      	ldr	r0, [pc, #52]	; (800225c <prvInitialiseTaskLists+0x64>)
 8002226:	f7ff fb71 	bl	800190c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800222a:	480d      	ldr	r0, [pc, #52]	; (8002260 <prvInitialiseTaskLists+0x68>)
 800222c:	f7ff fb6e 	bl	800190c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002230:	480c      	ldr	r0, [pc, #48]	; (8002264 <prvInitialiseTaskLists+0x6c>)
 8002232:	f7ff fb6b 	bl	800190c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002236:	480c      	ldr	r0, [pc, #48]	; (8002268 <prvInitialiseTaskLists+0x70>)
 8002238:	f7ff fb68 	bl	800190c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800223c:	480b      	ldr	r0, [pc, #44]	; (800226c <prvInitialiseTaskLists+0x74>)
 800223e:	f7ff fb65 	bl	800190c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <prvInitialiseTaskLists+0x78>)
 8002244:	4a05      	ldr	r2, [pc, #20]	; (800225c <prvInitialiseTaskLists+0x64>)
 8002246:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <prvInitialiseTaskLists+0x7c>)
 800224a:	4a05      	ldr	r2, [pc, #20]	; (8002260 <prvInitialiseTaskLists+0x68>)
 800224c:	601a      	str	r2, [r3, #0]
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000284 	.word	0x20000284
 800225c:	20000310 	.word	0x20000310
 8002260:	20000324 	.word	0x20000324
 8002264:	20000340 	.word	0x20000340
 8002268:	20000354 	.word	0x20000354
 800226c:	2000036c 	.word	0x2000036c
 8002270:	20000338 	.word	0x20000338
 8002274:	2000033c 	.word	0x2000033c

08002278 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800227e:	e019      	b.n	80022b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002280:	f000 fc04 	bl	8002a8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <prvCheckTasksWaitingTermination+0x4c>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3304      	adds	r3, #4
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fbc5 	bl	8001a20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <prvCheckTasksWaitingTermination+0x50>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	3b01      	subs	r3, #1
 800229c:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <prvCheckTasksWaitingTermination+0x50>)
 800229e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80022a0:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <prvCheckTasksWaitingTermination+0x54>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	4a09      	ldr	r2, [pc, #36]	; (80022cc <prvCheckTasksWaitingTermination+0x54>)
 80022a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80022aa:	f000 fc1d 	bl	8002ae8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f80e 	bl	80022d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <prvCheckTasksWaitingTermination+0x54>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1e1      	bne.n	8002280 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000354 	.word	0x20000354
 80022c8:	20000380 	.word	0x20000380
 80022cc:	20000368 	.word	0x20000368

080022d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d108      	bne.n	80022f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fdac 	bl	8002e44 <vPortFree>
				vPortFree( pxTCB );
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 fda9 	bl	8002e44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80022f2:	e017      	b.n	8002324 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d103      	bne.n	8002306 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 fda0 	bl	8002e44 <vPortFree>
	}
 8002304:	e00e      	b.n	8002324 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800230c:	2b02      	cmp	r3, #2
 800230e:	d009      	beq.n	8002324 <prvDeleteTCB+0x54>
 8002310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002314:	f383 8811 	msr	BASEPRI, r3
 8002318:	f3bf 8f6f 	isb	sy
 800231c:	f3bf 8f4f 	dsb	sy
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	e7fe      	b.n	8002322 <prvDeleteTCB+0x52>
	}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002332:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <prvResetNextTaskUnblockTime+0x38>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d104      	bne.n	8002346 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <prvResetNextTaskUnblockTime+0x3c>)
 800233e:	f04f 32ff 	mov.w	r2, #4294967295
 8002342:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002344:	e008      	b.n	8002358 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <prvResetNextTaskUnblockTime+0x38>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <prvResetNextTaskUnblockTime+0x3c>)
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	20000338 	.word	0x20000338
 8002368:	200003a0 	.word	0x200003a0

0800236c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002372:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <xTaskGetSchedulerState+0x34>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d102      	bne.n	8002380 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800237a:	2301      	movs	r3, #1
 800237c:	607b      	str	r3, [r7, #4]
 800237e:	e008      	b.n	8002392 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <xTaskGetSchedulerState+0x38>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002388:	2302      	movs	r3, #2
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	e001      	b.n	8002392 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002392:	687b      	ldr	r3, [r7, #4]
	}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	2000038c 	.word	0x2000038c
 80023a4:	200003a8 	.word	0x200003a8

080023a8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80023b6:	f000 fb69 	bl	8002a8c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80023ba:	4b26      	ldr	r3, [pc, #152]	; (8002454 <xTaskNotifyWait+0xac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d01a      	beq.n	80023fe <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80023c8:	4b22      	ldr	r3, [pc, #136]	; (8002454 <xTaskNotifyWait+0xac>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	43d2      	mvns	r2, r2
 80023d2:	400a      	ands	r2, r1
 80023d4:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80023d6:	4b1f      	ldr	r3, [pc, #124]	; (8002454 <xTaskNotifyWait+0xac>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80023e6:	2101      	movs	r1, #1
 80023e8:	6838      	ldr	r0, [r7, #0]
 80023ea:	f000 f9c1 	bl	8002770 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <xTaskNotifyWait+0xb0>)
 80023f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	f3bf 8f4f 	dsb	sy
 80023fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80023fe:	f000 fb73 	bl	8002ae8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8002402:	f000 fb43 	bl	8002a8c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d004      	beq.n	8002416 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <xTaskNotifyWait+0xac>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <xTaskNotifyWait+0xac>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d002      	beq.n	800242a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	e008      	b.n	800243c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <xTaskNotifyWait+0xac>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	43d2      	mvns	r2, r2
 8002434:	400a      	ands	r2, r1
 8002436:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 8002438:	2301      	movs	r3, #1
 800243a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <xTaskNotifyWait+0xac>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8002446:	f000 fb4f 	bl	8002ae8 <vPortExitCritical>

		return xReturn;
 800244a:	697b      	ldr	r3, [r7, #20]
	}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000280 	.word	0x20000280
 8002458:	e000ed04 	.word	0xe000ed04

0800245c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800246c:	2301      	movs	r3, #1
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <xTaskGenericNotify+0x2e>
 8002476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247a:	f383 8811 	msr	BASEPRI, r3
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	e7fe      	b.n	8002488 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800248e:	f000 fafd 	bl	8002a8c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024a6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 80024b0:	79fb      	ldrb	r3, [r7, #7]
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d827      	bhi.n	8002506 <xTaskGenericNotify+0xaa>
 80024b6:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <xTaskGenericNotify+0x60>)
 80024b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024bc:	08002525 	.word	0x08002525
 80024c0:	080024d1 	.word	0x080024d1
 80024c4:	080024df 	.word	0x080024df
 80024c8:	080024eb 	.word	0x080024eb
 80024cc:	080024f3 	.word	0x080024f3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80024dc:	e025      	b.n	800252a <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80024e8:	e01f      	b.n	800252a <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 80024f0:	e01b      	b.n	800252a <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80024f2:	7ffb      	ldrb	r3, [r7, #31]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d003      	beq.n	8002500 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80024fe:	e014      	b.n	800252a <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8002500:	2300      	movs	r3, #0
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8002504:	e011      	b.n	800252a <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250e:	d00b      	beq.n	8002528 <xTaskGenericNotify+0xcc>
 8002510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	e7fe      	b.n	8002522 <xTaskGenericNotify+0xc6>
					break;
 8002524:	bf00      	nop
 8002526:	e000      	b.n	800252a <xTaskGenericNotify+0xce>

					break;
 8002528:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800252a:	7ffb      	ldrb	r3, [r7, #31]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d138      	bne.n	80025a2 <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	3304      	adds	r3, #4
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fa73 	bl	8001a20 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	2201      	movs	r2, #1
 8002540:	409a      	lsls	r2, r3
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <xTaskGenericNotify+0x154>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4313      	orrs	r3, r2
 8002548:	4a19      	ldr	r2, [pc, #100]	; (80025b0 <xTaskGenericNotify+0x154>)
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <xTaskGenericNotify+0x158>)
 800255a:	441a      	add	r2, r3
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	3304      	adds	r3, #4
 8002560:	4619      	mov	r1, r3
 8002562:	4610      	mov	r0, r2
 8002564:	f7ff f9ff 	bl	8001966 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256c:	2b00      	cmp	r3, #0
 800256e:	d009      	beq.n	8002584 <xTaskGenericNotify+0x128>
 8002570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002574:	f383 8811 	msr	BASEPRI, r3
 8002578:	f3bf 8f6f 	isb	sy
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	e7fe      	b.n	8002582 <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <xTaskGenericNotify+0x15c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	429a      	cmp	r2, r3
 8002590:	d907      	bls.n	80025a2 <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <xTaskGenericNotify+0x160>)
 8002594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80025a2:	f000 faa1 	bl	8002ae8 <vPortExitCritical>

		return xReturn;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3728      	adds	r7, #40	; 0x28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000388 	.word	0x20000388
 80025b4:	20000284 	.word	0x20000284
 80025b8:	20000280 	.word	0x20000280
 80025bc:	e000ed04 	.word	0xe000ed04

080025c0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08e      	sub	sp, #56	; 0x38
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	603b      	str	r3, [r7, #0]
 80025cc:	4613      	mov	r3, r2
 80025ce:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80025d0:	2301      	movs	r3, #1
 80025d2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d109      	bne.n	80025ee <xTaskGenericNotifyFromISR+0x2e>
 80025da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025de:	f383 8811 	msr	BASEPRI, r3
 80025e2:	f3bf 8f6f 	isb	sy
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
 80025ec:	e7fe      	b.n	80025ec <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025ee:	f000 fb29 	bl	8002c44 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80025f6:	f3ef 8211 	mrs	r2, BASEPRI
 80025fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fe:	f383 8811 	msr	BASEPRI, r3
 8002602:	f3bf 8f6f 	isb	sy
 8002606:	f3bf 8f4f 	dsb	sy
 800260a:	623a      	str	r2, [r7, #32]
 800260c:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800260e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002622:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262c:	2202      	movs	r2, #2
 800262e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	2b04      	cmp	r3, #4
 8002636:	d829      	bhi.n	800268c <xTaskGenericNotifyFromISR+0xcc>
 8002638:	a201      	add	r2, pc, #4	; (adr r2, 8002640 <xTaskGenericNotifyFromISR+0x80>)
 800263a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263e:	bf00      	nop
 8002640:	080026ab 	.word	0x080026ab
 8002644:	08002655 	.word	0x08002655
 8002648:	08002663 	.word	0x08002663
 800264c:	0800266f 	.word	0x0800266f
 8002650:	08002677 	.word	0x08002677
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8002654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002656:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	431a      	orrs	r2, r3
 800265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8002660:	e026      	b.n	80026b0 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800266c:	e020      	b.n	80026b0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8002674:	e01c      	b.n	80026b0 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8002676:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800267a:	2b02      	cmp	r3, #2
 800267c:	d003      	beq.n	8002686 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8002684:	e014      	b.n	80026b0 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8002686:	2300      	movs	r3, #0
 8002688:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800268a:	e011      	b.n	80026b0 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002694:	d00b      	beq.n	80026ae <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8002696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269a:	f383 8811 	msr	BASEPRI, r3
 800269e:	f3bf 8f6f 	isb	sy
 80026a2:	f3bf 8f4f 	dsb	sy
 80026a6:	61bb      	str	r3, [r7, #24]
 80026a8:	e7fe      	b.n	80026a8 <xTaskGenericNotifyFromISR+0xe8>
					break;
 80026aa:	bf00      	nop
 80026ac:	e000      	b.n	80026b0 <xTaskGenericNotifyFromISR+0xf0>
					break;
 80026ae:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80026b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d144      	bne.n	8002742 <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d009      	beq.n	80026d4 <xTaskGenericNotifyFromISR+0x114>
 80026c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	e7fe      	b.n	80026d2 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026d4:	4b20      	ldr	r3, [pc, #128]	; (8002758 <xTaskGenericNotifyFromISR+0x198>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d11c      	bne.n	8002716 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026de:	3304      	adds	r3, #4
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff f99d 	bl	8001a20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80026e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	2201      	movs	r2, #1
 80026ec:	409a      	lsls	r2, r3
 80026ee:	4b1b      	ldr	r3, [pc, #108]	; (800275c <xTaskGenericNotifyFromISR+0x19c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	4a19      	ldr	r2, [pc, #100]	; (800275c <xTaskGenericNotifyFromISR+0x19c>)
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4a16      	ldr	r2, [pc, #88]	; (8002760 <xTaskGenericNotifyFromISR+0x1a0>)
 8002706:	441a      	add	r2, r3
 8002708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270a:	3304      	adds	r3, #4
 800270c:	4619      	mov	r1, r3
 800270e:	4610      	mov	r0, r2
 8002710:	f7ff f929 	bl	8001966 <vListInsertEnd>
 8002714:	e005      	b.n	8002722 <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002718:	3318      	adds	r3, #24
 800271a:	4619      	mov	r1, r3
 800271c:	4811      	ldr	r0, [pc, #68]	; (8002764 <xTaskGenericNotifyFromISR+0x1a4>)
 800271e:	f7ff f922 	bl	8001966 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <xTaskGenericNotifyFromISR+0x1a8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	429a      	cmp	r2, r3
 800272e:	d908      	bls.n	8002742 <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8002730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8002736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002738:	2201      	movs	r2, #1
 800273a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <xTaskGenericNotifyFromISR+0x1ac>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800274c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800274e:	4618      	mov	r0, r3
 8002750:	3738      	adds	r7, #56	; 0x38
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200003a8 	.word	0x200003a8
 800275c:	20000388 	.word	0x20000388
 8002760:	20000284 	.word	0x20000284
 8002764:	20000340 	.word	0x20000340
 8002768:	20000280 	.word	0x20000280
 800276c:	20000394 	.word	0x20000394

08002770 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800277a:	4b29      	ldr	r3, [pc, #164]	; (8002820 <prvAddCurrentTaskToDelayedList+0xb0>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002780:	4b28      	ldr	r3, [pc, #160]	; (8002824 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	3304      	adds	r3, #4
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff f94a 	bl	8001a20 <uxListRemove>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10b      	bne.n	80027aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002798:	2201      	movs	r2, #1
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	4b21      	ldr	r3, [pc, #132]	; (8002828 <prvAddCurrentTaskToDelayedList+0xb8>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4013      	ands	r3, r2
 80027a6:	4a20      	ldr	r2, [pc, #128]	; (8002828 <prvAddCurrentTaskToDelayedList+0xb8>)
 80027a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d10a      	bne.n	80027c8 <prvAddCurrentTaskToDelayedList+0x58>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d007      	beq.n	80027c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027b8:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3304      	adds	r3, #4
 80027be:	4619      	mov	r1, r3
 80027c0:	481a      	ldr	r0, [pc, #104]	; (800282c <prvAddCurrentTaskToDelayedList+0xbc>)
 80027c2:	f7ff f8d0 	bl	8001966 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80027c6:	e026      	b.n	8002816 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80027d0:	4b14      	ldr	r3, [pc, #80]	; (8002824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d209      	bcs.n	80027f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <prvAddCurrentTaskToDelayedList+0xc0>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3304      	adds	r3, #4
 80027ea:	4619      	mov	r1, r3
 80027ec:	4610      	mov	r0, r2
 80027ee:	f7ff f8de 	bl	80019ae <vListInsert>
}
 80027f2:	e010      	b.n	8002816 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <prvAddCurrentTaskToDelayedList+0xc4>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3304      	adds	r3, #4
 80027fe:	4619      	mov	r1, r3
 8002800:	4610      	mov	r0, r2
 8002802:	f7ff f8d4 	bl	80019ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002806:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	429a      	cmp	r2, r3
 800280e:	d202      	bcs.n	8002816 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002810:	4a09      	ldr	r2, [pc, #36]	; (8002838 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	6013      	str	r3, [r2, #0]
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000384 	.word	0x20000384
 8002824:	20000280 	.word	0x20000280
 8002828:	20000388 	.word	0x20000388
 800282c:	2000036c 	.word	0x2000036c
 8002830:	2000033c 	.word	0x2000033c
 8002834:	20000338 	.word	0x20000338
 8002838:	200003a0 	.word	0x200003a0

0800283c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3b04      	subs	r3, #4
 800284c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3b04      	subs	r3, #4
 800285a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f023 0201 	bic.w	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3b04      	subs	r3, #4
 800286a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800286c:	4a0c      	ldr	r2, [pc, #48]	; (80028a0 <pxPortInitialiseStack+0x64>)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3b14      	subs	r3, #20
 8002876:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3b04      	subs	r3, #4
 8002882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f06f 0202 	mvn.w	r2, #2
 800288a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3b20      	subs	r3, #32
 8002890:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3714      	adds	r7, #20
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	080028a5 	.word	0x080028a5

080028a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80028ae:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <prvTaskExitError+0x50>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b6:	d009      	beq.n	80028cc <prvTaskExitError+0x28>
	__asm volatile
 80028b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028bc:	f383 8811 	msr	BASEPRI, r3
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	f3bf 8f4f 	dsb	sy
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	e7fe      	b.n	80028ca <prvTaskExitError+0x26>
 80028cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80028de:	bf00      	nop
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0fc      	beq.n	80028e0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80028e6:	bf00      	nop
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	2000000c 	.word	0x2000000c
	...

08002900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002900:	4b07      	ldr	r3, [pc, #28]	; (8002920 <pxCurrentTCBConst2>)
 8002902:	6819      	ldr	r1, [r3, #0]
 8002904:	6808      	ldr	r0, [r1, #0]
 8002906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800290a:	f380 8809 	msr	PSP, r0
 800290e:	f3bf 8f6f 	isb	sy
 8002912:	f04f 0000 	mov.w	r0, #0
 8002916:	f380 8811 	msr	BASEPRI, r0
 800291a:	4770      	bx	lr
 800291c:	f3af 8000 	nop.w

08002920 <pxCurrentTCBConst2>:
 8002920:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002924:	bf00      	nop
 8002926:	bf00      	nop

08002928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002928:	4808      	ldr	r0, [pc, #32]	; (800294c <prvPortStartFirstTask+0x24>)
 800292a:	6800      	ldr	r0, [r0, #0]
 800292c:	6800      	ldr	r0, [r0, #0]
 800292e:	f380 8808 	msr	MSP, r0
 8002932:	f04f 0000 	mov.w	r0, #0
 8002936:	f380 8814 	msr	CONTROL, r0
 800293a:	b662      	cpsie	i
 800293c:	b661      	cpsie	f
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	df00      	svc	0
 8002948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800294a:	bf00      	nop
 800294c:	e000ed08 	.word	0xe000ed08

08002950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002956:	4b44      	ldr	r3, [pc, #272]	; (8002a68 <xPortStartScheduler+0x118>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a44      	ldr	r2, [pc, #272]	; (8002a6c <xPortStartScheduler+0x11c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d109      	bne.n	8002974 <xPortStartScheduler+0x24>
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	e7fe      	b.n	8002972 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002974:	4b3c      	ldr	r3, [pc, #240]	; (8002a68 <xPortStartScheduler+0x118>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a3d      	ldr	r2, [pc, #244]	; (8002a70 <xPortStartScheduler+0x120>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d109      	bne.n	8002992 <xPortStartScheduler+0x42>
 800297e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	e7fe      	b.n	8002990 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002992:	4b38      	ldr	r3, [pc, #224]	; (8002a74 <xPortStartScheduler+0x124>)
 8002994:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	22ff      	movs	r2, #255	; 0xff
 80029a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4b30      	ldr	r3, [pc, #192]	; (8002a78 <xPortStartScheduler+0x128>)
 80029b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80029ba:	4b30      	ldr	r3, [pc, #192]	; (8002a7c <xPortStartScheduler+0x12c>)
 80029bc:	2207      	movs	r2, #7
 80029be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80029c0:	e009      	b.n	80029d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80029c2:	4b2e      	ldr	r3, [pc, #184]	; (8002a7c <xPortStartScheduler+0x12c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	4a2c      	ldr	r2, [pc, #176]	; (8002a7c <xPortStartScheduler+0x12c>)
 80029ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029de:	2b80      	cmp	r3, #128	; 0x80
 80029e0:	d0ef      	beq.n	80029c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80029e2:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <xPortStartScheduler+0x12c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f1c3 0307 	rsb	r3, r3, #7
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d009      	beq.n	8002a02 <xPortStartScheduler+0xb2>
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	e7fe      	b.n	8002a00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a02:	4b1e      	ldr	r3, [pc, #120]	; (8002a7c <xPortStartScheduler+0x12c>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	021b      	lsls	r3, r3, #8
 8002a08:	4a1c      	ldr	r2, [pc, #112]	; (8002a7c <xPortStartScheduler+0x12c>)
 8002a0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <xPortStartScheduler+0x12c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a14:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <xPortStartScheduler+0x12c>)
 8002a16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002a20:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <xPortStartScheduler+0x130>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a16      	ldr	r2, [pc, #88]	; (8002a80 <xPortStartScheduler+0x130>)
 8002a26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <xPortStartScheduler+0x130>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <xPortStartScheduler+0x130>)
 8002a32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002a36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002a38:	f000 f8d6 	bl	8002be8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <xPortStartScheduler+0x134>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002a42:	f000 f8f5 	bl	8002c30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002a46:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <xPortStartScheduler+0x138>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a0f      	ldr	r2, [pc, #60]	; (8002a88 <xPortStartScheduler+0x138>)
 8002a4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002a50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002a52:	f7ff ff69 	bl	8002928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002a56:	f7ff fb5d 	bl	8002114 <vTaskSwitchContext>
	prvTaskExitError();
 8002a5a:	f7ff ff23 	bl	80028a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	e000ed00 	.word	0xe000ed00
 8002a6c:	410fc271 	.word	0x410fc271
 8002a70:	410fc270 	.word	0x410fc270
 8002a74:	e000e400 	.word	0xe000e400
 8002a78:	200003ac 	.word	0x200003ac
 8002a7c:	200003b0 	.word	0x200003b0
 8002a80:	e000ed20 	.word	0xe000ed20
 8002a84:	2000000c 	.word	0x2000000c
 8002a88:	e000ef34 	.word	0xe000ef34

08002a8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <vPortEnterCritical+0x54>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	4a0d      	ldr	r2, [pc, #52]	; (8002ae0 <vPortEnterCritical+0x54>)
 8002aac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002aae:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <vPortEnterCritical+0x54>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d10e      	bne.n	8002ad4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <vPortEnterCritical+0x58>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d009      	beq.n	8002ad4 <vPortEnterCritical+0x48>
 8002ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	603b      	str	r3, [r7, #0]
 8002ad2:	e7fe      	b.n	8002ad2 <vPortEnterCritical+0x46>
	}
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr
 8002ae0:	2000000c 	.word	0x2000000c
 8002ae4:	e000ed04 	.word	0xe000ed04

08002ae8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <vPortExitCritical+0x4c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <vPortExitCritical+0x22>
 8002af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	607b      	str	r3, [r7, #4]
 8002b08:	e7fe      	b.n	8002b08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <vPortExitCritical+0x4c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	4a08      	ldr	r2, [pc, #32]	; (8002b34 <vPortExitCritical+0x4c>)
 8002b12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002b14:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <vPortExitCritical+0x4c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d104      	bne.n	8002b26 <vPortExitCritical+0x3e>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	2000000c 	.word	0x2000000c
	...

08002b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002b40:	f3ef 8009 	mrs	r0, PSP
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <pxCurrentTCBConst>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	f01e 0f10 	tst.w	lr, #16
 8002b50:	bf08      	it	eq
 8002b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b5a:	6010      	str	r0, [r2, #0]
 8002b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002b60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002b64:	f380 8811 	msr	BASEPRI, r0
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f7ff fad0 	bl	8002114 <vTaskSwitchContext>
 8002b74:	f04f 0000 	mov.w	r0, #0
 8002b78:	f380 8811 	msr	BASEPRI, r0
 8002b7c:	bc09      	pop	{r0, r3}
 8002b7e:	6819      	ldr	r1, [r3, #0]
 8002b80:	6808      	ldr	r0, [r1, #0]
 8002b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b86:	f01e 0f10 	tst.w	lr, #16
 8002b8a:	bf08      	it	eq
 8002b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002b90:	f380 8809 	msr	PSP, r0
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	f3af 8000 	nop.w

08002ba0 <pxCurrentTCBConst>:
 8002ba0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop

08002ba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
	__asm volatile
 8002bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002bc0:	f7ff f9f0 	bl	8001fa4 <xTaskIncrementTick>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002bca:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <xPortSysTickHandler+0x3c>)
 8002bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	e000ed04 	.word	0xe000ed04

08002be8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <vPortSetupTimerInterrupt+0x34>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <vPortSetupTimerInterrupt+0x38>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <vPortSetupTimerInterrupt+0x3c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <vPortSetupTimerInterrupt+0x40>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	099b      	lsrs	r3, r3, #6
 8002c04:	4a09      	ldr	r2, [pc, #36]	; (8002c2c <vPortSetupTimerInterrupt+0x44>)
 8002c06:	3b01      	subs	r3, #1
 8002c08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c0a:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <vPortSetupTimerInterrupt+0x34>)
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	601a      	str	r2, [r3, #0]
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000e010 	.word	0xe000e010
 8002c20:	e000e018 	.word	0xe000e018
 8002c24:	20000000 	.word	0x20000000
 8002c28:	10624dd3 	.word	0x10624dd3
 8002c2c:	e000e014 	.word	0xe000e014

08002c30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002c30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002c40 <vPortEnableVFP+0x10>
 8002c34:	6801      	ldr	r1, [r0, #0]
 8002c36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002c3a:	6001      	str	r1, [r0, #0]
 8002c3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002c3e:	bf00      	nop
 8002c40:	e000ed88 	.word	0xe000ed88

08002c44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002c4a:	f3ef 8305 	mrs	r3, IPSR
 8002c4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b0f      	cmp	r3, #15
 8002c54:	d913      	bls.n	8002c7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002c56:	4a16      	ldr	r2, [pc, #88]	; (8002cb0 <vPortValidateInterruptPriority+0x6c>)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002c60:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <vPortValidateInterruptPriority+0x70>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	7afa      	ldrb	r2, [r7, #11]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d209      	bcs.n	8002c7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8002c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	e7fe      	b.n	8002c7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <vPortValidateInterruptPriority+0x74>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c86:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <vPortValidateInterruptPriority+0x78>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d909      	bls.n	8002ca2 <vPortValidateInterruptPriority+0x5e>
 8002c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	e7fe      	b.n	8002ca0 <vPortValidateInterruptPriority+0x5c>
	}
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000e3f0 	.word	0xe000e3f0
 8002cb4:	200003ac 	.word	0x200003ac
 8002cb8:	e000ed0c 	.word	0xe000ed0c
 8002cbc:	200003b0 	.word	0x200003b0

08002cc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	; 0x28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002ccc:	f7ff f8c0 	bl	8001e50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002cd0:	4b57      	ldr	r3, [pc, #348]	; (8002e30 <pvPortMalloc+0x170>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002cd8:	f000 f90c 	bl	8002ef4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002cdc:	4b55      	ldr	r3, [pc, #340]	; (8002e34 <pvPortMalloc+0x174>)
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f040 808c 	bne.w	8002e02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01c      	beq.n	8002d2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002cf0:	2208      	movs	r2, #8
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d013      	beq.n	8002d2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f023 0307 	bic.w	r3, r3, #7
 8002d08:	3308      	adds	r3, #8
 8002d0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <pvPortMalloc+0x6a>
 8002d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1a:	f383 8811 	msr	BASEPRI, r3
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	f3bf 8f4f 	dsb	sy
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	e7fe      	b.n	8002d28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d068      	beq.n	8002e02 <pvPortMalloc+0x142>
 8002d30:	4b41      	ldr	r3, [pc, #260]	; (8002e38 <pvPortMalloc+0x178>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d863      	bhi.n	8002e02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002d3a:	4b40      	ldr	r3, [pc, #256]	; (8002e3c <pvPortMalloc+0x17c>)
 8002d3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002d3e:	4b3f      	ldr	r3, [pc, #252]	; (8002e3c <pvPortMalloc+0x17c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d44:	e004      	b.n	8002d50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d903      	bls.n	8002d62 <pvPortMalloc+0xa2>
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f1      	bne.n	8002d46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002d62:	4b33      	ldr	r3, [pc, #204]	; (8002e30 <pvPortMalloc+0x170>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d04a      	beq.n	8002e02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2208      	movs	r2, #8
 8002d72:	4413      	add	r3, r2
 8002d74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	1ad2      	subs	r2, r2, r3
 8002d86:	2308      	movs	r3, #8
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d91e      	bls.n	8002dcc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4413      	add	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d009      	beq.n	8002db4 <pvPortMalloc+0xf4>
 8002da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	e7fe      	b.n	8002db2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	1ad2      	subs	r2, r2, r3
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002dc6:	69b8      	ldr	r0, [r7, #24]
 8002dc8:	f000 f8f6 	bl	8002fb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002dcc:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <pvPortMalloc+0x178>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	4a18      	ldr	r2, [pc, #96]	; (8002e38 <pvPortMalloc+0x178>)
 8002dd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002dda:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <pvPortMalloc+0x178>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <pvPortMalloc+0x180>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d203      	bcs.n	8002dee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002de6:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <pvPortMalloc+0x178>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a15      	ldr	r2, [pc, #84]	; (8002e40 <pvPortMalloc+0x180>)
 8002dec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <pvPortMalloc+0x174>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	431a      	orrs	r2, r3
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002e02:	f7ff f833 	bl	8001e6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d009      	beq.n	8002e24 <pvPortMalloc+0x164>
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	e7fe      	b.n	8002e22 <pvPortMalloc+0x162>
	return pvReturn;
 8002e24:	69fb      	ldr	r3, [r7, #28]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3728      	adds	r7, #40	; 0x28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20003fbc 	.word	0x20003fbc
 8002e34:	20003fc8 	.word	0x20003fc8
 8002e38:	20003fc0 	.word	0x20003fc0
 8002e3c:	20003fb4 	.word	0x20003fb4
 8002e40:	20003fc4 	.word	0x20003fc4

08002e44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d046      	beq.n	8002ee4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002e56:	2308      	movs	r3, #8
 8002e58:	425b      	negs	r3, r3
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	4b20      	ldr	r3, [pc, #128]	; (8002eec <vPortFree+0xa8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d109      	bne.n	8002e86 <vPortFree+0x42>
 8002e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	e7fe      	b.n	8002e84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <vPortFree+0x5e>
 8002e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e92:	f383 8811 	msr	BASEPRI, r3
 8002e96:	f3bf 8f6f 	isb	sy
 8002e9a:	f3bf 8f4f 	dsb	sy
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	e7fe      	b.n	8002ea0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	4b11      	ldr	r3, [pc, #68]	; (8002eec <vPortFree+0xa8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d019      	beq.n	8002ee4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d115      	bne.n	8002ee4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <vPortFree+0xa8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002ec8:	f7fe ffc2 	bl	8001e50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <vPortFree+0xac>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	4a06      	ldr	r2, [pc, #24]	; (8002ef0 <vPortFree+0xac>)
 8002ed8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002eda:	6938      	ldr	r0, [r7, #16]
 8002edc:	f000 f86c 	bl	8002fb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002ee0:	f7fe ffc4 	bl	8001e6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002ee4:	bf00      	nop
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20003fc8 	.word	0x20003fc8
 8002ef0:	20003fc0 	.word	0x20003fc0

08002ef4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002efa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002efe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002f00:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <prvHeapInit+0xac>)
 8002f02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00c      	beq.n	8002f28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	3307      	adds	r3, #7
 8002f12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0307 	bic.w	r3, r3, #7
 8002f1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	4a1f      	ldr	r2, [pc, #124]	; (8002fa0 <prvHeapInit+0xac>)
 8002f24:	4413      	add	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002f2c:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <prvHeapInit+0xb0>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002f32:	4b1c      	ldr	r3, [pc, #112]	; (8002fa4 <prvHeapInit+0xb0>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002f40:	2208      	movs	r2, #8
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f023 0307 	bic.w	r3, r3, #7
 8002f4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4a15      	ldr	r2, [pc, #84]	; (8002fa8 <prvHeapInit+0xb4>)
 8002f54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <prvHeapInit+0xb4>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002f5e:	4b12      	ldr	r3, [pc, #72]	; (8002fa8 <prvHeapInit+0xb4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	1ad2      	subs	r2, r2, r3
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002f74:	4b0c      	ldr	r3, [pc, #48]	; (8002fa8 <prvHeapInit+0xb4>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <prvHeapInit+0xb8>)
 8002f82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4a09      	ldr	r2, [pc, #36]	; (8002fb0 <prvHeapInit+0xbc>)
 8002f8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <prvHeapInit+0xc0>)
 8002f8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f92:	601a      	str	r2, [r3, #0]
}
 8002f94:	bf00      	nop
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	200003b4 	.word	0x200003b4
 8002fa4:	20003fb4 	.word	0x20003fb4
 8002fa8:	20003fbc 	.word	0x20003fbc
 8002fac:	20003fc4 	.word	0x20003fc4
 8002fb0:	20003fc0 	.word	0x20003fc0
 8002fb4:	20003fc8 	.word	0x20003fc8

08002fb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002fc0:	4b28      	ldr	r3, [pc, #160]	; (8003064 <prvInsertBlockIntoFreeList+0xac>)
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	e002      	b.n	8002fcc <prvInsertBlockIntoFreeList+0x14>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d8f7      	bhi.n	8002fc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d108      	bne.n	8002ffa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	441a      	add	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	441a      	add	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d118      	bne.n	8003040 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <prvInsertBlockIntoFreeList+0xb0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	429a      	cmp	r2, r3
 8003018:	d00d      	beq.n	8003036 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	441a      	add	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	e008      	b.n	8003048 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <prvInsertBlockIntoFreeList+0xb0>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	e003      	b.n	8003048 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	429a      	cmp	r2, r3
 800304e:	d002      	beq.n	8003056 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	20003fb4 	.word	0x20003fb4
 8003068:	20003fbc 	.word	0x20003fbc

0800306c <__libc_init_array>:
 800306c:	b570      	push	{r4, r5, r6, lr}
 800306e:	4e0d      	ldr	r6, [pc, #52]	; (80030a4 <__libc_init_array+0x38>)
 8003070:	4c0d      	ldr	r4, [pc, #52]	; (80030a8 <__libc_init_array+0x3c>)
 8003072:	1ba4      	subs	r4, r4, r6
 8003074:	10a4      	asrs	r4, r4, #2
 8003076:	2500      	movs	r5, #0
 8003078:	42a5      	cmp	r5, r4
 800307a:	d109      	bne.n	8003090 <__libc_init_array+0x24>
 800307c:	4e0b      	ldr	r6, [pc, #44]	; (80030ac <__libc_init_array+0x40>)
 800307e:	4c0c      	ldr	r4, [pc, #48]	; (80030b0 <__libc_init_array+0x44>)
 8003080:	f000 f820 	bl	80030c4 <_init>
 8003084:	1ba4      	subs	r4, r4, r6
 8003086:	10a4      	asrs	r4, r4, #2
 8003088:	2500      	movs	r5, #0
 800308a:	42a5      	cmp	r5, r4
 800308c:	d105      	bne.n	800309a <__libc_init_array+0x2e>
 800308e:	bd70      	pop	{r4, r5, r6, pc}
 8003090:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003094:	4798      	blx	r3
 8003096:	3501      	adds	r5, #1
 8003098:	e7ee      	b.n	8003078 <__libc_init_array+0xc>
 800309a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800309e:	4798      	blx	r3
 80030a0:	3501      	adds	r5, #1
 80030a2:	e7f2      	b.n	800308a <__libc_init_array+0x1e>
 80030a4:	0800314c 	.word	0x0800314c
 80030a8:	0800314c 	.word	0x0800314c
 80030ac:	0800314c 	.word	0x0800314c
 80030b0:	08003150 	.word	0x08003150

080030b4 <memset>:
 80030b4:	4402      	add	r2, r0
 80030b6:	4603      	mov	r3, r0
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d100      	bne.n	80030be <memset+0xa>
 80030bc:	4770      	bx	lr
 80030be:	f803 1b01 	strb.w	r1, [r3], #1
 80030c2:	e7f9      	b.n	80030b8 <memset+0x4>

080030c4 <_init>:
 80030c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c6:	bf00      	nop
 80030c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ca:	bc08      	pop	{r3}
 80030cc:	469e      	mov	lr, r3
 80030ce:	4770      	bx	lr

080030d0 <_fini>:
 80030d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d2:	bf00      	nop
 80030d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d6:	bc08      	pop	{r3}
 80030d8:	469e      	mov	lr, r3
 80030da:	4770      	bx	lr
