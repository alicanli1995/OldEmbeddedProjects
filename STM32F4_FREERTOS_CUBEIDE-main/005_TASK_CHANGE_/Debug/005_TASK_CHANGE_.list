
005_TASK_CHANGE_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004218  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080043a8  080043a8  000143a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044a4  080044a4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080044a4  080044a4  000144a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044ac  080044ac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044ac  080044ac  000144ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044b0  080044b0  000144b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080044b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004050  20000074  08004528  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040c4  08004528  000240c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1b6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002144  00000000  00000000  0002d25a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab8  00000000  00000000  0002f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b0  00000000  00000000  0002fe58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021a66  00000000  00000000  00030808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000092fa  00000000  00000000  0005226e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca838  00000000  00000000  0005b568  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125da0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d84  00000000  00000000  00125e1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004390 	.word	0x08004390

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004390 	.word	0x08004390

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	60f8      	str	r0, [r7, #12]
 8000588:	60b9      	str	r1, [r7, #8]
 800058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4a07      	ldr	r2, [pc, #28]	; (80005ac <vApplicationGetIdleTaskMemory+0x2c>)
 8000590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <vApplicationGetIdleTaskMemory+0x30>)
 8000596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000090 	.word	0x20000090
 80005b0:	200000e4 	.word	0x200000e4

080005b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	80fb      	strh	r3, [r7, #6]

		buttonState = 1 ;
 80005be:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <HAL_GPIO_EXTI_Callback+0x1c>)
 80005c0:	2201      	movs	r2, #1
 80005c2:	701a      	strb	r2, [r3, #0]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	200002e4 	.word	0x200002e4

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b08e      	sub	sp, #56	; 0x38
 80005d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f000 fb9f 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f833 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 f8b9 	bl	8000758 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005e6:	f000 f88d 	bl	8000704 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of myTask1 */
  osThreadDef(myTask1, Task1_Handler, osPriorityRealtime, 0, 128);
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <main+0x64>)
 80005ec:	f107 041c 	add.w	r4, r7, #28
 80005f0:	461d      	mov	r5, r3
 80005f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask1Handle = osThreadCreate(osThread(myTask1), NULL);
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f001 ffee 	bl	80025e6 <osThreadCreate>
 800060a:	4602      	mov	r2, r0
 800060c:	4b0b      	ldr	r3, [pc, #44]	; (800063c <main+0x68>)
 800060e:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2_Handler, osPriorityHigh, 0, 128);
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <main+0x6c>)
 8000612:	463c      	mov	r4, r7
 8000614:	461d      	mov	r5, r3
 8000616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000622:	463b      	mov	r3, r7
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f001 ffdd 	bl	80025e6 <osThreadCreate>
 800062c:	4602      	mov	r2, r0
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <main+0x70>)
 8000630:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000632:	f001 ffd1 	bl	80025d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000636:	e7fe      	b.n	8000636 <main+0x62>
 8000638:	080043b0 	.word	0x080043b0
 800063c:	20004080 	.word	0x20004080
 8000640:	080043d4 	.word	0x080043d4
 8000644:	200040b8 	.word	0x200040b8

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f003 fa95 	bl	8003b86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <SystemClock_Config+0xb4>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <SystemClock_Config+0xb4>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <SystemClock_Config+0xb4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <SystemClock_Config+0xb8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a1b      	ldr	r2, [pc, #108]	; (8000700 <SystemClock_Config+0xb8>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b19      	ldr	r3, [pc, #100]	; (8000700 <SystemClock_Config+0xb8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ac:	2310      	movs	r3, #16
 80006ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fe65 	bl	8001388 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006c4:	f000 fa12 	bl	8000aec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 f8c0 	bl	8001868 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ee:	f000 f9fd 	bl	8000aec <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3750      	adds	r7, #80	; 0x50
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_USART3_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000710:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000714:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 800073c:	f001 fa60 	bl	8001c00 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f9d1 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20004040 	.word	0x20004040
 8000754:	40004800 	.word	0x40004800

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_GPIO_Init+0x80>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <MX_GPIO_Init+0x80>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_GPIO_Init+0x80>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_GPIO_Init+0x80>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a11      	ldr	r2, [pc, #68]	; (80007d8 <MX_GPIO_Init+0x80>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_GPIO_Init+0x80>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a6:	2301      	movs	r3, #1
 80007a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_GPIO_Init+0x84>)
 80007ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	4619      	mov	r1, r3
 80007b8:	4809      	ldr	r0, [pc, #36]	; (80007e0 <MX_GPIO_Init+0x88>)
 80007ba:	f000 fc33 	bl	8001024 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2105      	movs	r1, #5
 80007c2:	2006      	movs	r0, #6
 80007c4:	f000 fbf7 	bl	8000fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007c8:	2006      	movs	r0, #6
 80007ca:	f000 fc10 	bl	8000fee <HAL_NVIC_EnableIRQ>

}
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800
 80007dc:	10110000 	.word	0x10110000
 80007e0:	40020000 	.word	0x40020000

080007e4 <Task1_Handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task1_Handler */
void Task1_Handler(void const * argument)
{
 80007e4:	b5b0      	push	{r4, r5, r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osPriority p1,p2;
	sprintf(myMassage,"Task1 Calisiyor... \r\n");
 80007ec:	4a56      	ldr	r2, [pc, #344]	; (8000948 <Task1_Handler+0x164>)
 80007ee:	4b57      	ldr	r3, [pc, #348]	; (800094c <Task1_Handler+0x168>)
 80007f0:	4615      	mov	r5, r2
 80007f2:	461c      	mov	r4, r3
 80007f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007f6:	6028      	str	r0, [r5, #0]
 80007f8:	6069      	str	r1, [r5, #4]
 80007fa:	60aa      	str	r2, [r5, #8]
 80007fc:	60eb      	str	r3, [r5, #12]
 80007fe:	6820      	ldr	r0, [r4, #0]
 8000800:	6128      	str	r0, [r5, #16]
 8000802:	88a3      	ldrh	r3, [r4, #4]
 8000804:	82ab      	strh	r3, [r5, #20]
	HAL_UART_Transmit(&huart3, myMassage, strlen(myMassage), 1000);
 8000806:	4850      	ldr	r0, [pc, #320]	; (8000948 <Task1_Handler+0x164>)
 8000808:	f7ff fce2 	bl	80001d0 <strlen>
 800080c:	4603      	mov	r3, r0
 800080e:	b29a      	uxth	r2, r3
 8000810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000814:	494c      	ldr	r1, [pc, #304]	; (8000948 <Task1_Handler+0x164>)
 8000816:	484e      	ldr	r0, [pc, #312]	; (8000950 <Task1_Handler+0x16c>)
 8000818:	f001 fa3f 	bl	8001c9a <HAL_UART_Transmit>
	sprintf(myMassage,"Task1 Priority : %d \r\n", osThreadGetPriority(myTask1Handle));
 800081c:	4b4d      	ldr	r3, [pc, #308]	; (8000954 <Task1_Handler+0x170>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f001 ff41 	bl	80026a8 <osThreadGetPriority>
 8000826:	4603      	mov	r3, r0
 8000828:	461a      	mov	r2, r3
 800082a:	494b      	ldr	r1, [pc, #300]	; (8000958 <Task1_Handler+0x174>)
 800082c:	4846      	ldr	r0, [pc, #280]	; (8000948 <Task1_Handler+0x164>)
 800082e:	f003 f9b3 	bl	8003b98 <siprintf>
	HAL_UART_Transmit(&huart3, myMassage, strlen(myMassage), 1000);
 8000832:	4845      	ldr	r0, [pc, #276]	; (8000948 <Task1_Handler+0x164>)
 8000834:	f7ff fccc 	bl	80001d0 <strlen>
 8000838:	4603      	mov	r3, r0
 800083a:	b29a      	uxth	r2, r3
 800083c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000840:	4941      	ldr	r1, [pc, #260]	; (8000948 <Task1_Handler+0x164>)
 8000842:	4843      	ldr	r0, [pc, #268]	; (8000950 <Task1_Handler+0x16c>)
 8000844:	f001 fa29 	bl	8001c9a <HAL_UART_Transmit>
	sprintf(myMassage,"Task2 Priority : %d \r\n", osThreadGetPriority(Task2Handle));
 8000848:	4b44      	ldr	r3, [pc, #272]	; (800095c <Task1_Handler+0x178>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f001 ff2b 	bl	80026a8 <osThreadGetPriority>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	4942      	ldr	r1, [pc, #264]	; (8000960 <Task1_Handler+0x17c>)
 8000858:	483b      	ldr	r0, [pc, #236]	; (8000948 <Task1_Handler+0x164>)
 800085a:	f003 f99d 	bl	8003b98 <siprintf>
	HAL_UART_Transmit(&huart3, myMassage, strlen(myMassage), 1000);
 800085e:	483a      	ldr	r0, [pc, #232]	; (8000948 <Task1_Handler+0x164>)
 8000860:	f7ff fcb6 	bl	80001d0 <strlen>
 8000864:	4603      	mov	r3, r0
 8000866:	b29a      	uxth	r2, r3
 8000868:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086c:	4936      	ldr	r1, [pc, #216]	; (8000948 <Task1_Handler+0x164>)
 800086e:	4838      	ldr	r0, [pc, #224]	; (8000950 <Task1_Handler+0x16c>)
 8000870:	f001 fa13 	bl	8001c9a <HAL_UART_Transmit>

  /* Infinite loop */
  for(;;)
  {
	  if(buttonState==1){
 8000874:	4b3b      	ldr	r3, [pc, #236]	; (8000964 <Task1_Handler+0x180>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d1fb      	bne.n	8000874 <Task1_Handler+0x90>
		  buttonState = 0;
 800087c:	4b39      	ldr	r3, [pc, #228]	; (8000964 <Task1_Handler+0x180>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
		  p1 = osThreadGetPriority(myTask1Handle);
 8000882:	4b34      	ldr	r3, [pc, #208]	; (8000954 <Task1_Handler+0x170>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f001 ff0e 	bl	80026a8 <osThreadGetPriority>
 800088c:	4603      	mov	r3, r0
 800088e:	81fb      	strh	r3, [r7, #14]
		  p2 = osThreadGetPriority(Task2Handle);
 8000890:	4b32      	ldr	r3, [pc, #200]	; (800095c <Task1_Handler+0x178>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	f001 ff07 	bl	80026a8 <osThreadGetPriority>
 800089a:	4603      	mov	r3, r0
 800089c:	81bb      	strh	r3, [r7, #12]
		  osThreadSetPriority(myTask1Handle, p2);
 800089e:	4b2d      	ldr	r3, [pc, #180]	; (8000954 <Task1_Handler+0x170>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008a6:	4611      	mov	r1, r2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fee8 	bl	800267e <osThreadSetPriority>
		  osThreadSetPriority(Task2Handle, p1);
 80008ae:	4b2b      	ldr	r3, [pc, #172]	; (800095c <Task1_Handler+0x178>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 fee0 	bl	800267e <osThreadSetPriority>
			sprintf(myMassage,"Task1 Calisiyor... \r\n");
 80008be:	4a22      	ldr	r2, [pc, #136]	; (8000948 <Task1_Handler+0x164>)
 80008c0:	4b22      	ldr	r3, [pc, #136]	; (800094c <Task1_Handler+0x168>)
 80008c2:	4615      	mov	r5, r2
 80008c4:	461c      	mov	r4, r3
 80008c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008c8:	6028      	str	r0, [r5, #0]
 80008ca:	6069      	str	r1, [r5, #4]
 80008cc:	60aa      	str	r2, [r5, #8]
 80008ce:	60eb      	str	r3, [r5, #12]
 80008d0:	6820      	ldr	r0, [r4, #0]
 80008d2:	6128      	str	r0, [r5, #16]
 80008d4:	88a3      	ldrh	r3, [r4, #4]
 80008d6:	82ab      	strh	r3, [r5, #20]
			HAL_UART_Transmit(&huart3, myMassage, strlen(myMassage), 1000);
 80008d8:	481b      	ldr	r0, [pc, #108]	; (8000948 <Task1_Handler+0x164>)
 80008da:	f7ff fc79 	bl	80001d0 <strlen>
 80008de:	4603      	mov	r3, r0
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e6:	4918      	ldr	r1, [pc, #96]	; (8000948 <Task1_Handler+0x164>)
 80008e8:	4819      	ldr	r0, [pc, #100]	; (8000950 <Task1_Handler+0x16c>)
 80008ea:	f001 f9d6 	bl	8001c9a <HAL_UART_Transmit>
			sprintf(myMassage,"Task1 Priority : %d \r\n", osThreadGetPriority(myTask1Handle));
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <Task1_Handler+0x170>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 fed8 	bl	80026a8 <osThreadGetPriority>
 80008f8:	4603      	mov	r3, r0
 80008fa:	461a      	mov	r2, r3
 80008fc:	4916      	ldr	r1, [pc, #88]	; (8000958 <Task1_Handler+0x174>)
 80008fe:	4812      	ldr	r0, [pc, #72]	; (8000948 <Task1_Handler+0x164>)
 8000900:	f003 f94a 	bl	8003b98 <siprintf>
			HAL_UART_Transmit(&huart3, myMassage, strlen(myMassage), 1000);
 8000904:	4810      	ldr	r0, [pc, #64]	; (8000948 <Task1_Handler+0x164>)
 8000906:	f7ff fc63 	bl	80001d0 <strlen>
 800090a:	4603      	mov	r3, r0
 800090c:	b29a      	uxth	r2, r3
 800090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000912:	490d      	ldr	r1, [pc, #52]	; (8000948 <Task1_Handler+0x164>)
 8000914:	480e      	ldr	r0, [pc, #56]	; (8000950 <Task1_Handler+0x16c>)
 8000916:	f001 f9c0 	bl	8001c9a <HAL_UART_Transmit>
			sprintf(myMassage,"Task2 Priority : %d \r\n", osThreadGetPriority(Task2Handle));
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <Task1_Handler+0x178>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f001 fec2 	bl	80026a8 <osThreadGetPriority>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	490d      	ldr	r1, [pc, #52]	; (8000960 <Task1_Handler+0x17c>)
 800092a:	4807      	ldr	r0, [pc, #28]	; (8000948 <Task1_Handler+0x164>)
 800092c:	f003 f934 	bl	8003b98 <siprintf>
			HAL_UART_Transmit(&huart3, myMassage, strlen(myMassage), 1000);
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <Task1_Handler+0x164>)
 8000932:	f7ff fc4d 	bl	80001d0 <strlen>
 8000936:	4603      	mov	r3, r0
 8000938:	b29a      	uxth	r2, r3
 800093a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800093e:	4902      	ldr	r1, [pc, #8]	; (8000948 <Task1_Handler+0x164>)
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <Task1_Handler+0x16c>)
 8000942:	f001 f9aa 	bl	8001c9a <HAL_UART_Transmit>
	  if(buttonState==1){
 8000946:	e795      	b.n	8000874 <Task1_Handler+0x90>
 8000948:	20004084 	.word	0x20004084
 800094c:	080043f0 	.word	0x080043f0
 8000950:	20004040 	.word	0x20004040
 8000954:	20004080 	.word	0x20004080
 8000958:	08004408 	.word	0x08004408
 800095c:	200040b8 	.word	0x200040b8
 8000960:	08004420 	.word	0x08004420
 8000964:	200002e4 	.word	0x200002e4

08000968 <Task2_Handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_Handler */
void Task2_Handler(void const * argument)
{
 8000968:	b5b0      	push	{r4, r5, r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_Handler */
	osPriority p1,p2;
	sprintf(myMassage,"Task2 Calisiyor... \r\n");
 8000970:	4a56      	ldr	r2, [pc, #344]	; (8000acc <Task2_Handler+0x164>)
 8000972:	4b57      	ldr	r3, [pc, #348]	; (8000ad0 <Task2_Handler+0x168>)
 8000974:	4615      	mov	r5, r2
 8000976:	461c      	mov	r4, r3
 8000978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800097a:	6028      	str	r0, [r5, #0]
 800097c:	6069      	str	r1, [r5, #4]
 800097e:	60aa      	str	r2, [r5, #8]
 8000980:	60eb      	str	r3, [r5, #12]
 8000982:	6820      	ldr	r0, [r4, #0]
 8000984:	6128      	str	r0, [r5, #16]
 8000986:	88a3      	ldrh	r3, [r4, #4]
 8000988:	82ab      	strh	r3, [r5, #20]
	HAL_UART_Transmit(&huart3, myMassage, strlen(myMassage), 1000);
 800098a:	4850      	ldr	r0, [pc, #320]	; (8000acc <Task2_Handler+0x164>)
 800098c:	f7ff fc20 	bl	80001d0 <strlen>
 8000990:	4603      	mov	r3, r0
 8000992:	b29a      	uxth	r2, r3
 8000994:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000998:	494c      	ldr	r1, [pc, #304]	; (8000acc <Task2_Handler+0x164>)
 800099a:	484e      	ldr	r0, [pc, #312]	; (8000ad4 <Task2_Handler+0x16c>)
 800099c:	f001 f97d 	bl	8001c9a <HAL_UART_Transmit>
	sprintf(myMassage,"Task1 Priority : %d \r\n", osThreadGetPriority(myTask1Handle));
 80009a0:	4b4d      	ldr	r3, [pc, #308]	; (8000ad8 <Task2_Handler+0x170>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 fe7f 	bl	80026a8 <osThreadGetPriority>
 80009aa:	4603      	mov	r3, r0
 80009ac:	461a      	mov	r2, r3
 80009ae:	494b      	ldr	r1, [pc, #300]	; (8000adc <Task2_Handler+0x174>)
 80009b0:	4846      	ldr	r0, [pc, #280]	; (8000acc <Task2_Handler+0x164>)
 80009b2:	f003 f8f1 	bl	8003b98 <siprintf>
	HAL_UART_Transmit(&huart3, myMassage, strlen(myMassage), 1000);
 80009b6:	4845      	ldr	r0, [pc, #276]	; (8000acc <Task2_Handler+0x164>)
 80009b8:	f7ff fc0a 	bl	80001d0 <strlen>
 80009bc:	4603      	mov	r3, r0
 80009be:	b29a      	uxth	r2, r3
 80009c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c4:	4941      	ldr	r1, [pc, #260]	; (8000acc <Task2_Handler+0x164>)
 80009c6:	4843      	ldr	r0, [pc, #268]	; (8000ad4 <Task2_Handler+0x16c>)
 80009c8:	f001 f967 	bl	8001c9a <HAL_UART_Transmit>
	sprintf(myMassage,"Task2 Priority : %d \r\n", osThreadGetPriority(Task2Handle));
 80009cc:	4b44      	ldr	r3, [pc, #272]	; (8000ae0 <Task2_Handler+0x178>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 fe69 	bl	80026a8 <osThreadGetPriority>
 80009d6:	4603      	mov	r3, r0
 80009d8:	461a      	mov	r2, r3
 80009da:	4942      	ldr	r1, [pc, #264]	; (8000ae4 <Task2_Handler+0x17c>)
 80009dc:	483b      	ldr	r0, [pc, #236]	; (8000acc <Task2_Handler+0x164>)
 80009de:	f003 f8db 	bl	8003b98 <siprintf>
	HAL_UART_Transmit(&huart3, myMassage, strlen(myMassage), 1000);
 80009e2:	483a      	ldr	r0, [pc, #232]	; (8000acc <Task2_Handler+0x164>)
 80009e4:	f7ff fbf4 	bl	80001d0 <strlen>
 80009e8:	4603      	mov	r3, r0
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f0:	4936      	ldr	r1, [pc, #216]	; (8000acc <Task2_Handler+0x164>)
 80009f2:	4838      	ldr	r0, [pc, #224]	; (8000ad4 <Task2_Handler+0x16c>)
 80009f4:	f001 f951 	bl	8001c9a <HAL_UART_Transmit>

  /* Infinite loop */
  for(;;)
  {
	  if(buttonState==1){
 80009f8:	4b3b      	ldr	r3, [pc, #236]	; (8000ae8 <Task2_Handler+0x180>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d1fb      	bne.n	80009f8 <Task2_Handler+0x90>
		  buttonState = 0;
 8000a00:	4b39      	ldr	r3, [pc, #228]	; (8000ae8 <Task2_Handler+0x180>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
		  p1 = osThreadGetPriority(myTask1Handle);
 8000a06:	4b34      	ldr	r3, [pc, #208]	; (8000ad8 <Task2_Handler+0x170>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 fe4c 	bl	80026a8 <osThreadGetPriority>
 8000a10:	4603      	mov	r3, r0
 8000a12:	81fb      	strh	r3, [r7, #14]
		  p2 = osThreadGetPriority(Task2Handle);
 8000a14:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <Task2_Handler+0x178>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 fe45 	bl	80026a8 <osThreadGetPriority>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	81bb      	strh	r3, [r7, #12]
		  osThreadSetPriority(myTask1Handle, p2);
 8000a22:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <Task2_Handler+0x170>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 fe26 	bl	800267e <osThreadSetPriority>
		  osThreadSetPriority(Task2Handle, p1);
 8000a32:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <Task2_Handler+0x178>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 fe1e 	bl	800267e <osThreadSetPriority>
			sprintf(myMassage,"Task2 Calisiyor... \r\n");
 8000a42:	4a22      	ldr	r2, [pc, #136]	; (8000acc <Task2_Handler+0x164>)
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <Task2_Handler+0x168>)
 8000a46:	4615      	mov	r5, r2
 8000a48:	461c      	mov	r4, r3
 8000a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a4c:	6028      	str	r0, [r5, #0]
 8000a4e:	6069      	str	r1, [r5, #4]
 8000a50:	60aa      	str	r2, [r5, #8]
 8000a52:	60eb      	str	r3, [r5, #12]
 8000a54:	6820      	ldr	r0, [r4, #0]
 8000a56:	6128      	str	r0, [r5, #16]
 8000a58:	88a3      	ldrh	r3, [r4, #4]
 8000a5a:	82ab      	strh	r3, [r5, #20]
			HAL_UART_Transmit(&huart3, myMassage, strlen(myMassage), 1000);
 8000a5c:	481b      	ldr	r0, [pc, #108]	; (8000acc <Task2_Handler+0x164>)
 8000a5e:	f7ff fbb7 	bl	80001d0 <strlen>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	4918      	ldr	r1, [pc, #96]	; (8000acc <Task2_Handler+0x164>)
 8000a6c:	4819      	ldr	r0, [pc, #100]	; (8000ad4 <Task2_Handler+0x16c>)
 8000a6e:	f001 f914 	bl	8001c9a <HAL_UART_Transmit>
			sprintf(myMassage,"Task1 Priority : %d \r\n", osThreadGetPriority(myTask1Handle));
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <Task2_Handler+0x170>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 fe16 	bl	80026a8 <osThreadGetPriority>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4916      	ldr	r1, [pc, #88]	; (8000adc <Task2_Handler+0x174>)
 8000a82:	4812      	ldr	r0, [pc, #72]	; (8000acc <Task2_Handler+0x164>)
 8000a84:	f003 f888 	bl	8003b98 <siprintf>
			HAL_UART_Transmit(&huart3, myMassage, strlen(myMassage), 1000);
 8000a88:	4810      	ldr	r0, [pc, #64]	; (8000acc <Task2_Handler+0x164>)
 8000a8a:	f7ff fba1 	bl	80001d0 <strlen>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a96:	490d      	ldr	r1, [pc, #52]	; (8000acc <Task2_Handler+0x164>)
 8000a98:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <Task2_Handler+0x16c>)
 8000a9a:	f001 f8fe 	bl	8001c9a <HAL_UART_Transmit>
			sprintf(myMassage,"Task2 Priority : %d \r\n", osThreadGetPriority(Task2Handle));
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <Task2_Handler+0x178>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 fe00 	bl	80026a8 <osThreadGetPriority>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	461a      	mov	r2, r3
 8000aac:	490d      	ldr	r1, [pc, #52]	; (8000ae4 <Task2_Handler+0x17c>)
 8000aae:	4807      	ldr	r0, [pc, #28]	; (8000acc <Task2_Handler+0x164>)
 8000ab0:	f003 f872 	bl	8003b98 <siprintf>
			HAL_UART_Transmit(&huart3, myMassage, strlen(myMassage), 1000);
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <Task2_Handler+0x164>)
 8000ab6:	f7ff fb8b 	bl	80001d0 <strlen>
 8000aba:	4603      	mov	r3, r0
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	4902      	ldr	r1, [pc, #8]	; (8000acc <Task2_Handler+0x164>)
 8000ac4:	4803      	ldr	r0, [pc, #12]	; (8000ad4 <Task2_Handler+0x16c>)
 8000ac6:	f001 f8e8 	bl	8001c9a <HAL_UART_Transmit>
	  if(buttonState==1){
 8000aca:	e795      	b.n	80009f8 <Task2_Handler+0x90>
 8000acc:	20004084 	.word	0x20004084
 8000ad0:	08004438 	.word	0x08004438
 8000ad4:	20004040 	.word	0x20004040
 8000ad8:	20004080 	.word	0x20004080
 8000adc:	08004408 	.word	0x08004408
 8000ae0:	200040b8 	.word	0x200040b8
 8000ae4:	08004420 	.word	0x08004420
 8000ae8:	200002e4 	.word	0x200002e4

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <Error_Handler+0x6>

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_MspInit+0x54>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a11      	ldr	r2, [pc, #68]	; (8000b48 <HAL_MspInit+0x54>)
 8000b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <HAL_MspInit+0x54>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_MspInit+0x54>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_MspInit+0x54>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	6413      	str	r3, [r2, #64]	; 0x40
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_MspInit+0x54>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	210f      	movs	r1, #15
 8000b36:	f06f 0001 	mvn.w	r0, #1
 8000b3a:	f000 fa3c 	bl	8000fb6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <HAL_UART_MspInit+0x84>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12c      	bne.n	8000bc8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <HAL_UART_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ba6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bb8:	2307      	movs	r3, #7
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <HAL_UART_MspInit+0x8c>)
 8000bc4:	f000 fa2e 	bl	8001024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40004800 	.word	0x40004800
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020400 	.word	0x40020400

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0c:	f000 f8d8 	bl	8000dc0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c10:	f002 fb4c 	bl	80032ac <xTaskGetSchedulerState>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d001      	beq.n	8000c1e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c1a:	f002 fd1d 	bl	8003658 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c26:	2001      	movs	r0, #1
 8000c28:	f000 fb96 	bl	8001358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f002 ff5c 	bl	8003b1c <__errno>
 8000c64:	4602      	mov	r2, r0
 8000c66:	230c      	movs	r3, #12
 8000c68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20020000 	.word	0x20020000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	200002e8 	.word	0x200002e8
 8000c98:	200040c8 	.word	0x200040c8

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <SystemInit+0x28>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <SystemInit+0x28>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <SystemInit+0x28>)
 8000cb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cb6:	609a      	str	r2, [r3, #8]
#endif
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ccc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cce:	e003      	b.n	8000cd8 <LoopCopyDataInit>

08000cd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cd6:	3104      	adds	r1, #4

08000cd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ce0:	d3f6      	bcc.n	8000cd0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ce4:	e002      	b.n	8000cec <LoopFillZerobss>

08000ce6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ce6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ce8:	f842 3b04 	str.w	r3, [r2], #4

08000cec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cf0:	d3f9      	bcc.n	8000ce6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cf2:	f7ff ffd3 	bl	8000c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f002 ff17 	bl	8003b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfa:	f7ff fc6b 	bl	80005d4 <main>
  bx  lr    
 8000cfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d04:	080044b4 	.word	0x080044b4
  ldr  r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d0c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000d10:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000d14:	200040c4 	.word	0x200040c4

08000d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <HAL_Init+0x40>)
 8000d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_Init+0x40>)
 8000d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_Init+0x40>)
 8000d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f92b 	bl	8000fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	200f      	movs	r0, #15
 8000d4c:	f000 f808 	bl	8000d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff fed0 	bl	8000af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023c00 	.word	0x40023c00

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x54>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x58>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f943 	bl	800100a <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00e      	b.n	8000dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d80a      	bhi.n	8000daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d94:	2200      	movs	r2, #0
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f000 f90b 	bl	8000fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <HAL_InitTick+0x5c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008
 8000de4:	200040bc 	.word	0x200040bc

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200040bc 	.word	0x200040bc

08000e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e16:	68ba      	ldr	r2, [r7, #8]
 8000e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <__NVIC_SetPriorityGrouping+0x44>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <__NVIC_GetPriorityGrouping+0x18>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	f003 0307 	and.w	r3, r3, #7
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	db0b      	blt.n	8000e8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f003 021f 	and.w	r2, r3, #31
 8000e7c:	4907      	ldr	r1, [pc, #28]	; (8000e9c <__NVIC_EnableIRQ+0x38>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	095b      	lsrs	r3, r3, #5
 8000e84:	2001      	movs	r0, #1
 8000e86:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e8e:	bf00      	nop
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000e100 	.word	0xe000e100

08000ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	db0a      	blt.n	8000eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	490c      	ldr	r1, [pc, #48]	; (8000eec <__NVIC_SetPriority+0x4c>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	0112      	lsls	r2, r2, #4
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec8:	e00a      	b.n	8000ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <__NVIC_SetPriority+0x50>)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	3b04      	subs	r3, #4
 8000ed8:	0112      	lsls	r2, r2, #4
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	440b      	add	r3, r1
 8000ede:	761a      	strb	r2, [r3, #24]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000e100 	.word	0xe000e100
 8000ef0:	e000ed00 	.word	0xe000ed00

08000ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	; 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f1c3 0307 	rsb	r3, r3, #7
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	bf28      	it	cs
 8000f12:	2304      	movcs	r3, #4
 8000f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3304      	adds	r3, #4
 8000f1a:	2b06      	cmp	r3, #6
 8000f1c:	d902      	bls.n	8000f24 <NVIC_EncodePriority+0x30>
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	3b03      	subs	r3, #3
 8000f22:	e000      	b.n	8000f26 <NVIC_EncodePriority+0x32>
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43da      	mvns	r2, r3
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	401a      	ands	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	fa01 f303 	lsl.w	r3, r1, r3
 8000f46:	43d9      	mvns	r1, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	4313      	orrs	r3, r2
         );
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3724      	adds	r7, #36	; 0x24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f6c:	d301      	bcc.n	8000f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00f      	b.n	8000f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <SysTick_Config+0x40>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f7ff ff8e 	bl	8000ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f84:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <SysTick_Config+0x40>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8a:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <SysTick_Config+0x40>)
 8000f8c:	2207      	movs	r2, #7
 8000f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	e000e010 	.word	0xe000e010

08000fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ff29 	bl	8000e00 <__NVIC_SetPriorityGrouping>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
 8000fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc8:	f7ff ff3e 	bl	8000e48 <__NVIC_GetPriorityGrouping>
 8000fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	6978      	ldr	r0, [r7, #20]
 8000fd4:	f7ff ff8e 	bl	8000ef4 <NVIC_EncodePriority>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff5d 	bl	8000ea0 <__NVIC_SetPriority>
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff31 	bl	8000e64 <__NVIC_EnableIRQ>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffa2 	bl	8000f5c <SysTick_Config>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
 800103e:	e16b      	b.n	8001318 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	429a      	cmp	r2, r3
 800105a:	f040 815a 	bne.w	8001312 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d00b      	beq.n	800107e <HAL_GPIO_Init+0x5a>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b02      	cmp	r3, #2
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001072:	2b11      	cmp	r3, #17
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b12      	cmp	r3, #18
 800107c:	d130      	bne.n	80010e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	2203      	movs	r2, #3
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	68da      	ldr	r2, [r3, #12]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b4:	2201      	movs	r2, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	091b      	lsrs	r3, r3, #4
 80010ca:	f003 0201 	and.w	r2, r3, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0xfc>
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b12      	cmp	r3, #18
 800111e:	d123      	bne.n	8001168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	08da      	lsrs	r2, r3, #3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3208      	adds	r2, #8
 8001128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	220f      	movs	r2, #15
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	691a      	ldr	r2, [r3, #16]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	08da      	lsrs	r2, r3, #3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3208      	adds	r2, #8
 8001162:	69b9      	ldr	r1, [r7, #24]
 8001164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0203 	and.w	r2, r3, #3
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 80b4 	beq.w	8001312 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b5f      	ldr	r3, [pc, #380]	; (800132c <HAL_GPIO_Init+0x308>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a5e      	ldr	r2, [pc, #376]	; (800132c <HAL_GPIO_Init+0x308>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b5c      	ldr	r3, [pc, #368]	; (800132c <HAL_GPIO_Init+0x308>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c6:	4a5a      	ldr	r2, [pc, #360]	; (8001330 <HAL_GPIO_Init+0x30c>)
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	3302      	adds	r3, #2
 80011ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	220f      	movs	r2, #15
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a51      	ldr	r2, [pc, #324]	; (8001334 <HAL_GPIO_Init+0x310>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d02b      	beq.n	800124a <HAL_GPIO_Init+0x226>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a50      	ldr	r2, [pc, #320]	; (8001338 <HAL_GPIO_Init+0x314>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d025      	beq.n	8001246 <HAL_GPIO_Init+0x222>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4f      	ldr	r2, [pc, #316]	; (800133c <HAL_GPIO_Init+0x318>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d01f      	beq.n	8001242 <HAL_GPIO_Init+0x21e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4e      	ldr	r2, [pc, #312]	; (8001340 <HAL_GPIO_Init+0x31c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d019      	beq.n	800123e <HAL_GPIO_Init+0x21a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4d      	ldr	r2, [pc, #308]	; (8001344 <HAL_GPIO_Init+0x320>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d013      	beq.n	800123a <HAL_GPIO_Init+0x216>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4c      	ldr	r2, [pc, #304]	; (8001348 <HAL_GPIO_Init+0x324>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d00d      	beq.n	8001236 <HAL_GPIO_Init+0x212>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4b      	ldr	r2, [pc, #300]	; (800134c <HAL_GPIO_Init+0x328>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d007      	beq.n	8001232 <HAL_GPIO_Init+0x20e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4a      	ldr	r2, [pc, #296]	; (8001350 <HAL_GPIO_Init+0x32c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d101      	bne.n	800122e <HAL_GPIO_Init+0x20a>
 800122a:	2307      	movs	r3, #7
 800122c:	e00e      	b.n	800124c <HAL_GPIO_Init+0x228>
 800122e:	2308      	movs	r3, #8
 8001230:	e00c      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001232:	2306      	movs	r3, #6
 8001234:	e00a      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001236:	2305      	movs	r3, #5
 8001238:	e008      	b.n	800124c <HAL_GPIO_Init+0x228>
 800123a:	2304      	movs	r3, #4
 800123c:	e006      	b.n	800124c <HAL_GPIO_Init+0x228>
 800123e:	2303      	movs	r3, #3
 8001240:	e004      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001242:	2302      	movs	r3, #2
 8001244:	e002      	b.n	800124c <HAL_GPIO_Init+0x228>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <HAL_GPIO_Init+0x228>
 800124a:	2300      	movs	r3, #0
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	f002 0203 	and.w	r2, r2, #3
 8001252:	0092      	lsls	r2, r2, #2
 8001254:	4093      	lsls	r3, r2
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800125c:	4934      	ldr	r1, [pc, #208]	; (8001330 <HAL_GPIO_Init+0x30c>)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	3302      	adds	r3, #2
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800126a:	4b3a      	ldr	r3, [pc, #232]	; (8001354 <HAL_GPIO_Init+0x330>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800128e:	4a31      	ldr	r2, [pc, #196]	; (8001354 <HAL_GPIO_Init+0x330>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001294:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <HAL_GPIO_Init+0x330>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012b8:	4a26      	ldr	r2, [pc, #152]	; (8001354 <HAL_GPIO_Init+0x330>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <HAL_GPIO_Init+0x330>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012e2:	4a1c      	ldr	r2, [pc, #112]	; (8001354 <HAL_GPIO_Init+0x330>)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <HAL_GPIO_Init+0x330>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800130c:	4a11      	ldr	r2, [pc, #68]	; (8001354 <HAL_GPIO_Init+0x330>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3301      	adds	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	2b0f      	cmp	r3, #15
 800131c:	f67f ae90 	bls.w	8001040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001320:	bf00      	nop
 8001322:	3724      	adds	r7, #36	; 0x24
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40023800 	.word	0x40023800
 8001330:	40013800 	.word	0x40013800
 8001334:	40020000 	.word	0x40020000
 8001338:	40020400 	.word	0x40020400
 800133c:	40020800 	.word	0x40020800
 8001340:	40020c00 	.word	0x40020c00
 8001344:	40021000 	.word	0x40021000
 8001348:	40021400 	.word	0x40021400
 800134c:	40021800 	.word	0x40021800
 8001350:	40021c00 	.word	0x40021c00
 8001354:	40013c00 	.word	0x40013c00

08001358 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001364:	695a      	ldr	r2, [r3, #20]
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	4013      	ands	r3, r2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d006      	beq.n	800137c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800136e:	4a05      	ldr	r2, [pc, #20]	; (8001384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f91c 	bl	80005b4 <HAL_GPIO_EXTI_Callback>
  }
}
 800137c:	bf00      	nop
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40013c00 	.word	0x40013c00

08001388 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e25b      	b.n	8001852 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d075      	beq.n	8001492 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013a6:	4ba3      	ldr	r3, [pc, #652]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	d00c      	beq.n	80013cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b2:	4ba0      	ldr	r3, [pc, #640]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d112      	bne.n	80013e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013be:	4b9d      	ldr	r3, [pc, #628]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ca:	d10b      	bne.n	80013e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	4b99      	ldr	r3, [pc, #612]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d05b      	beq.n	8001490 <HAL_RCC_OscConfig+0x108>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d157      	bne.n	8001490 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e236      	b.n	8001852 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ec:	d106      	bne.n	80013fc <HAL_RCC_OscConfig+0x74>
 80013ee:	4b91      	ldr	r3, [pc, #580]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a90      	ldr	r2, [pc, #576]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e01d      	b.n	8001438 <HAL_RCC_OscConfig+0xb0>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0x98>
 8001406:	4b8b      	ldr	r3, [pc, #556]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a8a      	ldr	r2, [pc, #552]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	4b88      	ldr	r3, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a87      	ldr	r2, [pc, #540]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0xb0>
 8001420:	4b84      	ldr	r3, [pc, #528]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a83      	ldr	r2, [pc, #524]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b81      	ldr	r3, [pc, #516]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a80      	ldr	r2, [pc, #512]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d013      	beq.n	8001468 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fcd2 	bl	8000de8 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fcce 	bl	8000de8 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e1fb      	b.n	8001852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	4b76      	ldr	r3, [pc, #472]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0xc0>
 8001466:	e014      	b.n	8001492 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fcbe 	bl	8000de8 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fcba 	bl	8000de8 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	; 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e1e7      	b.n	8001852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	4b6c      	ldr	r3, [pc, #432]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0xe8>
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d063      	beq.n	8001566 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800149e:	4b65      	ldr	r3, [pc, #404]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00b      	beq.n	80014c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014aa:	4b62      	ldr	r3, [pc, #392]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d11c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014b6:	4b5f      	ldr	r3, [pc, #380]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d116      	bne.n	80014f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	4b5c      	ldr	r3, [pc, #368]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <HAL_RCC_OscConfig+0x152>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d001      	beq.n	80014da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e1bb      	b.n	8001852 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014da:	4b56      	ldr	r3, [pc, #344]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4952      	ldr	r1, [pc, #328]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ee:	e03a      	b.n	8001566 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d020      	beq.n	800153a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f8:	4b4f      	ldr	r3, [pc, #316]	; (8001638 <HAL_RCC_OscConfig+0x2b0>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fe:	f7ff fc73 	bl	8000de8 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001506:	f7ff fc6f 	bl	8000de8 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e19c      	b.n	8001852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	4b46      	ldr	r3, [pc, #280]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001524:	4b43      	ldr	r3, [pc, #268]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4940      	ldr	r1, [pc, #256]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	4313      	orrs	r3, r2
 8001536:	600b      	str	r3, [r1, #0]
 8001538:	e015      	b.n	8001566 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800153a:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <HAL_RCC_OscConfig+0x2b0>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fc52 	bl	8000de8 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001548:	f7ff fc4e 	bl	8000de8 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e17b      	b.n	8001852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	4b36      	ldr	r3, [pc, #216]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d030      	beq.n	80015d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d016      	beq.n	80015a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157a:	4b30      	ldr	r3, [pc, #192]	; (800163c <HAL_RCC_OscConfig+0x2b4>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001580:	f7ff fc32 	bl	8000de8 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001588:	f7ff fc2e 	bl	8000de8 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e15b      	b.n	8001852 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x200>
 80015a6:	e015      	b.n	80015d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a8:	4b24      	ldr	r3, [pc, #144]	; (800163c <HAL_RCC_OscConfig+0x2b4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ae:	f7ff fc1b 	bl	8000de8 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b4:	e008      	b.n	80015c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b6:	f7ff fc17 	bl	8000de8 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e144      	b.n	8001852 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80015ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1f0      	bne.n	80015b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80a0 	beq.w	8001722 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10f      	bne.n	8001612 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800160e:	2301      	movs	r3, #1
 8001610:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_RCC_OscConfig+0x2b8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161a:	2b00      	cmp	r3, #0
 800161c:	d121      	bne.n	8001662 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_RCC_OscConfig+0x2b8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a07      	ldr	r2, [pc, #28]	; (8001640 <HAL_RCC_OscConfig+0x2b8>)
 8001624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800162a:	f7ff fbdd 	bl	8000de8 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001630:	e011      	b.n	8001656 <HAL_RCC_OscConfig+0x2ce>
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	42470000 	.word	0x42470000
 800163c:	42470e80 	.word	0x42470e80
 8001640:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001644:	f7ff fbd0 	bl	8000de8 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e0fd      	b.n	8001852 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001656:	4b81      	ldr	r3, [pc, #516]	; (800185c <HAL_RCC_OscConfig+0x4d4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d106      	bne.n	8001678 <HAL_RCC_OscConfig+0x2f0>
 800166a:	4b7d      	ldr	r3, [pc, #500]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 800166c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800166e:	4a7c      	ldr	r2, [pc, #496]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6713      	str	r3, [r2, #112]	; 0x70
 8001676:	e01c      	b.n	80016b2 <HAL_RCC_OscConfig+0x32a>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b05      	cmp	r3, #5
 800167e:	d10c      	bne.n	800169a <HAL_RCC_OscConfig+0x312>
 8001680:	4b77      	ldr	r3, [pc, #476]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	4a76      	ldr	r2, [pc, #472]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	6713      	str	r3, [r2, #112]	; 0x70
 800168c:	4b74      	ldr	r3, [pc, #464]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001690:	4a73      	ldr	r2, [pc, #460]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6713      	str	r3, [r2, #112]	; 0x70
 8001698:	e00b      	b.n	80016b2 <HAL_RCC_OscConfig+0x32a>
 800169a:	4b71      	ldr	r3, [pc, #452]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a70      	ldr	r2, [pc, #448]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
 80016a6:	4b6e      	ldr	r3, [pc, #440]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016aa:	4a6d      	ldr	r2, [pc, #436]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 80016ac:	f023 0304 	bic.w	r3, r3, #4
 80016b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d015      	beq.n	80016e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff fb95 	bl	8000de8 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff fb91 	bl	8000de8 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e0bc      	b.n	8001852 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d8:	4b61      	ldr	r3, [pc, #388]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0ee      	beq.n	80016c2 <HAL_RCC_OscConfig+0x33a>
 80016e4:	e014      	b.n	8001710 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fb7f 	bl	8000de8 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ec:	e00a      	b.n	8001704 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff fb7b 	bl	8000de8 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e0a6      	b.n	8001852 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001704:	4b56      	ldr	r3, [pc, #344]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1ee      	bne.n	80016ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d105      	bne.n	8001722 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001716:	4b52      	ldr	r3, [pc, #328]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	4a51      	ldr	r2, [pc, #324]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 800171c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001720:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 8092 	beq.w	8001850 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800172c:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b08      	cmp	r3, #8
 8001736:	d05c      	beq.n	80017f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d141      	bne.n	80017c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001740:	4b48      	ldr	r3, [pc, #288]	; (8001864 <HAL_RCC_OscConfig+0x4dc>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7ff fb4f 	bl	8000de8 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff fb4b 	bl	8000de8 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e078      	b.n	8001852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001760:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69da      	ldr	r2, [r3, #28]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	019b      	lsls	r3, r3, #6
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001782:	085b      	lsrs	r3, r3, #1
 8001784:	3b01      	subs	r3, #1
 8001786:	041b      	lsls	r3, r3, #16
 8001788:	431a      	orrs	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178e:	061b      	lsls	r3, r3, #24
 8001790:	4933      	ldr	r1, [pc, #204]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 8001792:	4313      	orrs	r3, r2
 8001794:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001796:	4b33      	ldr	r3, [pc, #204]	; (8001864 <HAL_RCC_OscConfig+0x4dc>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fb24 	bl	8000de8 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff fb20 	bl	8000de8 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e04d      	b.n	8001852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b6:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x41c>
 80017c2:	e045      	b.n	8001850 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c4:	4b27      	ldr	r3, [pc, #156]	; (8001864 <HAL_RCC_OscConfig+0x4dc>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7ff fb0d 	bl	8000de8 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d2:	f7ff fb09 	bl	8000de8 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e036      	b.n	8001852 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e4:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f0      	bne.n	80017d2 <HAL_RCC_OscConfig+0x44a>
 80017f0:	e02e      	b.n	8001850 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e029      	b.n	8001852 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_RCC_OscConfig+0x4d8>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	429a      	cmp	r2, r3
 8001810:	d11c      	bne.n	800184c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181c:	429a      	cmp	r2, r3
 800181e:	d115      	bne.n	800184c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001826:	4013      	ands	r3, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800182c:	4293      	cmp	r3, r2
 800182e:	d10d      	bne.n	800184c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800183a:	429a      	cmp	r2, r3
 800183c:	d106      	bne.n	800184c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d001      	beq.n	8001850 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e000      	b.n	8001852 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40007000 	.word	0x40007000
 8001860:	40023800 	.word	0x40023800
 8001864:	42470060 	.word	0x42470060

08001868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0cc      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800187c:	4b68      	ldr	r3, [pc, #416]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 030f 	and.w	r3, r3, #15
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d90c      	bls.n	80018a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b65      	ldr	r3, [pc, #404]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b63      	ldr	r3, [pc, #396]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e0b8      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d020      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0304 	and.w	r3, r3, #4
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018bc:	4b59      	ldr	r3, [pc, #356]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4a58      	ldr	r2, [pc, #352]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d4:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	4a52      	ldr	r2, [pc, #328]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e0:	4b50      	ldr	r3, [pc, #320]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	494d      	ldr	r1, [pc, #308]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d044      	beq.n	8001988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d119      	bne.n	8001946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e07f      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d003      	beq.n	8001926 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001922:	2b03      	cmp	r3, #3
 8001924:	d107      	bne.n	8001936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001926:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e06f      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e067      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f023 0203 	bic.w	r2, r3, #3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	4934      	ldr	r1, [pc, #208]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	4313      	orrs	r3, r2
 8001956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001958:	f7ff fa46 	bl	8000de8 <HAL_GetTick>
 800195c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195e:	e00a      	b.n	8001976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001960:	f7ff fa42 	bl	8000de8 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	; 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e04f      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001976:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 020c 	and.w	r2, r3, #12
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	429a      	cmp	r2, r3
 8001986:	d1eb      	bne.n	8001960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001988:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d20c      	bcs.n	80019b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b22      	ldr	r3, [pc, #136]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e032      	b.n	8001a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	4916      	ldr	r1, [pc, #88]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	490e      	ldr	r1, [pc, #56]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ee:	f000 f821 	bl	8001a34 <HAL_RCC_GetSysClockFreq>
 80019f2:	4601      	mov	r1, r0
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_ClockConfig+0x1bc>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_RCC_ClockConfig+0x1c0>)
 8001a00:	5cd3      	ldrb	r3, [r2, r3]
 8001a02:	fa21 f303 	lsr.w	r3, r1, r3
 8001a06:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff f9a6 	bl	8000d60 <HAL_InitTick>

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023c00 	.word	0x40023c00
 8001a24:	40023800 	.word	0x40023800
 8001a28:	08004458 	.word	0x08004458
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	20000004 	.word	0x20000004

08001a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	2300      	movs	r3, #0
 8001a44:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a4a:	4b50      	ldr	r3, [pc, #320]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d007      	beq.n	8001a66 <HAL_RCC_GetSysClockFreq+0x32>
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d008      	beq.n	8001a6c <HAL_RCC_GetSysClockFreq+0x38>
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f040 808d 	bne.w	8001b7a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a60:	4b4b      	ldr	r3, [pc, #300]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a62:	60bb      	str	r3, [r7, #8]
       break;
 8001a64:	e08c      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a66:	4b4b      	ldr	r3, [pc, #300]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a68:	60bb      	str	r3, [r7, #8]
      break;
 8001a6a:	e089      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a6c:	4b47      	ldr	r3, [pc, #284]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a74:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a76:	4b45      	ldr	r3, [pc, #276]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d023      	beq.n	8001aca <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a82:	4b42      	ldr	r3, [pc, #264]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	099b      	lsrs	r3, r3, #6
 8001a88:	f04f 0400 	mov.w	r4, #0
 8001a8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	ea03 0501 	and.w	r5, r3, r1
 8001a98:	ea04 0602 	and.w	r6, r4, r2
 8001a9c:	4a3d      	ldr	r2, [pc, #244]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a9e:	fb02 f106 	mul.w	r1, r2, r6
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	fb02 f205 	mul.w	r2, r2, r5
 8001aa8:	440a      	add	r2, r1
 8001aaa:	493a      	ldr	r1, [pc, #232]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x160>)
 8001aac:	fba5 0101 	umull	r0, r1, r5, r1
 8001ab0:	1853      	adds	r3, r2, r1
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f04f 0400 	mov.w	r4, #0
 8001aba:	461a      	mov	r2, r3
 8001abc:	4623      	mov	r3, r4
 8001abe:	f7fe fbdf 	bl	8000280 <__aeabi_uldivmod>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	460c      	mov	r4, r1
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	e049      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aca:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	099b      	lsrs	r3, r3, #6
 8001ad0:	f04f 0400 	mov.w	r4, #0
 8001ad4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	ea03 0501 	and.w	r5, r3, r1
 8001ae0:	ea04 0602 	and.w	r6, r4, r2
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	4632      	mov	r2, r6
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	f04f 0400 	mov.w	r4, #0
 8001af0:	0154      	lsls	r4, r2, #5
 8001af2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001af6:	014b      	lsls	r3, r1, #5
 8001af8:	4619      	mov	r1, r3
 8001afa:	4622      	mov	r2, r4
 8001afc:	1b49      	subs	r1, r1, r5
 8001afe:	eb62 0206 	sbc.w	r2, r2, r6
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	f04f 0400 	mov.w	r4, #0
 8001b0a:	0194      	lsls	r4, r2, #6
 8001b0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b10:	018b      	lsls	r3, r1, #6
 8001b12:	1a5b      	subs	r3, r3, r1
 8001b14:	eb64 0402 	sbc.w	r4, r4, r2
 8001b18:	f04f 0100 	mov.w	r1, #0
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	00e2      	lsls	r2, r4, #3
 8001b22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b26:	00d9      	lsls	r1, r3, #3
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4614      	mov	r4, r2
 8001b2c:	195b      	adds	r3, r3, r5
 8001b2e:	eb44 0406 	adc.w	r4, r4, r6
 8001b32:	f04f 0100 	mov.w	r1, #0
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	02a2      	lsls	r2, r4, #10
 8001b3c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b40:	0299      	lsls	r1, r3, #10
 8001b42:	460b      	mov	r3, r1
 8001b44:	4614      	mov	r4, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	4621      	mov	r1, r4
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f04f 0400 	mov.w	r4, #0
 8001b50:	461a      	mov	r2, r3
 8001b52:	4623      	mov	r3, r4
 8001b54:	f7fe fb94 	bl	8000280 <__aeabi_uldivmod>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	460c      	mov	r4, r1
 8001b5c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	0c1b      	lsrs	r3, r3, #16
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	3301      	adds	r3, #1
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	60bb      	str	r3, [r7, #8]
      break;
 8001b78:	e002      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001b7c:	60bb      	str	r3, [r7, #8]
      break;
 8001b7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b80:	68bb      	ldr	r3, [r7, #8]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	00f42400 	.word	0x00f42400
 8001b94:	017d7840 	.word	0x017d7840

08001b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_RCC_GetHCLKFreq+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000000 	.word	0x20000000

08001bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bb4:	f7ff fff0 	bl	8001b98 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4601      	mov	r1, r0
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	0a9b      	lsrs	r3, r3, #10
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	4a03      	ldr	r2, [pc, #12]	; (8001bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bc6:	5cd3      	ldrb	r3, [r2, r3]
 8001bc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	08004468 	.word	0x08004468

08001bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bdc:	f7ff ffdc 	bl	8001b98 <HAL_RCC_GetHCLKFreq>
 8001be0:	4601      	mov	r1, r0
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	0b5b      	lsrs	r3, r3, #13
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	4a03      	ldr	r2, [pc, #12]	; (8001bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bee:	5cd3      	ldrb	r3, [r2, r3]
 8001bf0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	08004468 	.word	0x08004468

08001c00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e03f      	b.n	8001c92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d106      	bne.n	8001c2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7fe ff90 	bl	8000b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2224      	movs	r2, #36	; 0x24
 8001c30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f90b 	bl	8001e60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695a      	ldr	r2, [r3, #20]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2220      	movs	r2, #32
 8001c84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b088      	sub	sp, #32
 8001c9e:	af02      	add	r7, sp, #8
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	f040 8083 	bne.w	8001dc2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_UART_Transmit+0x2e>
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e07b      	b.n	8001dc4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_UART_Transmit+0x40>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e074      	b.n	8001dc4 <HAL_UART_Transmit+0x12a>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2221      	movs	r2, #33	; 0x21
 8001cec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001cf0:	f7ff f87a 	bl	8000de8 <HAL_GetTick>
 8001cf4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	88fa      	ldrh	r2, [r7, #6]
 8001cfa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	88fa      	ldrh	r2, [r7, #6]
 8001d00:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001d0a:	e042      	b.n	8001d92 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3b01      	subs	r3, #1
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d22:	d122      	bne.n	8001d6a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f84c 	bl	8001dcc <UART_WaitOnFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e042      	b.n	8001dc4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d50:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d103      	bne.n	8001d62 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	3302      	adds	r3, #2
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	e017      	b.n	8001d92 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	3301      	adds	r3, #1
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	e013      	b.n	8001d92 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	2200      	movs	r2, #0
 8001d72:	2180      	movs	r1, #128	; 0x80
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 f829 	bl	8001dcc <UART_WaitOnFlagUntilTimeout>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e01f      	b.n	8001dc4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	60ba      	str	r2, [r7, #8]
 8001d8a:	781a      	ldrb	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1b7      	bne.n	8001d0c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	2200      	movs	r2, #0
 8001da4:	2140      	movs	r1, #64	; 0x40
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 f810 	bl	8001dcc <UART_WaitOnFlagUntilTimeout>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e006      	b.n	8001dc4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2220      	movs	r2, #32
 8001dba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e000      	b.n	8001dc4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001dc2:	2302      	movs	r3, #2
  }
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	603b      	str	r3, [r7, #0]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ddc:	e02c      	b.n	8001e38 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de4:	d028      	beq.n	8001e38 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d007      	beq.n	8001dfc <UART_WaitOnFlagUntilTimeout+0x30>
 8001dec:	f7fe fffc 	bl	8000de8 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d21d      	bcs.n	8001e38 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e0a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e00f      	b.n	8001e58 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	4013      	ands	r3, r2
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	bf0c      	ite	eq
 8001e48:	2301      	moveq	r3, #1
 8001e4a:	2300      	movne	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	79fb      	ldrb	r3, [r7, #7]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d0c3      	beq.n	8001dde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e64:	b085      	sub	sp, #20
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001ea2:	f023 030c 	bic.w	r3, r3, #12
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	68f9      	ldr	r1, [r7, #12]
 8001eac:	430b      	orrs	r3, r1
 8001eae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699a      	ldr	r2, [r3, #24]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ece:	f040 818b 	bne.w	80021e8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4ac1      	ldr	r2, [pc, #772]	; (80021dc <UART_SetConfig+0x37c>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d005      	beq.n	8001ee8 <UART_SetConfig+0x88>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4abf      	ldr	r2, [pc, #764]	; (80021e0 <UART_SetConfig+0x380>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	f040 80bd 	bne.w	8002062 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ee8:	f7ff fe76 	bl	8001bd8 <HAL_RCC_GetPCLK2Freq>
 8001eec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	461d      	mov	r5, r3
 8001ef2:	f04f 0600 	mov.w	r6, #0
 8001ef6:	46a8      	mov	r8, r5
 8001ef8:	46b1      	mov	r9, r6
 8001efa:	eb18 0308 	adds.w	r3, r8, r8
 8001efe:	eb49 0409 	adc.w	r4, r9, r9
 8001f02:	4698      	mov	r8, r3
 8001f04:	46a1      	mov	r9, r4
 8001f06:	eb18 0805 	adds.w	r8, r8, r5
 8001f0a:	eb49 0906 	adc.w	r9, r9, r6
 8001f0e:	f04f 0100 	mov.w	r1, #0
 8001f12:	f04f 0200 	mov.w	r2, #0
 8001f16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001f1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001f1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001f22:	4688      	mov	r8, r1
 8001f24:	4691      	mov	r9, r2
 8001f26:	eb18 0005 	adds.w	r0, r8, r5
 8001f2a:	eb49 0106 	adc.w	r1, r9, r6
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	461d      	mov	r5, r3
 8001f34:	f04f 0600 	mov.w	r6, #0
 8001f38:	196b      	adds	r3, r5, r5
 8001f3a:	eb46 0406 	adc.w	r4, r6, r6
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4623      	mov	r3, r4
 8001f42:	f7fe f99d 	bl	8000280 <__aeabi_uldivmod>
 8001f46:	4603      	mov	r3, r0
 8001f48:	460c      	mov	r4, r1
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4ba5      	ldr	r3, [pc, #660]	; (80021e4 <UART_SetConfig+0x384>)
 8001f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	461d      	mov	r5, r3
 8001f5c:	f04f 0600 	mov.w	r6, #0
 8001f60:	46a9      	mov	r9, r5
 8001f62:	46b2      	mov	sl, r6
 8001f64:	eb19 0309 	adds.w	r3, r9, r9
 8001f68:	eb4a 040a 	adc.w	r4, sl, sl
 8001f6c:	4699      	mov	r9, r3
 8001f6e:	46a2      	mov	sl, r4
 8001f70:	eb19 0905 	adds.w	r9, r9, r5
 8001f74:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f78:	f04f 0100 	mov.w	r1, #0
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f8c:	4689      	mov	r9, r1
 8001f8e:	4692      	mov	sl, r2
 8001f90:	eb19 0005 	adds.w	r0, r9, r5
 8001f94:	eb4a 0106 	adc.w	r1, sl, r6
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	461d      	mov	r5, r3
 8001f9e:	f04f 0600 	mov.w	r6, #0
 8001fa2:	196b      	adds	r3, r5, r5
 8001fa4:	eb46 0406 	adc.w	r4, r6, r6
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4623      	mov	r3, r4
 8001fac:	f7fe f968 	bl	8000280 <__aeabi_uldivmod>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	460c      	mov	r4, r1
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b8b      	ldr	r3, [pc, #556]	; (80021e4 <UART_SetConfig+0x384>)
 8001fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8001fbc:	095b      	lsrs	r3, r3, #5
 8001fbe:	2164      	movs	r1, #100	; 0x64
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	3332      	adds	r3, #50	; 0x32
 8001fca:	4a86      	ldr	r2, [pc, #536]	; (80021e4 <UART_SetConfig+0x384>)
 8001fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd0:	095b      	lsrs	r3, r3, #5
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001fd8:	4498      	add	r8, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	461d      	mov	r5, r3
 8001fde:	f04f 0600 	mov.w	r6, #0
 8001fe2:	46a9      	mov	r9, r5
 8001fe4:	46b2      	mov	sl, r6
 8001fe6:	eb19 0309 	adds.w	r3, r9, r9
 8001fea:	eb4a 040a 	adc.w	r4, sl, sl
 8001fee:	4699      	mov	r9, r3
 8001ff0:	46a2      	mov	sl, r4
 8001ff2:	eb19 0905 	adds.w	r9, r9, r5
 8001ff6:	eb4a 0a06 	adc.w	sl, sl, r6
 8001ffa:	f04f 0100 	mov.w	r1, #0
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002006:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800200a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800200e:	4689      	mov	r9, r1
 8002010:	4692      	mov	sl, r2
 8002012:	eb19 0005 	adds.w	r0, r9, r5
 8002016:	eb4a 0106 	adc.w	r1, sl, r6
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	461d      	mov	r5, r3
 8002020:	f04f 0600 	mov.w	r6, #0
 8002024:	196b      	adds	r3, r5, r5
 8002026:	eb46 0406 	adc.w	r4, r6, r6
 800202a:	461a      	mov	r2, r3
 800202c:	4623      	mov	r3, r4
 800202e:	f7fe f927 	bl	8000280 <__aeabi_uldivmod>
 8002032:	4603      	mov	r3, r0
 8002034:	460c      	mov	r4, r1
 8002036:	461a      	mov	r2, r3
 8002038:	4b6a      	ldr	r3, [pc, #424]	; (80021e4 <UART_SetConfig+0x384>)
 800203a:	fba3 1302 	umull	r1, r3, r3, r2
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	2164      	movs	r1, #100	; 0x64
 8002042:	fb01 f303 	mul.w	r3, r1, r3
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	3332      	adds	r3, #50	; 0x32
 800204c:	4a65      	ldr	r2, [pc, #404]	; (80021e4 <UART_SetConfig+0x384>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	095b      	lsrs	r3, r3, #5
 8002054:	f003 0207 	and.w	r2, r3, #7
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4442      	add	r2, r8
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	e26f      	b.n	8002542 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002062:	f7ff fda5 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 8002066:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	461d      	mov	r5, r3
 800206c:	f04f 0600 	mov.w	r6, #0
 8002070:	46a8      	mov	r8, r5
 8002072:	46b1      	mov	r9, r6
 8002074:	eb18 0308 	adds.w	r3, r8, r8
 8002078:	eb49 0409 	adc.w	r4, r9, r9
 800207c:	4698      	mov	r8, r3
 800207e:	46a1      	mov	r9, r4
 8002080:	eb18 0805 	adds.w	r8, r8, r5
 8002084:	eb49 0906 	adc.w	r9, r9, r6
 8002088:	f04f 0100 	mov.w	r1, #0
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002094:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002098:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800209c:	4688      	mov	r8, r1
 800209e:	4691      	mov	r9, r2
 80020a0:	eb18 0005 	adds.w	r0, r8, r5
 80020a4:	eb49 0106 	adc.w	r1, r9, r6
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	461d      	mov	r5, r3
 80020ae:	f04f 0600 	mov.w	r6, #0
 80020b2:	196b      	adds	r3, r5, r5
 80020b4:	eb46 0406 	adc.w	r4, r6, r6
 80020b8:	461a      	mov	r2, r3
 80020ba:	4623      	mov	r3, r4
 80020bc:	f7fe f8e0 	bl	8000280 <__aeabi_uldivmod>
 80020c0:	4603      	mov	r3, r0
 80020c2:	460c      	mov	r4, r1
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b47      	ldr	r3, [pc, #284]	; (80021e4 <UART_SetConfig+0x384>)
 80020c8:	fba3 2302 	umull	r2, r3, r3, r2
 80020cc:	095b      	lsrs	r3, r3, #5
 80020ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	461d      	mov	r5, r3
 80020d6:	f04f 0600 	mov.w	r6, #0
 80020da:	46a9      	mov	r9, r5
 80020dc:	46b2      	mov	sl, r6
 80020de:	eb19 0309 	adds.w	r3, r9, r9
 80020e2:	eb4a 040a 	adc.w	r4, sl, sl
 80020e6:	4699      	mov	r9, r3
 80020e8:	46a2      	mov	sl, r4
 80020ea:	eb19 0905 	adds.w	r9, r9, r5
 80020ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80020f2:	f04f 0100 	mov.w	r1, #0
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002102:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002106:	4689      	mov	r9, r1
 8002108:	4692      	mov	sl, r2
 800210a:	eb19 0005 	adds.w	r0, r9, r5
 800210e:	eb4a 0106 	adc.w	r1, sl, r6
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	461d      	mov	r5, r3
 8002118:	f04f 0600 	mov.w	r6, #0
 800211c:	196b      	adds	r3, r5, r5
 800211e:	eb46 0406 	adc.w	r4, r6, r6
 8002122:	461a      	mov	r2, r3
 8002124:	4623      	mov	r3, r4
 8002126:	f7fe f8ab 	bl	8000280 <__aeabi_uldivmod>
 800212a:	4603      	mov	r3, r0
 800212c:	460c      	mov	r4, r1
 800212e:	461a      	mov	r2, r3
 8002130:	4b2c      	ldr	r3, [pc, #176]	; (80021e4 <UART_SetConfig+0x384>)
 8002132:	fba3 1302 	umull	r1, r3, r3, r2
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	2164      	movs	r1, #100	; 0x64
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	3332      	adds	r3, #50	; 0x32
 8002144:	4a27      	ldr	r2, [pc, #156]	; (80021e4 <UART_SetConfig+0x384>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002152:	4498      	add	r8, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	461d      	mov	r5, r3
 8002158:	f04f 0600 	mov.w	r6, #0
 800215c:	46a9      	mov	r9, r5
 800215e:	46b2      	mov	sl, r6
 8002160:	eb19 0309 	adds.w	r3, r9, r9
 8002164:	eb4a 040a 	adc.w	r4, sl, sl
 8002168:	4699      	mov	r9, r3
 800216a:	46a2      	mov	sl, r4
 800216c:	eb19 0905 	adds.w	r9, r9, r5
 8002170:	eb4a 0a06 	adc.w	sl, sl, r6
 8002174:	f04f 0100 	mov.w	r1, #0
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002180:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002184:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002188:	4689      	mov	r9, r1
 800218a:	4692      	mov	sl, r2
 800218c:	eb19 0005 	adds.w	r0, r9, r5
 8002190:	eb4a 0106 	adc.w	r1, sl, r6
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	461d      	mov	r5, r3
 800219a:	f04f 0600 	mov.w	r6, #0
 800219e:	196b      	adds	r3, r5, r5
 80021a0:	eb46 0406 	adc.w	r4, r6, r6
 80021a4:	461a      	mov	r2, r3
 80021a6:	4623      	mov	r3, r4
 80021a8:	f7fe f86a 	bl	8000280 <__aeabi_uldivmod>
 80021ac:	4603      	mov	r3, r0
 80021ae:	460c      	mov	r4, r1
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <UART_SetConfig+0x384>)
 80021b4:	fba3 1302 	umull	r1, r3, r3, r2
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	2164      	movs	r1, #100	; 0x64
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	3332      	adds	r3, #50	; 0x32
 80021c6:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <UART_SetConfig+0x384>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	095b      	lsrs	r3, r3, #5
 80021ce:	f003 0207 	and.w	r2, r3, #7
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4442      	add	r2, r8
 80021d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80021da:	e1b2      	b.n	8002542 <UART_SetConfig+0x6e2>
 80021dc:	40011000 	.word	0x40011000
 80021e0:	40011400 	.word	0x40011400
 80021e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4ad7      	ldr	r2, [pc, #860]	; (800254c <UART_SetConfig+0x6ec>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d005      	beq.n	80021fe <UART_SetConfig+0x39e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4ad6      	ldr	r2, [pc, #856]	; (8002550 <UART_SetConfig+0x6f0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	f040 80d1 	bne.w	80023a0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80021fe:	f7ff fceb 	bl	8001bd8 <HAL_RCC_GetPCLK2Freq>
 8002202:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	469a      	mov	sl, r3
 8002208:	f04f 0b00 	mov.w	fp, #0
 800220c:	46d0      	mov	r8, sl
 800220e:	46d9      	mov	r9, fp
 8002210:	eb18 0308 	adds.w	r3, r8, r8
 8002214:	eb49 0409 	adc.w	r4, r9, r9
 8002218:	4698      	mov	r8, r3
 800221a:	46a1      	mov	r9, r4
 800221c:	eb18 080a 	adds.w	r8, r8, sl
 8002220:	eb49 090b 	adc.w	r9, r9, fp
 8002224:	f04f 0100 	mov.w	r1, #0
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002230:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002234:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002238:	4688      	mov	r8, r1
 800223a:	4691      	mov	r9, r2
 800223c:	eb1a 0508 	adds.w	r5, sl, r8
 8002240:	eb4b 0609 	adc.w	r6, fp, r9
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	4619      	mov	r1, r3
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	f04f 0400 	mov.w	r4, #0
 8002256:	0094      	lsls	r4, r2, #2
 8002258:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800225c:	008b      	lsls	r3, r1, #2
 800225e:	461a      	mov	r2, r3
 8002260:	4623      	mov	r3, r4
 8002262:	4628      	mov	r0, r5
 8002264:	4631      	mov	r1, r6
 8002266:	f7fe f80b 	bl	8000280 <__aeabi_uldivmod>
 800226a:	4603      	mov	r3, r0
 800226c:	460c      	mov	r4, r1
 800226e:	461a      	mov	r2, r3
 8002270:	4bb8      	ldr	r3, [pc, #736]	; (8002554 <UART_SetConfig+0x6f4>)
 8002272:	fba3 2302 	umull	r2, r3, r3, r2
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	469b      	mov	fp, r3
 8002280:	f04f 0c00 	mov.w	ip, #0
 8002284:	46d9      	mov	r9, fp
 8002286:	46e2      	mov	sl, ip
 8002288:	eb19 0309 	adds.w	r3, r9, r9
 800228c:	eb4a 040a 	adc.w	r4, sl, sl
 8002290:	4699      	mov	r9, r3
 8002292:	46a2      	mov	sl, r4
 8002294:	eb19 090b 	adds.w	r9, r9, fp
 8002298:	eb4a 0a0c 	adc.w	sl, sl, ip
 800229c:	f04f 0100 	mov.w	r1, #0
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022b0:	4689      	mov	r9, r1
 80022b2:	4692      	mov	sl, r2
 80022b4:	eb1b 0509 	adds.w	r5, fp, r9
 80022b8:	eb4c 060a 	adc.w	r6, ip, sl
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	4619      	mov	r1, r3
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	f04f 0400 	mov.w	r4, #0
 80022ce:	0094      	lsls	r4, r2, #2
 80022d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022d4:	008b      	lsls	r3, r1, #2
 80022d6:	461a      	mov	r2, r3
 80022d8:	4623      	mov	r3, r4
 80022da:	4628      	mov	r0, r5
 80022dc:	4631      	mov	r1, r6
 80022de:	f7fd ffcf 	bl	8000280 <__aeabi_uldivmod>
 80022e2:	4603      	mov	r3, r0
 80022e4:	460c      	mov	r4, r1
 80022e6:	461a      	mov	r2, r3
 80022e8:	4b9a      	ldr	r3, [pc, #616]	; (8002554 <UART_SetConfig+0x6f4>)
 80022ea:	fba3 1302 	umull	r1, r3, r3, r2
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2164      	movs	r1, #100	; 0x64
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	3332      	adds	r3, #50	; 0x32
 80022fc:	4a95      	ldr	r2, [pc, #596]	; (8002554 <UART_SetConfig+0x6f4>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002308:	4498      	add	r8, r3
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	469b      	mov	fp, r3
 800230e:	f04f 0c00 	mov.w	ip, #0
 8002312:	46d9      	mov	r9, fp
 8002314:	46e2      	mov	sl, ip
 8002316:	eb19 0309 	adds.w	r3, r9, r9
 800231a:	eb4a 040a 	adc.w	r4, sl, sl
 800231e:	4699      	mov	r9, r3
 8002320:	46a2      	mov	sl, r4
 8002322:	eb19 090b 	adds.w	r9, r9, fp
 8002326:	eb4a 0a0c 	adc.w	sl, sl, ip
 800232a:	f04f 0100 	mov.w	r1, #0
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002336:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800233a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800233e:	4689      	mov	r9, r1
 8002340:	4692      	mov	sl, r2
 8002342:	eb1b 0509 	adds.w	r5, fp, r9
 8002346:	eb4c 060a 	adc.w	r6, ip, sl
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	4619      	mov	r1, r3
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	f04f 0400 	mov.w	r4, #0
 800235c:	0094      	lsls	r4, r2, #2
 800235e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002362:	008b      	lsls	r3, r1, #2
 8002364:	461a      	mov	r2, r3
 8002366:	4623      	mov	r3, r4
 8002368:	4628      	mov	r0, r5
 800236a:	4631      	mov	r1, r6
 800236c:	f7fd ff88 	bl	8000280 <__aeabi_uldivmod>
 8002370:	4603      	mov	r3, r0
 8002372:	460c      	mov	r4, r1
 8002374:	461a      	mov	r2, r3
 8002376:	4b77      	ldr	r3, [pc, #476]	; (8002554 <UART_SetConfig+0x6f4>)
 8002378:	fba3 1302 	umull	r1, r3, r3, r2
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	2164      	movs	r1, #100	; 0x64
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	3332      	adds	r3, #50	; 0x32
 800238a:	4a72      	ldr	r2, [pc, #456]	; (8002554 <UART_SetConfig+0x6f4>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	f003 020f 	and.w	r2, r3, #15
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4442      	add	r2, r8
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	e0d0      	b.n	8002542 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80023a0:	f7ff fc06 	bl	8001bb0 <HAL_RCC_GetPCLK1Freq>
 80023a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	469a      	mov	sl, r3
 80023aa:	f04f 0b00 	mov.w	fp, #0
 80023ae:	46d0      	mov	r8, sl
 80023b0:	46d9      	mov	r9, fp
 80023b2:	eb18 0308 	adds.w	r3, r8, r8
 80023b6:	eb49 0409 	adc.w	r4, r9, r9
 80023ba:	4698      	mov	r8, r3
 80023bc:	46a1      	mov	r9, r4
 80023be:	eb18 080a 	adds.w	r8, r8, sl
 80023c2:	eb49 090b 	adc.w	r9, r9, fp
 80023c6:	f04f 0100 	mov.w	r1, #0
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023da:	4688      	mov	r8, r1
 80023dc:	4691      	mov	r9, r2
 80023de:	eb1a 0508 	adds.w	r5, sl, r8
 80023e2:	eb4b 0609 	adc.w	r6, fp, r9
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4619      	mov	r1, r3
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	f04f 0400 	mov.w	r4, #0
 80023f8:	0094      	lsls	r4, r2, #2
 80023fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023fe:	008b      	lsls	r3, r1, #2
 8002400:	461a      	mov	r2, r3
 8002402:	4623      	mov	r3, r4
 8002404:	4628      	mov	r0, r5
 8002406:	4631      	mov	r1, r6
 8002408:	f7fd ff3a 	bl	8000280 <__aeabi_uldivmod>
 800240c:	4603      	mov	r3, r0
 800240e:	460c      	mov	r4, r1
 8002410:	461a      	mov	r2, r3
 8002412:	4b50      	ldr	r3, [pc, #320]	; (8002554 <UART_SetConfig+0x6f4>)
 8002414:	fba3 2302 	umull	r2, r3, r3, r2
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	469b      	mov	fp, r3
 8002422:	f04f 0c00 	mov.w	ip, #0
 8002426:	46d9      	mov	r9, fp
 8002428:	46e2      	mov	sl, ip
 800242a:	eb19 0309 	adds.w	r3, r9, r9
 800242e:	eb4a 040a 	adc.w	r4, sl, sl
 8002432:	4699      	mov	r9, r3
 8002434:	46a2      	mov	sl, r4
 8002436:	eb19 090b 	adds.w	r9, r9, fp
 800243a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800243e:	f04f 0100 	mov.w	r1, #0
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800244a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800244e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002452:	4689      	mov	r9, r1
 8002454:	4692      	mov	sl, r2
 8002456:	eb1b 0509 	adds.w	r5, fp, r9
 800245a:	eb4c 060a 	adc.w	r6, ip, sl
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4619      	mov	r1, r3
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	f04f 0400 	mov.w	r4, #0
 8002470:	0094      	lsls	r4, r2, #2
 8002472:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002476:	008b      	lsls	r3, r1, #2
 8002478:	461a      	mov	r2, r3
 800247a:	4623      	mov	r3, r4
 800247c:	4628      	mov	r0, r5
 800247e:	4631      	mov	r1, r6
 8002480:	f7fd fefe 	bl	8000280 <__aeabi_uldivmod>
 8002484:	4603      	mov	r3, r0
 8002486:	460c      	mov	r4, r1
 8002488:	461a      	mov	r2, r3
 800248a:	4b32      	ldr	r3, [pc, #200]	; (8002554 <UART_SetConfig+0x6f4>)
 800248c:	fba3 1302 	umull	r1, r3, r3, r2
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	2164      	movs	r1, #100	; 0x64
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	3332      	adds	r3, #50	; 0x32
 800249e:	4a2d      	ldr	r2, [pc, #180]	; (8002554 <UART_SetConfig+0x6f4>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	095b      	lsrs	r3, r3, #5
 80024a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024aa:	4498      	add	r8, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	469b      	mov	fp, r3
 80024b0:	f04f 0c00 	mov.w	ip, #0
 80024b4:	46d9      	mov	r9, fp
 80024b6:	46e2      	mov	sl, ip
 80024b8:	eb19 0309 	adds.w	r3, r9, r9
 80024bc:	eb4a 040a 	adc.w	r4, sl, sl
 80024c0:	4699      	mov	r9, r3
 80024c2:	46a2      	mov	sl, r4
 80024c4:	eb19 090b 	adds.w	r9, r9, fp
 80024c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80024cc:	f04f 0100 	mov.w	r1, #0
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024e0:	4689      	mov	r9, r1
 80024e2:	4692      	mov	sl, r2
 80024e4:	eb1b 0509 	adds.w	r5, fp, r9
 80024e8:	eb4c 060a 	adc.w	r6, ip, sl
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4619      	mov	r1, r3
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	f04f 0400 	mov.w	r4, #0
 80024fe:	0094      	lsls	r4, r2, #2
 8002500:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002504:	008b      	lsls	r3, r1, #2
 8002506:	461a      	mov	r2, r3
 8002508:	4623      	mov	r3, r4
 800250a:	4628      	mov	r0, r5
 800250c:	4631      	mov	r1, r6
 800250e:	f7fd feb7 	bl	8000280 <__aeabi_uldivmod>
 8002512:	4603      	mov	r3, r0
 8002514:	460c      	mov	r4, r1
 8002516:	461a      	mov	r2, r3
 8002518:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <UART_SetConfig+0x6f4>)
 800251a:	fba3 1302 	umull	r1, r3, r3, r2
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	2164      	movs	r1, #100	; 0x64
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	3332      	adds	r3, #50	; 0x32
 800252c:	4a09      	ldr	r2, [pc, #36]	; (8002554 <UART_SetConfig+0x6f4>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	f003 020f 	and.w	r2, r3, #15
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4442      	add	r2, r8
 800253e:	609a      	str	r2, [r3, #8]
}
 8002540:	e7ff      	b.n	8002542 <UART_SetConfig+0x6e2>
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800254c:	40011000 	.word	0x40011000
 8002550:	40011400 	.word	0x40011400
 8002554:	51eb851f 	.word	0x51eb851f

08002558 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800256a:	2b84      	cmp	r3, #132	; 0x84
 800256c:	d005      	beq.n	800257a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800256e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4413      	add	r3, r2
 8002576:	3303      	adds	r3, #3
 8002578:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800257a:	68fb      	ldr	r3, [r7, #12]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <makeCmsisPriority>:

#if (INCLUDE_uxTaskPriorityGet == 1)
/* Convert from FreeRTOS priority number to CMSIS type osPriority */
static osPriority makeCmsisPriority (unsigned portBASE_TYPE fpriority)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  osPriority priority = osPriorityError;
 8002590:	2384      	movs	r3, #132	; 0x84
 8002592:	81fb      	strh	r3, [r7, #14]
  
  if ((fpriority - tskIDLE_PRIORITY) <= (osPriorityRealtime - osPriorityIdle)) {
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b06      	cmp	r3, #6
 8002598:	d804      	bhi.n	80025a4 <makeCmsisPriority+0x1c>
    priority = (osPriority)((int)osPriorityIdle + (int)(fpriority - tskIDLE_PRIORITY));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	b29b      	uxth	r3, r3
 800259e:	3b03      	subs	r3, #3
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	81fb      	strh	r3, [r7, #14]
  }
  
  return priority;
 80025a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025ba:	f3ef 8305 	mrs	r3, IPSR
 80025be:	607b      	str	r3, [r7, #4]
  return(result);
 80025c0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	bf14      	ite	ne
 80025c6:	2301      	movne	r3, #1
 80025c8:	2300      	moveq	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80025dc:	f000 fb7a 	bl	8002cd4 <vTaskStartScheduler>
  
  return osOK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80025e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025e8:	b089      	sub	sp, #36	; 0x24
 80025ea:	af04      	add	r7, sp, #16
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d020      	beq.n	800263a <osThreadCreate+0x54>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d01c      	beq.n	800263a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685c      	ldr	r4, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681d      	ldr	r5, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691e      	ldr	r6, [r3, #16]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ffa0 	bl	8002558 <makeFreeRtosPriority>
 8002618:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002622:	9202      	str	r2, [sp, #8]
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	9100      	str	r1, [sp, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4632      	mov	r2, r6
 800262c:	4629      	mov	r1, r5
 800262e:	4620      	mov	r0, r4
 8002630:	f000 f8d3 	bl	80027da <xTaskCreateStatic>
 8002634:	4603      	mov	r3, r0
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	e01c      	b.n	8002674 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685c      	ldr	r4, [r3, #4]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002646:	b29e      	uxth	r6, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff ff82 	bl	8002558 <makeFreeRtosPriority>
 8002654:	4602      	mov	r2, r0
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	9301      	str	r3, [sp, #4]
 800265c:	9200      	str	r2, [sp, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	4632      	mov	r2, r6
 8002662:	4629      	mov	r1, r5
 8002664:	4620      	mov	r0, r4
 8002666:	f000 f912 	bl	800288e <xTaskCreate>
 800266a:	4603      	mov	r3, r0
 800266c:	2b01      	cmp	r3, #1
 800266e:	d001      	beq.n	8002674 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002674:	68fb      	ldr	r3, [r7, #12]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800267e <osThreadSetPriority>:
* @param   priority      new priority value for the thread function.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
 8002686:	460b      	mov	r3, r1
 8002688:	807b      	strh	r3, [r7, #2]
#if (INCLUDE_vTaskPrioritySet == 1)
  vTaskPrioritySet(thread_id, makeFreeRtosPriority(priority));
 800268a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff ff62 	bl	8002558 <makeFreeRtosPriority>
 8002694:	4603      	mov	r3, r0
 8002696:	4619      	mov	r1, r3
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fa73 	bl	8002b84 <vTaskPrioritySet>
  return osOK;
 800269e:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <osThreadGetPriority>:
* @param   thread_id     thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  current priority value of the thread function.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetPriority shall be consistent in every CMSIS-RTOS.
*/
osPriority osThreadGetPriority (osThreadId thread_id)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
#if (INCLUDE_uxTaskPriorityGet == 1)
  if (inHandlerMode())
 80026b0:	f7ff ff80 	bl	80025b4 <inHandlerMode>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d008      	beq.n	80026cc <osThreadGetPriority+0x24>
  {
    return makeCmsisPriority(uxTaskPriorityGetFromISR(thread_id));  
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fa36 	bl	8002b2c <uxTaskPriorityGetFromISR>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff ff60 	bl	8002588 <makeCmsisPriority>
 80026c8:	4603      	mov	r3, r0
 80026ca:	e007      	b.n	80026dc <osThreadGetPriority+0x34>
  }
  else
  {  
    return makeCmsisPriority(uxTaskPriorityGet(thread_id));
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fa13 	bl	8002af8 <uxTaskPriorityGet>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff57 	bl	8002588 <makeCmsisPriority>
 80026da:	4603      	mov	r3, r0
  }
#else
  return osPriorityError;
#endif
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f103 0208 	add.w	r2, r3, #8
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f103 0208 	add.w	r2, r3, #8
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f103 0208 	add.w	r2, r3, #8
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	601a      	str	r2, [r3, #0]
}
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002786:	b480      	push	{r7}
 8002788:	b085      	sub	sp, #20
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6892      	ldr	r2, [r2, #8]
 800279c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6852      	ldr	r2, [r2, #4]
 80027a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d103      	bne.n	80027ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	1e5a      	subs	r2, r3, #1
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3714      	adds	r7, #20
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b08e      	sub	sp, #56	; 0x38
 80027de:	af04      	add	r7, sp, #16
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80027e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d109      	bne.n	8002802 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f2:	f383 8811 	msr	BASEPRI, r3
 80027f6:	f3bf 8f6f 	isb	sy
 80027fa:	f3bf 8f4f 	dsb	sy
 80027fe:	623b      	str	r3, [r7, #32]
 8002800:	e7fe      	b.n	8002800 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002804:	2b00      	cmp	r3, #0
 8002806:	d109      	bne.n	800281c <xTaskCreateStatic+0x42>
 8002808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280c:	f383 8811 	msr	BASEPRI, r3
 8002810:	f3bf 8f6f 	isb	sy
 8002814:	f3bf 8f4f 	dsb	sy
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	e7fe      	b.n	800281a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800281c:	2354      	movs	r3, #84	; 0x54
 800281e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	2b54      	cmp	r3, #84	; 0x54
 8002824:	d009      	beq.n	800283a <xTaskCreateStatic+0x60>
 8002826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282a:	f383 8811 	msr	BASEPRI, r3
 800282e:	f3bf 8f6f 	isb	sy
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	61bb      	str	r3, [r7, #24]
 8002838:	e7fe      	b.n	8002838 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800283a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800283c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283e:	2b00      	cmp	r3, #0
 8002840:	d01e      	beq.n	8002880 <xTaskCreateStatic+0xa6>
 8002842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01b      	beq.n	8002880 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002850:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	2202      	movs	r2, #2
 8002856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800285a:	2300      	movs	r3, #0
 800285c:	9303      	str	r3, [sp, #12]
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	9302      	str	r3, [sp, #8]
 8002862:	f107 0314 	add.w	r3, r7, #20
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f000 f850 	bl	8002918 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002878:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800287a:	f000 f8d3 	bl	8002a24 <prvAddNewTaskToReadyList>
 800287e:	e001      	b.n	8002884 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002884:	697b      	ldr	r3, [r7, #20]
	}
 8002886:	4618      	mov	r0, r3
 8002888:	3728      	adds	r7, #40	; 0x28
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800288e:	b580      	push	{r7, lr}
 8002890:	b08c      	sub	sp, #48	; 0x30
 8002892:	af04      	add	r7, sp, #16
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	603b      	str	r3, [r7, #0]
 800289a:	4613      	mov	r3, r2
 800289c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 ff64 	bl	8003770 <pvPortMalloc>
 80028a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00e      	beq.n	80028ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80028b0:	2054      	movs	r0, #84	; 0x54
 80028b2:	f000 ff5d 	bl	8003770 <pvPortMalloc>
 80028b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
 80028c4:	e005      	b.n	80028d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80028c6:	6978      	ldr	r0, [r7, #20]
 80028c8:	f001 f814 	bl	80038f4 <vPortFree>
 80028cc:	e001      	b.n	80028d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d017      	beq.n	8002908 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028e0:	88fa      	ldrh	r2, [r7, #6]
 80028e2:	2300      	movs	r3, #0
 80028e4:	9303      	str	r3, [sp, #12]
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	9302      	str	r3, [sp, #8]
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 f80e 	bl	8002918 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80028fc:	69f8      	ldr	r0, [r7, #28]
 80028fe:	f000 f891 	bl	8002a24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002902:	2301      	movs	r3, #1
 8002904:	61bb      	str	r3, [r7, #24]
 8002906:	e002      	b.n	800290e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002908:	f04f 33ff 	mov.w	r3, #4294967295
 800290c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800290e:	69bb      	ldr	r3, [r7, #24]
	}
 8002910:	4618      	mov	r0, r3
 8002912:	3720      	adds	r7, #32
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002930:	3b01      	subs	r3, #1
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	f023 0307 	bic.w	r3, r3, #7
 800293e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	2b00      	cmp	r3, #0
 8002948:	d009      	beq.n	800295e <prvInitialiseNewTask+0x46>
 800294a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294e:	f383 8811 	msr	BASEPRI, r3
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	e7fe      	b.n	800295c <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01f      	beq.n	80029a4 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002964:	2300      	movs	r3, #0
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	e012      	b.n	8002990 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	4413      	add	r3, r2
 8002970:	7819      	ldrb	r1, [r3, #0]
 8002972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	4413      	add	r3, r2
 8002978:	3334      	adds	r3, #52	; 0x34
 800297a:	460a      	mov	r2, r1
 800297c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	4413      	add	r3, r2
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d006      	beq.n	8002998 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	3301      	adds	r3, #1
 800298e:	61fb      	str	r3, [r7, #28]
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2b0f      	cmp	r3, #15
 8002994:	d9e9      	bls.n	800296a <prvInitialiseNewTask+0x52>
 8002996:	e000      	b.n	800299a <prvInitialiseNewTask+0x82>
			{
				break;
 8002998:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029a2:	e003      	b.n	80029ac <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80029a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d901      	bls.n	80029b6 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80029b2:	2306      	movs	r3, #6
 80029b4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80029b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029ba:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80029bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029c0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80029c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c4:	2200      	movs	r2, #0
 80029c6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ca:	3304      	adds	r3, #4
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fea9 	bl	8002724 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	3318      	adds	r3, #24
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fea4 	bl	8002724 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e4:	f1c3 0207 	rsb	r2, r3, #7
 80029e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80029f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f4:	2200      	movs	r2, #0
 80029f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80029f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	68f9      	ldr	r1, [r7, #12]
 8002a04:	69b8      	ldr	r0, [r7, #24]
 8002a06:	f000 fc6f 	bl	80032e8 <pxPortInitialiseStack>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a1c:	bf00      	nop
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002a2c:	f000 fd86 	bl	800353c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002a30:	4b2a      	ldr	r3, [pc, #168]	; (8002adc <prvAddNewTaskToReadyList+0xb8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	3301      	adds	r3, #1
 8002a36:	4a29      	ldr	r2, [pc, #164]	; (8002adc <prvAddNewTaskToReadyList+0xb8>)
 8002a38:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002a3a:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <prvAddNewTaskToReadyList+0xbc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002a42:	4a27      	ldr	r2, [pc, #156]	; (8002ae0 <prvAddNewTaskToReadyList+0xbc>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a48:	4b24      	ldr	r3, [pc, #144]	; (8002adc <prvAddNewTaskToReadyList+0xb8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d110      	bne.n	8002a72 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002a50:	f000 fb72 	bl	8003138 <prvInitialiseTaskLists>
 8002a54:	e00d      	b.n	8002a72 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002a56:	4b23      	ldr	r3, [pc, #140]	; (8002ae4 <prvAddNewTaskToReadyList+0xc0>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <prvAddNewTaskToReadyList+0xbc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d802      	bhi.n	8002a72 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002a6c:	4a1c      	ldr	r2, [pc, #112]	; (8002ae0 <prvAddNewTaskToReadyList+0xbc>)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a72:	4b1d      	ldr	r3, [pc, #116]	; (8002ae8 <prvAddNewTaskToReadyList+0xc4>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3301      	adds	r3, #1
 8002a78:	4a1b      	ldr	r2, [pc, #108]	; (8002ae8 <prvAddNewTaskToReadyList+0xc4>)
 8002a7a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	2201      	movs	r2, #1
 8002a82:	409a      	lsls	r2, r3
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <prvAddNewTaskToReadyList+0xc8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	4a18      	ldr	r2, [pc, #96]	; (8002aec <prvAddNewTaskToReadyList+0xc8>)
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <prvAddNewTaskToReadyList+0xcc>)
 8002a9c:	441a      	add	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	f7ff fe4a 	bl	800273e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002aaa:	f000 fd75 	bl	8003598 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <prvAddNewTaskToReadyList+0xc0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00e      	beq.n	8002ad4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <prvAddNewTaskToReadyList+0xbc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d207      	bcs.n	8002ad4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <prvAddNewTaskToReadyList+0xd0>)
 8002ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ad4:	bf00      	nop
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	200003ec 	.word	0x200003ec
 8002ae0:	200002ec 	.word	0x200002ec
 8002ae4:	200003f8 	.word	0x200003f8
 8002ae8:	20000408 	.word	0x20000408
 8002aec:	200003f4 	.word	0x200003f4
 8002af0:	200002f0 	.word	0x200002f0
 8002af4:	e000ed04 	.word	0xe000ed04

08002af8 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8002b00:	f000 fd1c 	bl	800353c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d102      	bne.n	8002b10 <uxTaskPriorityGet+0x18>
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <uxTaskPriorityGet+0x30>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	e000      	b.n	8002b12 <uxTaskPriorityGet+0x1a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8002b1a:	f000 fd3d 	bl	8003598 <vPortExitCritical>

		return uxReturn;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
	}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	200002ec 	.word	0x200002ec

08002b2c <uxTaskPriorityGetFromISR>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
	{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b34:	f000 fdde 	bl	80036f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b38:	f3ef 8211 	mrs	r2, BASEPRI
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	f383 8811 	msr	BASEPRI, r3
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	613a      	str	r2, [r7, #16]
 8002b4e:	60fb      	str	r3, [r7, #12]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b50:	693b      	ldr	r3, [r7, #16]

		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b52:	61fb      	str	r3, [r7, #28]
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <uxTaskPriorityGetFromISR+0x34>
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <uxTaskPriorityGetFromISR+0x54>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	e000      	b.n	8002b62 <uxTaskPriorityGetFromISR+0x36>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	61bb      	str	r3, [r7, #24]
			uxReturn = pxTCB->uxPriority;
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f383 8811 	msr	BASEPRI, r3
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );

		return uxReturn;
 8002b74:	697b      	ldr	r3, [r7, #20]
	}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	200002ec 	.word	0x200002ec

08002b84 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b088      	sub	sp, #32
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b06      	cmp	r3, #6
 8002b96:	d909      	bls.n	8002bac <vTaskPrioritySet+0x28>
	__asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	e7fe      	b.n	8002baa <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d901      	bls.n	8002bb6 <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bb2:	2306      	movs	r3, #6
 8002bb4:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8002bb6:	f000 fcc1 	bl	800353c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <vTaskPrioritySet+0x42>
 8002bc0:	4b40      	ldr	r3, [pc, #256]	; (8002cc4 <vTaskPrioritySet+0x140>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	e000      	b.n	8002bc8 <vTaskPrioritySet+0x44>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d06f      	beq.n	8002cb8 <vTaskPrioritySet+0x134>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d90d      	bls.n	8002bfc <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 8002be0:	4b38      	ldr	r3, [pc, #224]	; (8002cc4 <vTaskPrioritySet+0x140>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d00f      	beq.n	8002c0a <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002bea:	4b36      	ldr	r3, [pc, #216]	; (8002cc4 <vTaskPrioritySet+0x140>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d309      	bcc.n	8002c0a <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	e006      	b.n	8002c0a <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8002bfc:	4b31      	ldr	r3, [pc, #196]	; (8002cc4 <vTaskPrioritySet+0x140>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d101      	bne.n	8002c0a <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8002c06:	2301      	movs	r3, #1
 8002c08:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d102      	bne.n	8002c22 <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	db04      	blt.n	8002c3a <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	f1c3 0207 	rsb	r2, r3, #7
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	6959      	ldr	r1, [r3, #20]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4a1f      	ldr	r2, [pc, #124]	; (8002cc8 <vTaskPrioritySet+0x144>)
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4299      	cmp	r1, r3
 8002c4e:	d128      	bne.n	8002ca2 <vTaskPrioritySet+0x11e>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	3304      	adds	r3, #4
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fd96 	bl	8002786 <uxListRemove>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d109      	bne.n	8002c74 <vTaskPrioritySet+0xf0>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8002c60:	2201      	movs	r2, #1
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43da      	mvns	r2, r3
 8002c6a:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <vTaskPrioritySet+0x148>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	4a16      	ldr	r2, [pc, #88]	; (8002ccc <vTaskPrioritySet+0x148>)
 8002c72:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	2201      	movs	r2, #1
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <vTaskPrioritySet+0x148>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <vTaskPrioritySet+0x148>)
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <vTaskPrioritySet+0x144>)
 8002c94:	441a      	add	r2, r3
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	f7ff fd4e 	bl	800273e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d007      	beq.n	8002cb8 <vTaskPrioritySet+0x134>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <vTaskPrioritySet+0x14c>)
 8002caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	f3bf 8f4f 	dsb	sy
 8002cb4:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8002cb8:	f000 fc6e 	bl	8003598 <vPortExitCritical>
	}
 8002cbc:	bf00      	nop
 8002cbe:	3720      	adds	r7, #32
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	200002ec 	.word	0x200002ec
 8002cc8:	200002f0 	.word	0x200002f0
 8002ccc:	200003f4 	.word	0x200003f4
 8002cd0:	e000ed04 	.word	0xe000ed04

08002cd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ce2:	463a      	mov	r2, r7
 8002ce4:	1d39      	adds	r1, r7, #4
 8002ce6:	f107 0308 	add.w	r3, r7, #8
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fd fc48 	bl	8000580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002cf0:	6839      	ldr	r1, [r7, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68ba      	ldr	r2, [r7, #8]
 8002cf6:	9202      	str	r2, [sp, #8]
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	460a      	mov	r2, r1
 8002d02:	491d      	ldr	r1, [pc, #116]	; (8002d78 <vTaskStartScheduler+0xa4>)
 8002d04:	481d      	ldr	r0, [pc, #116]	; (8002d7c <vTaskStartScheduler+0xa8>)
 8002d06:	f7ff fd68 	bl	80027da <xTaskCreateStatic>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <vTaskStartScheduler+0xac>)
 8002d0e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <vTaskStartScheduler+0xac>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	e001      	b.n	8002d22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d115      	bne.n	8002d54 <vTaskStartScheduler+0x80>
 8002d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <vTaskStartScheduler+0xb0>)
 8002d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d42:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <vTaskStartScheduler+0xb4>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d48:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <vTaskStartScheduler+0xb8>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d4e:	f000 fb57 	bl	8003400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d52:	e00d      	b.n	8002d70 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5a:	d109      	bne.n	8002d70 <vTaskStartScheduler+0x9c>
 8002d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d60:	f383 8811 	msr	BASEPRI, r3
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	e7fe      	b.n	8002d6e <vTaskStartScheduler+0x9a>
}
 8002d70:	bf00      	nop
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	08004450 	.word	0x08004450
 8002d7c:	08003109 	.word	0x08003109
 8002d80:	20000410 	.word	0x20000410
 8002d84:	2000040c 	.word	0x2000040c
 8002d88:	200003f8 	.word	0x200003f8
 8002d8c:	200003f0 	.word	0x200003f0

08002d90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <vTaskSuspendAll+0x18>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	4a03      	ldr	r2, [pc, #12]	; (8002da8 <vTaskSuspendAll+0x18>)
 8002d9c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8002d9e:	bf00      	nop
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	20000414 	.word	0x20000414

08002dac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002dba:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <xTaskResumeAll+0x114>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <xTaskResumeAll+0x2a>
 8002dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	e7fe      	b.n	8002dd4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002dd6:	f000 fbb1 	bl	800353c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002dda:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <xTaskResumeAll+0x114>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	4a37      	ldr	r2, [pc, #220]	; (8002ec0 <xTaskResumeAll+0x114>)
 8002de2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002de4:	4b36      	ldr	r3, [pc, #216]	; (8002ec0 <xTaskResumeAll+0x114>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d161      	bne.n	8002eb0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002dec:	4b35      	ldr	r3, [pc, #212]	; (8002ec4 <xTaskResumeAll+0x118>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d05d      	beq.n	8002eb0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002df4:	e02e      	b.n	8002e54 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002df6:	4b34      	ldr	r3, [pc, #208]	; (8002ec8 <xTaskResumeAll+0x11c>)
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	3318      	adds	r3, #24
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff fcbf 	bl	8002786 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fcba 	bl	8002786 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e16:	2201      	movs	r2, #1
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <xTaskResumeAll+0x120>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	4a2a      	ldr	r2, [pc, #168]	; (8002ecc <xTaskResumeAll+0x120>)
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4a27      	ldr	r2, [pc, #156]	; (8002ed0 <xTaskResumeAll+0x124>)
 8002e32:	441a      	add	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3304      	adds	r3, #4
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	f7ff fc7f 	bl	800273e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e44:	4b23      	ldr	r3, [pc, #140]	; (8002ed4 <xTaskResumeAll+0x128>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d302      	bcc.n	8002e54 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002e4e:	4b22      	ldr	r3, [pc, #136]	; (8002ed8 <xTaskResumeAll+0x12c>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e54:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <xTaskResumeAll+0x11c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1cc      	bne.n	8002df6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e62:	f000 fa03 	bl	800326c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002e66:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <xTaskResumeAll+0x130>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d010      	beq.n	8002e94 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e72:	f000 f837 	bl	8002ee4 <xTaskIncrementTick>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002e7c:	4b16      	ldr	r3, [pc, #88]	; (8002ed8 <xTaskResumeAll+0x12c>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f1      	bne.n	8002e72 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002e8e:	4b13      	ldr	r3, [pc, #76]	; (8002edc <xTaskResumeAll+0x130>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e94:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <xTaskResumeAll+0x12c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d009      	beq.n	8002eb0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <xTaskResumeAll+0x134>)
 8002ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	f3bf 8f4f 	dsb	sy
 8002eac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002eb0:	f000 fb72 	bl	8003598 <vPortExitCritical>

	return xAlreadyYielded;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000414 	.word	0x20000414
 8002ec4:	200003ec 	.word	0x200003ec
 8002ec8:	200003ac 	.word	0x200003ac
 8002ecc:	200003f4 	.word	0x200003f4
 8002ed0:	200002f0 	.word	0x200002f0
 8002ed4:	200002ec 	.word	0x200002ec
 8002ed8:	20000400 	.word	0x20000400
 8002edc:	200003fc 	.word	0x200003fc
 8002ee0:	e000ed04 	.word	0xe000ed04

08002ee4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eee:	4b4e      	ldr	r3, [pc, #312]	; (8003028 <xTaskIncrementTick+0x144>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f040 8087 	bne.w	8003006 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ef8:	4b4c      	ldr	r3, [pc, #304]	; (800302c <xTaskIncrementTick+0x148>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	3301      	adds	r3, #1
 8002efe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f00:	4a4a      	ldr	r2, [pc, #296]	; (800302c <xTaskIncrementTick+0x148>)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d11f      	bne.n	8002f4c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f0c:	4b48      	ldr	r3, [pc, #288]	; (8003030 <xTaskIncrementTick+0x14c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d009      	beq.n	8002f2a <xTaskIncrementTick+0x46>
 8002f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	e7fe      	b.n	8002f28 <xTaskIncrementTick+0x44>
 8002f2a:	4b41      	ldr	r3, [pc, #260]	; (8003030 <xTaskIncrementTick+0x14c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	4b40      	ldr	r3, [pc, #256]	; (8003034 <xTaskIncrementTick+0x150>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a3e      	ldr	r2, [pc, #248]	; (8003030 <xTaskIncrementTick+0x14c>)
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4a3e      	ldr	r2, [pc, #248]	; (8003034 <xTaskIncrementTick+0x150>)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	; (8003038 <xTaskIncrementTick+0x154>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3301      	adds	r3, #1
 8002f44:	4a3c      	ldr	r2, [pc, #240]	; (8003038 <xTaskIncrementTick+0x154>)
 8002f46:	6013      	str	r3, [r2, #0]
 8002f48:	f000 f990 	bl	800326c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f4c:	4b3b      	ldr	r3, [pc, #236]	; (800303c <xTaskIncrementTick+0x158>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d348      	bcc.n	8002fe8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f56:	4b36      	ldr	r3, [pc, #216]	; (8003030 <xTaskIncrementTick+0x14c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d104      	bne.n	8002f6a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f60:	4b36      	ldr	r3, [pc, #216]	; (800303c <xTaskIncrementTick+0x158>)
 8002f62:	f04f 32ff 	mov.w	r2, #4294967295
 8002f66:	601a      	str	r2, [r3, #0]
					break;
 8002f68:	e03e      	b.n	8002fe8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f6a:	4b31      	ldr	r3, [pc, #196]	; (8003030 <xTaskIncrementTick+0x14c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d203      	bcs.n	8002f8a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f82:	4a2e      	ldr	r2, [pc, #184]	; (800303c <xTaskIncrementTick+0x158>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f88:	e02e      	b.n	8002fe8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fbf9 	bl	8002786 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d004      	beq.n	8002fa6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	3318      	adds	r3, #24
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fbf0 	bl	8002786 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002faa:	2201      	movs	r2, #1
 8002fac:	409a      	lsls	r2, r3
 8002fae:	4b24      	ldr	r3, [pc, #144]	; (8003040 <xTaskIncrementTick+0x15c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	4a22      	ldr	r2, [pc, #136]	; (8003040 <xTaskIncrementTick+0x15c>)
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4a1f      	ldr	r2, [pc, #124]	; (8003044 <xTaskIncrementTick+0x160>)
 8002fc6:	441a      	add	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4610      	mov	r0, r2
 8002fd0:	f7ff fbb5 	bl	800273e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd8:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <xTaskIncrementTick+0x164>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d3b9      	bcc.n	8002f56 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fe6:	e7b6      	b.n	8002f56 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fe8:	4b17      	ldr	r3, [pc, #92]	; (8003048 <xTaskIncrementTick+0x164>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fee:	4915      	ldr	r1, [pc, #84]	; (8003044 <xTaskIncrementTick+0x160>)
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d907      	bls.n	8003010 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003000:	2301      	movs	r3, #1
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	e004      	b.n	8003010 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <xTaskIncrementTick+0x168>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3301      	adds	r3, #1
 800300c:	4a0f      	ldr	r2, [pc, #60]	; (800304c <xTaskIncrementTick+0x168>)
 800300e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003010:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <xTaskIncrementTick+0x16c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003018:	2301      	movs	r3, #1
 800301a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800301c:	697b      	ldr	r3, [r7, #20]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000414 	.word	0x20000414
 800302c:	200003f0 	.word	0x200003f0
 8003030:	200003a4 	.word	0x200003a4
 8003034:	200003a8 	.word	0x200003a8
 8003038:	20000404 	.word	0x20000404
 800303c:	2000040c 	.word	0x2000040c
 8003040:	200003f4 	.word	0x200003f4
 8003044:	200002f0 	.word	0x200002f0
 8003048:	200002ec 	.word	0x200002ec
 800304c:	200003fc 	.word	0x200003fc
 8003050:	20000400 	.word	0x20000400

08003054 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800305a:	4b26      	ldr	r3, [pc, #152]	; (80030f4 <vTaskSwitchContext+0xa0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003062:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <vTaskSwitchContext+0xa4>)
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003068:	e03e      	b.n	80030e8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800306a:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <vTaskSwitchContext+0xa4>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003070:	4b22      	ldr	r3, [pc, #136]	; (80030fc <vTaskSwitchContext+0xa8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	fab3 f383 	clz	r3, r3
 800307c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800307e:	7afb      	ldrb	r3, [r7, #11]
 8003080:	f1c3 031f 	rsb	r3, r3, #31
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	491e      	ldr	r1, [pc, #120]	; (8003100 <vTaskSwitchContext+0xac>)
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4613      	mov	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <vTaskSwitchContext+0x5a>
	__asm volatile
 800309a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309e:	f383 8811 	msr	BASEPRI, r3
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	e7fe      	b.n	80030ac <vTaskSwitchContext+0x58>
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4a11      	ldr	r2, [pc, #68]	; (8003100 <vTaskSwitchContext+0xac>)
 80030ba:	4413      	add	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	3308      	adds	r3, #8
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d104      	bne.n	80030de <vTaskSwitchContext+0x8a>
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a07      	ldr	r2, [pc, #28]	; (8003104 <vTaskSwitchContext+0xb0>)
 80030e6:	6013      	str	r3, [r2, #0]
}
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	20000414 	.word	0x20000414
 80030f8:	20000400 	.word	0x20000400
 80030fc:	200003f4 	.word	0x200003f4
 8003100:	200002f0 	.word	0x200002f0
 8003104:	200002ec 	.word	0x200002ec

08003108 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003110:	f000 f852 	bl	80031b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003114:	4b06      	ldr	r3, [pc, #24]	; (8003130 <prvIdleTask+0x28>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d9f9      	bls.n	8003110 <prvIdleTask+0x8>
			{
				taskYIELD();
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <prvIdleTask+0x2c>)
 800311e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800312c:	e7f0      	b.n	8003110 <prvIdleTask+0x8>
 800312e:	bf00      	nop
 8003130:	200002f0 	.word	0x200002f0
 8003134:	e000ed04 	.word	0xe000ed04

08003138 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]
 8003142:	e00c      	b.n	800315e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4a12      	ldr	r2, [pc, #72]	; (8003198 <prvInitialiseTaskLists+0x60>)
 8003150:	4413      	add	r3, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fac6 	bl	80026e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3301      	adds	r3, #1
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b06      	cmp	r3, #6
 8003162:	d9ef      	bls.n	8003144 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003164:	480d      	ldr	r0, [pc, #52]	; (800319c <prvInitialiseTaskLists+0x64>)
 8003166:	f7ff fabd 	bl	80026e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800316a:	480d      	ldr	r0, [pc, #52]	; (80031a0 <prvInitialiseTaskLists+0x68>)
 800316c:	f7ff faba 	bl	80026e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003170:	480c      	ldr	r0, [pc, #48]	; (80031a4 <prvInitialiseTaskLists+0x6c>)
 8003172:	f7ff fab7 	bl	80026e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003176:	480c      	ldr	r0, [pc, #48]	; (80031a8 <prvInitialiseTaskLists+0x70>)
 8003178:	f7ff fab4 	bl	80026e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800317c:	480b      	ldr	r0, [pc, #44]	; (80031ac <prvInitialiseTaskLists+0x74>)
 800317e:	f7ff fab1 	bl	80026e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003182:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <prvInitialiseTaskLists+0x78>)
 8003184:	4a05      	ldr	r2, [pc, #20]	; (800319c <prvInitialiseTaskLists+0x64>)
 8003186:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003188:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <prvInitialiseTaskLists+0x7c>)
 800318a:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <prvInitialiseTaskLists+0x68>)
 800318c:	601a      	str	r2, [r3, #0]
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	200002f0 	.word	0x200002f0
 800319c:	2000037c 	.word	0x2000037c
 80031a0:	20000390 	.word	0x20000390
 80031a4:	200003ac 	.word	0x200003ac
 80031a8:	200003c0 	.word	0x200003c0
 80031ac:	200003d8 	.word	0x200003d8
 80031b0:	200003a4 	.word	0x200003a4
 80031b4:	200003a8 	.word	0x200003a8

080031b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031be:	e019      	b.n	80031f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80031c0:	f000 f9bc 	bl	800353c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <prvCheckTasksWaitingTermination+0x4c>)
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3304      	adds	r3, #4
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff fad8 	bl	8002786 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80031d6:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <prvCheckTasksWaitingTermination+0x50>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3b01      	subs	r3, #1
 80031dc:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <prvCheckTasksWaitingTermination+0x50>)
 80031de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <prvCheckTasksWaitingTermination+0x54>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	4a09      	ldr	r2, [pc, #36]	; (800320c <prvCheckTasksWaitingTermination+0x54>)
 80031e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80031ea:	f000 f9d5 	bl	8003598 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f80e 	bl	8003210 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <prvCheckTasksWaitingTermination+0x54>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1e1      	bne.n	80031c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	200003c0 	.word	0x200003c0
 8003208:	200003ec 	.word	0x200003ec
 800320c:	200003d4 	.word	0x200003d4

08003210 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800321e:	2b00      	cmp	r3, #0
 8003220:	d108      	bne.n	8003234 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fb64 	bl	80038f4 <vPortFree>
				vPortFree( pxTCB );
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fb61 	bl	80038f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003232:	e017      	b.n	8003264 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800323a:	2b01      	cmp	r3, #1
 800323c:	d103      	bne.n	8003246 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fb58 	bl	80038f4 <vPortFree>
	}
 8003244:	e00e      	b.n	8003264 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800324c:	2b02      	cmp	r3, #2
 800324e:	d009      	beq.n	8003264 <prvDeleteTCB+0x54>
 8003250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	e7fe      	b.n	8003262 <prvDeleteTCB+0x52>
	}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003272:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <prvResetNextTaskUnblockTime+0x38>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d104      	bne.n	8003286 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <prvResetNextTaskUnblockTime+0x3c>)
 800327e:	f04f 32ff 	mov.w	r2, #4294967295
 8003282:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003284:	e008      	b.n	8003298 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003286:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <prvResetNextTaskUnblockTime+0x38>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	4a04      	ldr	r2, [pc, #16]	; (80032a8 <prvResetNextTaskUnblockTime+0x3c>)
 8003296:	6013      	str	r3, [r2, #0]
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	200003a4 	.word	0x200003a4
 80032a8:	2000040c 	.word	0x2000040c

080032ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <xTaskGetSchedulerState+0x34>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d102      	bne.n	80032c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80032ba:	2301      	movs	r3, #1
 80032bc:	607b      	str	r3, [r7, #4]
 80032be:	e008      	b.n	80032d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032c0:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <xTaskGetSchedulerState+0x38>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80032c8:	2302      	movs	r3, #2
 80032ca:	607b      	str	r3, [r7, #4]
 80032cc:	e001      	b.n	80032d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80032ce:	2300      	movs	r3, #0
 80032d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80032d2:	687b      	ldr	r3, [r7, #4]
	}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	200003f8 	.word	0x200003f8
 80032e4:	20000414 	.word	0x20000414

080032e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	3b04      	subs	r3, #4
 80032f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003300:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	3b04      	subs	r3, #4
 8003306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f023 0201 	bic.w	r2, r3, #1
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	3b04      	subs	r3, #4
 8003316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003318:	4a0c      	ldr	r2, [pc, #48]	; (800334c <pxPortInitialiseStack+0x64>)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	3b14      	subs	r3, #20
 8003322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	3b04      	subs	r3, #4
 800332e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f06f 0202 	mvn.w	r2, #2
 8003336:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	3b20      	subs	r3, #32
 800333c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800333e:	68fb      	ldr	r3, [r7, #12]
}
 8003340:	4618      	mov	r0, r3
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	08003351 	.word	0x08003351

08003350 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003356:	2300      	movs	r3, #0
 8003358:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800335a:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <prvTaskExitError+0x50>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003362:	d009      	beq.n	8003378 <prvTaskExitError+0x28>
 8003364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	e7fe      	b.n	8003376 <prvTaskExitError+0x26>
 8003378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800338a:	bf00      	nop
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0fc      	beq.n	800338c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003392:	bf00      	nop
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	2000000c 	.word	0x2000000c
	...

080033b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80033b0:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <pxCurrentTCBConst2>)
 80033b2:	6819      	ldr	r1, [r3, #0]
 80033b4:	6808      	ldr	r0, [r1, #0]
 80033b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ba:	f380 8809 	msr	PSP, r0
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f04f 0000 	mov.w	r0, #0
 80033c6:	f380 8811 	msr	BASEPRI, r0
 80033ca:	4770      	bx	lr
 80033cc:	f3af 8000 	nop.w

080033d0 <pxCurrentTCBConst2>:
 80033d0:	200002ec 	.word	0x200002ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop

080033d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80033d8:	4808      	ldr	r0, [pc, #32]	; (80033fc <prvPortStartFirstTask+0x24>)
 80033da:	6800      	ldr	r0, [r0, #0]
 80033dc:	6800      	ldr	r0, [r0, #0]
 80033de:	f380 8808 	msr	MSP, r0
 80033e2:	f04f 0000 	mov.w	r0, #0
 80033e6:	f380 8814 	msr	CONTROL, r0
 80033ea:	b662      	cpsie	i
 80033ec:	b661      	cpsie	f
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	df00      	svc	0
 80033f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80033fa:	bf00      	nop
 80033fc:	e000ed08 	.word	0xe000ed08

08003400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003406:	4b44      	ldr	r3, [pc, #272]	; (8003518 <xPortStartScheduler+0x118>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a44      	ldr	r2, [pc, #272]	; (800351c <xPortStartScheduler+0x11c>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d109      	bne.n	8003424 <xPortStartScheduler+0x24>
 8003410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	613b      	str	r3, [r7, #16]
 8003422:	e7fe      	b.n	8003422 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003424:	4b3c      	ldr	r3, [pc, #240]	; (8003518 <xPortStartScheduler+0x118>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a3d      	ldr	r2, [pc, #244]	; (8003520 <xPortStartScheduler+0x120>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d109      	bne.n	8003442 <xPortStartScheduler+0x42>
 800342e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003432:	f383 8811 	msr	BASEPRI, r3
 8003436:	f3bf 8f6f 	isb	sy
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e7fe      	b.n	8003440 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003442:	4b38      	ldr	r3, [pc, #224]	; (8003524 <xPortStartScheduler+0x124>)
 8003444:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	22ff      	movs	r2, #255	; 0xff
 8003452:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003464:	b2da      	uxtb	r2, r3
 8003466:	4b30      	ldr	r3, [pc, #192]	; (8003528 <xPortStartScheduler+0x128>)
 8003468:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800346a:	4b30      	ldr	r3, [pc, #192]	; (800352c <xPortStartScheduler+0x12c>)
 800346c:	2207      	movs	r2, #7
 800346e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003470:	e009      	b.n	8003486 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003472:	4b2e      	ldr	r3, [pc, #184]	; (800352c <xPortStartScheduler+0x12c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3b01      	subs	r3, #1
 8003478:	4a2c      	ldr	r2, [pc, #176]	; (800352c <xPortStartScheduler+0x12c>)
 800347a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800347c:	78fb      	ldrb	r3, [r7, #3]
 800347e:	b2db      	uxtb	r3, r3
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	b2db      	uxtb	r3, r3
 8003484:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348e:	2b80      	cmp	r3, #128	; 0x80
 8003490:	d0ef      	beq.n	8003472 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003492:	4b26      	ldr	r3, [pc, #152]	; (800352c <xPortStartScheduler+0x12c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f1c3 0307 	rsb	r3, r3, #7
 800349a:	2b04      	cmp	r3, #4
 800349c:	d009      	beq.n	80034b2 <xPortStartScheduler+0xb2>
 800349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	60bb      	str	r3, [r7, #8]
 80034b0:	e7fe      	b.n	80034b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80034b2:	4b1e      	ldr	r3, [pc, #120]	; (800352c <xPortStartScheduler+0x12c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	4a1c      	ldr	r2, [pc, #112]	; (800352c <xPortStartScheduler+0x12c>)
 80034ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <xPortStartScheduler+0x12c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034c4:	4a19      	ldr	r2, [pc, #100]	; (800352c <xPortStartScheduler+0x12c>)
 80034c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80034d0:	4b17      	ldr	r3, [pc, #92]	; (8003530 <xPortStartScheduler+0x130>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a16      	ldr	r2, [pc, #88]	; (8003530 <xPortStartScheduler+0x130>)
 80034d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <xPortStartScheduler+0x130>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a13      	ldr	r2, [pc, #76]	; (8003530 <xPortStartScheduler+0x130>)
 80034e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80034e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80034e8:	f000 f8d6 	bl	8003698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <xPortStartScheduler+0x134>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80034f2:	f000 f8f5 	bl	80036e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80034f6:	4b10      	ldr	r3, [pc, #64]	; (8003538 <xPortStartScheduler+0x138>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a0f      	ldr	r2, [pc, #60]	; (8003538 <xPortStartScheduler+0x138>)
 80034fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003500:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003502:	f7ff ff69 	bl	80033d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003506:	f7ff fda5 	bl	8003054 <vTaskSwitchContext>
	prvTaskExitError();
 800350a:	f7ff ff21 	bl	8003350 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	e000ed00 	.word	0xe000ed00
 800351c:	410fc271 	.word	0x410fc271
 8003520:	410fc270 	.word	0x410fc270
 8003524:	e000e400 	.word	0xe000e400
 8003528:	20000418 	.word	0x20000418
 800352c:	2000041c 	.word	0x2000041c
 8003530:	e000ed20 	.word	0xe000ed20
 8003534:	2000000c 	.word	0x2000000c
 8003538:	e000ef34 	.word	0xe000ef34

0800353c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003554:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <vPortEnterCritical+0x54>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3301      	adds	r3, #1
 800355a:	4a0d      	ldr	r2, [pc, #52]	; (8003590 <vPortEnterCritical+0x54>)
 800355c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800355e:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <vPortEnterCritical+0x54>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d10e      	bne.n	8003584 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003566:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <vPortEnterCritical+0x58>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d009      	beq.n	8003584 <vPortEnterCritical+0x48>
 8003570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	e7fe      	b.n	8003582 <vPortEnterCritical+0x46>
	}
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	2000000c 	.word	0x2000000c
 8003594:	e000ed04 	.word	0xe000ed04

08003598 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <vPortExitCritical+0x4c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <vPortExitCritical+0x22>
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	607b      	str	r3, [r7, #4]
 80035b8:	e7fe      	b.n	80035b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80035ba:	4b0a      	ldr	r3, [pc, #40]	; (80035e4 <vPortExitCritical+0x4c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3b01      	subs	r3, #1
 80035c0:	4a08      	ldr	r2, [pc, #32]	; (80035e4 <vPortExitCritical+0x4c>)
 80035c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80035c4:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <vPortExitCritical+0x4c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d104      	bne.n	80035d6 <vPortExitCritical+0x3e>
 80035cc:	2300      	movs	r3, #0
 80035ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	2000000c 	.word	0x2000000c
	...

080035f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80035f0:	f3ef 8009 	mrs	r0, PSP
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	4b15      	ldr	r3, [pc, #84]	; (8003650 <pxCurrentTCBConst>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	f01e 0f10 	tst.w	lr, #16
 8003600:	bf08      	it	eq
 8003602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800360a:	6010      	str	r0, [r2, #0]
 800360c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003614:	f380 8811 	msr	BASEPRI, r0
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	f3bf 8f6f 	isb	sy
 8003620:	f7ff fd18 	bl	8003054 <vTaskSwitchContext>
 8003624:	f04f 0000 	mov.w	r0, #0
 8003628:	f380 8811 	msr	BASEPRI, r0
 800362c:	bc09      	pop	{r0, r3}
 800362e:	6819      	ldr	r1, [r3, #0]
 8003630:	6808      	ldr	r0, [r1, #0]
 8003632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003636:	f01e 0f10 	tst.w	lr, #16
 800363a:	bf08      	it	eq
 800363c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003640:	f380 8809 	msr	PSP, r0
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	f3af 8000 	nop.w

08003650 <pxCurrentTCBConst>:
 8003650:	200002ec 	.word	0x200002ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003654:	bf00      	nop
 8003656:	bf00      	nop

08003658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
	__asm volatile
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003670:	f7ff fc38 	bl	8002ee4 <xTaskIncrementTick>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800367a:	4b06      	ldr	r3, [pc, #24]	; (8003694 <xPortSysTickHandler+0x3c>)
 800367c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	2300      	movs	r3, #0
 8003684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	e000ed04 	.word	0xe000ed04

08003698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <vPortSetupTimerInterrupt+0x34>)
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80036a2:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <vPortSetupTimerInterrupt+0x38>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <vPortSetupTimerInterrupt+0x3c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0a      	ldr	r2, [pc, #40]	; (80036d8 <vPortSetupTimerInterrupt+0x40>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	099b      	lsrs	r3, r3, #6
 80036b4:	4a09      	ldr	r2, [pc, #36]	; (80036dc <vPortSetupTimerInterrupt+0x44>)
 80036b6:	3b01      	subs	r3, #1
 80036b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80036ba:	4b04      	ldr	r3, [pc, #16]	; (80036cc <vPortSetupTimerInterrupt+0x34>)
 80036bc:	2207      	movs	r2, #7
 80036be:	601a      	str	r2, [r3, #0]
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000e010 	.word	0xe000e010
 80036d0:	e000e018 	.word	0xe000e018
 80036d4:	20000000 	.word	0x20000000
 80036d8:	10624dd3 	.word	0x10624dd3
 80036dc:	e000e014 	.word	0xe000e014

080036e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80036e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80036f0 <vPortEnableVFP+0x10>
 80036e4:	6801      	ldr	r1, [r0, #0]
 80036e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80036ea:	6001      	str	r1, [r0, #0]
 80036ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80036ee:	bf00      	nop
 80036f0:	e000ed88 	.word	0xe000ed88

080036f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80036fa:	f3ef 8305 	mrs	r3, IPSR
 80036fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b0f      	cmp	r3, #15
 8003704:	d913      	bls.n	800372e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003706:	4a16      	ldr	r2, [pc, #88]	; (8003760 <vPortValidateInterruptPriority+0x6c>)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4413      	add	r3, r2
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003710:	4b14      	ldr	r3, [pc, #80]	; (8003764 <vPortValidateInterruptPriority+0x70>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	7afa      	ldrb	r2, [r7, #11]
 8003716:	429a      	cmp	r2, r3
 8003718:	d209      	bcs.n	800372e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371e:	f383 8811 	msr	BASEPRI, r3
 8003722:	f3bf 8f6f 	isb	sy
 8003726:	f3bf 8f4f 	dsb	sy
 800372a:	607b      	str	r3, [r7, #4]
 800372c:	e7fe      	b.n	800372c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800372e:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <vPortValidateInterruptPriority+0x74>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003736:	4b0d      	ldr	r3, [pc, #52]	; (800376c <vPortValidateInterruptPriority+0x78>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d909      	bls.n	8003752 <vPortValidateInterruptPriority+0x5e>
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	e7fe      	b.n	8003750 <vPortValidateInterruptPriority+0x5c>
	}
 8003752:	bf00      	nop
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	e000e3f0 	.word	0xe000e3f0
 8003764:	20000418 	.word	0x20000418
 8003768:	e000ed0c 	.word	0xe000ed0c
 800376c:	2000041c 	.word	0x2000041c

08003770 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08a      	sub	sp, #40	; 0x28
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003778:	2300      	movs	r3, #0
 800377a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800377c:	f7ff fb08 	bl	8002d90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003780:	4b57      	ldr	r3, [pc, #348]	; (80038e0 <pvPortMalloc+0x170>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d101      	bne.n	800378c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003788:	f000 f90c 	bl	80039a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800378c:	4b55      	ldr	r3, [pc, #340]	; (80038e4 <pvPortMalloc+0x174>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4013      	ands	r3, r2
 8003794:	2b00      	cmp	r3, #0
 8003796:	f040 808c 	bne.w	80038b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01c      	beq.n	80037da <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80037a0:	2208      	movs	r2, #8
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4413      	add	r3, r2
 80037a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d013      	beq.n	80037da <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f023 0307 	bic.w	r3, r3, #7
 80037b8:	3308      	adds	r3, #8
 80037ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d009      	beq.n	80037da <pvPortMalloc+0x6a>
 80037c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	e7fe      	b.n	80037d8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d068      	beq.n	80038b2 <pvPortMalloc+0x142>
 80037e0:	4b41      	ldr	r3, [pc, #260]	; (80038e8 <pvPortMalloc+0x178>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d863      	bhi.n	80038b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80037ea:	4b40      	ldr	r3, [pc, #256]	; (80038ec <pvPortMalloc+0x17c>)
 80037ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80037ee:	4b3f      	ldr	r3, [pc, #252]	; (80038ec <pvPortMalloc+0x17c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80037f4:	e004      	b.n	8003800 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	429a      	cmp	r2, r3
 8003808:	d903      	bls.n	8003812 <pvPortMalloc+0xa2>
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f1      	bne.n	80037f6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003812:	4b33      	ldr	r3, [pc, #204]	; (80038e0 <pvPortMalloc+0x170>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003818:	429a      	cmp	r2, r3
 800381a:	d04a      	beq.n	80038b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2208      	movs	r2, #8
 8003822:	4413      	add	r3, r2
 8003824:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	1ad2      	subs	r2, r2, r3
 8003836:	2308      	movs	r3, #8
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	429a      	cmp	r2, r3
 800383c:	d91e      	bls.n	800387c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800383e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4413      	add	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	2b00      	cmp	r3, #0
 800384e:	d009      	beq.n	8003864 <pvPortMalloc+0xf4>
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	e7fe      	b.n	8003862 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	1ad2      	subs	r2, r2, r3
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003876:	69b8      	ldr	r0, [r7, #24]
 8003878:	f000 f8f6 	bl	8003a68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800387c:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <pvPortMalloc+0x178>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	4a18      	ldr	r2, [pc, #96]	; (80038e8 <pvPortMalloc+0x178>)
 8003888:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800388a:	4b17      	ldr	r3, [pc, #92]	; (80038e8 <pvPortMalloc+0x178>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	4b18      	ldr	r3, [pc, #96]	; (80038f0 <pvPortMalloc+0x180>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	429a      	cmp	r2, r3
 8003894:	d203      	bcs.n	800389e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003896:	4b14      	ldr	r3, [pc, #80]	; (80038e8 <pvPortMalloc+0x178>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a15      	ldr	r2, [pc, #84]	; (80038f0 <pvPortMalloc+0x180>)
 800389c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	4b10      	ldr	r3, [pc, #64]	; (80038e4 <pvPortMalloc+0x174>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80038b2:	f7ff fa7b 	bl	8002dac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d009      	beq.n	80038d4 <pvPortMalloc+0x164>
 80038c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	e7fe      	b.n	80038d2 <pvPortMalloc+0x162>
	return pvReturn;
 80038d4:	69fb      	ldr	r3, [r7, #28]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3728      	adds	r7, #40	; 0x28
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20004028 	.word	0x20004028
 80038e4:	20004034 	.word	0x20004034
 80038e8:	2000402c 	.word	0x2000402c
 80038ec:	20004020 	.word	0x20004020
 80038f0:	20004030 	.word	0x20004030

080038f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d046      	beq.n	8003994 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003906:	2308      	movs	r3, #8
 8003908:	425b      	negs	r3, r3
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4413      	add	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	685a      	ldr	r2, [r3, #4]
 8003918:	4b20      	ldr	r3, [pc, #128]	; (800399c <vPortFree+0xa8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4013      	ands	r3, r2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <vPortFree+0x42>
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	e7fe      	b.n	8003934 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <vPortFree+0x5e>
 800393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	60bb      	str	r3, [r7, #8]
 8003950:	e7fe      	b.n	8003950 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	4b11      	ldr	r3, [pc, #68]	; (800399c <vPortFree+0xa8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d019      	beq.n	8003994 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d115      	bne.n	8003994 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <vPortFree+0xa8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	43db      	mvns	r3, r3
 8003972:	401a      	ands	r2, r3
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003978:	f7ff fa0a 	bl	8002d90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <vPortFree+0xac>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4413      	add	r3, r2
 8003986:	4a06      	ldr	r2, [pc, #24]	; (80039a0 <vPortFree+0xac>)
 8003988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800398a:	6938      	ldr	r0, [r7, #16]
 800398c:	f000 f86c 	bl	8003a68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003990:	f7ff fa0c 	bl	8002dac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003994:	bf00      	nop
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20004034 	.word	0x20004034
 80039a0:	2000402c 	.word	0x2000402c

080039a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80039aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80039ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80039b0:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <prvHeapInit+0xac>)
 80039b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00c      	beq.n	80039d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3307      	adds	r3, #7
 80039c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0307 	bic.w	r3, r3, #7
 80039ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	4a1f      	ldr	r2, [pc, #124]	; (8003a50 <prvHeapInit+0xac>)
 80039d4:	4413      	add	r3, r2
 80039d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80039dc:	4a1d      	ldr	r2, [pc, #116]	; (8003a54 <prvHeapInit+0xb0>)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80039e2:	4b1c      	ldr	r3, [pc, #112]	; (8003a54 <prvHeapInit+0xb0>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	4413      	add	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80039f0:	2208      	movs	r2, #8
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0307 	bic.w	r3, r3, #7
 80039fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <prvHeapInit+0xb4>)
 8003a04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003a06:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <prvHeapInit+0xb4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <prvHeapInit+0xb4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	1ad2      	subs	r2, r2, r3
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <prvHeapInit+0xb4>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <prvHeapInit+0xb8>)
 8003a32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <prvHeapInit+0xbc>)
 8003a3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <prvHeapInit+0xc0>)
 8003a3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003a42:	601a      	str	r2, [r3, #0]
}
 8003a44:	bf00      	nop
 8003a46:	3714      	adds	r7, #20
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	20000420 	.word	0x20000420
 8003a54:	20004020 	.word	0x20004020
 8003a58:	20004028 	.word	0x20004028
 8003a5c:	20004030 	.word	0x20004030
 8003a60:	2000402c 	.word	0x2000402c
 8003a64:	20004034 	.word	0x20004034

08003a68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a70:	4b28      	ldr	r3, [pc, #160]	; (8003b14 <prvInsertBlockIntoFreeList+0xac>)
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	e002      	b.n	8003a7c <prvInsertBlockIntoFreeList+0x14>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d8f7      	bhi.n	8003a76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	4413      	add	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d108      	bne.n	8003aaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	441a      	add	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	441a      	add	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d118      	bne.n	8003af0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <prvInsertBlockIntoFreeList+0xb0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d00d      	beq.n	8003ae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	441a      	add	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	601a      	str	r2, [r3, #0]
 8003ae4:	e008      	b.n	8003af8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <prvInsertBlockIntoFreeList+0xb0>)
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	e003      	b.n	8003af8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d002      	beq.n	8003b06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20004020 	.word	0x20004020
 8003b18:	20004028 	.word	0x20004028

08003b1c <__errno>:
 8003b1c:	4b01      	ldr	r3, [pc, #4]	; (8003b24 <__errno+0x8>)
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000010 	.word	0x20000010

08003b28 <__libc_init_array>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	4e0d      	ldr	r6, [pc, #52]	; (8003b60 <__libc_init_array+0x38>)
 8003b2c:	4c0d      	ldr	r4, [pc, #52]	; (8003b64 <__libc_init_array+0x3c>)
 8003b2e:	1ba4      	subs	r4, r4, r6
 8003b30:	10a4      	asrs	r4, r4, #2
 8003b32:	2500      	movs	r5, #0
 8003b34:	42a5      	cmp	r5, r4
 8003b36:	d109      	bne.n	8003b4c <__libc_init_array+0x24>
 8003b38:	4e0b      	ldr	r6, [pc, #44]	; (8003b68 <__libc_init_array+0x40>)
 8003b3a:	4c0c      	ldr	r4, [pc, #48]	; (8003b6c <__libc_init_array+0x44>)
 8003b3c:	f000 fc28 	bl	8004390 <_init>
 8003b40:	1ba4      	subs	r4, r4, r6
 8003b42:	10a4      	asrs	r4, r4, #2
 8003b44:	2500      	movs	r5, #0
 8003b46:	42a5      	cmp	r5, r4
 8003b48:	d105      	bne.n	8003b56 <__libc_init_array+0x2e>
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b50:	4798      	blx	r3
 8003b52:	3501      	adds	r5, #1
 8003b54:	e7ee      	b.n	8003b34 <__libc_init_array+0xc>
 8003b56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b5a:	4798      	blx	r3
 8003b5c:	3501      	adds	r5, #1
 8003b5e:	e7f2      	b.n	8003b46 <__libc_init_array+0x1e>
 8003b60:	080044ac 	.word	0x080044ac
 8003b64:	080044ac 	.word	0x080044ac
 8003b68:	080044ac 	.word	0x080044ac
 8003b6c:	080044b0 	.word	0x080044b0

08003b70 <memcpy>:
 8003b70:	b510      	push	{r4, lr}
 8003b72:	1e43      	subs	r3, r0, #1
 8003b74:	440a      	add	r2, r1
 8003b76:	4291      	cmp	r1, r2
 8003b78:	d100      	bne.n	8003b7c <memcpy+0xc>
 8003b7a:	bd10      	pop	{r4, pc}
 8003b7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b84:	e7f7      	b.n	8003b76 <memcpy+0x6>

08003b86 <memset>:
 8003b86:	4402      	add	r2, r0
 8003b88:	4603      	mov	r3, r0
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d100      	bne.n	8003b90 <memset+0xa>
 8003b8e:	4770      	bx	lr
 8003b90:	f803 1b01 	strb.w	r1, [r3], #1
 8003b94:	e7f9      	b.n	8003b8a <memset+0x4>
	...

08003b98 <siprintf>:
 8003b98:	b40e      	push	{r1, r2, r3}
 8003b9a:	b500      	push	{lr}
 8003b9c:	b09c      	sub	sp, #112	; 0x70
 8003b9e:	ab1d      	add	r3, sp, #116	; 0x74
 8003ba0:	9002      	str	r0, [sp, #8]
 8003ba2:	9006      	str	r0, [sp, #24]
 8003ba4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ba8:	4809      	ldr	r0, [pc, #36]	; (8003bd0 <siprintf+0x38>)
 8003baa:	9107      	str	r1, [sp, #28]
 8003bac:	9104      	str	r1, [sp, #16]
 8003bae:	4909      	ldr	r1, [pc, #36]	; (8003bd4 <siprintf+0x3c>)
 8003bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bb4:	9105      	str	r1, [sp, #20]
 8003bb6:	6800      	ldr	r0, [r0, #0]
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	a902      	add	r1, sp, #8
 8003bbc:	f000 f866 	bl	8003c8c <_svfiprintf_r>
 8003bc0:	9b02      	ldr	r3, [sp, #8]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	b01c      	add	sp, #112	; 0x70
 8003bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003bcc:	b003      	add	sp, #12
 8003bce:	4770      	bx	lr
 8003bd0:	20000010 	.word	0x20000010
 8003bd4:	ffff0208 	.word	0xffff0208

08003bd8 <__ssputs_r>:
 8003bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bdc:	688e      	ldr	r6, [r1, #8]
 8003bde:	429e      	cmp	r6, r3
 8003be0:	4682      	mov	sl, r0
 8003be2:	460c      	mov	r4, r1
 8003be4:	4690      	mov	r8, r2
 8003be6:	4699      	mov	r9, r3
 8003be8:	d837      	bhi.n	8003c5a <__ssputs_r+0x82>
 8003bea:	898a      	ldrh	r2, [r1, #12]
 8003bec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003bf0:	d031      	beq.n	8003c56 <__ssputs_r+0x7e>
 8003bf2:	6825      	ldr	r5, [r4, #0]
 8003bf4:	6909      	ldr	r1, [r1, #16]
 8003bf6:	1a6f      	subs	r7, r5, r1
 8003bf8:	6965      	ldr	r5, [r4, #20]
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c00:	fb95 f5f3 	sdiv	r5, r5, r3
 8003c04:	f109 0301 	add.w	r3, r9, #1
 8003c08:	443b      	add	r3, r7
 8003c0a:	429d      	cmp	r5, r3
 8003c0c:	bf38      	it	cc
 8003c0e:	461d      	movcc	r5, r3
 8003c10:	0553      	lsls	r3, r2, #21
 8003c12:	d530      	bpl.n	8003c76 <__ssputs_r+0x9e>
 8003c14:	4629      	mov	r1, r5
 8003c16:	f000 fb21 	bl	800425c <_malloc_r>
 8003c1a:	4606      	mov	r6, r0
 8003c1c:	b950      	cbnz	r0, 8003c34 <__ssputs_r+0x5c>
 8003c1e:	230c      	movs	r3, #12
 8003c20:	f8ca 3000 	str.w	r3, [sl]
 8003c24:	89a3      	ldrh	r3, [r4, #12]
 8003c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c2a:	81a3      	strh	r3, [r4, #12]
 8003c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c34:	463a      	mov	r2, r7
 8003c36:	6921      	ldr	r1, [r4, #16]
 8003c38:	f7ff ff9a 	bl	8003b70 <memcpy>
 8003c3c:	89a3      	ldrh	r3, [r4, #12]
 8003c3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c46:	81a3      	strh	r3, [r4, #12]
 8003c48:	6126      	str	r6, [r4, #16]
 8003c4a:	6165      	str	r5, [r4, #20]
 8003c4c:	443e      	add	r6, r7
 8003c4e:	1bed      	subs	r5, r5, r7
 8003c50:	6026      	str	r6, [r4, #0]
 8003c52:	60a5      	str	r5, [r4, #8]
 8003c54:	464e      	mov	r6, r9
 8003c56:	454e      	cmp	r6, r9
 8003c58:	d900      	bls.n	8003c5c <__ssputs_r+0x84>
 8003c5a:	464e      	mov	r6, r9
 8003c5c:	4632      	mov	r2, r6
 8003c5e:	4641      	mov	r1, r8
 8003c60:	6820      	ldr	r0, [r4, #0]
 8003c62:	f000 fa93 	bl	800418c <memmove>
 8003c66:	68a3      	ldr	r3, [r4, #8]
 8003c68:	1b9b      	subs	r3, r3, r6
 8003c6a:	60a3      	str	r3, [r4, #8]
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	441e      	add	r6, r3
 8003c70:	6026      	str	r6, [r4, #0]
 8003c72:	2000      	movs	r0, #0
 8003c74:	e7dc      	b.n	8003c30 <__ssputs_r+0x58>
 8003c76:	462a      	mov	r2, r5
 8003c78:	f000 fb4a 	bl	8004310 <_realloc_r>
 8003c7c:	4606      	mov	r6, r0
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d1e2      	bne.n	8003c48 <__ssputs_r+0x70>
 8003c82:	6921      	ldr	r1, [r4, #16]
 8003c84:	4650      	mov	r0, sl
 8003c86:	f000 fa9b 	bl	80041c0 <_free_r>
 8003c8a:	e7c8      	b.n	8003c1e <__ssputs_r+0x46>

08003c8c <_svfiprintf_r>:
 8003c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c90:	461d      	mov	r5, r3
 8003c92:	898b      	ldrh	r3, [r1, #12]
 8003c94:	061f      	lsls	r7, r3, #24
 8003c96:	b09d      	sub	sp, #116	; 0x74
 8003c98:	4680      	mov	r8, r0
 8003c9a:	460c      	mov	r4, r1
 8003c9c:	4616      	mov	r6, r2
 8003c9e:	d50f      	bpl.n	8003cc0 <_svfiprintf_r+0x34>
 8003ca0:	690b      	ldr	r3, [r1, #16]
 8003ca2:	b96b      	cbnz	r3, 8003cc0 <_svfiprintf_r+0x34>
 8003ca4:	2140      	movs	r1, #64	; 0x40
 8003ca6:	f000 fad9 	bl	800425c <_malloc_r>
 8003caa:	6020      	str	r0, [r4, #0]
 8003cac:	6120      	str	r0, [r4, #16]
 8003cae:	b928      	cbnz	r0, 8003cbc <_svfiprintf_r+0x30>
 8003cb0:	230c      	movs	r3, #12
 8003cb2:	f8c8 3000 	str.w	r3, [r8]
 8003cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cba:	e0c8      	b.n	8003e4e <_svfiprintf_r+0x1c2>
 8003cbc:	2340      	movs	r3, #64	; 0x40
 8003cbe:	6163      	str	r3, [r4, #20]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8003cc4:	2320      	movs	r3, #32
 8003cc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003cca:	2330      	movs	r3, #48	; 0x30
 8003ccc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003cd0:	9503      	str	r5, [sp, #12]
 8003cd2:	f04f 0b01 	mov.w	fp, #1
 8003cd6:	4637      	mov	r7, r6
 8003cd8:	463d      	mov	r5, r7
 8003cda:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003cde:	b10b      	cbz	r3, 8003ce4 <_svfiprintf_r+0x58>
 8003ce0:	2b25      	cmp	r3, #37	; 0x25
 8003ce2:	d13e      	bne.n	8003d62 <_svfiprintf_r+0xd6>
 8003ce4:	ebb7 0a06 	subs.w	sl, r7, r6
 8003ce8:	d00b      	beq.n	8003d02 <_svfiprintf_r+0x76>
 8003cea:	4653      	mov	r3, sl
 8003cec:	4632      	mov	r2, r6
 8003cee:	4621      	mov	r1, r4
 8003cf0:	4640      	mov	r0, r8
 8003cf2:	f7ff ff71 	bl	8003bd8 <__ssputs_r>
 8003cf6:	3001      	adds	r0, #1
 8003cf8:	f000 80a4 	beq.w	8003e44 <_svfiprintf_r+0x1b8>
 8003cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003cfe:	4453      	add	r3, sl
 8003d00:	9309      	str	r3, [sp, #36]	; 0x24
 8003d02:	783b      	ldrb	r3, [r7, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 809d 	beq.w	8003e44 <_svfiprintf_r+0x1b8>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d14:	9304      	str	r3, [sp, #16]
 8003d16:	9307      	str	r3, [sp, #28]
 8003d18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d1c:	931a      	str	r3, [sp, #104]	; 0x68
 8003d1e:	462f      	mov	r7, r5
 8003d20:	2205      	movs	r2, #5
 8003d22:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003d26:	4850      	ldr	r0, [pc, #320]	; (8003e68 <_svfiprintf_r+0x1dc>)
 8003d28:	f7fc fa5a 	bl	80001e0 <memchr>
 8003d2c:	9b04      	ldr	r3, [sp, #16]
 8003d2e:	b9d0      	cbnz	r0, 8003d66 <_svfiprintf_r+0xda>
 8003d30:	06d9      	lsls	r1, r3, #27
 8003d32:	bf44      	itt	mi
 8003d34:	2220      	movmi	r2, #32
 8003d36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d3a:	071a      	lsls	r2, r3, #28
 8003d3c:	bf44      	itt	mi
 8003d3e:	222b      	movmi	r2, #43	; 0x2b
 8003d40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003d44:	782a      	ldrb	r2, [r5, #0]
 8003d46:	2a2a      	cmp	r2, #42	; 0x2a
 8003d48:	d015      	beq.n	8003d76 <_svfiprintf_r+0xea>
 8003d4a:	9a07      	ldr	r2, [sp, #28]
 8003d4c:	462f      	mov	r7, r5
 8003d4e:	2000      	movs	r0, #0
 8003d50:	250a      	movs	r5, #10
 8003d52:	4639      	mov	r1, r7
 8003d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d58:	3b30      	subs	r3, #48	; 0x30
 8003d5a:	2b09      	cmp	r3, #9
 8003d5c:	d94d      	bls.n	8003dfa <_svfiprintf_r+0x16e>
 8003d5e:	b1b8      	cbz	r0, 8003d90 <_svfiprintf_r+0x104>
 8003d60:	e00f      	b.n	8003d82 <_svfiprintf_r+0xf6>
 8003d62:	462f      	mov	r7, r5
 8003d64:	e7b8      	b.n	8003cd8 <_svfiprintf_r+0x4c>
 8003d66:	4a40      	ldr	r2, [pc, #256]	; (8003e68 <_svfiprintf_r+0x1dc>)
 8003d68:	1a80      	subs	r0, r0, r2
 8003d6a:	fa0b f000 	lsl.w	r0, fp, r0
 8003d6e:	4318      	orrs	r0, r3
 8003d70:	9004      	str	r0, [sp, #16]
 8003d72:	463d      	mov	r5, r7
 8003d74:	e7d3      	b.n	8003d1e <_svfiprintf_r+0x92>
 8003d76:	9a03      	ldr	r2, [sp, #12]
 8003d78:	1d11      	adds	r1, r2, #4
 8003d7a:	6812      	ldr	r2, [r2, #0]
 8003d7c:	9103      	str	r1, [sp, #12]
 8003d7e:	2a00      	cmp	r2, #0
 8003d80:	db01      	blt.n	8003d86 <_svfiprintf_r+0xfa>
 8003d82:	9207      	str	r2, [sp, #28]
 8003d84:	e004      	b.n	8003d90 <_svfiprintf_r+0x104>
 8003d86:	4252      	negs	r2, r2
 8003d88:	f043 0302 	orr.w	r3, r3, #2
 8003d8c:	9207      	str	r2, [sp, #28]
 8003d8e:	9304      	str	r3, [sp, #16]
 8003d90:	783b      	ldrb	r3, [r7, #0]
 8003d92:	2b2e      	cmp	r3, #46	; 0x2e
 8003d94:	d10c      	bne.n	8003db0 <_svfiprintf_r+0x124>
 8003d96:	787b      	ldrb	r3, [r7, #1]
 8003d98:	2b2a      	cmp	r3, #42	; 0x2a
 8003d9a:	d133      	bne.n	8003e04 <_svfiprintf_r+0x178>
 8003d9c:	9b03      	ldr	r3, [sp, #12]
 8003d9e:	1d1a      	adds	r2, r3, #4
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	9203      	str	r2, [sp, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bfb8      	it	lt
 8003da8:	f04f 33ff 	movlt.w	r3, #4294967295
 8003dac:	3702      	adds	r7, #2
 8003dae:	9305      	str	r3, [sp, #20]
 8003db0:	4d2e      	ldr	r5, [pc, #184]	; (8003e6c <_svfiprintf_r+0x1e0>)
 8003db2:	7839      	ldrb	r1, [r7, #0]
 8003db4:	2203      	movs	r2, #3
 8003db6:	4628      	mov	r0, r5
 8003db8:	f7fc fa12 	bl	80001e0 <memchr>
 8003dbc:	b138      	cbz	r0, 8003dce <_svfiprintf_r+0x142>
 8003dbe:	2340      	movs	r3, #64	; 0x40
 8003dc0:	1b40      	subs	r0, r0, r5
 8003dc2:	fa03 f000 	lsl.w	r0, r3, r0
 8003dc6:	9b04      	ldr	r3, [sp, #16]
 8003dc8:	4303      	orrs	r3, r0
 8003dca:	3701      	adds	r7, #1
 8003dcc:	9304      	str	r3, [sp, #16]
 8003dce:	7839      	ldrb	r1, [r7, #0]
 8003dd0:	4827      	ldr	r0, [pc, #156]	; (8003e70 <_svfiprintf_r+0x1e4>)
 8003dd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003dd6:	2206      	movs	r2, #6
 8003dd8:	1c7e      	adds	r6, r7, #1
 8003dda:	f7fc fa01 	bl	80001e0 <memchr>
 8003dde:	2800      	cmp	r0, #0
 8003de0:	d038      	beq.n	8003e54 <_svfiprintf_r+0x1c8>
 8003de2:	4b24      	ldr	r3, [pc, #144]	; (8003e74 <_svfiprintf_r+0x1e8>)
 8003de4:	bb13      	cbnz	r3, 8003e2c <_svfiprintf_r+0x1a0>
 8003de6:	9b03      	ldr	r3, [sp, #12]
 8003de8:	3307      	adds	r3, #7
 8003dea:	f023 0307 	bic.w	r3, r3, #7
 8003dee:	3308      	adds	r3, #8
 8003df0:	9303      	str	r3, [sp, #12]
 8003df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003df4:	444b      	add	r3, r9
 8003df6:	9309      	str	r3, [sp, #36]	; 0x24
 8003df8:	e76d      	b.n	8003cd6 <_svfiprintf_r+0x4a>
 8003dfa:	fb05 3202 	mla	r2, r5, r2, r3
 8003dfe:	2001      	movs	r0, #1
 8003e00:	460f      	mov	r7, r1
 8003e02:	e7a6      	b.n	8003d52 <_svfiprintf_r+0xc6>
 8003e04:	2300      	movs	r3, #0
 8003e06:	3701      	adds	r7, #1
 8003e08:	9305      	str	r3, [sp, #20]
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	250a      	movs	r5, #10
 8003e0e:	4638      	mov	r0, r7
 8003e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e14:	3a30      	subs	r2, #48	; 0x30
 8003e16:	2a09      	cmp	r2, #9
 8003e18:	d903      	bls.n	8003e22 <_svfiprintf_r+0x196>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0c8      	beq.n	8003db0 <_svfiprintf_r+0x124>
 8003e1e:	9105      	str	r1, [sp, #20]
 8003e20:	e7c6      	b.n	8003db0 <_svfiprintf_r+0x124>
 8003e22:	fb05 2101 	mla	r1, r5, r1, r2
 8003e26:	2301      	movs	r3, #1
 8003e28:	4607      	mov	r7, r0
 8003e2a:	e7f0      	b.n	8003e0e <_svfiprintf_r+0x182>
 8003e2c:	ab03      	add	r3, sp, #12
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	4622      	mov	r2, r4
 8003e32:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <_svfiprintf_r+0x1ec>)
 8003e34:	a904      	add	r1, sp, #16
 8003e36:	4640      	mov	r0, r8
 8003e38:	f3af 8000 	nop.w
 8003e3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003e40:	4681      	mov	r9, r0
 8003e42:	d1d6      	bne.n	8003df2 <_svfiprintf_r+0x166>
 8003e44:	89a3      	ldrh	r3, [r4, #12]
 8003e46:	065b      	lsls	r3, r3, #25
 8003e48:	f53f af35 	bmi.w	8003cb6 <_svfiprintf_r+0x2a>
 8003e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e4e:	b01d      	add	sp, #116	; 0x74
 8003e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e54:	ab03      	add	r3, sp, #12
 8003e56:	9300      	str	r3, [sp, #0]
 8003e58:	4622      	mov	r2, r4
 8003e5a:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <_svfiprintf_r+0x1ec>)
 8003e5c:	a904      	add	r1, sp, #16
 8003e5e:	4640      	mov	r0, r8
 8003e60:	f000 f882 	bl	8003f68 <_printf_i>
 8003e64:	e7ea      	b.n	8003e3c <_svfiprintf_r+0x1b0>
 8003e66:	bf00      	nop
 8003e68:	08004470 	.word	0x08004470
 8003e6c:	08004476 	.word	0x08004476
 8003e70:	0800447a 	.word	0x0800447a
 8003e74:	00000000 	.word	0x00000000
 8003e78:	08003bd9 	.word	0x08003bd9

08003e7c <_printf_common>:
 8003e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e80:	4691      	mov	r9, r2
 8003e82:	461f      	mov	r7, r3
 8003e84:	688a      	ldr	r2, [r1, #8]
 8003e86:	690b      	ldr	r3, [r1, #16]
 8003e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	bfb8      	it	lt
 8003e90:	4613      	movlt	r3, r2
 8003e92:	f8c9 3000 	str.w	r3, [r9]
 8003e96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e9a:	4606      	mov	r6, r0
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	b112      	cbz	r2, 8003ea6 <_printf_common+0x2a>
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	f8c9 3000 	str.w	r3, [r9]
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	0699      	lsls	r1, r3, #26
 8003eaa:	bf42      	ittt	mi
 8003eac:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003eb0:	3302      	addmi	r3, #2
 8003eb2:	f8c9 3000 	strmi.w	r3, [r9]
 8003eb6:	6825      	ldr	r5, [r4, #0]
 8003eb8:	f015 0506 	ands.w	r5, r5, #6
 8003ebc:	d107      	bne.n	8003ece <_printf_common+0x52>
 8003ebe:	f104 0a19 	add.w	sl, r4, #25
 8003ec2:	68e3      	ldr	r3, [r4, #12]
 8003ec4:	f8d9 2000 	ldr.w	r2, [r9]
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	42ab      	cmp	r3, r5
 8003ecc:	dc28      	bgt.n	8003f20 <_printf_common+0xa4>
 8003ece:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003ed2:	6822      	ldr	r2, [r4, #0]
 8003ed4:	3300      	adds	r3, #0
 8003ed6:	bf18      	it	ne
 8003ed8:	2301      	movne	r3, #1
 8003eda:	0692      	lsls	r2, r2, #26
 8003edc:	d42d      	bmi.n	8003f3a <_printf_common+0xbe>
 8003ede:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ee2:	4639      	mov	r1, r7
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	47c0      	blx	r8
 8003ee8:	3001      	adds	r0, #1
 8003eea:	d020      	beq.n	8003f2e <_printf_common+0xb2>
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	68e5      	ldr	r5, [r4, #12]
 8003ef0:	f8d9 2000 	ldr.w	r2, [r9]
 8003ef4:	f003 0306 	and.w	r3, r3, #6
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	bf08      	it	eq
 8003efc:	1aad      	subeq	r5, r5, r2
 8003efe:	68a3      	ldr	r3, [r4, #8]
 8003f00:	6922      	ldr	r2, [r4, #16]
 8003f02:	bf0c      	ite	eq
 8003f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f08:	2500      	movne	r5, #0
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	bfc4      	itt	gt
 8003f0e:	1a9b      	subgt	r3, r3, r2
 8003f10:	18ed      	addgt	r5, r5, r3
 8003f12:	f04f 0900 	mov.w	r9, #0
 8003f16:	341a      	adds	r4, #26
 8003f18:	454d      	cmp	r5, r9
 8003f1a:	d11a      	bne.n	8003f52 <_printf_common+0xd6>
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	e008      	b.n	8003f32 <_printf_common+0xb6>
 8003f20:	2301      	movs	r3, #1
 8003f22:	4652      	mov	r2, sl
 8003f24:	4639      	mov	r1, r7
 8003f26:	4630      	mov	r0, r6
 8003f28:	47c0      	blx	r8
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	d103      	bne.n	8003f36 <_printf_common+0xba>
 8003f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f36:	3501      	adds	r5, #1
 8003f38:	e7c3      	b.n	8003ec2 <_printf_common+0x46>
 8003f3a:	18e1      	adds	r1, r4, r3
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	2030      	movs	r0, #48	; 0x30
 8003f40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f44:	4422      	add	r2, r4
 8003f46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f4e:	3302      	adds	r3, #2
 8003f50:	e7c5      	b.n	8003ede <_printf_common+0x62>
 8003f52:	2301      	movs	r3, #1
 8003f54:	4622      	mov	r2, r4
 8003f56:	4639      	mov	r1, r7
 8003f58:	4630      	mov	r0, r6
 8003f5a:	47c0      	blx	r8
 8003f5c:	3001      	adds	r0, #1
 8003f5e:	d0e6      	beq.n	8003f2e <_printf_common+0xb2>
 8003f60:	f109 0901 	add.w	r9, r9, #1
 8003f64:	e7d8      	b.n	8003f18 <_printf_common+0x9c>
	...

08003f68 <_printf_i>:
 8003f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f6c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f70:	460c      	mov	r4, r1
 8003f72:	7e09      	ldrb	r1, [r1, #24]
 8003f74:	b085      	sub	sp, #20
 8003f76:	296e      	cmp	r1, #110	; 0x6e
 8003f78:	4617      	mov	r7, r2
 8003f7a:	4606      	mov	r6, r0
 8003f7c:	4698      	mov	r8, r3
 8003f7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f80:	f000 80b3 	beq.w	80040ea <_printf_i+0x182>
 8003f84:	d822      	bhi.n	8003fcc <_printf_i+0x64>
 8003f86:	2963      	cmp	r1, #99	; 0x63
 8003f88:	d036      	beq.n	8003ff8 <_printf_i+0x90>
 8003f8a:	d80a      	bhi.n	8003fa2 <_printf_i+0x3a>
 8003f8c:	2900      	cmp	r1, #0
 8003f8e:	f000 80b9 	beq.w	8004104 <_printf_i+0x19c>
 8003f92:	2958      	cmp	r1, #88	; 0x58
 8003f94:	f000 8083 	beq.w	800409e <_printf_i+0x136>
 8003f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f9c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003fa0:	e032      	b.n	8004008 <_printf_i+0xa0>
 8003fa2:	2964      	cmp	r1, #100	; 0x64
 8003fa4:	d001      	beq.n	8003faa <_printf_i+0x42>
 8003fa6:	2969      	cmp	r1, #105	; 0x69
 8003fa8:	d1f6      	bne.n	8003f98 <_printf_i+0x30>
 8003faa:	6820      	ldr	r0, [r4, #0]
 8003fac:	6813      	ldr	r3, [r2, #0]
 8003fae:	0605      	lsls	r5, r0, #24
 8003fb0:	f103 0104 	add.w	r1, r3, #4
 8003fb4:	d52a      	bpl.n	800400c <_printf_i+0xa4>
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6011      	str	r1, [r2, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	da03      	bge.n	8003fc6 <_printf_i+0x5e>
 8003fbe:	222d      	movs	r2, #45	; 0x2d
 8003fc0:	425b      	negs	r3, r3
 8003fc2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003fc6:	486f      	ldr	r0, [pc, #444]	; (8004184 <_printf_i+0x21c>)
 8003fc8:	220a      	movs	r2, #10
 8003fca:	e039      	b.n	8004040 <_printf_i+0xd8>
 8003fcc:	2973      	cmp	r1, #115	; 0x73
 8003fce:	f000 809d 	beq.w	800410c <_printf_i+0x1a4>
 8003fd2:	d808      	bhi.n	8003fe6 <_printf_i+0x7e>
 8003fd4:	296f      	cmp	r1, #111	; 0x6f
 8003fd6:	d020      	beq.n	800401a <_printf_i+0xb2>
 8003fd8:	2970      	cmp	r1, #112	; 0x70
 8003fda:	d1dd      	bne.n	8003f98 <_printf_i+0x30>
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	f043 0320 	orr.w	r3, r3, #32
 8003fe2:	6023      	str	r3, [r4, #0]
 8003fe4:	e003      	b.n	8003fee <_printf_i+0x86>
 8003fe6:	2975      	cmp	r1, #117	; 0x75
 8003fe8:	d017      	beq.n	800401a <_printf_i+0xb2>
 8003fea:	2978      	cmp	r1, #120	; 0x78
 8003fec:	d1d4      	bne.n	8003f98 <_printf_i+0x30>
 8003fee:	2378      	movs	r3, #120	; 0x78
 8003ff0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ff4:	4864      	ldr	r0, [pc, #400]	; (8004188 <_printf_i+0x220>)
 8003ff6:	e055      	b.n	80040a4 <_printf_i+0x13c>
 8003ff8:	6813      	ldr	r3, [r2, #0]
 8003ffa:	1d19      	adds	r1, r3, #4
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6011      	str	r1, [r2, #0]
 8004000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004004:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004008:	2301      	movs	r3, #1
 800400a:	e08c      	b.n	8004126 <_printf_i+0x1be>
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6011      	str	r1, [r2, #0]
 8004010:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004014:	bf18      	it	ne
 8004016:	b21b      	sxthne	r3, r3
 8004018:	e7cf      	b.n	8003fba <_printf_i+0x52>
 800401a:	6813      	ldr	r3, [r2, #0]
 800401c:	6825      	ldr	r5, [r4, #0]
 800401e:	1d18      	adds	r0, r3, #4
 8004020:	6010      	str	r0, [r2, #0]
 8004022:	0628      	lsls	r0, r5, #24
 8004024:	d501      	bpl.n	800402a <_printf_i+0xc2>
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	e002      	b.n	8004030 <_printf_i+0xc8>
 800402a:	0668      	lsls	r0, r5, #25
 800402c:	d5fb      	bpl.n	8004026 <_printf_i+0xbe>
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	4854      	ldr	r0, [pc, #336]	; (8004184 <_printf_i+0x21c>)
 8004032:	296f      	cmp	r1, #111	; 0x6f
 8004034:	bf14      	ite	ne
 8004036:	220a      	movne	r2, #10
 8004038:	2208      	moveq	r2, #8
 800403a:	2100      	movs	r1, #0
 800403c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004040:	6865      	ldr	r5, [r4, #4]
 8004042:	60a5      	str	r5, [r4, #8]
 8004044:	2d00      	cmp	r5, #0
 8004046:	f2c0 8095 	blt.w	8004174 <_printf_i+0x20c>
 800404a:	6821      	ldr	r1, [r4, #0]
 800404c:	f021 0104 	bic.w	r1, r1, #4
 8004050:	6021      	str	r1, [r4, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d13d      	bne.n	80040d2 <_printf_i+0x16a>
 8004056:	2d00      	cmp	r5, #0
 8004058:	f040 808e 	bne.w	8004178 <_printf_i+0x210>
 800405c:	4665      	mov	r5, ip
 800405e:	2a08      	cmp	r2, #8
 8004060:	d10b      	bne.n	800407a <_printf_i+0x112>
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	07db      	lsls	r3, r3, #31
 8004066:	d508      	bpl.n	800407a <_printf_i+0x112>
 8004068:	6923      	ldr	r3, [r4, #16]
 800406a:	6862      	ldr	r2, [r4, #4]
 800406c:	429a      	cmp	r2, r3
 800406e:	bfde      	ittt	le
 8004070:	2330      	movle	r3, #48	; 0x30
 8004072:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004076:	f105 35ff 	addle.w	r5, r5, #4294967295
 800407a:	ebac 0305 	sub.w	r3, ip, r5
 800407e:	6123      	str	r3, [r4, #16]
 8004080:	f8cd 8000 	str.w	r8, [sp]
 8004084:	463b      	mov	r3, r7
 8004086:	aa03      	add	r2, sp, #12
 8004088:	4621      	mov	r1, r4
 800408a:	4630      	mov	r0, r6
 800408c:	f7ff fef6 	bl	8003e7c <_printf_common>
 8004090:	3001      	adds	r0, #1
 8004092:	d14d      	bne.n	8004130 <_printf_i+0x1c8>
 8004094:	f04f 30ff 	mov.w	r0, #4294967295
 8004098:	b005      	add	sp, #20
 800409a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800409e:	4839      	ldr	r0, [pc, #228]	; (8004184 <_printf_i+0x21c>)
 80040a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80040a4:	6813      	ldr	r3, [r2, #0]
 80040a6:	6821      	ldr	r1, [r4, #0]
 80040a8:	1d1d      	adds	r5, r3, #4
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6015      	str	r5, [r2, #0]
 80040ae:	060a      	lsls	r2, r1, #24
 80040b0:	d50b      	bpl.n	80040ca <_printf_i+0x162>
 80040b2:	07ca      	lsls	r2, r1, #31
 80040b4:	bf44      	itt	mi
 80040b6:	f041 0120 	orrmi.w	r1, r1, #32
 80040ba:	6021      	strmi	r1, [r4, #0]
 80040bc:	b91b      	cbnz	r3, 80040c6 <_printf_i+0x15e>
 80040be:	6822      	ldr	r2, [r4, #0]
 80040c0:	f022 0220 	bic.w	r2, r2, #32
 80040c4:	6022      	str	r2, [r4, #0]
 80040c6:	2210      	movs	r2, #16
 80040c8:	e7b7      	b.n	800403a <_printf_i+0xd2>
 80040ca:	064d      	lsls	r5, r1, #25
 80040cc:	bf48      	it	mi
 80040ce:	b29b      	uxthmi	r3, r3
 80040d0:	e7ef      	b.n	80040b2 <_printf_i+0x14a>
 80040d2:	4665      	mov	r5, ip
 80040d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80040d8:	fb02 3311 	mls	r3, r2, r1, r3
 80040dc:	5cc3      	ldrb	r3, [r0, r3]
 80040de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80040e2:	460b      	mov	r3, r1
 80040e4:	2900      	cmp	r1, #0
 80040e6:	d1f5      	bne.n	80040d4 <_printf_i+0x16c>
 80040e8:	e7b9      	b.n	800405e <_printf_i+0xf6>
 80040ea:	6813      	ldr	r3, [r2, #0]
 80040ec:	6825      	ldr	r5, [r4, #0]
 80040ee:	6961      	ldr	r1, [r4, #20]
 80040f0:	1d18      	adds	r0, r3, #4
 80040f2:	6010      	str	r0, [r2, #0]
 80040f4:	0628      	lsls	r0, r5, #24
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	d501      	bpl.n	80040fe <_printf_i+0x196>
 80040fa:	6019      	str	r1, [r3, #0]
 80040fc:	e002      	b.n	8004104 <_printf_i+0x19c>
 80040fe:	066a      	lsls	r2, r5, #25
 8004100:	d5fb      	bpl.n	80040fa <_printf_i+0x192>
 8004102:	8019      	strh	r1, [r3, #0]
 8004104:	2300      	movs	r3, #0
 8004106:	6123      	str	r3, [r4, #16]
 8004108:	4665      	mov	r5, ip
 800410a:	e7b9      	b.n	8004080 <_printf_i+0x118>
 800410c:	6813      	ldr	r3, [r2, #0]
 800410e:	1d19      	adds	r1, r3, #4
 8004110:	6011      	str	r1, [r2, #0]
 8004112:	681d      	ldr	r5, [r3, #0]
 8004114:	6862      	ldr	r2, [r4, #4]
 8004116:	2100      	movs	r1, #0
 8004118:	4628      	mov	r0, r5
 800411a:	f7fc f861 	bl	80001e0 <memchr>
 800411e:	b108      	cbz	r0, 8004124 <_printf_i+0x1bc>
 8004120:	1b40      	subs	r0, r0, r5
 8004122:	6060      	str	r0, [r4, #4]
 8004124:	6863      	ldr	r3, [r4, #4]
 8004126:	6123      	str	r3, [r4, #16]
 8004128:	2300      	movs	r3, #0
 800412a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800412e:	e7a7      	b.n	8004080 <_printf_i+0x118>
 8004130:	6923      	ldr	r3, [r4, #16]
 8004132:	462a      	mov	r2, r5
 8004134:	4639      	mov	r1, r7
 8004136:	4630      	mov	r0, r6
 8004138:	47c0      	blx	r8
 800413a:	3001      	adds	r0, #1
 800413c:	d0aa      	beq.n	8004094 <_printf_i+0x12c>
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	079b      	lsls	r3, r3, #30
 8004142:	d413      	bmi.n	800416c <_printf_i+0x204>
 8004144:	68e0      	ldr	r0, [r4, #12]
 8004146:	9b03      	ldr	r3, [sp, #12]
 8004148:	4298      	cmp	r0, r3
 800414a:	bfb8      	it	lt
 800414c:	4618      	movlt	r0, r3
 800414e:	e7a3      	b.n	8004098 <_printf_i+0x130>
 8004150:	2301      	movs	r3, #1
 8004152:	464a      	mov	r2, r9
 8004154:	4639      	mov	r1, r7
 8004156:	4630      	mov	r0, r6
 8004158:	47c0      	blx	r8
 800415a:	3001      	adds	r0, #1
 800415c:	d09a      	beq.n	8004094 <_printf_i+0x12c>
 800415e:	3501      	adds	r5, #1
 8004160:	68e3      	ldr	r3, [r4, #12]
 8004162:	9a03      	ldr	r2, [sp, #12]
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	42ab      	cmp	r3, r5
 8004168:	dcf2      	bgt.n	8004150 <_printf_i+0x1e8>
 800416a:	e7eb      	b.n	8004144 <_printf_i+0x1dc>
 800416c:	2500      	movs	r5, #0
 800416e:	f104 0919 	add.w	r9, r4, #25
 8004172:	e7f5      	b.n	8004160 <_printf_i+0x1f8>
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1ac      	bne.n	80040d2 <_printf_i+0x16a>
 8004178:	7803      	ldrb	r3, [r0, #0]
 800417a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800417e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004182:	e76c      	b.n	800405e <_printf_i+0xf6>
 8004184:	08004481 	.word	0x08004481
 8004188:	08004492 	.word	0x08004492

0800418c <memmove>:
 800418c:	4288      	cmp	r0, r1
 800418e:	b510      	push	{r4, lr}
 8004190:	eb01 0302 	add.w	r3, r1, r2
 8004194:	d807      	bhi.n	80041a6 <memmove+0x1a>
 8004196:	1e42      	subs	r2, r0, #1
 8004198:	4299      	cmp	r1, r3
 800419a:	d00a      	beq.n	80041b2 <memmove+0x26>
 800419c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041a0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80041a4:	e7f8      	b.n	8004198 <memmove+0xc>
 80041a6:	4283      	cmp	r3, r0
 80041a8:	d9f5      	bls.n	8004196 <memmove+0xa>
 80041aa:	1881      	adds	r1, r0, r2
 80041ac:	1ad2      	subs	r2, r2, r3
 80041ae:	42d3      	cmn	r3, r2
 80041b0:	d100      	bne.n	80041b4 <memmove+0x28>
 80041b2:	bd10      	pop	{r4, pc}
 80041b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041b8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80041bc:	e7f7      	b.n	80041ae <memmove+0x22>
	...

080041c0 <_free_r>:
 80041c0:	b538      	push	{r3, r4, r5, lr}
 80041c2:	4605      	mov	r5, r0
 80041c4:	2900      	cmp	r1, #0
 80041c6:	d045      	beq.n	8004254 <_free_r+0x94>
 80041c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041cc:	1f0c      	subs	r4, r1, #4
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bfb8      	it	lt
 80041d2:	18e4      	addlt	r4, r4, r3
 80041d4:	f000 f8d2 	bl	800437c <__malloc_lock>
 80041d8:	4a1f      	ldr	r2, [pc, #124]	; (8004258 <_free_r+0x98>)
 80041da:	6813      	ldr	r3, [r2, #0]
 80041dc:	4610      	mov	r0, r2
 80041de:	b933      	cbnz	r3, 80041ee <_free_r+0x2e>
 80041e0:	6063      	str	r3, [r4, #4]
 80041e2:	6014      	str	r4, [r2, #0]
 80041e4:	4628      	mov	r0, r5
 80041e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041ea:	f000 b8c8 	b.w	800437e <__malloc_unlock>
 80041ee:	42a3      	cmp	r3, r4
 80041f0:	d90c      	bls.n	800420c <_free_r+0x4c>
 80041f2:	6821      	ldr	r1, [r4, #0]
 80041f4:	1862      	adds	r2, r4, r1
 80041f6:	4293      	cmp	r3, r2
 80041f8:	bf04      	itt	eq
 80041fa:	681a      	ldreq	r2, [r3, #0]
 80041fc:	685b      	ldreq	r3, [r3, #4]
 80041fe:	6063      	str	r3, [r4, #4]
 8004200:	bf04      	itt	eq
 8004202:	1852      	addeq	r2, r2, r1
 8004204:	6022      	streq	r2, [r4, #0]
 8004206:	6004      	str	r4, [r0, #0]
 8004208:	e7ec      	b.n	80041e4 <_free_r+0x24>
 800420a:	4613      	mov	r3, r2
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	b10a      	cbz	r2, 8004214 <_free_r+0x54>
 8004210:	42a2      	cmp	r2, r4
 8004212:	d9fa      	bls.n	800420a <_free_r+0x4a>
 8004214:	6819      	ldr	r1, [r3, #0]
 8004216:	1858      	adds	r0, r3, r1
 8004218:	42a0      	cmp	r0, r4
 800421a:	d10b      	bne.n	8004234 <_free_r+0x74>
 800421c:	6820      	ldr	r0, [r4, #0]
 800421e:	4401      	add	r1, r0
 8004220:	1858      	adds	r0, r3, r1
 8004222:	4282      	cmp	r2, r0
 8004224:	6019      	str	r1, [r3, #0]
 8004226:	d1dd      	bne.n	80041e4 <_free_r+0x24>
 8004228:	6810      	ldr	r0, [r2, #0]
 800422a:	6852      	ldr	r2, [r2, #4]
 800422c:	605a      	str	r2, [r3, #4]
 800422e:	4401      	add	r1, r0
 8004230:	6019      	str	r1, [r3, #0]
 8004232:	e7d7      	b.n	80041e4 <_free_r+0x24>
 8004234:	d902      	bls.n	800423c <_free_r+0x7c>
 8004236:	230c      	movs	r3, #12
 8004238:	602b      	str	r3, [r5, #0]
 800423a:	e7d3      	b.n	80041e4 <_free_r+0x24>
 800423c:	6820      	ldr	r0, [r4, #0]
 800423e:	1821      	adds	r1, r4, r0
 8004240:	428a      	cmp	r2, r1
 8004242:	bf04      	itt	eq
 8004244:	6811      	ldreq	r1, [r2, #0]
 8004246:	6852      	ldreq	r2, [r2, #4]
 8004248:	6062      	str	r2, [r4, #4]
 800424a:	bf04      	itt	eq
 800424c:	1809      	addeq	r1, r1, r0
 800424e:	6021      	streq	r1, [r4, #0]
 8004250:	605c      	str	r4, [r3, #4]
 8004252:	e7c7      	b.n	80041e4 <_free_r+0x24>
 8004254:	bd38      	pop	{r3, r4, r5, pc}
 8004256:	bf00      	nop
 8004258:	20004038 	.word	0x20004038

0800425c <_malloc_r>:
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	1ccd      	adds	r5, r1, #3
 8004260:	f025 0503 	bic.w	r5, r5, #3
 8004264:	3508      	adds	r5, #8
 8004266:	2d0c      	cmp	r5, #12
 8004268:	bf38      	it	cc
 800426a:	250c      	movcc	r5, #12
 800426c:	2d00      	cmp	r5, #0
 800426e:	4606      	mov	r6, r0
 8004270:	db01      	blt.n	8004276 <_malloc_r+0x1a>
 8004272:	42a9      	cmp	r1, r5
 8004274:	d903      	bls.n	800427e <_malloc_r+0x22>
 8004276:	230c      	movs	r3, #12
 8004278:	6033      	str	r3, [r6, #0]
 800427a:	2000      	movs	r0, #0
 800427c:	bd70      	pop	{r4, r5, r6, pc}
 800427e:	f000 f87d 	bl	800437c <__malloc_lock>
 8004282:	4a21      	ldr	r2, [pc, #132]	; (8004308 <_malloc_r+0xac>)
 8004284:	6814      	ldr	r4, [r2, #0]
 8004286:	4621      	mov	r1, r4
 8004288:	b991      	cbnz	r1, 80042b0 <_malloc_r+0x54>
 800428a:	4c20      	ldr	r4, [pc, #128]	; (800430c <_malloc_r+0xb0>)
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	b91b      	cbnz	r3, 8004298 <_malloc_r+0x3c>
 8004290:	4630      	mov	r0, r6
 8004292:	f000 f863 	bl	800435c <_sbrk_r>
 8004296:	6020      	str	r0, [r4, #0]
 8004298:	4629      	mov	r1, r5
 800429a:	4630      	mov	r0, r6
 800429c:	f000 f85e 	bl	800435c <_sbrk_r>
 80042a0:	1c43      	adds	r3, r0, #1
 80042a2:	d124      	bne.n	80042ee <_malloc_r+0x92>
 80042a4:	230c      	movs	r3, #12
 80042a6:	6033      	str	r3, [r6, #0]
 80042a8:	4630      	mov	r0, r6
 80042aa:	f000 f868 	bl	800437e <__malloc_unlock>
 80042ae:	e7e4      	b.n	800427a <_malloc_r+0x1e>
 80042b0:	680b      	ldr	r3, [r1, #0]
 80042b2:	1b5b      	subs	r3, r3, r5
 80042b4:	d418      	bmi.n	80042e8 <_malloc_r+0x8c>
 80042b6:	2b0b      	cmp	r3, #11
 80042b8:	d90f      	bls.n	80042da <_malloc_r+0x7e>
 80042ba:	600b      	str	r3, [r1, #0]
 80042bc:	50cd      	str	r5, [r1, r3]
 80042be:	18cc      	adds	r4, r1, r3
 80042c0:	4630      	mov	r0, r6
 80042c2:	f000 f85c 	bl	800437e <__malloc_unlock>
 80042c6:	f104 000b 	add.w	r0, r4, #11
 80042ca:	1d23      	adds	r3, r4, #4
 80042cc:	f020 0007 	bic.w	r0, r0, #7
 80042d0:	1ac3      	subs	r3, r0, r3
 80042d2:	d0d3      	beq.n	800427c <_malloc_r+0x20>
 80042d4:	425a      	negs	r2, r3
 80042d6:	50e2      	str	r2, [r4, r3]
 80042d8:	e7d0      	b.n	800427c <_malloc_r+0x20>
 80042da:	428c      	cmp	r4, r1
 80042dc:	684b      	ldr	r3, [r1, #4]
 80042de:	bf16      	itet	ne
 80042e0:	6063      	strne	r3, [r4, #4]
 80042e2:	6013      	streq	r3, [r2, #0]
 80042e4:	460c      	movne	r4, r1
 80042e6:	e7eb      	b.n	80042c0 <_malloc_r+0x64>
 80042e8:	460c      	mov	r4, r1
 80042ea:	6849      	ldr	r1, [r1, #4]
 80042ec:	e7cc      	b.n	8004288 <_malloc_r+0x2c>
 80042ee:	1cc4      	adds	r4, r0, #3
 80042f0:	f024 0403 	bic.w	r4, r4, #3
 80042f4:	42a0      	cmp	r0, r4
 80042f6:	d005      	beq.n	8004304 <_malloc_r+0xa8>
 80042f8:	1a21      	subs	r1, r4, r0
 80042fa:	4630      	mov	r0, r6
 80042fc:	f000 f82e 	bl	800435c <_sbrk_r>
 8004300:	3001      	adds	r0, #1
 8004302:	d0cf      	beq.n	80042a4 <_malloc_r+0x48>
 8004304:	6025      	str	r5, [r4, #0]
 8004306:	e7db      	b.n	80042c0 <_malloc_r+0x64>
 8004308:	20004038 	.word	0x20004038
 800430c:	2000403c 	.word	0x2000403c

08004310 <_realloc_r>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	4607      	mov	r7, r0
 8004314:	4614      	mov	r4, r2
 8004316:	460e      	mov	r6, r1
 8004318:	b921      	cbnz	r1, 8004324 <_realloc_r+0x14>
 800431a:	4611      	mov	r1, r2
 800431c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004320:	f7ff bf9c 	b.w	800425c <_malloc_r>
 8004324:	b922      	cbnz	r2, 8004330 <_realloc_r+0x20>
 8004326:	f7ff ff4b 	bl	80041c0 <_free_r>
 800432a:	4625      	mov	r5, r4
 800432c:	4628      	mov	r0, r5
 800432e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004330:	f000 f826 	bl	8004380 <_malloc_usable_size_r>
 8004334:	42a0      	cmp	r0, r4
 8004336:	d20f      	bcs.n	8004358 <_realloc_r+0x48>
 8004338:	4621      	mov	r1, r4
 800433a:	4638      	mov	r0, r7
 800433c:	f7ff ff8e 	bl	800425c <_malloc_r>
 8004340:	4605      	mov	r5, r0
 8004342:	2800      	cmp	r0, #0
 8004344:	d0f2      	beq.n	800432c <_realloc_r+0x1c>
 8004346:	4631      	mov	r1, r6
 8004348:	4622      	mov	r2, r4
 800434a:	f7ff fc11 	bl	8003b70 <memcpy>
 800434e:	4631      	mov	r1, r6
 8004350:	4638      	mov	r0, r7
 8004352:	f7ff ff35 	bl	80041c0 <_free_r>
 8004356:	e7e9      	b.n	800432c <_realloc_r+0x1c>
 8004358:	4635      	mov	r5, r6
 800435a:	e7e7      	b.n	800432c <_realloc_r+0x1c>

0800435c <_sbrk_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	4c06      	ldr	r4, [pc, #24]	; (8004378 <_sbrk_r+0x1c>)
 8004360:	2300      	movs	r3, #0
 8004362:	4605      	mov	r5, r0
 8004364:	4608      	mov	r0, r1
 8004366:	6023      	str	r3, [r4, #0]
 8004368:	f7fc fc62 	bl	8000c30 <_sbrk>
 800436c:	1c43      	adds	r3, r0, #1
 800436e:	d102      	bne.n	8004376 <_sbrk_r+0x1a>
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	b103      	cbz	r3, 8004376 <_sbrk_r+0x1a>
 8004374:	602b      	str	r3, [r5, #0]
 8004376:	bd38      	pop	{r3, r4, r5, pc}
 8004378:	200040c0 	.word	0x200040c0

0800437c <__malloc_lock>:
 800437c:	4770      	bx	lr

0800437e <__malloc_unlock>:
 800437e:	4770      	bx	lr

08004380 <_malloc_usable_size_r>:
 8004380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004384:	1f18      	subs	r0, r3, #4
 8004386:	2b00      	cmp	r3, #0
 8004388:	bfbc      	itt	lt
 800438a:	580b      	ldrlt	r3, [r1, r0]
 800438c:	18c0      	addlt	r0, r0, r3
 800438e:	4770      	bx	lr

08004390 <_init>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	bf00      	nop
 8004394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004396:	bc08      	pop	{r3}
 8004398:	469e      	mov	lr, r3
 800439a:	4770      	bx	lr

0800439c <_fini>:
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439e:	bf00      	nop
 80043a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a2:	bc08      	pop	{r3}
 80043a4:	469e      	mov	lr, r3
 80043a6:	4770      	bx	lr
