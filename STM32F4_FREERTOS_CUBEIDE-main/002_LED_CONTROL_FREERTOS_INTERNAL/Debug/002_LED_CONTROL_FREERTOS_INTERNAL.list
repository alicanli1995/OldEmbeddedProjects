
002_LED_CONTROL_FREERTOS_INTERNAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ac0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002c50  08002c50  00012c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cb0  08002cb0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002cb0  08002cb0  00012cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cb8  08002cb8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cb8  08002cb8  00012cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cbc  08002cbc  00012cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fcc  20000010  08002cd0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003fdc  08002cd0  00023fdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a102  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c23  00000000  00000000  0002a142  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a0  00000000  00000000  0002bd68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007b8  00000000  00000000  0002c608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000206ac  00000000  00000000  0002cdc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b3a  00000000  00000000  0004d46c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6cb4  00000000  00000000  00054fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011bc5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002118  00000000  00000000  0011bcd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002c38 	.word	0x08002c38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08002c38 	.word	0x08002c38

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000080 	.word	0x20000080

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b08e      	sub	sp, #56	; 0x38
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 f9e7 	bl	80008dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f831 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f88d 	bl	8000630 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of buttonTask */
  osThreadDef(buttonTask, buttonControlTask, osPriorityHigh, 0, 128);
 8000516:	4b13      	ldr	r3, [pc, #76]	; (8000564 <main+0x60>)
 8000518:	f107 041c 	add.w	r4, r7, #28
 800051c:	461d      	mov	r5, r3
 800051e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000522:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000526:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonTaskHandle = osThreadCreate(osThread(buttonTask), NULL);
 800052a:	f107 031c 	add.w	r3, r7, #28
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f001 f938 	bl	80017a6 <osThreadCreate>
 8000536:	4602      	mov	r2, r0
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <main+0x64>)
 800053a:	601a      	str	r2, [r3, #0]

  /* definition and creation of led */
  osThreadDef(led, ledFlashTask, osPriorityHigh, 0, 128);
 800053c:	4b0b      	ldr	r3, [pc, #44]	; (800056c <main+0x68>)
 800053e:	463c      	mov	r4, r7
 8000540:	461d      	mov	r5, r3
 8000542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000546:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledHandle = osThreadCreate(osThread(led), NULL);
 800054e:	463b      	mov	r3, r7
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f001 f927 	bl	80017a6 <osThreadCreate>
 8000558:	4602      	mov	r2, r0
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <main+0x6c>)
 800055c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800055e:	f001 f91b 	bl	8001798 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000562:	e7fe      	b.n	8000562 <main+0x5e>
 8000564:	08002c5c 	.word	0x08002c5c
 8000568:	20003fd4 	.word	0x20003fd4
 800056c:	08002c7c 	.word	0x08002c7c
 8000570:	20003fcc 	.word	0x20003fcc

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	; 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fb50 	bl	8002c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b22      	ldr	r3, [pc, #136]	; (8000628 <SystemClock_Config+0xb4>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a21      	ldr	r2, [pc, #132]	; (8000628 <SystemClock_Config+0xb4>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <SystemClock_Config+0xb4>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <SystemClock_Config+0xb8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1b      	ldr	r2, [pc, #108]	; (800062c <SystemClock_Config+0xb8>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <SystemClock_Config+0xb8>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005dc:	2300      	movs	r3, #0
 80005de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fcb7 	bl	8000f58 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005f0:	f000 f8e0 	bl	80007b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000608:	f107 030c 	add.w	r3, r7, #12
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f000 ff12 	bl	8001438 <HAL_RCC_ClockConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800061a:	f000 f8cb 	bl	80007b4 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	; 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <MX_GPIO_Init+0x98>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a1e      	ldr	r2, [pc, #120]	; (80006c8 <MX_GPIO_Init+0x98>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <MX_GPIO_Init+0x98>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_GPIO_Init+0x98>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <MX_GPIO_Init+0x98>)
 800066c:	f043 0308 	orr.w	r3, r3, #8
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_GPIO_Init+0x98>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0308 	and.w	r3, r3, #8
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000684:	4811      	ldr	r0, [pc, #68]	; (80006cc <MX_GPIO_Init+0x9c>)
 8000686:	f000 fc33 	bl	8000ef0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800068a:	2301      	movs	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	4619      	mov	r1, r3
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <MX_GPIO_Init+0xa0>)
 800069e:	f000 fa75 	bl	8000b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80006a2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80006a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	4619      	mov	r1, r3
 80006ba:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_GPIO_Init+0x9c>)
 80006bc:	f000 fa66 	bl	8000b8c <HAL_GPIO_Init>

}
 80006c0:	bf00      	nop
 80006c2:	3720      	adds	r7, #32
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020c00 	.word	0x40020c00
 80006d0:	40020000 	.word	0x40020000

080006d4 <buttonControlTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_buttonControlTask */
void buttonControlTask(void const * argument)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==1){
 80006dc:	2101      	movs	r1, #1
 80006de:	480e      	ldr	r0, [pc, #56]	; (8000718 <buttonControlTask+0x44>)
 80006e0:	f000 fbee 	bl	8000ec0 <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d1f8      	bne.n	80006dc <buttonControlTask+0x8>
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
 80006ea:	bf00      	nop
 80006ec:	2101      	movs	r1, #1
 80006ee:	480a      	ldr	r0, [pc, #40]	; (8000718 <buttonControlTask+0x44>)
 80006f0:	f000 fbe6 	bl	8000ec0 <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d1f8      	bne.n	80006ec <buttonControlTask+0x18>
		  counter++;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <buttonControlTask+0x48>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	3301      	adds	r3, #1
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <buttonControlTask+0x48>)
 8000704:	701a      	strb	r2, [r3, #0]
		  if(counter == 5)
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <buttonControlTask+0x48>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b05      	cmp	r3, #5
 800070c:	d1e6      	bne.n	80006dc <buttonControlTask+0x8>
			  counter = 0;
 800070e:	4b03      	ldr	r3, [pc, #12]	; (800071c <buttonControlTask+0x48>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==1){
 8000714:	e7e2      	b.n	80006dc <buttonControlTask+0x8>
 8000716:	bf00      	nop
 8000718:	40020000 	.word	0x40020000
 800071c:	20003fd0 	.word	0x20003fd0

08000720 <ledFlashTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ledFlashTask */
void ledFlashTask(void const * argument)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledFlashTask */
  /* Infinite loop */
  for(;;)
  {
	  if(counter == 0){
 8000728:	4b20      	ldr	r3, [pc, #128]	; (80007ac <ledFlashTask+0x8c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d106      	bne.n	800073e <ledFlashTask+0x1e>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_All, DISABLE);
 8000730:	2200      	movs	r2, #0
 8000732:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000736:	481e      	ldr	r0, [pc, #120]	; (80007b0 <ledFlashTask+0x90>)
 8000738:	f000 fbda 	bl	8000ef0 <HAL_GPIO_WritePin>
 800073c:	e7f4      	b.n	8000728 <ledFlashTask+0x8>
	  }
	  else if(counter == 1){
 800073e:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <ledFlashTask+0x8c>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d109      	bne.n	800075a <ledFlashTask+0x3a>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_All);
 8000746:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800074a:	4819      	ldr	r0, [pc, #100]	; (80007b0 <ledFlashTask+0x90>)
 800074c:	f000 fbe9 	bl	8000f22 <HAL_GPIO_TogglePin>
			  osDelay(1000);
 8000750:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000754:	f001 f873 	bl	800183e <osDelay>
 8000758:	e7e6      	b.n	8000728 <ledFlashTask+0x8>
	  }
	  else if(counter == 2){
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <ledFlashTask+0x8c>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b02      	cmp	r3, #2
 8000760:	d109      	bne.n	8000776 <ledFlashTask+0x56>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_All);
 8000762:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000766:	4812      	ldr	r0, [pc, #72]	; (80007b0 <ledFlashTask+0x90>)
 8000768:	f000 fbdb 	bl	8000f22 <HAL_GPIO_TogglePin>
		  osDelay(750);
 800076c:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000770:	f001 f865 	bl	800183e <osDelay>
 8000774:	e7d8      	b.n	8000728 <ledFlashTask+0x8>
	  }
	  else if(counter == 3){
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <ledFlashTask+0x8c>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b03      	cmp	r3, #3
 800077c:	d109      	bne.n	8000792 <ledFlashTask+0x72>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_All);
 800077e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000782:	480b      	ldr	r0, [pc, #44]	; (80007b0 <ledFlashTask+0x90>)
 8000784:	f000 fbcd 	bl	8000f22 <HAL_GPIO_TogglePin>
		  osDelay(500);
 8000788:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800078c:	f001 f857 	bl	800183e <osDelay>
 8000790:	e7ca      	b.n	8000728 <ledFlashTask+0x8>
	  }
	  else if(counter == 4){
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <ledFlashTask+0x8c>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b04      	cmp	r3, #4
 8000798:	d1c6      	bne.n	8000728 <ledFlashTask+0x8>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_All);
 800079a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800079e:	4804      	ldr	r0, [pc, #16]	; (80007b0 <ledFlashTask+0x90>)
 80007a0:	f000 fbbf 	bl	8000f22 <HAL_GPIO_TogglePin>
		  osDelay(250);
 80007a4:	20fa      	movs	r0, #250	; 0xfa
 80007a6:	f001 f84a 	bl	800183e <osDelay>
	  if(counter == 0){
 80007aa:	e7bd      	b.n	8000728 <ledFlashTask+0x8>
 80007ac:	20003fd0 	.word	0x20003fd0
 80007b0:	40020c00 	.word	0x40020c00

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ba:	e7fe      	b.n	80007ba <Error_Handler+0x6>

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b12      	ldr	r3, [pc, #72]	; (8000810 <HAL_MspInit+0x54>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	4a11      	ldr	r2, [pc, #68]	; (8000810 <HAL_MspInit+0x54>)
 80007cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d0:	6453      	str	r3, [r2, #68]	; 0x44
 80007d2:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <HAL_MspInit+0x54>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <HAL_MspInit+0x54>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <HAL_MspInit+0x54>)
 80007e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ec:	6413      	str	r3, [r2, #64]	; 0x40
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_MspInit+0x54>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	210f      	movs	r1, #15
 80007fe:	f06f 0001 	mvn.w	r0, #1
 8000802:	f000 f99a 	bl	8000b3a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000818:	e7fe      	b.n	8000818 <NMI_Handler+0x4>

0800081a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081e:	e7fe      	b.n	800081e <HardFault_Handler+0x4>

08000820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <MemManage_Handler+0x4>

08000826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <BusFault_Handler+0x4>

0800082c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <UsageFault_Handler+0x4>

08000832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000844:	f000 f89c 	bl	8000980 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000848:	f001 fd70 	bl	800232c <xTaskGetSchedulerState>
 800084c:	4603      	mov	r3, r0
 800084e:	2b01      	cmp	r3, #1
 8000850:	d001      	beq.n	8000856 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000852:	f001 ffa1 	bl	8002798 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <SystemInit+0x28>)
 8000862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000866:	4a07      	ldr	r2, [pc, #28]	; (8000884 <SystemInit+0x28>)
 8000868:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800086c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <SystemInit+0x28>)
 8000872:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000876:	609a      	str	r2, [r3, #8]
#endif
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800088c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800088e:	e003      	b.n	8000898 <LoopCopyDataInit>

08000890 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000892:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000894:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000896:	3104      	adds	r1, #4

08000898 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000898:	480b      	ldr	r0, [pc, #44]	; (80008c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800089c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800089e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008a0:	d3f6      	bcc.n	8000890 <CopyDataInit>
  ldr  r2, =_sbss
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008a4:	e002      	b.n	80008ac <LoopFillZerobss>

080008a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008a8:	f842 3b04 	str.w	r3, [r2], #4

080008ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008b0:	d3f9      	bcc.n	80008a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008b2:	f7ff ffd3 	bl	800085c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b6:	f002 f993 	bl	8002be0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ba:	f7ff fe23 	bl	8000504 <main>
  bx  lr    
 80008be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80008c4:	08002cc0 	.word	0x08002cc0
  ldr  r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008cc:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80008d0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80008d4:	20003fdc 	.word	0x20003fdc

080008d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC_IRQHandler>
	...

080008dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_Init+0x40>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0d      	ldr	r2, [pc, #52]	; (800091c <HAL_Init+0x40>)
 80008e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <HAL_Init+0x40>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0a      	ldr	r2, [pc, #40]	; (800091c <HAL_Init+0x40>)
 80008f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_Init+0x40>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a07      	ldr	r2, [pc, #28]	; (800091c <HAL_Init+0x40>)
 80008fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000902:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000904:	2003      	movs	r0, #3
 8000906:	f000 f90d 	bl	8000b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090a:	200f      	movs	r0, #15
 800090c:	f000 f808 	bl	8000920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000910:	f7ff ff54 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023c00 	.word	0x40023c00

08000920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_InitTick+0x54>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_InitTick+0x58>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	fbb3 f3f1 	udiv	r3, r3, r1
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f917 	bl	8000b72 <HAL_SYSTICK_Config>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e00e      	b.n	800096c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d80a      	bhi.n	800096a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000954:	2200      	movs	r2, #0
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f000 f8ed 	bl	8000b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <HAL_InitTick+0x5c>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	e000      	b.n	800096c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000000 	.word	0x20000000
 8000978:	20000008 	.word	0x20000008
 800097c:	20000004 	.word	0x20000004

08000980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_IncTick+0x20>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_IncTick+0x24>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4413      	add	r3, r2
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_IncTick+0x24>)
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	20000008 	.word	0x20000008
 80009a4:	20003fd8 	.word	0x20003fd8

080009a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return uwTick;
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <HAL_GetTick+0x14>)
 80009ae:	681b      	ldr	r3, [r3, #0]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20003fd8 	.word	0x20003fd8

080009c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <__NVIC_SetPriorityGrouping+0x44>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009dc:	4013      	ands	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f2:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <__NVIC_SetPriorityGrouping+0x44>)
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	60d3      	str	r3, [r2, #12]
}
 80009f8:	bf00      	nop
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <__NVIC_GetPriorityGrouping+0x18>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	f003 0307 	and.w	r3, r3, #7
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	db0a      	blt.n	8000a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	490c      	ldr	r1, [pc, #48]	; (8000a70 <__NVIC_SetPriority+0x4c>)
 8000a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a42:	0112      	lsls	r2, r2, #4
 8000a44:	b2d2      	uxtb	r2, r2
 8000a46:	440b      	add	r3, r1
 8000a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a4c:	e00a      	b.n	8000a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	b2da      	uxtb	r2, r3
 8000a52:	4908      	ldr	r1, [pc, #32]	; (8000a74 <__NVIC_SetPriority+0x50>)
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	f003 030f 	and.w	r3, r3, #15
 8000a5a:	3b04      	subs	r3, #4
 8000a5c:	0112      	lsls	r2, r2, #4
 8000a5e:	b2d2      	uxtb	r2, r2
 8000a60:	440b      	add	r3, r1
 8000a62:	761a      	strb	r2, [r3, #24]
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000e100 	.word	0xe000e100
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b089      	sub	sp, #36	; 0x24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	f1c3 0307 	rsb	r3, r3, #7
 8000a92:	2b04      	cmp	r3, #4
 8000a94:	bf28      	it	cs
 8000a96:	2304      	movcs	r3, #4
 8000a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	2b06      	cmp	r3, #6
 8000aa0:	d902      	bls.n	8000aa8 <NVIC_EncodePriority+0x30>
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	3b03      	subs	r3, #3
 8000aa6:	e000      	b.n	8000aaa <NVIC_EncodePriority+0x32>
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	401a      	ands	r2, r3
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aca:	43d9      	mvns	r1, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad0:	4313      	orrs	r3, r2
         );
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3724      	adds	r7, #36	; 0x24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
	...

08000ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000af0:	d301      	bcc.n	8000af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000af2:	2301      	movs	r3, #1
 8000af4:	e00f      	b.n	8000b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <SysTick_Config+0x40>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3b01      	subs	r3, #1
 8000afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000afe:	210f      	movs	r1, #15
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	f7ff ff8e 	bl	8000a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <SysTick_Config+0x40>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b0e:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <SysTick_Config+0x40>)
 8000b10:	2207      	movs	r2, #7
 8000b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	e000e010 	.word	0xe000e010

08000b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff ff47 	bl	80009c0 <__NVIC_SetPriorityGrouping>
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	4603      	mov	r3, r0
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
 8000b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b4c:	f7ff ff5c 	bl	8000a08 <__NVIC_GetPriorityGrouping>
 8000b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	6978      	ldr	r0, [r7, #20]
 8000b58:	f7ff ff8e 	bl	8000a78 <NVIC_EncodePriority>
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff5d 	bl	8000a24 <__NVIC_SetPriority>
}
 8000b6a:	bf00      	nop
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff ffb0 	bl	8000ae0 <SysTick_Config>
 8000b80:	4603      	mov	r3, r0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
	...

08000b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
 8000ba6:	e16b      	b.n	8000e80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ba8:	2201      	movs	r2, #1
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	f040 815a 	bne.w	8000e7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d00b      	beq.n	8000be6 <HAL_GPIO_Init+0x5a>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d007      	beq.n	8000be6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bda:	2b11      	cmp	r3, #17
 8000bdc:	d003      	beq.n	8000be6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b12      	cmp	r3, #18
 8000be4:	d130      	bne.n	8000c48 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	68da      	ldr	r2, [r3, #12]
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	69ba      	ldr	r2, [r7, #24]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	091b      	lsrs	r3, r3, #4
 8000c32:	f003 0201 	and.w	r2, r3, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d003      	beq.n	8000c88 <HAL_GPIO_Init+0xfc>
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b12      	cmp	r3, #18
 8000c86:	d123      	bne.n	8000cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	08da      	lsrs	r2, r3, #3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3208      	adds	r2, #8
 8000c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	f003 0307 	and.w	r3, r3, #7
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	220f      	movs	r2, #15
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	691a      	ldr	r2, [r3, #16]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	08da      	lsrs	r2, r3, #3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3208      	adds	r2, #8
 8000cca:	69b9      	ldr	r1, [r7, #24]
 8000ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2203      	movs	r2, #3
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0203 	and.w	r2, r3, #3
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f000 80b4 	beq.w	8000e7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b5f      	ldr	r3, [pc, #380]	; (8000e94 <HAL_GPIO_Init+0x308>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a5e      	ldr	r2, [pc, #376]	; (8000e94 <HAL_GPIO_Init+0x308>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b5c      	ldr	r3, [pc, #368]	; (8000e94 <HAL_GPIO_Init+0x308>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d2e:	4a5a      	ldr	r2, [pc, #360]	; (8000e98 <HAL_GPIO_Init+0x30c>)
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	089b      	lsrs	r3, r3, #2
 8000d34:	3302      	adds	r3, #2
 8000d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	220f      	movs	r2, #15
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a51      	ldr	r2, [pc, #324]	; (8000e9c <HAL_GPIO_Init+0x310>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d02b      	beq.n	8000db2 <HAL_GPIO_Init+0x226>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a50      	ldr	r2, [pc, #320]	; (8000ea0 <HAL_GPIO_Init+0x314>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d025      	beq.n	8000dae <HAL_GPIO_Init+0x222>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a4f      	ldr	r2, [pc, #316]	; (8000ea4 <HAL_GPIO_Init+0x318>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d01f      	beq.n	8000daa <HAL_GPIO_Init+0x21e>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a4e      	ldr	r2, [pc, #312]	; (8000ea8 <HAL_GPIO_Init+0x31c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d019      	beq.n	8000da6 <HAL_GPIO_Init+0x21a>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a4d      	ldr	r2, [pc, #308]	; (8000eac <HAL_GPIO_Init+0x320>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d013      	beq.n	8000da2 <HAL_GPIO_Init+0x216>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a4c      	ldr	r2, [pc, #304]	; (8000eb0 <HAL_GPIO_Init+0x324>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d00d      	beq.n	8000d9e <HAL_GPIO_Init+0x212>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4b      	ldr	r2, [pc, #300]	; (8000eb4 <HAL_GPIO_Init+0x328>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d007      	beq.n	8000d9a <HAL_GPIO_Init+0x20e>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4a      	ldr	r2, [pc, #296]	; (8000eb8 <HAL_GPIO_Init+0x32c>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d101      	bne.n	8000d96 <HAL_GPIO_Init+0x20a>
 8000d92:	2307      	movs	r3, #7
 8000d94:	e00e      	b.n	8000db4 <HAL_GPIO_Init+0x228>
 8000d96:	2308      	movs	r3, #8
 8000d98:	e00c      	b.n	8000db4 <HAL_GPIO_Init+0x228>
 8000d9a:	2306      	movs	r3, #6
 8000d9c:	e00a      	b.n	8000db4 <HAL_GPIO_Init+0x228>
 8000d9e:	2305      	movs	r3, #5
 8000da0:	e008      	b.n	8000db4 <HAL_GPIO_Init+0x228>
 8000da2:	2304      	movs	r3, #4
 8000da4:	e006      	b.n	8000db4 <HAL_GPIO_Init+0x228>
 8000da6:	2303      	movs	r3, #3
 8000da8:	e004      	b.n	8000db4 <HAL_GPIO_Init+0x228>
 8000daa:	2302      	movs	r3, #2
 8000dac:	e002      	b.n	8000db4 <HAL_GPIO_Init+0x228>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e000      	b.n	8000db4 <HAL_GPIO_Init+0x228>
 8000db2:	2300      	movs	r3, #0
 8000db4:	69fa      	ldr	r2, [r7, #28]
 8000db6:	f002 0203 	and.w	r2, r2, #3
 8000dba:	0092      	lsls	r2, r2, #2
 8000dbc:	4093      	lsls	r3, r2
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dc4:	4934      	ldr	r1, [pc, #208]	; (8000e98 <HAL_GPIO_Init+0x30c>)
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	3302      	adds	r3, #2
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dd2:	4b3a      	ldr	r3, [pc, #232]	; (8000ebc <HAL_GPIO_Init+0x330>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	69ba      	ldr	r2, [r7, #24]
 8000dde:	4013      	ands	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000df6:	4a31      	ldr	r2, [pc, #196]	; (8000ebc <HAL_GPIO_Init+0x330>)
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <HAL_GPIO_Init+0x330>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d003      	beq.n	8000e20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e20:	4a26      	ldr	r2, [pc, #152]	; (8000ebc <HAL_GPIO_Init+0x330>)
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e26:	4b25      	ldr	r3, [pc, #148]	; (8000ebc <HAL_GPIO_Init+0x330>)
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4013      	ands	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d003      	beq.n	8000e4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e4a:	4a1c      	ldr	r2, [pc, #112]	; (8000ebc <HAL_GPIO_Init+0x330>)
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e50:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <HAL_GPIO_Init+0x330>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e74:	4a11      	ldr	r2, [pc, #68]	; (8000ebc <HAL_GPIO_Init+0x330>)
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	61fb      	str	r3, [r7, #28]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	2b0f      	cmp	r3, #15
 8000e84:	f67f ae90 	bls.w	8000ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e88:	bf00      	nop
 8000e8a:	3724      	adds	r7, #36	; 0x24
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40013800 	.word	0x40013800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40020800 	.word	0x40020800
 8000ea8:	40020c00 	.word	0x40020c00
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40021400 	.word	0x40021400
 8000eb4:	40021800 	.word	0x40021800
 8000eb8:	40021c00 	.word	0x40021c00
 8000ebc:	40013c00 	.word	0x40013c00

08000ec0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	887b      	ldrh	r3, [r7, #2]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d002      	beq.n	8000ede <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e001      	b.n	8000ee2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]
 8000efc:	4613      	mov	r3, r2
 8000efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f00:	787b      	ldrb	r3, [r7, #1]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f06:	887a      	ldrh	r2, [r7, #2]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f0c:	e003      	b.n	8000f16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	041a      	lsls	r2, r3, #16
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	619a      	str	r2, [r3, #24]
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	695a      	ldr	r2, [r3, #20]
 8000f32:	887b      	ldrh	r3, [r7, #2]
 8000f34:	401a      	ands	r2, r3
 8000f36:	887b      	ldrh	r3, [r7, #2]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d104      	bne.n	8000f46 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f3c:	887b      	ldrh	r3, [r7, #2]
 8000f3e:	041a      	lsls	r2, r3, #16
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000f46:	887a      	ldrh	r2, [r7, #2]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	619a      	str	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e25b      	b.n	8001422 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d075      	beq.n	8001062 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f76:	4ba3      	ldr	r3, [pc, #652]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f003 030c 	and.w	r3, r3, #12
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	d00c      	beq.n	8000f9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f82:	4ba0      	ldr	r3, [pc, #640]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f8a:	2b08      	cmp	r3, #8
 8000f8c:	d112      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f8e:	4b9d      	ldr	r3, [pc, #628]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f9a:	d10b      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9c:	4b99      	ldr	r3, [pc, #612]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d05b      	beq.n	8001060 <HAL_RCC_OscConfig+0x108>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d157      	bne.n	8001060 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e236      	b.n	8001422 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fbc:	d106      	bne.n	8000fcc <HAL_RCC_OscConfig+0x74>
 8000fbe:	4b91      	ldr	r3, [pc, #580]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a90      	ldr	r2, [pc, #576]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8000fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	e01d      	b.n	8001008 <HAL_RCC_OscConfig+0xb0>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fd4:	d10c      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x98>
 8000fd6:	4b8b      	ldr	r3, [pc, #556]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a8a      	ldr	r2, [pc, #552]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8000fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	4b88      	ldr	r3, [pc, #544]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a87      	ldr	r2, [pc, #540]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8000fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e00b      	b.n	8001008 <HAL_RCC_OscConfig+0xb0>
 8000ff0:	4b84      	ldr	r3, [pc, #528]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a83      	ldr	r2, [pc, #524]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8000ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	4b81      	ldr	r3, [pc, #516]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a80      	ldr	r2, [pc, #512]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8001002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d013      	beq.n	8001038 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001010:	f7ff fcca 	bl	80009a8 <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001018:	f7ff fcc6 	bl	80009a8 <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b64      	cmp	r3, #100	; 0x64
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e1fb      	b.n	8001422 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102a:	4b76      	ldr	r3, [pc, #472]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0f0      	beq.n	8001018 <HAL_RCC_OscConfig+0xc0>
 8001036:	e014      	b.n	8001062 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001038:	f7ff fcb6 	bl	80009a8 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001040:	f7ff fcb2 	bl	80009a8 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b64      	cmp	r3, #100	; 0x64
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e1e7      	b.n	8001422 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001052:	4b6c      	ldr	r3, [pc, #432]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f0      	bne.n	8001040 <HAL_RCC_OscConfig+0xe8>
 800105e:	e000      	b.n	8001062 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d063      	beq.n	8001136 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800106e:	4b65      	ldr	r3, [pc, #404]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 030c 	and.w	r3, r3, #12
 8001076:	2b00      	cmp	r3, #0
 8001078:	d00b      	beq.n	8001092 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800107a:	4b62      	ldr	r3, [pc, #392]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001082:	2b08      	cmp	r3, #8
 8001084:	d11c      	bne.n	80010c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001086:	4b5f      	ldr	r3, [pc, #380]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d116      	bne.n	80010c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001092:	4b5c      	ldr	r3, [pc, #368]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <HAL_RCC_OscConfig+0x152>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d001      	beq.n	80010aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e1bb      	b.n	8001422 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010aa:	4b56      	ldr	r3, [pc, #344]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	4952      	ldr	r1, [pc, #328]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010be:	e03a      	b.n	8001136 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d020      	beq.n	800110a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c8:	4b4f      	ldr	r3, [pc, #316]	; (8001208 <HAL_RCC_OscConfig+0x2b0>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ce:	f7ff fc6b 	bl	80009a8 <HAL_GetTick>
 80010d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d4:	e008      	b.n	80010e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d6:	f7ff fc67 	bl	80009a8 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d901      	bls.n	80010e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010e4:	2303      	movs	r3, #3
 80010e6:	e19c      	b.n	8001422 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e8:	4b46      	ldr	r3, [pc, #280]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0f0      	beq.n	80010d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f4:	4b43      	ldr	r3, [pc, #268]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	4940      	ldr	r1, [pc, #256]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 8001104:	4313      	orrs	r3, r2
 8001106:	600b      	str	r3, [r1, #0]
 8001108:	e015      	b.n	8001136 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800110a:	4b3f      	ldr	r3, [pc, #252]	; (8001208 <HAL_RCC_OscConfig+0x2b0>)
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001110:	f7ff fc4a 	bl	80009a8 <HAL_GetTick>
 8001114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001116:	e008      	b.n	800112a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001118:	f7ff fc46 	bl	80009a8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e17b      	b.n	8001422 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800112a:	4b36      	ldr	r3, [pc, #216]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f0      	bne.n	8001118 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	2b00      	cmp	r3, #0
 8001140:	d030      	beq.n	80011a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d016      	beq.n	8001178 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800114a:	4b30      	ldr	r3, [pc, #192]	; (800120c <HAL_RCC_OscConfig+0x2b4>)
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001150:	f7ff fc2a 	bl	80009a8 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001158:	f7ff fc26 	bl	80009a8 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e15b      	b.n	8001422 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 800116c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0x200>
 8001176:	e015      	b.n	80011a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001178:	4b24      	ldr	r3, [pc, #144]	; (800120c <HAL_RCC_OscConfig+0x2b4>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117e:	f7ff fc13 	bl	80009a8 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001186:	f7ff fc0f 	bl	80009a8 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e144      	b.n	8001422 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001198:	4b1a      	ldr	r3, [pc, #104]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 800119a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f0      	bne.n	8001186 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 80a0 	beq.w	80012f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10f      	bne.n	80011e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_RCC_OscConfig+0x2ac>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011de:	2301      	movs	r3, #1
 80011e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_RCC_OscConfig+0x2b8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d121      	bne.n	8001232 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_RCC_OscConfig+0x2b8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_RCC_OscConfig+0x2b8>)
 80011f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fbd5 	bl	80009a8 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001200:	e011      	b.n	8001226 <HAL_RCC_OscConfig+0x2ce>
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	42470000 	.word	0x42470000
 800120c:	42470e80 	.word	0x42470e80
 8001210:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001214:	f7ff fbc8 	bl	80009a8 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e0fd      	b.n	8001422 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001226:	4b81      	ldr	r3, [pc, #516]	; (800142c <HAL_RCC_OscConfig+0x4d4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f0      	beq.n	8001214 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d106      	bne.n	8001248 <HAL_RCC_OscConfig+0x2f0>
 800123a:	4b7d      	ldr	r3, [pc, #500]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 800123c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800123e:	4a7c      	ldr	r2, [pc, #496]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6713      	str	r3, [r2, #112]	; 0x70
 8001246:	e01c      	b.n	8001282 <HAL_RCC_OscConfig+0x32a>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2b05      	cmp	r3, #5
 800124e:	d10c      	bne.n	800126a <HAL_RCC_OscConfig+0x312>
 8001250:	4b77      	ldr	r3, [pc, #476]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 8001252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001254:	4a76      	ldr	r2, [pc, #472]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	6713      	str	r3, [r2, #112]	; 0x70
 800125c:	4b74      	ldr	r3, [pc, #464]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 800125e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001260:	4a73      	ldr	r2, [pc, #460]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6713      	str	r3, [r2, #112]	; 0x70
 8001268:	e00b      	b.n	8001282 <HAL_RCC_OscConfig+0x32a>
 800126a:	4b71      	ldr	r3, [pc, #452]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 800126c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800126e:	4a70      	ldr	r2, [pc, #448]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	6713      	str	r3, [r2, #112]	; 0x70
 8001276:	4b6e      	ldr	r3, [pc, #440]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 8001278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800127a:	4a6d      	ldr	r2, [pc, #436]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 800127c:	f023 0304 	bic.w	r3, r3, #4
 8001280:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d015      	beq.n	80012b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128a:	f7ff fb8d 	bl	80009a8 <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001290:	e00a      	b.n	80012a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001292:	f7ff fb89 	bl	80009a8 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e0bc      	b.n	8001422 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a8:	4b61      	ldr	r3, [pc, #388]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 80012aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d0ee      	beq.n	8001292 <HAL_RCC_OscConfig+0x33a>
 80012b4:	e014      	b.n	80012e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b6:	f7ff fb77 	bl	80009a8 <HAL_GetTick>
 80012ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012bc:	e00a      	b.n	80012d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012be:	f7ff fb73 	bl	80009a8 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e0a6      	b.n	8001422 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d4:	4b56      	ldr	r3, [pc, #344]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 80012d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1ee      	bne.n	80012be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d105      	bne.n	80012f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e6:	4b52      	ldr	r3, [pc, #328]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a51      	ldr	r2, [pc, #324]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 80012ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f000 8092 	beq.w	8001420 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012fc:	4b4c      	ldr	r3, [pc, #304]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	d05c      	beq.n	80013c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d141      	bne.n	8001394 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001310:	4b48      	ldr	r3, [pc, #288]	; (8001434 <HAL_RCC_OscConfig+0x4dc>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7ff fb47 	bl	80009a8 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff fb43 	bl	80009a8 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e078      	b.n	8001422 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001330:	4b3f      	ldr	r3, [pc, #252]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69da      	ldr	r2, [r3, #28]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a1b      	ldr	r3, [r3, #32]
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134a:	019b      	lsls	r3, r3, #6
 800134c:	431a      	orrs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001352:	085b      	lsrs	r3, r3, #1
 8001354:	3b01      	subs	r3, #1
 8001356:	041b      	lsls	r3, r3, #16
 8001358:	431a      	orrs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135e:	061b      	lsls	r3, r3, #24
 8001360:	4933      	ldr	r1, [pc, #204]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 8001362:	4313      	orrs	r3, r2
 8001364:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001366:	4b33      	ldr	r3, [pc, #204]	; (8001434 <HAL_RCC_OscConfig+0x4dc>)
 8001368:	2201      	movs	r2, #1
 800136a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fb1c 	bl	80009a8 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001374:	f7ff fb18 	bl	80009a8 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e04d      	b.n	8001422 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001386:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f0      	beq.n	8001374 <HAL_RCC_OscConfig+0x41c>
 8001392:	e045      	b.n	8001420 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001394:	4b27      	ldr	r3, [pc, #156]	; (8001434 <HAL_RCC_OscConfig+0x4dc>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139a:	f7ff fb05 	bl	80009a8 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a2:	f7ff fb01 	bl	80009a8 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e036      	b.n	8001422 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1f0      	bne.n	80013a2 <HAL_RCC_OscConfig+0x44a>
 80013c0:	e02e      	b.n	8001420 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d101      	bne.n	80013ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e029      	b.n	8001422 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <HAL_RCC_OscConfig+0x4d8>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d11c      	bne.n	800141c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d115      	bne.n	800141c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013f0:	68fa      	ldr	r2, [r7, #12]
 80013f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013f6:	4013      	ands	r3, r2
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d10d      	bne.n	800141c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800140a:	429a      	cmp	r2, r3
 800140c:	d106      	bne.n	800141c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001418:	429a      	cmp	r2, r3
 800141a:	d001      	beq.n	8001420 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40007000 	.word	0x40007000
 8001430:	40023800 	.word	0x40023800
 8001434:	42470060 	.word	0x42470060

08001438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0cc      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800144c:	4b68      	ldr	r3, [pc, #416]	; (80015f0 <HAL_RCC_ClockConfig+0x1b8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 030f 	and.w	r3, r3, #15
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	d90c      	bls.n	8001474 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145a:	4b65      	ldr	r3, [pc, #404]	; (80015f0 <HAL_RCC_ClockConfig+0x1b8>)
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001462:	4b63      	ldr	r3, [pc, #396]	; (80015f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d001      	beq.n	8001474 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e0b8      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d020      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800148c:	4b59      	ldr	r3, [pc, #356]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	4a58      	ldr	r2, [pc, #352]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001496:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a4:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	4a52      	ldr	r2, [pc, #328]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b0:	4b50      	ldr	r3, [pc, #320]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	494d      	ldr	r1, [pc, #308]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d044      	beq.n	8001558 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d107      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	4b47      	ldr	r3, [pc, #284]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d119      	bne.n	8001516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e07f      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d003      	beq.n	80014f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d107      	bne.n	8001506 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014f6:	4b3f      	ldr	r3, [pc, #252]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d109      	bne.n	8001516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e06f      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001506:	4b3b      	ldr	r3, [pc, #236]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e067      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001516:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f023 0203 	bic.w	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4934      	ldr	r1, [pc, #208]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	4313      	orrs	r3, r2
 8001526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001528:	f7ff fa3e 	bl	80009a8 <HAL_GetTick>
 800152c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152e:	e00a      	b.n	8001546 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001530:	f7ff fa3a 	bl	80009a8 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f241 3288 	movw	r2, #5000	; 0x1388
 800153e:	4293      	cmp	r3, r2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e04f      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001546:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 020c 	and.w	r2, r3, #12
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	429a      	cmp	r2, r3
 8001556:	d1eb      	bne.n	8001530 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001558:	4b25      	ldr	r3, [pc, #148]	; (80015f0 <HAL_RCC_ClockConfig+0x1b8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d20c      	bcs.n	8001580 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 030f 	and.w	r3, r3, #15
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e032      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4916      	ldr	r1, [pc, #88]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	4313      	orrs	r3, r2
 800159c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d009      	beq.n	80015be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	490e      	ldr	r1, [pc, #56]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015be:	f000 f821 	bl	8001604 <HAL_RCC_GetSysClockFreq>
 80015c2:	4601      	mov	r1, r0
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	5cd3      	ldrb	r3, [r2, r3]
 80015d2:	fa21 f303 	lsr.w	r3, r1, r3
 80015d6:	4a09      	ldr	r2, [pc, #36]	; (80015fc <HAL_RCC_ClockConfig+0x1c4>)
 80015d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_RCC_ClockConfig+0x1c8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff f99e 	bl	8000920 <HAL_InitTick>

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023c00 	.word	0x40023c00
 80015f4:	40023800 	.word	0x40023800
 80015f8:	08002ca0 	.word	0x08002ca0
 80015fc:	20000000 	.word	0x20000000
 8001600:	20000004 	.word	0x20000004

08001604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800161a:	4b50      	ldr	r3, [pc, #320]	; (800175c <HAL_RCC_GetSysClockFreq+0x158>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b04      	cmp	r3, #4
 8001624:	d007      	beq.n	8001636 <HAL_RCC_GetSysClockFreq+0x32>
 8001626:	2b08      	cmp	r3, #8
 8001628:	d008      	beq.n	800163c <HAL_RCC_GetSysClockFreq+0x38>
 800162a:	2b00      	cmp	r3, #0
 800162c:	f040 808d 	bne.w	800174a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001630:	4b4b      	ldr	r3, [pc, #300]	; (8001760 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001632:	60bb      	str	r3, [r7, #8]
       break;
 8001634:	e08c      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001636:	4b4b      	ldr	r3, [pc, #300]	; (8001764 <HAL_RCC_GetSysClockFreq+0x160>)
 8001638:	60bb      	str	r3, [r7, #8]
      break;
 800163a:	e089      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800163c:	4b47      	ldr	r3, [pc, #284]	; (800175c <HAL_RCC_GetSysClockFreq+0x158>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001644:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001646:	4b45      	ldr	r3, [pc, #276]	; (800175c <HAL_RCC_GetSysClockFreq+0x158>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d023      	beq.n	800169a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001652:	4b42      	ldr	r3, [pc, #264]	; (800175c <HAL_RCC_GetSysClockFreq+0x158>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	099b      	lsrs	r3, r3, #6
 8001658:	f04f 0400 	mov.w	r4, #0
 800165c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	ea03 0501 	and.w	r5, r3, r1
 8001668:	ea04 0602 	and.w	r6, r4, r2
 800166c:	4a3d      	ldr	r2, [pc, #244]	; (8001764 <HAL_RCC_GetSysClockFreq+0x160>)
 800166e:	fb02 f106 	mul.w	r1, r2, r6
 8001672:	2200      	movs	r2, #0
 8001674:	fb02 f205 	mul.w	r2, r2, r5
 8001678:	440a      	add	r2, r1
 800167a:	493a      	ldr	r1, [pc, #232]	; (8001764 <HAL_RCC_GetSysClockFreq+0x160>)
 800167c:	fba5 0101 	umull	r0, r1, r5, r1
 8001680:	1853      	adds	r3, r2, r1
 8001682:	4619      	mov	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f04f 0400 	mov.w	r4, #0
 800168a:	461a      	mov	r2, r3
 800168c:	4623      	mov	r3, r4
 800168e:	f7fe fd9f 	bl	80001d0 <__aeabi_uldivmod>
 8001692:	4603      	mov	r3, r0
 8001694:	460c      	mov	r4, r1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	e049      	b.n	800172e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800169a:	4b30      	ldr	r3, [pc, #192]	; (800175c <HAL_RCC_GetSysClockFreq+0x158>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	099b      	lsrs	r3, r3, #6
 80016a0:	f04f 0400 	mov.w	r4, #0
 80016a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	ea03 0501 	and.w	r5, r3, r1
 80016b0:	ea04 0602 	and.w	r6, r4, r2
 80016b4:	4629      	mov	r1, r5
 80016b6:	4632      	mov	r2, r6
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	f04f 0400 	mov.w	r4, #0
 80016c0:	0154      	lsls	r4, r2, #5
 80016c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016c6:	014b      	lsls	r3, r1, #5
 80016c8:	4619      	mov	r1, r3
 80016ca:	4622      	mov	r2, r4
 80016cc:	1b49      	subs	r1, r1, r5
 80016ce:	eb62 0206 	sbc.w	r2, r2, r6
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	f04f 0400 	mov.w	r4, #0
 80016da:	0194      	lsls	r4, r2, #6
 80016dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016e0:	018b      	lsls	r3, r1, #6
 80016e2:	1a5b      	subs	r3, r3, r1
 80016e4:	eb64 0402 	sbc.w	r4, r4, r2
 80016e8:	f04f 0100 	mov.w	r1, #0
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	00e2      	lsls	r2, r4, #3
 80016f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016f6:	00d9      	lsls	r1, r3, #3
 80016f8:	460b      	mov	r3, r1
 80016fa:	4614      	mov	r4, r2
 80016fc:	195b      	adds	r3, r3, r5
 80016fe:	eb44 0406 	adc.w	r4, r4, r6
 8001702:	f04f 0100 	mov.w	r1, #0
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	02a2      	lsls	r2, r4, #10
 800170c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001710:	0299      	lsls	r1, r3, #10
 8001712:	460b      	mov	r3, r1
 8001714:	4614      	mov	r4, r2
 8001716:	4618      	mov	r0, r3
 8001718:	4621      	mov	r1, r4
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f04f 0400 	mov.w	r4, #0
 8001720:	461a      	mov	r2, r3
 8001722:	4623      	mov	r3, r4
 8001724:	f7fe fd54 	bl	80001d0 <__aeabi_uldivmod>
 8001728:	4603      	mov	r3, r0
 800172a:	460c      	mov	r4, r1
 800172c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_RCC_GetSysClockFreq+0x158>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	0c1b      	lsrs	r3, r3, #16
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	3301      	adds	r3, #1
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	60bb      	str	r3, [r7, #8]
      break;
 8001748:	e002      	b.n	8001750 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_RCC_GetSysClockFreq+0x15c>)
 800174c:	60bb      	str	r3, [r7, #8]
      break;
 800174e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001750:	68bb      	ldr	r3, [r7, #8]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	00f42400 	.word	0x00f42400
 8001764:	017d7840 	.word	0x017d7840

08001768 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800177a:	2b84      	cmp	r3, #132	; 0x84
 800177c:	d005      	beq.n	800178a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800177e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4413      	add	r3, r2
 8001786:	3303      	adds	r3, #3
 8001788:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800179c:	f000 fada 	bl	8001d54 <vTaskStartScheduler>
  
  return osOK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80017a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a8:	b089      	sub	sp, #36	; 0x24
 80017aa:	af04      	add	r7, sp, #16
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d020      	beq.n	80017fa <osThreadCreate+0x54>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d01c      	beq.n	80017fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685c      	ldr	r4, [r3, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681d      	ldr	r5, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691e      	ldr	r6, [r3, #16]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff ffc8 	bl	8001768 <makeFreeRtosPriority>
 80017d8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017e2:	9202      	str	r2, [sp, #8]
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	9100      	str	r1, [sp, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	4632      	mov	r2, r6
 80017ec:	4629      	mov	r1, r5
 80017ee:	4620      	mov	r0, r4
 80017f0:	f000 f8ed 	bl	80019ce <xTaskCreateStatic>
 80017f4:	4603      	mov	r3, r0
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	e01c      	b.n	8001834 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685c      	ldr	r4, [r3, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001806:	b29e      	uxth	r6, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff ffaa 	bl	8001768 <makeFreeRtosPriority>
 8001814:	4602      	mov	r2, r0
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	9200      	str	r2, [sp, #0]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	4632      	mov	r2, r6
 8001822:	4629      	mov	r1, r5
 8001824:	4620      	mov	r0, r4
 8001826:	f000 f92c 	bl	8001a82 <xTaskCreate>
 800182a:	4603      	mov	r3, r0
 800182c:	2b01      	cmp	r3, #1
 800182e:	d001      	beq.n	8001834 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001830:	2300      	movs	r3, #0
 8001832:	e000      	b.n	8001836 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001834:	68fb      	ldr	r3, [r7, #12]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800183e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b084      	sub	sp, #16
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <osDelay+0x16>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	e000      	b.n	8001856 <osDelay+0x18>
 8001854:	2301      	movs	r3, #1
 8001856:	4618      	mov	r0, r3
 8001858:	f000 fa48 	bl	8001cec <vTaskDelay>
  
  return osOK;
 800185c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f103 0208 	add.w	r2, r3, #8
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f04f 32ff 	mov.w	r2, #4294967295
 800187e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f103 0208 	add.w	r2, r3, #8
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f103 0208 	add.w	r2, r3, #8
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	1c5a      	adds	r2, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	601a      	str	r2, [r3, #0]
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191e:	d103      	bne.n	8001928 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e00c      	b.n	8001942 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3308      	adds	r3, #8
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	e002      	b.n	8001936 <vListInsert+0x2e>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	429a      	cmp	r2, r3
 8001940:	d2f6      	bcs.n	8001930 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	601a      	str	r2, [r3, #0]
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800197a:	b480      	push	{r7}
 800197c:	b085      	sub	sp, #20
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6892      	ldr	r2, [r2, #8]
 8001990:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6852      	ldr	r2, [r2, #4]
 800199a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d103      	bne.n	80019ae <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	1e5a      	subs	r2, r3, #1
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b08e      	sub	sp, #56	; 0x38
 80019d2:	af04      	add	r7, sp, #16
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80019dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e6:	f383 8811 	msr	BASEPRI, r3
 80019ea:	f3bf 8f6f 	isb	sy
 80019ee:	f3bf 8f4f 	dsb	sy
 80019f2:	623b      	str	r3, [r7, #32]
 80019f4:	e7fe      	b.n	80019f4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80019f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d109      	bne.n	8001a10 <xTaskCreateStatic+0x42>
 80019fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a00:	f383 8811 	msr	BASEPRI, r3
 8001a04:	f3bf 8f6f 	isb	sy
 8001a08:	f3bf 8f4f 	dsb	sy
 8001a0c:	61fb      	str	r3, [r7, #28]
 8001a0e:	e7fe      	b.n	8001a0e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001a10:	2354      	movs	r3, #84	; 0x54
 8001a12:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	2b54      	cmp	r3, #84	; 0x54
 8001a18:	d009      	beq.n	8001a2e <xTaskCreateStatic+0x60>
 8001a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a1e:	f383 8811 	msr	BASEPRI, r3
 8001a22:	f3bf 8f6f 	isb	sy
 8001a26:	f3bf 8f4f 	dsb	sy
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	e7fe      	b.n	8001a2c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001a2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d01e      	beq.n	8001a74 <xTaskCreateStatic+0xa6>
 8001a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d01b      	beq.n	8001a74 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	2202      	movs	r2, #2
 8001a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001a4e:	2300      	movs	r3, #0
 8001a50:	9303      	str	r3, [sp, #12]
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	9302      	str	r3, [sp, #8]
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	68f8      	ldr	r0, [r7, #12]
 8001a68:	f000 f850 	bl	8001b0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001a6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a6e:	f000 f8d3 	bl	8001c18 <prvAddNewTaskToReadyList>
 8001a72:	e001      	b.n	8001a78 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001a78:	697b      	ldr	r3, [r7, #20]
	}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3728      	adds	r7, #40	; 0x28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b08c      	sub	sp, #48	; 0x30
 8001a86:	af04      	add	r7, sp, #16
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 fecc 	bl	8002834 <pvPortMalloc>
 8001a9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00e      	beq.n	8001ac2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001aa4:	2054      	movs	r0, #84	; 0x54
 8001aa6:	f000 fec5 	bl	8002834 <pvPortMalloc>
 8001aaa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ab8:	e005      	b.n	8001ac6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001aba:	6978      	ldr	r0, [r7, #20]
 8001abc:	f000 ff7c 	bl	80029b8 <vPortFree>
 8001ac0:	e001      	b.n	8001ac6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d017      	beq.n	8001afc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001ad4:	88fa      	ldrh	r2, [r7, #6]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	9303      	str	r3, [sp, #12]
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	9302      	str	r3, [sp, #8]
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68b9      	ldr	r1, [r7, #8]
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f000 f80e 	bl	8001b0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001af0:	69f8      	ldr	r0, [r7, #28]
 8001af2:	f000 f891 	bl	8001c18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001af6:	2301      	movs	r3, #1
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	e002      	b.n	8001b02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001afc:	f04f 33ff 	mov.w	r3, #4294967295
 8001b00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001b02:	69bb      	ldr	r3, [r7, #24]
	}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3720      	adds	r7, #32
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b24:	3b01      	subs	r3, #1
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	f023 0307 	bic.w	r3, r3, #7
 8001b32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d009      	beq.n	8001b52 <prvInitialiseNewTask+0x46>
 8001b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b42:	f383 8811 	msr	BASEPRI, r3
 8001b46:	f3bf 8f6f 	isb	sy
 8001b4a:	f3bf 8f4f 	dsb	sy
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	e7fe      	b.n	8001b50 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d01f      	beq.n	8001b98 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61fb      	str	r3, [r7, #28]
 8001b5c:	e012      	b.n	8001b84 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	4413      	add	r3, r2
 8001b64:	7819      	ldrb	r1, [r3, #0]
 8001b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3334      	adds	r3, #52	; 0x34
 8001b6e:	460a      	mov	r2, r1
 8001b70:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	4413      	add	r3, r2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3301      	adds	r3, #1
 8001b82:	61fb      	str	r3, [r7, #28]
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	2b0f      	cmp	r3, #15
 8001b88:	d9e9      	bls.n	8001b5e <prvInitialiseNewTask+0x52>
 8001b8a:	e000      	b.n	8001b8e <prvInitialiseNewTask+0x82>
			{
				break;
 8001b8c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b96:	e003      	b.n	8001ba0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d901      	bls.n	8001baa <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001ba6:	2306      	movs	r3, #6
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bb4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb8:	2200      	movs	r2, #0
 8001bba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fe70 	bl	80018a6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc8:	3318      	adds	r3, #24
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fe6b 	bl	80018a6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bd4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd8:	f1c3 0207 	rsb	r2, r3, #7
 8001bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bde:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001be4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be8:	2200      	movs	r2, #0
 8001bea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	68f9      	ldr	r1, [r7, #12]
 8001bf8:	69b8      	ldr	r0, [r7, #24]
 8001bfa:	f000 fc1b 	bl	8002434 <pxPortInitialiseStack>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c02:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c0e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001c10:	bf00      	nop
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001c20:	f000 fd2c 	bl	800267c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <prvAddNewTaskToReadyList+0xb8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	4a29      	ldr	r2, [pc, #164]	; (8001cd0 <prvAddNewTaskToReadyList+0xb8>)
 8001c2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001c2e:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <prvAddNewTaskToReadyList+0xbc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001c36:	4a27      	ldr	r2, [pc, #156]	; (8001cd4 <prvAddNewTaskToReadyList+0xbc>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c3c:	4b24      	ldr	r3, [pc, #144]	; (8001cd0 <prvAddNewTaskToReadyList+0xb8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d110      	bne.n	8001c66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001c44:	f000 fab8 	bl	80021b8 <prvInitialiseTaskLists>
 8001c48:	e00d      	b.n	8001c66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001c4a:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <prvAddNewTaskToReadyList+0xc0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <prvAddNewTaskToReadyList+0xbc>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d802      	bhi.n	8001c66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001c60:	4a1c      	ldr	r2, [pc, #112]	; (8001cd4 <prvAddNewTaskToReadyList+0xbc>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001c66:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <prvAddNewTaskToReadyList+0xc4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <prvAddNewTaskToReadyList+0xc4>)
 8001c6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	2201      	movs	r2, #1
 8001c76:	409a      	lsls	r2, r3
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <prvAddNewTaskToReadyList+0xc8>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	4a18      	ldr	r2, [pc, #96]	; (8001ce0 <prvAddNewTaskToReadyList+0xc8>)
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4a15      	ldr	r2, [pc, #84]	; (8001ce4 <prvAddNewTaskToReadyList+0xcc>)
 8001c90:	441a      	add	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3304      	adds	r3, #4
 8001c96:	4619      	mov	r1, r3
 8001c98:	4610      	mov	r0, r2
 8001c9a:	f7ff fe11 	bl	80018c0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001c9e:	f000 fd1b 	bl	80026d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001ca2:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <prvAddNewTaskToReadyList+0xc0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00e      	beq.n	8001cc8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <prvAddNewTaskToReadyList+0xbc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d207      	bcs.n	8001cc8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <prvAddNewTaskToReadyList+0xd0>)
 8001cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	f3bf 8f4f 	dsb	sy
 8001cc4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001cc8:	bf00      	nop
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000380 	.word	0x20000380
 8001cd4:	20000280 	.word	0x20000280
 8001cd8:	2000038c 	.word	0x2000038c
 8001cdc:	2000039c 	.word	0x2000039c
 8001ce0:	20000388 	.word	0x20000388
 8001ce4:	20000284 	.word	0x20000284
 8001ce8:	e000ed04 	.word	0xe000ed04

08001cec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d016      	beq.n	8001d2c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001cfe:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <vTaskDelay+0x60>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d009      	beq.n	8001d1a <vTaskDelay+0x2e>
 8001d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d0a:	f383 8811 	msr	BASEPRI, r3
 8001d0e:	f3bf 8f6f 	isb	sy
 8001d12:	f3bf 8f4f 	dsb	sy
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	e7fe      	b.n	8001d18 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001d1a:	f000 f879 	bl	8001e10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001d1e:	2100      	movs	r1, #0
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 fb21 	bl	8002368 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001d26:	f000 f881 	bl	8001e2c <xTaskResumeAll>
 8001d2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d107      	bne.n	8001d42 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <vTaskDelay+0x64>)
 8001d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	f3bf 8f4f 	dsb	sy
 8001d3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200003a8 	.word	0x200003a8
 8001d50:	e000ed04 	.word	0xe000ed04

08001d54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	; 0x28
 8001d58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001d62:	463a      	mov	r2, r7
 8001d64:	1d39      	adds	r1, r7, #4
 8001d66:	f107 0308 	add.w	r3, r7, #8
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fbb0 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001d70:	6839      	ldr	r1, [r7, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	9202      	str	r2, [sp, #8]
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	460a      	mov	r2, r1
 8001d82:	491d      	ldr	r1, [pc, #116]	; (8001df8 <vTaskStartScheduler+0xa4>)
 8001d84:	481d      	ldr	r0, [pc, #116]	; (8001dfc <vTaskStartScheduler+0xa8>)
 8001d86:	f7ff fe22 	bl	80019ce <xTaskCreateStatic>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <vTaskStartScheduler+0xac>)
 8001d8e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <vTaskStartScheduler+0xac>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e001      	b.n	8001da2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d115      	bne.n	8001dd4 <vTaskStartScheduler+0x80>
 8001da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dac:	f383 8811 	msr	BASEPRI, r3
 8001db0:	f3bf 8f6f 	isb	sy
 8001db4:	f3bf 8f4f 	dsb	sy
 8001db8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <vTaskStartScheduler+0xb0>)
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <vTaskStartScheduler+0xb4>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <vTaskStartScheduler+0xb8>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001dce:	f000 fbb7 	bl	8002540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001dd2:	e00d      	b.n	8001df0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dda:	d109      	bne.n	8001df0 <vTaskStartScheduler+0x9c>
 8001ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de0:	f383 8811 	msr	BASEPRI, r3
 8001de4:	f3bf 8f6f 	isb	sy
 8001de8:	f3bf 8f4f 	dsb	sy
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	e7fe      	b.n	8001dee <vTaskStartScheduler+0x9a>
}
 8001df0:	bf00      	nop
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	08002c98 	.word	0x08002c98
 8001dfc:	08002189 	.word	0x08002189
 8001e00:	200003a4 	.word	0x200003a4
 8001e04:	200003a0 	.word	0x200003a0
 8001e08:	2000038c 	.word	0x2000038c
 8001e0c:	20000384 	.word	0x20000384

08001e10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <vTaskSuspendAll+0x18>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	4a03      	ldr	r2, [pc, #12]	; (8001e28 <vTaskSuspendAll+0x18>)
 8001e1c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	200003a8 	.word	0x200003a8

08001e2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <xTaskResumeAll+0x114>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d109      	bne.n	8001e56 <xTaskResumeAll+0x2a>
 8001e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e46:	f383 8811 	msr	BASEPRI, r3
 8001e4a:	f3bf 8f6f 	isb	sy
 8001e4e:	f3bf 8f4f 	dsb	sy
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	e7fe      	b.n	8001e54 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001e56:	f000 fc11 	bl	800267c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001e5a:	4b39      	ldr	r3, [pc, #228]	; (8001f40 <xTaskResumeAll+0x114>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	4a37      	ldr	r2, [pc, #220]	; (8001f40 <xTaskResumeAll+0x114>)
 8001e62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e64:	4b36      	ldr	r3, [pc, #216]	; (8001f40 <xTaskResumeAll+0x114>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d161      	bne.n	8001f30 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e6c:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <xTaskResumeAll+0x118>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d05d      	beq.n	8001f30 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e74:	e02e      	b.n	8001ed4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e76:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <xTaskResumeAll+0x11c>)
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3318      	adds	r3, #24
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fd79 	bl	800197a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fd74 	bl	800197a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e96:	2201      	movs	r2, #1
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <xTaskResumeAll+0x120>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	4a2a      	ldr	r2, [pc, #168]	; (8001f4c <xTaskResumeAll+0x120>)
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4a27      	ldr	r2, [pc, #156]	; (8001f50 <xTaskResumeAll+0x124>)
 8001eb2:	441a      	add	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4610      	mov	r0, r2
 8001ebc:	f7ff fd00 	bl	80018c0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec4:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <xTaskResumeAll+0x128>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d302      	bcc.n	8001ed4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001ece:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <xTaskResumeAll+0x12c>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ed4:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <xTaskResumeAll+0x11c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1cc      	bne.n	8001e76 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001ee2:	f000 fa03 	bl	80022ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <xTaskResumeAll+0x130>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d010      	beq.n	8001f14 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001ef2:	f000 f837 	bl	8001f64 <xTaskIncrementTick>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d002      	beq.n	8001f02 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <xTaskResumeAll+0x12c>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f1      	bne.n	8001ef2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001f0e:	4b13      	ldr	r3, [pc, #76]	; (8001f5c <xTaskResumeAll+0x130>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001f14:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <xTaskResumeAll+0x12c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d009      	beq.n	8001f30 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <xTaskResumeAll+0x134>)
 8001f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	f3bf 8f4f 	dsb	sy
 8001f2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001f30:	f000 fbd2 	bl	80026d8 <vPortExitCritical>

	return xAlreadyYielded;
 8001f34:	68bb      	ldr	r3, [r7, #8]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200003a8 	.word	0x200003a8
 8001f44:	20000380 	.word	0x20000380
 8001f48:	20000340 	.word	0x20000340
 8001f4c:	20000388 	.word	0x20000388
 8001f50:	20000284 	.word	0x20000284
 8001f54:	20000280 	.word	0x20000280
 8001f58:	20000394 	.word	0x20000394
 8001f5c:	20000390 	.word	0x20000390
 8001f60:	e000ed04 	.word	0xe000ed04

08001f64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f6e:	4b4e      	ldr	r3, [pc, #312]	; (80020a8 <xTaskIncrementTick+0x144>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f040 8087 	bne.w	8002086 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001f78:	4b4c      	ldr	r3, [pc, #304]	; (80020ac <xTaskIncrementTick+0x148>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001f80:	4a4a      	ldr	r2, [pc, #296]	; (80020ac <xTaskIncrementTick+0x148>)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d11f      	bne.n	8001fcc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001f8c:	4b48      	ldr	r3, [pc, #288]	; (80020b0 <xTaskIncrementTick+0x14c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d009      	beq.n	8001faa <xTaskIncrementTick+0x46>
 8001f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f9a:	f383 8811 	msr	BASEPRI, r3
 8001f9e:	f3bf 8f6f 	isb	sy
 8001fa2:	f3bf 8f4f 	dsb	sy
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	e7fe      	b.n	8001fa8 <xTaskIncrementTick+0x44>
 8001faa:	4b41      	ldr	r3, [pc, #260]	; (80020b0 <xTaskIncrementTick+0x14c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	4b40      	ldr	r3, [pc, #256]	; (80020b4 <xTaskIncrementTick+0x150>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a3e      	ldr	r2, [pc, #248]	; (80020b0 <xTaskIncrementTick+0x14c>)
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4a3e      	ldr	r2, [pc, #248]	; (80020b4 <xTaskIncrementTick+0x150>)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	4b3e      	ldr	r3, [pc, #248]	; (80020b8 <xTaskIncrementTick+0x154>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	4a3c      	ldr	r2, [pc, #240]	; (80020b8 <xTaskIncrementTick+0x154>)
 8001fc6:	6013      	str	r3, [r2, #0]
 8001fc8:	f000 f990 	bl	80022ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001fcc:	4b3b      	ldr	r3, [pc, #236]	; (80020bc <xTaskIncrementTick+0x158>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d348      	bcc.n	8002068 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fd6:	4b36      	ldr	r3, [pc, #216]	; (80020b0 <xTaskIncrementTick+0x14c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d104      	bne.n	8001fea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fe0:	4b36      	ldr	r3, [pc, #216]	; (80020bc <xTaskIncrementTick+0x158>)
 8001fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe6:	601a      	str	r2, [r3, #0]
					break;
 8001fe8:	e03e      	b.n	8002068 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001fea:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <xTaskIncrementTick+0x14c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d203      	bcs.n	800200a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002002:	4a2e      	ldr	r2, [pc, #184]	; (80020bc <xTaskIncrementTick+0x158>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002008:	e02e      	b.n	8002068 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	3304      	adds	r3, #4
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fcb3 	bl	800197a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	2b00      	cmp	r3, #0
 800201a:	d004      	beq.n	8002026 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	3318      	adds	r3, #24
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fcaa 	bl	800197a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202a:	2201      	movs	r2, #1
 800202c:	409a      	lsls	r2, r3
 800202e:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <xTaskIncrementTick+0x15c>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	4a22      	ldr	r2, [pc, #136]	; (80020c0 <xTaskIncrementTick+0x15c>)
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4a1f      	ldr	r2, [pc, #124]	; (80020c4 <xTaskIncrementTick+0x160>)
 8002046:	441a      	add	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	3304      	adds	r3, #4
 800204c:	4619      	mov	r1, r3
 800204e:	4610      	mov	r0, r2
 8002050:	f7ff fc36 	bl	80018c0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <xTaskIncrementTick+0x164>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	429a      	cmp	r2, r3
 8002060:	d3b9      	bcc.n	8001fd6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002062:	2301      	movs	r3, #1
 8002064:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002066:	e7b6      	b.n	8001fd6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002068:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <xTaskIncrementTick+0x164>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206e:	4915      	ldr	r1, [pc, #84]	; (80020c4 <xTaskIncrementTick+0x160>)
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d907      	bls.n	8002090 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002080:	2301      	movs	r3, #1
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	e004      	b.n	8002090 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002086:	4b11      	ldr	r3, [pc, #68]	; (80020cc <xTaskIncrementTick+0x168>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	4a0f      	ldr	r2, [pc, #60]	; (80020cc <xTaskIncrementTick+0x168>)
 800208e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <xTaskIncrementTick+0x16c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8002098:	2301      	movs	r3, #1
 800209a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800209c:	697b      	ldr	r3, [r7, #20]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200003a8 	.word	0x200003a8
 80020ac:	20000384 	.word	0x20000384
 80020b0:	20000338 	.word	0x20000338
 80020b4:	2000033c 	.word	0x2000033c
 80020b8:	20000398 	.word	0x20000398
 80020bc:	200003a0 	.word	0x200003a0
 80020c0:	20000388 	.word	0x20000388
 80020c4:	20000284 	.word	0x20000284
 80020c8:	20000280 	.word	0x20000280
 80020cc:	20000390 	.word	0x20000390
 80020d0:	20000394 	.word	0x20000394

080020d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020da:	4b26      	ldr	r3, [pc, #152]	; (8002174 <vTaskSwitchContext+0xa0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80020e2:	4b25      	ldr	r3, [pc, #148]	; (8002178 <vTaskSwitchContext+0xa4>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80020e8:	e03e      	b.n	8002168 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80020ea:	4b23      	ldr	r3, [pc, #140]	; (8002178 <vTaskSwitchContext+0xa4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80020f0:	4b22      	ldr	r3, [pc, #136]	; (800217c <vTaskSwitchContext+0xa8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80020fe:	7afb      	ldrb	r3, [r7, #11]
 8002100:	f1c3 031f 	rsb	r3, r3, #31
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	491e      	ldr	r1, [pc, #120]	; (8002180 <vTaskSwitchContext+0xac>)
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d109      	bne.n	800212e <vTaskSwitchContext+0x5a>
	__asm volatile
 800211a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211e:	f383 8811 	msr	BASEPRI, r3
 8002122:	f3bf 8f6f 	isb	sy
 8002126:	f3bf 8f4f 	dsb	sy
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	e7fe      	b.n	800212c <vTaskSwitchContext+0x58>
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4a11      	ldr	r2, [pc, #68]	; (8002180 <vTaskSwitchContext+0xac>)
 800213a:	4413      	add	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	605a      	str	r2, [r3, #4]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	3308      	adds	r3, #8
 8002150:	429a      	cmp	r2, r3
 8002152:	d104      	bne.n	800215e <vTaskSwitchContext+0x8a>
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a07      	ldr	r2, [pc, #28]	; (8002184 <vTaskSwitchContext+0xb0>)
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	bf00      	nop
 800216a:	371c      	adds	r7, #28
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	200003a8 	.word	0x200003a8
 8002178:	20000394 	.word	0x20000394
 800217c:	20000388 	.word	0x20000388
 8002180:	20000284 	.word	0x20000284
 8002184:	20000280 	.word	0x20000280

08002188 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002190:	f000 f852 	bl	8002238 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <prvIdleTask+0x28>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d9f9      	bls.n	8002190 <prvIdleTask+0x8>
			{
				taskYIELD();
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <prvIdleTask+0x2c>)
 800219e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	f3bf 8f4f 	dsb	sy
 80021a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80021ac:	e7f0      	b.n	8002190 <prvIdleTask+0x8>
 80021ae:	bf00      	nop
 80021b0:	20000284 	.word	0x20000284
 80021b4:	e000ed04 	.word	0xe000ed04

080021b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	e00c      	b.n	80021de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <prvInitialiseTaskLists+0x60>)
 80021d0:	4413      	add	r3, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fb47 	bl	8001866 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3301      	adds	r3, #1
 80021dc:	607b      	str	r3, [r7, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b06      	cmp	r3, #6
 80021e2:	d9ef      	bls.n	80021c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80021e4:	480d      	ldr	r0, [pc, #52]	; (800221c <prvInitialiseTaskLists+0x64>)
 80021e6:	f7ff fb3e 	bl	8001866 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80021ea:	480d      	ldr	r0, [pc, #52]	; (8002220 <prvInitialiseTaskLists+0x68>)
 80021ec:	f7ff fb3b 	bl	8001866 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80021f0:	480c      	ldr	r0, [pc, #48]	; (8002224 <prvInitialiseTaskLists+0x6c>)
 80021f2:	f7ff fb38 	bl	8001866 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80021f6:	480c      	ldr	r0, [pc, #48]	; (8002228 <prvInitialiseTaskLists+0x70>)
 80021f8:	f7ff fb35 	bl	8001866 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80021fc:	480b      	ldr	r0, [pc, #44]	; (800222c <prvInitialiseTaskLists+0x74>)
 80021fe:	f7ff fb32 	bl	8001866 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <prvInitialiseTaskLists+0x78>)
 8002204:	4a05      	ldr	r2, [pc, #20]	; (800221c <prvInitialiseTaskLists+0x64>)
 8002206:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002208:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <prvInitialiseTaskLists+0x7c>)
 800220a:	4a05      	ldr	r2, [pc, #20]	; (8002220 <prvInitialiseTaskLists+0x68>)
 800220c:	601a      	str	r2, [r3, #0]
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000284 	.word	0x20000284
 800221c:	20000310 	.word	0x20000310
 8002220:	20000324 	.word	0x20000324
 8002224:	20000340 	.word	0x20000340
 8002228:	20000354 	.word	0x20000354
 800222c:	2000036c 	.word	0x2000036c
 8002230:	20000338 	.word	0x20000338
 8002234:	2000033c 	.word	0x2000033c

08002238 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800223e:	e019      	b.n	8002274 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002240:	f000 fa1c 	bl	800267c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <prvCheckTasksWaitingTermination+0x4c>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3304      	adds	r3, #4
 8002250:	4618      	mov	r0, r3
 8002252:	f7ff fb92 	bl	800197a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <prvCheckTasksWaitingTermination+0x50>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	3b01      	subs	r3, #1
 800225c:	4a0a      	ldr	r2, [pc, #40]	; (8002288 <prvCheckTasksWaitingTermination+0x50>)
 800225e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <prvCheckTasksWaitingTermination+0x54>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3b01      	subs	r3, #1
 8002266:	4a09      	ldr	r2, [pc, #36]	; (800228c <prvCheckTasksWaitingTermination+0x54>)
 8002268:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800226a:	f000 fa35 	bl	80026d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f80e 	bl	8002290 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <prvCheckTasksWaitingTermination+0x54>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1e1      	bne.n	8002240 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000354 	.word	0x20000354
 8002288:	20000380 	.word	0x20000380
 800228c:	20000368 	.word	0x20000368

08002290 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d108      	bne.n	80022b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fb86 	bl	80029b8 <vPortFree>
				vPortFree( pxTCB );
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fb83 	bl	80029b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80022b2:	e017      	b.n	80022e4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d103      	bne.n	80022c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 fb7a 	bl	80029b8 <vPortFree>
	}
 80022c4:	e00e      	b.n	80022e4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d009      	beq.n	80022e4 <prvDeleteTCB+0x54>
 80022d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d4:	f383 8811 	msr	BASEPRI, r3
 80022d8:	f3bf 8f6f 	isb	sy
 80022dc:	f3bf 8f4f 	dsb	sy
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	e7fe      	b.n	80022e2 <prvDeleteTCB+0x52>
	}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022f2:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <prvResetNextTaskUnblockTime+0x38>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d104      	bne.n	8002306 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <prvResetNextTaskUnblockTime+0x3c>)
 80022fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002302:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002304:	e008      	b.n	8002318 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <prvResetNextTaskUnblockTime+0x38>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4a04      	ldr	r2, [pc, #16]	; (8002328 <prvResetNextTaskUnblockTime+0x3c>)
 8002316:	6013      	str	r3, [r2, #0]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	20000338 	.word	0x20000338
 8002328:	200003a0 	.word	0x200003a0

0800232c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <xTaskGetSchedulerState+0x34>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d102      	bne.n	8002340 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800233a:	2301      	movs	r3, #1
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	e008      	b.n	8002352 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <xTaskGetSchedulerState+0x38>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d102      	bne.n	800234e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002348:	2302      	movs	r3, #2
 800234a:	607b      	str	r3, [r7, #4]
 800234c:	e001      	b.n	8002352 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002352:	687b      	ldr	r3, [r7, #4]
	}
 8002354:	4618      	mov	r0, r3
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	2000038c 	.word	0x2000038c
 8002364:	200003a8 	.word	0x200003a8

08002368 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002372:	4b29      	ldr	r3, [pc, #164]	; (8002418 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002378:	4b28      	ldr	r3, [pc, #160]	; (800241c <prvAddCurrentTaskToDelayedList+0xb4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	3304      	adds	r3, #4
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fafb 	bl	800197a <uxListRemove>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10b      	bne.n	80023a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800238a:	4b24      	ldr	r3, [pc, #144]	; (800241c <prvAddCurrentTaskToDelayedList+0xb4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	2201      	movs	r2, #1
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	4b21      	ldr	r3, [pc, #132]	; (8002420 <prvAddCurrentTaskToDelayedList+0xb8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4013      	ands	r3, r2
 800239e:	4a20      	ldr	r2, [pc, #128]	; (8002420 <prvAddCurrentTaskToDelayedList+0xb8>)
 80023a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d10a      	bne.n	80023c0 <prvAddCurrentTaskToDelayedList+0x58>
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d007      	beq.n	80023c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023b0:	4b1a      	ldr	r3, [pc, #104]	; (800241c <prvAddCurrentTaskToDelayedList+0xb4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	3304      	adds	r3, #4
 80023b6:	4619      	mov	r1, r3
 80023b8:	481a      	ldr	r0, [pc, #104]	; (8002424 <prvAddCurrentTaskToDelayedList+0xbc>)
 80023ba:	f7ff fa81 	bl	80018c0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80023be:	e026      	b.n	800240e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80023c8:	4b14      	ldr	r3, [pc, #80]	; (800241c <prvAddCurrentTaskToDelayedList+0xb4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68ba      	ldr	r2, [r7, #8]
 80023ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d209      	bcs.n	80023ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023d8:	4b13      	ldr	r3, [pc, #76]	; (8002428 <prvAddCurrentTaskToDelayedList+0xc0>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b0f      	ldr	r3, [pc, #60]	; (800241c <prvAddCurrentTaskToDelayedList+0xb4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	3304      	adds	r3, #4
 80023e2:	4619      	mov	r1, r3
 80023e4:	4610      	mov	r0, r2
 80023e6:	f7ff fa8f 	bl	8001908 <vListInsert>
}
 80023ea:	e010      	b.n	800240e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023ec:	4b0f      	ldr	r3, [pc, #60]	; (800242c <prvAddCurrentTaskToDelayedList+0xc4>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b0a      	ldr	r3, [pc, #40]	; (800241c <prvAddCurrentTaskToDelayedList+0xb4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	3304      	adds	r3, #4
 80023f6:	4619      	mov	r1, r3
 80023f8:	4610      	mov	r0, r2
 80023fa:	f7ff fa85 	bl	8001908 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	429a      	cmp	r2, r3
 8002406:	d202      	bcs.n	800240e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002408:	4a09      	ldr	r2, [pc, #36]	; (8002430 <prvAddCurrentTaskToDelayedList+0xc8>)
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	6013      	str	r3, [r2, #0]
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20000384 	.word	0x20000384
 800241c:	20000280 	.word	0x20000280
 8002420:	20000388 	.word	0x20000388
 8002424:	2000036c 	.word	0x2000036c
 8002428:	2000033c 	.word	0x2000033c
 800242c:	20000338 	.word	0x20000338
 8002430:	200003a0 	.word	0x200003a0

08002434 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3b04      	subs	r3, #4
 8002444:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800244c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3b04      	subs	r3, #4
 8002452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f023 0201 	bic.w	r2, r3, #1
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3b04      	subs	r3, #4
 8002462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002464:	4a0c      	ldr	r2, [pc, #48]	; (8002498 <pxPortInitialiseStack+0x64>)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	3b14      	subs	r3, #20
 800246e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	3b04      	subs	r3, #4
 800247a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f06f 0202 	mvn.w	r2, #2
 8002482:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	3b20      	subs	r3, #32
 8002488:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800248a:	68fb      	ldr	r3, [r7, #12]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	0800249d 	.word	0x0800249d

0800249c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80024a6:	4b11      	ldr	r3, [pc, #68]	; (80024ec <prvTaskExitError+0x50>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ae:	d009      	beq.n	80024c4 <prvTaskExitError+0x28>
 80024b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b4:	f383 8811 	msr	BASEPRI, r3
 80024b8:	f3bf 8f6f 	isb	sy
 80024bc:	f3bf 8f4f 	dsb	sy
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	e7fe      	b.n	80024c2 <prvTaskExitError+0x26>
 80024c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c8:	f383 8811 	msr	BASEPRI, r3
 80024cc:	f3bf 8f6f 	isb	sy
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80024d6:	bf00      	nop
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0fc      	beq.n	80024d8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80024de:	bf00      	nop
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	2000000c 	.word	0x2000000c

080024f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80024f0:	4b07      	ldr	r3, [pc, #28]	; (8002510 <pxCurrentTCBConst2>)
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	6808      	ldr	r0, [r1, #0]
 80024f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024fa:	f380 8809 	msr	PSP, r0
 80024fe:	f3bf 8f6f 	isb	sy
 8002502:	f04f 0000 	mov.w	r0, #0
 8002506:	f380 8811 	msr	BASEPRI, r0
 800250a:	4770      	bx	lr
 800250c:	f3af 8000 	nop.w

08002510 <pxCurrentTCBConst2>:
 8002510:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002514:	bf00      	nop
 8002516:	bf00      	nop

08002518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002518:	4808      	ldr	r0, [pc, #32]	; (800253c <prvPortStartFirstTask+0x24>)
 800251a:	6800      	ldr	r0, [r0, #0]
 800251c:	6800      	ldr	r0, [r0, #0]
 800251e:	f380 8808 	msr	MSP, r0
 8002522:	f04f 0000 	mov.w	r0, #0
 8002526:	f380 8814 	msr	CONTROL, r0
 800252a:	b662      	cpsie	i
 800252c:	b661      	cpsie	f
 800252e:	f3bf 8f4f 	dsb	sy
 8002532:	f3bf 8f6f 	isb	sy
 8002536:	df00      	svc	0
 8002538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800253a:	bf00      	nop
 800253c:	e000ed08 	.word	0xe000ed08

08002540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002546:	4b44      	ldr	r3, [pc, #272]	; (8002658 <xPortStartScheduler+0x118>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a44      	ldr	r2, [pc, #272]	; (800265c <xPortStartScheduler+0x11c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d109      	bne.n	8002564 <xPortStartScheduler+0x24>
 8002550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002554:	f383 8811 	msr	BASEPRI, r3
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	613b      	str	r3, [r7, #16]
 8002562:	e7fe      	b.n	8002562 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002564:	4b3c      	ldr	r3, [pc, #240]	; (8002658 <xPortStartScheduler+0x118>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a3d      	ldr	r2, [pc, #244]	; (8002660 <xPortStartScheduler+0x120>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d109      	bne.n	8002582 <xPortStartScheduler+0x42>
 800256e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002572:	f383 8811 	msr	BASEPRI, r3
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	e7fe      	b.n	8002580 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002582:	4b38      	ldr	r3, [pc, #224]	; (8002664 <xPortStartScheduler+0x124>)
 8002584:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	22ff      	movs	r2, #255	; 0xff
 8002592:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b30      	ldr	r3, [pc, #192]	; (8002668 <xPortStartScheduler+0x128>)
 80025a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80025aa:	4b30      	ldr	r3, [pc, #192]	; (800266c <xPortStartScheduler+0x12c>)
 80025ac:	2207      	movs	r2, #7
 80025ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80025b0:	e009      	b.n	80025c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80025b2:	4b2e      	ldr	r3, [pc, #184]	; (800266c <xPortStartScheduler+0x12c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	4a2c      	ldr	r2, [pc, #176]	; (800266c <xPortStartScheduler+0x12c>)
 80025ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ce:	2b80      	cmp	r3, #128	; 0x80
 80025d0:	d0ef      	beq.n	80025b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80025d2:	4b26      	ldr	r3, [pc, #152]	; (800266c <xPortStartScheduler+0x12c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f1c3 0307 	rsb	r3, r3, #7
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d009      	beq.n	80025f2 <xPortStartScheduler+0xb2>
 80025de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e2:	f383 8811 	msr	BASEPRI, r3
 80025e6:	f3bf 8f6f 	isb	sy
 80025ea:	f3bf 8f4f 	dsb	sy
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	e7fe      	b.n	80025f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80025f2:	4b1e      	ldr	r3, [pc, #120]	; (800266c <xPortStartScheduler+0x12c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	4a1c      	ldr	r2, [pc, #112]	; (800266c <xPortStartScheduler+0x12c>)
 80025fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80025fc:	4b1b      	ldr	r3, [pc, #108]	; (800266c <xPortStartScheduler+0x12c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002604:	4a19      	ldr	r2, [pc, #100]	; (800266c <xPortStartScheduler+0x12c>)
 8002606:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002610:	4b17      	ldr	r3, [pc, #92]	; (8002670 <xPortStartScheduler+0x130>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a16      	ldr	r2, [pc, #88]	; (8002670 <xPortStartScheduler+0x130>)
 8002616:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800261a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800261c:	4b14      	ldr	r3, [pc, #80]	; (8002670 <xPortStartScheduler+0x130>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a13      	ldr	r2, [pc, #76]	; (8002670 <xPortStartScheduler+0x130>)
 8002622:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002626:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002628:	f000 f8d6 	bl	80027d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <xPortStartScheduler+0x134>)
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002632:	f000 f8f5 	bl	8002820 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002636:	4b10      	ldr	r3, [pc, #64]	; (8002678 <xPortStartScheduler+0x138>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a0f      	ldr	r2, [pc, #60]	; (8002678 <xPortStartScheduler+0x138>)
 800263c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002640:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002642:	f7ff ff69 	bl	8002518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002646:	f7ff fd45 	bl	80020d4 <vTaskSwitchContext>
	prvTaskExitError();
 800264a:	f7ff ff27 	bl	800249c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	e000ed00 	.word	0xe000ed00
 800265c:	410fc271 	.word	0x410fc271
 8002660:	410fc270 	.word	0x410fc270
 8002664:	e000e400 	.word	0xe000e400
 8002668:	200003ac 	.word	0x200003ac
 800266c:	200003b0 	.word	0x200003b0
 8002670:	e000ed20 	.word	0xe000ed20
 8002674:	2000000c 	.word	0x2000000c
 8002678:	e000ef34 	.word	0xe000ef34

0800267c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002686:	f383 8811 	msr	BASEPRI, r3
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <vPortEnterCritical+0x54>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	3301      	adds	r3, #1
 800269a:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <vPortEnterCritical+0x54>)
 800269c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800269e:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <vPortEnterCritical+0x54>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d10e      	bne.n	80026c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <vPortEnterCritical+0x58>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d009      	beq.n	80026c4 <vPortEnterCritical+0x48>
 80026b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b4:	f383 8811 	msr	BASEPRI, r3
 80026b8:	f3bf 8f6f 	isb	sy
 80026bc:	f3bf 8f4f 	dsb	sy
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	e7fe      	b.n	80026c2 <vPortEnterCritical+0x46>
	}
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	2000000c 	.word	0x2000000c
 80026d4:	e000ed04 	.word	0xe000ed04

080026d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <vPortExitCritical+0x4c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d109      	bne.n	80026fa <vPortExitCritical+0x22>
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	e7fe      	b.n	80026f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <vPortExitCritical+0x4c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3b01      	subs	r3, #1
 8002700:	4a08      	ldr	r2, [pc, #32]	; (8002724 <vPortExitCritical+0x4c>)
 8002702:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002704:	4b07      	ldr	r3, [pc, #28]	; (8002724 <vPortExitCritical+0x4c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d104      	bne.n	8002716 <vPortExitCritical+0x3e>
 800270c:	2300      	movs	r3, #0
 800270e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	2000000c 	.word	0x2000000c
	...

08002730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002730:	f3ef 8009 	mrs	r0, PSP
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	4b15      	ldr	r3, [pc, #84]	; (8002790 <pxCurrentTCBConst>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	f01e 0f10 	tst.w	lr, #16
 8002740:	bf08      	it	eq
 8002742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800274a:	6010      	str	r0, [r2, #0]
 800274c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002754:	f380 8811 	msr	BASEPRI, r0
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f7ff fcb8 	bl	80020d4 <vTaskSwitchContext>
 8002764:	f04f 0000 	mov.w	r0, #0
 8002768:	f380 8811 	msr	BASEPRI, r0
 800276c:	bc09      	pop	{r0, r3}
 800276e:	6819      	ldr	r1, [r3, #0]
 8002770:	6808      	ldr	r0, [r1, #0]
 8002772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002776:	f01e 0f10 	tst.w	lr, #16
 800277a:	bf08      	it	eq
 800277c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002780:	f380 8809 	msr	PSP, r0
 8002784:	f3bf 8f6f 	isb	sy
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	f3af 8000 	nop.w

08002790 <pxCurrentTCBConst>:
 8002790:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop

08002798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
	__asm volatile
 800279e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80027b0:	f7ff fbd8 	bl	8001f64 <xTaskIncrementTick>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <xPortSysTickHandler+0x3c>)
 80027bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	2300      	movs	r3, #0
 80027c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	e000ed04 	.word	0xe000ed04

080027d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <vPortSetupTimerInterrupt+0x34>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80027e2:	4b0b      	ldr	r3, [pc, #44]	; (8002810 <vPortSetupTimerInterrupt+0x38>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80027e8:	4b0a      	ldr	r3, [pc, #40]	; (8002814 <vPortSetupTimerInterrupt+0x3c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <vPortSetupTimerInterrupt+0x40>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	099b      	lsrs	r3, r3, #6
 80027f4:	4a09      	ldr	r2, [pc, #36]	; (800281c <vPortSetupTimerInterrupt+0x44>)
 80027f6:	3b01      	subs	r3, #1
 80027f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80027fa:	4b04      	ldr	r3, [pc, #16]	; (800280c <vPortSetupTimerInterrupt+0x34>)
 80027fc:	2207      	movs	r2, #7
 80027fe:	601a      	str	r2, [r3, #0]
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	e000e010 	.word	0xe000e010
 8002810:	e000e018 	.word	0xe000e018
 8002814:	20000000 	.word	0x20000000
 8002818:	10624dd3 	.word	0x10624dd3
 800281c:	e000e014 	.word	0xe000e014

08002820 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002820:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002830 <vPortEnableVFP+0x10>
 8002824:	6801      	ldr	r1, [r0, #0]
 8002826:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800282a:	6001      	str	r1, [r0, #0]
 800282c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800282e:	bf00      	nop
 8002830:	e000ed88 	.word	0xe000ed88

08002834 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	; 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002840:	f7ff fae6 	bl	8001e10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002844:	4b57      	ldr	r3, [pc, #348]	; (80029a4 <pvPortMalloc+0x170>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800284c:	f000 f90c 	bl	8002a68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002850:	4b55      	ldr	r3, [pc, #340]	; (80029a8 <pvPortMalloc+0x174>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4013      	ands	r3, r2
 8002858:	2b00      	cmp	r3, #0
 800285a:	f040 808c 	bne.w	8002976 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01c      	beq.n	800289e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002864:	2208      	movs	r2, #8
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	2b00      	cmp	r3, #0
 8002874:	d013      	beq.n	800289e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f023 0307 	bic.w	r3, r3, #7
 800287c:	3308      	adds	r3, #8
 800287e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	2b00      	cmp	r3, #0
 8002888:	d009      	beq.n	800289e <pvPortMalloc+0x6a>
	__asm volatile
 800288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	e7fe      	b.n	800289c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d068      	beq.n	8002976 <pvPortMalloc+0x142>
 80028a4:	4b41      	ldr	r3, [pc, #260]	; (80029ac <pvPortMalloc+0x178>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d863      	bhi.n	8002976 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80028ae:	4b40      	ldr	r3, [pc, #256]	; (80029b0 <pvPortMalloc+0x17c>)
 80028b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80028b2:	4b3f      	ldr	r3, [pc, #252]	; (80029b0 <pvPortMalloc+0x17c>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80028b8:	e004      	b.n	80028c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d903      	bls.n	80028d6 <pvPortMalloc+0xa2>
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f1      	bne.n	80028ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80028d6:	4b33      	ldr	r3, [pc, #204]	; (80029a4 <pvPortMalloc+0x170>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028dc:	429a      	cmp	r2, r3
 80028de:	d04a      	beq.n	8002976 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80028e0:	6a3b      	ldr	r3, [r7, #32]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2208      	movs	r2, #8
 80028e6:	4413      	add	r3, r2
 80028e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	1ad2      	subs	r2, r2, r3
 80028fa:	2308      	movs	r3, #8
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	429a      	cmp	r2, r3
 8002900:	d91e      	bls.n	8002940 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4413      	add	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	2b00      	cmp	r3, #0
 8002912:	d009      	beq.n	8002928 <pvPortMalloc+0xf4>
 8002914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	e7fe      	b.n	8002926 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	1ad2      	subs	r2, r2, r3
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800293a:	69b8      	ldr	r0, [r7, #24]
 800293c:	f000 f8f6 	bl	8002b2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002940:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <pvPortMalloc+0x178>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	4a18      	ldr	r2, [pc, #96]	; (80029ac <pvPortMalloc+0x178>)
 800294c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800294e:	4b17      	ldr	r3, [pc, #92]	; (80029ac <pvPortMalloc+0x178>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <pvPortMalloc+0x180>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d203      	bcs.n	8002962 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800295a:	4b14      	ldr	r3, [pc, #80]	; (80029ac <pvPortMalloc+0x178>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a15      	ldr	r2, [pc, #84]	; (80029b4 <pvPortMalloc+0x180>)
 8002960:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <pvPortMalloc+0x174>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	431a      	orrs	r2, r3
 800296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002976:	f7ff fa59 	bl	8001e2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	2b00      	cmp	r3, #0
 8002982:	d009      	beq.n	8002998 <pvPortMalloc+0x164>
 8002984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002988:	f383 8811 	msr	BASEPRI, r3
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	e7fe      	b.n	8002996 <pvPortMalloc+0x162>
	return pvReturn;
 8002998:	69fb      	ldr	r3, [r7, #28]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3728      	adds	r7, #40	; 0x28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20003fbc 	.word	0x20003fbc
 80029a8:	20003fc8 	.word	0x20003fc8
 80029ac:	20003fc0 	.word	0x20003fc0
 80029b0:	20003fb4 	.word	0x20003fb4
 80029b4:	20003fc4 	.word	0x20003fc4

080029b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d046      	beq.n	8002a58 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80029ca:	2308      	movs	r3, #8
 80029cc:	425b      	negs	r3, r3
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4413      	add	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	4b20      	ldr	r3, [pc, #128]	; (8002a60 <vPortFree+0xa8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4013      	ands	r3, r2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <vPortFree+0x42>
 80029e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ea:	f383 8811 	msr	BASEPRI, r3
 80029ee:	f3bf 8f6f 	isb	sy
 80029f2:	f3bf 8f4f 	dsb	sy
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e7fe      	b.n	80029f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d009      	beq.n	8002a16 <vPortFree+0x5e>
 8002a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	e7fe      	b.n	8002a14 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <vPortFree+0xa8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d019      	beq.n	8002a58 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d115      	bne.n	8002a58 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <vPortFree+0xa8>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	401a      	ands	r2, r3
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002a3c:	f7ff f9e8 	bl	8001e10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	4b07      	ldr	r3, [pc, #28]	; (8002a64 <vPortFree+0xac>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4413      	add	r3, r2
 8002a4a:	4a06      	ldr	r2, [pc, #24]	; (8002a64 <vPortFree+0xac>)
 8002a4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002a4e:	6938      	ldr	r0, [r7, #16]
 8002a50:	f000 f86c 	bl	8002b2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002a54:	f7ff f9ea 	bl	8001e2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002a58:	bf00      	nop
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20003fc8 	.word	0x20003fc8
 8002a64:	20003fc0 	.word	0x20003fc0

08002a68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002a6e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002a72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002a74:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <prvHeapInit+0xac>)
 8002a76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00c      	beq.n	8002a9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	3307      	adds	r3, #7
 8002a86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0307 	bic.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <prvHeapInit+0xac>)
 8002a98:	4413      	add	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002aa0:	4a1d      	ldr	r2, [pc, #116]	; (8002b18 <prvHeapInit+0xb0>)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <prvHeapInit+0xb0>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002ab4:	2208      	movs	r2, #8
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 0307 	bic.w	r3, r3, #7
 8002ac2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4a15      	ldr	r2, [pc, #84]	; (8002b1c <prvHeapInit+0xb4>)
 8002ac8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <prvHeapInit+0xb4>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002ad2:	4b12      	ldr	r3, [pc, #72]	; (8002b1c <prvHeapInit+0xb4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	1ad2      	subs	r2, r2, r3
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <prvHeapInit+0xb4>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4a0a      	ldr	r2, [pc, #40]	; (8002b20 <prvHeapInit+0xb8>)
 8002af6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	4a09      	ldr	r2, [pc, #36]	; (8002b24 <prvHeapInit+0xbc>)
 8002afe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002b00:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <prvHeapInit+0xc0>)
 8002b02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b06:	601a      	str	r2, [r3, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	200003b4 	.word	0x200003b4
 8002b18:	20003fb4 	.word	0x20003fb4
 8002b1c:	20003fbc 	.word	0x20003fbc
 8002b20:	20003fc4 	.word	0x20003fc4
 8002b24:	20003fc0 	.word	0x20003fc0
 8002b28:	20003fc8 	.word	0x20003fc8

08002b2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002b34:	4b28      	ldr	r3, [pc, #160]	; (8002bd8 <prvInsertBlockIntoFreeList+0xac>)
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	e002      	b.n	8002b40 <prvInsertBlockIntoFreeList+0x14>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d8f7      	bhi.n	8002b3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	4413      	add	r3, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d108      	bne.n	8002b6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	441a      	add	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	441a      	add	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d118      	bne.n	8002bb4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <prvInsertBlockIntoFreeList+0xb0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d00d      	beq.n	8002baa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	441a      	add	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	e008      	b.n	8002bbc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002baa:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <prvInsertBlockIntoFreeList+0xb0>)
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e003      	b.n	8002bbc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d002      	beq.n	8002bca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bca:	bf00      	nop
 8002bcc:	3714      	adds	r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20003fb4 	.word	0x20003fb4
 8002bdc:	20003fbc 	.word	0x20003fbc

08002be0 <__libc_init_array>:
 8002be0:	b570      	push	{r4, r5, r6, lr}
 8002be2:	4e0d      	ldr	r6, [pc, #52]	; (8002c18 <__libc_init_array+0x38>)
 8002be4:	4c0d      	ldr	r4, [pc, #52]	; (8002c1c <__libc_init_array+0x3c>)
 8002be6:	1ba4      	subs	r4, r4, r6
 8002be8:	10a4      	asrs	r4, r4, #2
 8002bea:	2500      	movs	r5, #0
 8002bec:	42a5      	cmp	r5, r4
 8002bee:	d109      	bne.n	8002c04 <__libc_init_array+0x24>
 8002bf0:	4e0b      	ldr	r6, [pc, #44]	; (8002c20 <__libc_init_array+0x40>)
 8002bf2:	4c0c      	ldr	r4, [pc, #48]	; (8002c24 <__libc_init_array+0x44>)
 8002bf4:	f000 f820 	bl	8002c38 <_init>
 8002bf8:	1ba4      	subs	r4, r4, r6
 8002bfa:	10a4      	asrs	r4, r4, #2
 8002bfc:	2500      	movs	r5, #0
 8002bfe:	42a5      	cmp	r5, r4
 8002c00:	d105      	bne.n	8002c0e <__libc_init_array+0x2e>
 8002c02:	bd70      	pop	{r4, r5, r6, pc}
 8002c04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c08:	4798      	blx	r3
 8002c0a:	3501      	adds	r5, #1
 8002c0c:	e7ee      	b.n	8002bec <__libc_init_array+0xc>
 8002c0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c12:	4798      	blx	r3
 8002c14:	3501      	adds	r5, #1
 8002c16:	e7f2      	b.n	8002bfe <__libc_init_array+0x1e>
 8002c18:	08002cb8 	.word	0x08002cb8
 8002c1c:	08002cb8 	.word	0x08002cb8
 8002c20:	08002cb8 	.word	0x08002cb8
 8002c24:	08002cbc 	.word	0x08002cbc

08002c28 <memset>:
 8002c28:	4402      	add	r2, r0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d100      	bne.n	8002c32 <memset+0xa>
 8002c30:	4770      	bx	lr
 8002c32:	f803 1b01 	strb.w	r1, [r3], #1
 8002c36:	e7f9      	b.n	8002c2c <memset+0x4>

08002c38 <_init>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	bf00      	nop
 8002c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3e:	bc08      	pop	{r3}
 8002c40:	469e      	mov	lr, r3
 8002c42:	4770      	bx	lr

08002c44 <_fini>:
 8002c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c46:	bf00      	nop
 8002c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c4a:	bc08      	pop	{r3}
 8002c4c:	469e      	mov	lr, r3
 8002c4e:	4770      	bx	lr
