
001_FREERTOS_LED_CONTROL_WITH_BUTTON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003e64  08003e64  00013e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea4  08003ea4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003ea4  08003ea4  00013ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003eac  08003eac  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003eac  08003eac  00013eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003eb0  08003eb0  00013eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012dcc  20000014  08003ec8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012de0  08003ec8  00022de0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b403  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d28  00000000  00000000  0002b447  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008e8  00000000  00000000  0002d170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000800  00000000  00000000  0002da58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020354  00000000  00000000  0002e258  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000086bd  00000000  00000000  0004e5ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6ddb  00000000  00000000  00056c69  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011da44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022c0  00000000  00000000  0011dac0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e4c 	.word	0x08003e4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	08003e4c 	.word	0x08003e4c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 f9e1 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f821 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f88b 	bl	80005f8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  xTaskCreate(myLedTask, "Led_Task", 100, NULL, 1, NULL);
 80004e2:	2300      	movs	r3, #0
 80004e4:	9301      	str	r3, [sp, #4]
 80004e6:	2301      	movs	r3, #1
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2300      	movs	r3, #0
 80004ec:	2264      	movs	r2, #100	; 0x64
 80004ee:	4908      	ldr	r1, [pc, #32]	; (8000510 <main+0x40>)
 80004f0:	4808      	ldr	r0, [pc, #32]	; (8000514 <main+0x44>)
 80004f2:	f001 fec9 	bl	8002288 <xTaskCreate>
  xTaskCreate(myButtonTask, "Button_Task", 100, NULL, 1, NULL);
 80004f6:	2300      	movs	r3, #0
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2301      	movs	r3, #1
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2300      	movs	r3, #0
 8000500:	2264      	movs	r2, #100	; 0x64
 8000502:	4905      	ldr	r1, [pc, #20]	; (8000518 <main+0x48>)
 8000504:	4805      	ldr	r0, [pc, #20]	; (800051c <main+0x4c>)
 8000506:	f001 febf 	bl	8002288 <xTaskCreate>

  vTaskStartScheduler();
 800050a:	f002 f835 	bl	8002578 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050e:	e7fe      	b.n	800050e <main+0x3e>
 8000510:	08003e64 	.word	0x08003e64
 8000514:	080006b9 	.word	0x080006b9
 8000518:	08003e70 	.word	0x08003e70
 800051c:	0800074d 	.word	0x0800074d

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	; 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2230      	movs	r2, #48	; 0x30
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 fc83 	bl	8003e3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	4b29      	ldr	r3, [pc, #164]	; (80005f0 <SystemClock_Config+0xd0>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	4a28      	ldr	r2, [pc, #160]	; (80005f0 <SystemClock_Config+0xd0>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	; 0x40
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <SystemClock_Config+0xd0>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	2300      	movs	r3, #0
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <SystemClock_Config+0xd4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <SystemClock_Config+0xd4>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <SystemClock_Config+0xd4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800057c:	2301      	movs	r3, #1
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000586:	2302      	movs	r3, #2
 8000588:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000590:	2304      	movs	r3, #4
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000594:	2340      	movs	r3, #64	; 0x40
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000598:	2302      	movs	r3, #2
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800059c:	2304      	movs	r3, #4
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 0320 	add.w	r3, r7, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fca3 	bl	8000ef0 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005b0:	f000 f8f2 	bl	8000798 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80005bc:	2390      	movs	r3, #144	; 0x90
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 fefc 	bl	80013d0 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005de:	f000 f8db 	bl	8000798 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80005e2:	f000 ffdb 	bl	800159c <HAL_RCC_EnableCSS>
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b26      	ldr	r3, [pc, #152]	; (80006ac <MX_GPIO_Init+0xb4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a25      	ldr	r2, [pc, #148]	; (80006ac <MX_GPIO_Init+0xb4>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b23      	ldr	r3, [pc, #140]	; (80006ac <MX_GPIO_Init+0xb4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <MX_GPIO_Init+0xb4>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a1e      	ldr	r2, [pc, #120]	; (80006ac <MX_GPIO_Init+0xb4>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_GPIO_Init+0xb4>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_GPIO_Init+0xb4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a17      	ldr	r2, [pc, #92]	; (80006ac <MX_GPIO_Init+0xb4>)
 8000650:	f043 0308 	orr.w	r3, r3, #8
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_GPIO_Init+0xb4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0308 	and.w	r3, r3, #8
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000668:	4811      	ldr	r0, [pc, #68]	; (80006b0 <MX_GPIO_Init+0xb8>)
 800066a:	f000 fc0d 	bl	8000e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800066e:	2301      	movs	r3, #1
 8000670:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000672:	2300      	movs	r3, #0
 8000674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4619      	mov	r1, r3
 8000680:	480c      	ldr	r0, [pc, #48]	; (80006b4 <MX_GPIO_Init+0xbc>)
 8000682:	f000 fa4f 	bl	8000b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000686:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800068a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	2301      	movs	r3, #1
 800068e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	4619      	mov	r1, r3
 800069e:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_GPIO_Init+0xb8>)
 80006a0:	f000 fa40 	bl	8000b24 <HAL_GPIO_Init>

}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40020c00 	.word	0x40020c00
 80006b4:	40020000 	.word	0x40020000

080006b8 <myLedTask>:

/* USER CODE BEGIN 4 */
void myLedTask(void *params)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(buttonCounter == 1)
 80006c0:	4b20      	ldr	r3, [pc, #128]	; (8000744 <myLedTask+0x8c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d109      	bne.n	80006dc <myLedTask+0x24>
		{
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_All);
 80006c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006cc:	481e      	ldr	r0, [pc, #120]	; (8000748 <myLedTask+0x90>)
 80006ce:	f000 fbf4 	bl	8000eba <HAL_GPIO_TogglePin>
			vTaskDelay(1000);
 80006d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d6:	f001 ff1b 	bl	8002510 <vTaskDelay>
 80006da:	e7f1      	b.n	80006c0 <myLedTask+0x8>
		}
		else if(buttonCounter == 2)
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <myLedTask+0x8c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d109      	bne.n	80006f8 <myLedTask+0x40>
		{
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_All);
 80006e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006e8:	4817      	ldr	r0, [pc, #92]	; (8000748 <myLedTask+0x90>)
 80006ea:	f000 fbe6 	bl	8000eba <HAL_GPIO_TogglePin>
			vTaskDelay(750);
 80006ee:	f240 20ee 	movw	r0, #750	; 0x2ee
 80006f2:	f001 ff0d 	bl	8002510 <vTaskDelay>
 80006f6:	e7e3      	b.n	80006c0 <myLedTask+0x8>
		}
		else if(buttonCounter == 3)
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <myLedTask+0x8c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d109      	bne.n	8000714 <myLedTask+0x5c>
		{
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_All);
 8000700:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000704:	4810      	ldr	r0, [pc, #64]	; (8000748 <myLedTask+0x90>)
 8000706:	f000 fbd8 	bl	8000eba <HAL_GPIO_TogglePin>
			vTaskDelay(500);
 800070a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800070e:	f001 feff 	bl	8002510 <vTaskDelay>
 8000712:	e7d5      	b.n	80006c0 <myLedTask+0x8>
		}
		else if(buttonCounter == 4)
 8000714:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <myLedTask+0x8c>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b04      	cmp	r3, #4
 800071a:	d108      	bne.n	800072e <myLedTask+0x76>
		{
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_All);
 800071c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <myLedTask+0x90>)
 8000722:	f000 fbca 	bl	8000eba <HAL_GPIO_TogglePin>
			vTaskDelay(250);
 8000726:	20fa      	movs	r0, #250	; 0xfa
 8000728:	f001 fef2 	bl	8002510 <vTaskDelay>
 800072c:	e7c8      	b.n	80006c0 <myLedTask+0x8>
		}
		else if(buttonCounter == 0)
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <myLedTask+0x8c>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1c4      	bne.n	80006c0 <myLedTask+0x8>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_All,DISABLE);
 8000736:	2200      	movs	r2, #0
 8000738:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800073c:	4802      	ldr	r0, [pc, #8]	; (8000748 <myLedTask+0x90>)
 800073e:	f000 fba3 	bl	8000e88 <HAL_GPIO_WritePin>
		if(buttonCounter == 1)
 8000742:	e7bd      	b.n	80006c0 <myLedTask+0x8>
 8000744:	20000030 	.word	0x20000030
 8000748:	40020c00 	.word	0x40020c00

0800074c <myButtonTask>:
		}
	}
}
void myButtonTask(void *params)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 8000754:	2101      	movs	r1, #1
 8000756:	480e      	ldr	r0, [pc, #56]	; (8000790 <myButtonTask+0x44>)
 8000758:	f000 fb7e 	bl	8000e58 <HAL_GPIO_ReadPin>
 800075c:	4603      	mov	r3, r0
 800075e:	2b01      	cmp	r3, #1
 8000760:	d1f8      	bne.n	8000754 <myButtonTask+0x8>
		{
			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET);
 8000762:	bf00      	nop
 8000764:	2101      	movs	r1, #1
 8000766:	480a      	ldr	r0, [pc, #40]	; (8000790 <myButtonTask+0x44>)
 8000768:	f000 fb76 	bl	8000e58 <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b01      	cmp	r3, #1
 8000770:	d0f8      	beq.n	8000764 <myButtonTask+0x18>
			buttonCounter++;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <myButtonTask+0x48>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	3301      	adds	r3, #1
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <myButtonTask+0x48>)
 800077c:	701a      	strb	r2, [r3, #0]
			if(buttonCounter==5)
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <myButtonTask+0x48>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b05      	cmp	r3, #5
 8000784:	d1e6      	bne.n	8000754 <myButtonTask+0x8>
				buttonCounter=0;
 8000786:	4b03      	ldr	r3, [pc, #12]	; (8000794 <myButtonTask+0x48>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)==GPIO_PIN_SET)
 800078c:	e7e2      	b.n	8000754 <myButtonTask+0x8>
 800078e:	bf00      	nop
 8000790:	40020000 	.word	0x40020000
 8000794:	20000030 	.word	0x20000030

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800079e:	e7fe      	b.n	800079e <Error_Handler+0x6>

080007a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <HAL_MspInit+0x4c>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ae:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <HAL_MspInit+0x4c>)
 80007b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b4:	6453      	str	r3, [r2, #68]	; 0x44
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <HAL_MspInit+0x4c>)
 80007b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_MspInit+0x4c>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <HAL_MspInit+0x4c>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d0:	6413      	str	r3, [r2, #64]	; 0x40
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_MspInit+0x4c>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80007f4:	f000 ffb6 	bl	8001764 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <NMI_Handler+0x8>

080007fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <MemManage_Handler+0x4>

08000800 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <BusFault_Handler+0x4>

08000806 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <UsageFault_Handler+0x4>

0800080c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000820:	4b08      	ldr	r3, [pc, #32]	; (8000844 <SystemInit+0x28>)
 8000822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000826:	4a07      	ldr	r2, [pc, #28]	; (8000844 <SystemInit+0x28>)
 8000828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800082c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <SystemInit+0x28>)
 8000832:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000836:	609a      	str	r2, [r3, #8]
#endif
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000880 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800084c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800084e:	e003      	b.n	8000858 <LoopCopyDataInit>

08000850 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000852:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000854:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000856:	3104      	adds	r1, #4

08000858 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800085c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800085e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000860:	d3f6      	bcc.n	8000850 <CopyDataInit>
  ldr  r2, =_sbss
 8000862:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000864:	e002      	b.n	800086c <LoopFillZerobss>

08000866 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000866:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000868:	f842 3b04 	str.w	r3, [r2], #4

0800086c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800086e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000870:	d3f9      	bcc.n	8000866 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000872:	f7ff ffd3 	bl	800081c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000876:	f003 fab1 	bl	8003ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800087a:	f7ff fe29 	bl	80004d0 <main>
  bx  lr    
 800087e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000880:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000884:	08003eb4 	.word	0x08003eb4
  ldr  r0, =_sdata
 8000888:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800088c:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000890:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000894:	20012de0 	.word	0x20012de0

08000898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC_IRQHandler>
	...

0800089c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008a0:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <HAL_Init+0x40>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0d      	ldr	r2, [pc, #52]	; (80008dc <HAL_Init+0x40>)
 80008a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <HAL_Init+0x40>)
 80008b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <HAL_Init+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a07      	ldr	r2, [pc, #28]	; (80008dc <HAL_Init+0x40>)
 80008be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f000 f8f9 	bl	8000abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f000 f808 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d0:	f7ff ff66 	bl	80007a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023c00 	.word	0x40023c00

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_InitTick+0x54>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_InitTick+0x58>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f903 	bl	8000b0a <HAL_SYSTICK_Config>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e00e      	b.n	800092c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	d80a      	bhi.n	800092a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	f000 f8d9 	bl	8000ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000920:	4a06      	ldr	r2, [pc, #24]	; (800093c <HAL_InitTick+0x5c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000000 	.word	0x20000000
 8000938:	20000008 	.word	0x20000008
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return uwTick;
 8000944:	4b03      	ldr	r3, [pc, #12]	; (8000954 <HAL_GetTick+0x14>)
 8000946:	681b      	ldr	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	20012d9c 	.word	0x20012d9c

08000958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000974:	4013      	ands	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <__NVIC_GetPriorityGrouping+0x18>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	0a1b      	lsrs	r3, r3, #8
 80009aa:	f003 0307 	and.w	r3, r3, #7
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	6039      	str	r1, [r7, #0]
 80009c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	db0a      	blt.n	80009e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	490c      	ldr	r1, [pc, #48]	; (8000a08 <__NVIC_SetPriority+0x4c>)
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	0112      	lsls	r2, r2, #4
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	440b      	add	r3, r1
 80009e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009e4:	e00a      	b.n	80009fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	b2da      	uxtb	r2, r3
 80009ea:	4908      	ldr	r1, [pc, #32]	; (8000a0c <__NVIC_SetPriority+0x50>)
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	f003 030f 	and.w	r3, r3, #15
 80009f2:	3b04      	subs	r3, #4
 80009f4:	0112      	lsls	r2, r2, #4
 80009f6:	b2d2      	uxtb	r2, r2
 80009f8:	440b      	add	r3, r1
 80009fa:	761a      	strb	r2, [r3, #24]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000e100 	.word	0xe000e100
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b089      	sub	sp, #36	; 0x24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	f1c3 0307 	rsb	r3, r3, #7
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	bf28      	it	cs
 8000a2e:	2304      	movcs	r3, #4
 8000a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3304      	adds	r3, #4
 8000a36:	2b06      	cmp	r3, #6
 8000a38:	d902      	bls.n	8000a40 <NVIC_EncodePriority+0x30>
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3b03      	subs	r3, #3
 8000a3e:	e000      	b.n	8000a42 <NVIC_EncodePriority+0x32>
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a44:	f04f 32ff 	mov.w	r2, #4294967295
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	401a      	ands	r2, r3
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a58:	f04f 31ff 	mov.w	r1, #4294967295
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a62:	43d9      	mvns	r1, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	4313      	orrs	r3, r2
         );
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3724      	adds	r7, #36	; 0x24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
	...

08000a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a88:	d301      	bcc.n	8000a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00f      	b.n	8000aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <SysTick_Config+0x40>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a96:	210f      	movs	r1, #15
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f7ff ff8e 	bl	80009bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa0:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <SysTick_Config+0x40>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aa6:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <SysTick_Config+0x40>)
 8000aa8:	2207      	movs	r2, #7
 8000aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	e000e010 	.word	0xe000e010

08000abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ff47 	bl	8000958 <__NVIC_SetPriorityGrouping>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b086      	sub	sp, #24
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	4603      	mov	r3, r0
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ae4:	f7ff ff5c 	bl	80009a0 <__NVIC_GetPriorityGrouping>
 8000ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	68b9      	ldr	r1, [r7, #8]
 8000aee:	6978      	ldr	r0, [r7, #20]
 8000af0:	f7ff ff8e 	bl	8000a10 <NVIC_EncodePriority>
 8000af4:	4602      	mov	r2, r0
 8000af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afa:	4611      	mov	r1, r2
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff5d 	bl	80009bc <__NVIC_SetPriority>
}
 8000b02:	bf00      	nop
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff ffb0 	bl	8000a78 <SysTick_Config>
 8000b18:	4603      	mov	r3, r0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b089      	sub	sp, #36	; 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
 8000b3e:	e16b      	b.n	8000e18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b40:	2201      	movs	r2, #1
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	f040 815a 	bne.w	8000e12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d00b      	beq.n	8000b7e <HAL_GPIO_Init+0x5a>
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d007      	beq.n	8000b7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b72:	2b11      	cmp	r3, #17
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2b12      	cmp	r3, #18
 8000b7c:	d130      	bne.n	8000be0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	2203      	movs	r2, #3
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	4013      	ands	r3, r2
 8000b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	68da      	ldr	r2, [r3, #12]
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	69ba      	ldr	r2, [r7, #24]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	091b      	lsrs	r3, r3, #4
 8000bca:	f003 0201 	and.w	r2, r3, #1
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	2203      	movs	r2, #3
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	689a      	ldr	r2, [r3, #8]
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d003      	beq.n	8000c20 <HAL_GPIO_Init+0xfc>
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	2b12      	cmp	r3, #18
 8000c1e:	d123      	bne.n	8000c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	08da      	lsrs	r2, r3, #3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3208      	adds	r2, #8
 8000c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	691a      	ldr	r2, [r3, #16]
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	08da      	lsrs	r2, r3, #3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3208      	adds	r2, #8
 8000c62:	69b9      	ldr	r1, [r7, #24]
 8000c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0203 	and.w	r2, r3, #3
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 80b4 	beq.w	8000e12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b5f      	ldr	r3, [pc, #380]	; (8000e2c <HAL_GPIO_Init+0x308>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	4a5e      	ldr	r2, [pc, #376]	; (8000e2c <HAL_GPIO_Init+0x308>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cba:	4b5c      	ldr	r3, [pc, #368]	; (8000e2c <HAL_GPIO_Init+0x308>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cc6:	4a5a      	ldr	r2, [pc, #360]	; (8000e30 <HAL_GPIO_Init+0x30c>)
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	089b      	lsrs	r3, r3, #2
 8000ccc:	3302      	adds	r3, #2
 8000cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	220f      	movs	r2, #15
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a51      	ldr	r2, [pc, #324]	; (8000e34 <HAL_GPIO_Init+0x310>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d02b      	beq.n	8000d4a <HAL_GPIO_Init+0x226>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a50      	ldr	r2, [pc, #320]	; (8000e38 <HAL_GPIO_Init+0x314>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d025      	beq.n	8000d46 <HAL_GPIO_Init+0x222>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a4f      	ldr	r2, [pc, #316]	; (8000e3c <HAL_GPIO_Init+0x318>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d01f      	beq.n	8000d42 <HAL_GPIO_Init+0x21e>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a4e      	ldr	r2, [pc, #312]	; (8000e40 <HAL_GPIO_Init+0x31c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d019      	beq.n	8000d3e <HAL_GPIO_Init+0x21a>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a4d      	ldr	r2, [pc, #308]	; (8000e44 <HAL_GPIO_Init+0x320>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d013      	beq.n	8000d3a <HAL_GPIO_Init+0x216>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a4c      	ldr	r2, [pc, #304]	; (8000e48 <HAL_GPIO_Init+0x324>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d00d      	beq.n	8000d36 <HAL_GPIO_Init+0x212>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a4b      	ldr	r2, [pc, #300]	; (8000e4c <HAL_GPIO_Init+0x328>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d007      	beq.n	8000d32 <HAL_GPIO_Init+0x20e>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a4a      	ldr	r2, [pc, #296]	; (8000e50 <HAL_GPIO_Init+0x32c>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_GPIO_Init+0x20a>
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	e00e      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d2e:	2308      	movs	r3, #8
 8000d30:	e00c      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d32:	2306      	movs	r3, #6
 8000d34:	e00a      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d36:	2305      	movs	r3, #5
 8000d38:	e008      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	e006      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e004      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d42:	2302      	movs	r3, #2
 8000d44:	e002      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <HAL_GPIO_Init+0x228>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	69fa      	ldr	r2, [r7, #28]
 8000d4e:	f002 0203 	and.w	r2, r2, #3
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	4093      	lsls	r3, r2
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d5c:	4934      	ldr	r1, [pc, #208]	; (8000e30 <HAL_GPIO_Init+0x30c>)
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	089b      	lsrs	r3, r3, #2
 8000d62:	3302      	adds	r3, #2
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d6a:	4b3a      	ldr	r3, [pc, #232]	; (8000e54 <HAL_GPIO_Init+0x330>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d8e:	4a31      	ldr	r2, [pc, #196]	; (8000e54 <HAL_GPIO_Init+0x330>)
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d94:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <HAL_GPIO_Init+0x330>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000db8:	4a26      	ldr	r2, [pc, #152]	; (8000e54 <HAL_GPIO_Init+0x330>)
 8000dba:	69bb      	ldr	r3, [r7, #24]
 8000dbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dbe:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <HAL_GPIO_Init+0x330>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000de2:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <HAL_GPIO_Init+0x330>)
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <HAL_GPIO_Init+0x330>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e0c:	4a11      	ldr	r2, [pc, #68]	; (8000e54 <HAL_GPIO_Init+0x330>)
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3301      	adds	r3, #1
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	2b0f      	cmp	r3, #15
 8000e1c:	f67f ae90 	bls.w	8000b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e20:	bf00      	nop
 8000e22:	3724      	adds	r7, #36	; 0x24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40013800 	.word	0x40013800
 8000e34:	40020000 	.word	0x40020000
 8000e38:	40020400 	.word	0x40020400
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	40020c00 	.word	0x40020c00
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40021400 	.word	0x40021400
 8000e4c:	40021800 	.word	0x40021800
 8000e50:	40021c00 	.word	0x40021c00
 8000e54:	40013c00 	.word	0x40013c00

08000e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	691a      	ldr	r2, [r3, #16]
 8000e68:	887b      	ldrh	r3, [r7, #2]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d002      	beq.n	8000e76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e001      	b.n	8000e7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e76:	2300      	movs	r3, #0
 8000e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	807b      	strh	r3, [r7, #2]
 8000e94:	4613      	mov	r3, r2
 8000e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e98:	787b      	ldrb	r3, [r7, #1]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e9e:	887a      	ldrh	r2, [r7, #2]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ea4:	e003      	b.n	8000eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	041a      	lsls	r2, r3, #16
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	619a      	str	r2, [r3, #24]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	695a      	ldr	r2, [r3, #20]
 8000eca:	887b      	ldrh	r3, [r7, #2]
 8000ecc:	401a      	ands	r2, r3
 8000ece:	887b      	ldrh	r3, [r7, #2]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d104      	bne.n	8000ede <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ed4:	887b      	ldrh	r3, [r7, #2]
 8000ed6:	041a      	lsls	r2, r3, #16
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000edc:	e002      	b.n	8000ee4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000ede:	887a      	ldrh	r2, [r7, #2]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	619a      	str	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e25b      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d075      	beq.n	8000ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f0e:	4ba3      	ldr	r3, [pc, #652]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 030c 	and.w	r3, r3, #12
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d00c      	beq.n	8000f34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f1a:	4ba0      	ldr	r3, [pc, #640]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d112      	bne.n	8000f4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f26:	4b9d      	ldr	r3, [pc, #628]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f32:	d10b      	bne.n	8000f4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f34:	4b99      	ldr	r3, [pc, #612]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d05b      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x108>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d157      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e236      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f54:	d106      	bne.n	8000f64 <HAL_RCC_OscConfig+0x74>
 8000f56:	4b91      	ldr	r3, [pc, #580]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a90      	ldr	r2, [pc, #576]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e01d      	b.n	8000fa0 <HAL_RCC_OscConfig+0xb0>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f6c:	d10c      	bne.n	8000f88 <HAL_RCC_OscConfig+0x98>
 8000f6e:	4b8b      	ldr	r3, [pc, #556]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a8a      	ldr	r2, [pc, #552]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4b88      	ldr	r3, [pc, #544]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a87      	ldr	r2, [pc, #540]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f84:	6013      	str	r3, [r2, #0]
 8000f86:	e00b      	b.n	8000fa0 <HAL_RCC_OscConfig+0xb0>
 8000f88:	4b84      	ldr	r3, [pc, #528]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a83      	ldr	r2, [pc, #524]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b81      	ldr	r3, [pc, #516]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a80      	ldr	r2, [pc, #512]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d013      	beq.n	8000fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa8:	f7ff fcca 	bl	8000940 <HAL_GetTick>
 8000fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fae:	e008      	b.n	8000fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb0:	f7ff fcc6 	bl	8000940 <HAL_GetTick>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	2b64      	cmp	r3, #100	; 0x64
 8000fbc:	d901      	bls.n	8000fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	e1fb      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc2:	4b76      	ldr	r3, [pc, #472]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f0      	beq.n	8000fb0 <HAL_RCC_OscConfig+0xc0>
 8000fce:	e014      	b.n	8000ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fcb6 	bl	8000940 <HAL_GetTick>
 8000fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd6:	e008      	b.n	8000fea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fcb2 	bl	8000940 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	2b64      	cmp	r3, #100	; 0x64
 8000fe4:	d901      	bls.n	8000fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	e1e7      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fea:	4b6c      	ldr	r3, [pc, #432]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f0      	bne.n	8000fd8 <HAL_RCC_OscConfig+0xe8>
 8000ff6:	e000      	b.n	8000ffa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0302 	and.w	r3, r3, #2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d063      	beq.n	80010ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001006:	4b65      	ldr	r3, [pc, #404]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 030c 	and.w	r3, r3, #12
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00b      	beq.n	800102a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001012:	4b62      	ldr	r3, [pc, #392]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800101a:	2b08      	cmp	r3, #8
 800101c:	d11c      	bne.n	8001058 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800101e:	4b5f      	ldr	r3, [pc, #380]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d116      	bne.n	8001058 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102a:	4b5c      	ldr	r3, [pc, #368]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d005      	beq.n	8001042 <HAL_RCC_OscConfig+0x152>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d001      	beq.n	8001042 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e1bb      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001042:	4b56      	ldr	r3, [pc, #344]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4952      	ldr	r1, [pc, #328]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001052:	4313      	orrs	r3, r2
 8001054:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001056:	e03a      	b.n	80010ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d020      	beq.n	80010a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001060:	4b4f      	ldr	r3, [pc, #316]	; (80011a0 <HAL_RCC_OscConfig+0x2b0>)
 8001062:	2201      	movs	r2, #1
 8001064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001066:	f7ff fc6b 	bl	8000940 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800106e:	f7ff fc67 	bl	8000940 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e19c      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001080:	4b46      	ldr	r3, [pc, #280]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0f0      	beq.n	800106e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108c:	4b43      	ldr	r3, [pc, #268]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	4940      	ldr	r1, [pc, #256]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 800109c:	4313      	orrs	r3, r2
 800109e:	600b      	str	r3, [r1, #0]
 80010a0:	e015      	b.n	80010ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010a2:	4b3f      	ldr	r3, [pc, #252]	; (80011a0 <HAL_RCC_OscConfig+0x2b0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a8:	f7ff fc4a 	bl	8000940 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b0:	f7ff fc46 	bl	8000940 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e17b      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010c2:	4b36      	ldr	r3, [pc, #216]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f0      	bne.n	80010b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d030      	beq.n	800113c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d016      	beq.n	8001110 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010e2:	4b30      	ldr	r3, [pc, #192]	; (80011a4 <HAL_RCC_OscConfig+0x2b4>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010e8:	f7ff fc2a 	bl	8000940 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010f0:	f7ff fc26 	bl	8000940 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e15b      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0x200>
 800110e:	e015      	b.n	800113c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <HAL_RCC_OscConfig+0x2b4>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001116:	f7ff fc13 	bl	8000940 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800111e:	f7ff fc0f 	bl	8000940 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e144      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f0      	bne.n	800111e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80a0 	beq.w	800128a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10f      	bne.n	800117a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a0e      	ldr	r2, [pc, #56]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_RCC_OscConfig+0x2ac>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001176:	2301      	movs	r3, #1
 8001178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_RCC_OscConfig+0x2b8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001182:	2b00      	cmp	r3, #0
 8001184:	d121      	bne.n	80011ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <HAL_RCC_OscConfig+0x2b8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <HAL_RCC_OscConfig+0x2b8>)
 800118c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001192:	f7ff fbd5 	bl	8000940 <HAL_GetTick>
 8001196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	e011      	b.n	80011be <HAL_RCC_OscConfig+0x2ce>
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	42470000 	.word	0x42470000
 80011a4:	42470e80 	.word	0x42470e80
 80011a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ac:	f7ff fbc8 	bl	8000940 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e0fd      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011be:	4b81      	ldr	r3, [pc, #516]	; (80013c4 <HAL_RCC_OscConfig+0x4d4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d106      	bne.n	80011e0 <HAL_RCC_OscConfig+0x2f0>
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 80011d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d6:	4a7c      	ldr	r2, [pc, #496]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6713      	str	r3, [r2, #112]	; 0x70
 80011de:	e01c      	b.n	800121a <HAL_RCC_OscConfig+0x32a>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b05      	cmp	r3, #5
 80011e6:	d10c      	bne.n	8001202 <HAL_RCC_OscConfig+0x312>
 80011e8:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 80011ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ec:	4a76      	ldr	r2, [pc, #472]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 80011ee:	f043 0304 	orr.w	r3, r3, #4
 80011f2:	6713      	str	r3, [r2, #112]	; 0x70
 80011f4:	4b74      	ldr	r3, [pc, #464]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 80011f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f8:	4a73      	ldr	r2, [pc, #460]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001200:	e00b      	b.n	800121a <HAL_RCC_OscConfig+0x32a>
 8001202:	4b71      	ldr	r3, [pc, #452]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001206:	4a70      	ldr	r2, [pc, #448]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001208:	f023 0301 	bic.w	r3, r3, #1
 800120c:	6713      	str	r3, [r2, #112]	; 0x70
 800120e:	4b6e      	ldr	r3, [pc, #440]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001212:	4a6d      	ldr	r2, [pc, #436]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001214:	f023 0304 	bic.w	r3, r3, #4
 8001218:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d015      	beq.n	800124e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001222:	f7ff fb8d 	bl	8000940 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001228:	e00a      	b.n	8001240 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800122a:	f7ff fb89 	bl	8000940 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	f241 3288 	movw	r2, #5000	; 0x1388
 8001238:	4293      	cmp	r3, r2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e0bc      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001240:	4b61      	ldr	r3, [pc, #388]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0ee      	beq.n	800122a <HAL_RCC_OscConfig+0x33a>
 800124c:	e014      	b.n	8001278 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124e:	f7ff fb77 	bl	8000940 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001254:	e00a      	b.n	800126c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001256:	f7ff fb73 	bl	8000940 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	f241 3288 	movw	r2, #5000	; 0x1388
 8001264:	4293      	cmp	r3, r2
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e0a6      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 800126e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1ee      	bne.n	8001256 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001278:	7dfb      	ldrb	r3, [r7, #23]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d105      	bne.n	800128a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800127e:	4b52      	ldr	r3, [pc, #328]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a51      	ldr	r2, [pc, #324]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8092 	beq.w	80013b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001294:	4b4c      	ldr	r3, [pc, #304]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b08      	cmp	r3, #8
 800129e:	d05c      	beq.n	800135a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d141      	bne.n	800132c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a8:	4b48      	ldr	r3, [pc, #288]	; (80013cc <HAL_RCC_OscConfig+0x4dc>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ae:	f7ff fb47 	bl	8000940 <HAL_GetTick>
 80012b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012b6:	f7ff fb43 	bl	8000940 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e078      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012c8:	4b3f      	ldr	r3, [pc, #252]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f0      	bne.n	80012b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69da      	ldr	r2, [r3, #28]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	019b      	lsls	r3, r3, #6
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ea:	085b      	lsrs	r3, r3, #1
 80012ec:	3b01      	subs	r3, #1
 80012ee:	041b      	lsls	r3, r3, #16
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f6:	061b      	lsls	r3, r3, #24
 80012f8:	4933      	ldr	r1, [pc, #204]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012fe:	4b33      	ldr	r3, [pc, #204]	; (80013cc <HAL_RCC_OscConfig+0x4dc>)
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fb1c 	bl	8000940 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130c:	f7ff fb18 	bl	8000940 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e04d      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131e:	4b2a      	ldr	r3, [pc, #168]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x41c>
 800132a:	e045      	b.n	80013b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <HAL_RCC_OscConfig+0x4dc>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001332:	f7ff fb05 	bl	8000940 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133a:	f7ff fb01 	bl	8000940 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e036      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f0      	bne.n	800133a <HAL_RCC_OscConfig+0x44a>
 8001358:	e02e      	b.n	80013b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d101      	bne.n	8001366 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e029      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_RCC_OscConfig+0x4d8>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	429a      	cmp	r2, r3
 8001378:	d11c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001384:	429a      	cmp	r2, r3
 8001386:	d115      	bne.n	80013b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800138e:	4013      	ands	r3, r2
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001394:	4293      	cmp	r3, r2
 8001396:	d10d      	bne.n	80013b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d106      	bne.n	80013b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e000      	b.n	80013ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40007000 	.word	0x40007000
 80013c8:	40023800 	.word	0x40023800
 80013cc:	42470060 	.word	0x42470060

080013d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0cc      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e4:	4b68      	ldr	r3, [pc, #416]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 030f 	and.w	r3, r3, #15
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d90c      	bls.n	800140c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f2:	4b65      	ldr	r3, [pc, #404]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b63      	ldr	r3, [pc, #396]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0b8      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001424:	4b59      	ldr	r3, [pc, #356]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	4a58      	ldr	r2, [pc, #352]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800142e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800143c:	4b53      	ldr	r3, [pc, #332]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4a52      	ldr	r2, [pc, #328]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001448:	4b50      	ldr	r3, [pc, #320]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	494d      	ldr	r1, [pc, #308]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	4313      	orrs	r3, r2
 8001458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d044      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d107      	bne.n	800147e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d119      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e07f      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d003      	beq.n	800148e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800148a:	2b03      	cmp	r3, #3
 800148c:	d107      	bne.n	800149e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d109      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e06f      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e067      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ae:	4b37      	ldr	r3, [pc, #220]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f023 0203 	bic.w	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4934      	ldr	r1, [pc, #208]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c0:	f7ff fa3e 	bl	8000940 <HAL_GetTick>
 80014c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	e00a      	b.n	80014de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c8:	f7ff fa3a 	bl	8000940 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e04f      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 020c 	and.w	r2, r3, #12
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d1eb      	bne.n	80014c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 030f 	and.w	r3, r3, #15
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d20c      	bcs.n	8001518 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e032      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4916      	ldr	r1, [pc, #88]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	4313      	orrs	r3, r2
 8001534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	490e      	ldr	r1, [pc, #56]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	4313      	orrs	r3, r2
 8001554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001556:	f000 f82d 	bl	80015b4 <HAL_RCC_GetSysClockFreq>
 800155a:	4601      	mov	r1, r0
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 8001568:	5cd3      	ldrb	r3, [r2, r3]
 800156a:	fa21 f303 	lsr.w	r3, r1, r3
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_RCC_ClockConfig+0x1c8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f9b2 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023c00 	.word	0x40023c00
 800158c:	40023800 	.word	0x40023800
 8001590:	08003e94 	.word	0x08003e94
 8001594:	20000000 	.word	0x20000000
 8001598:	20000004 	.word	0x20000004

0800159c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_RCC_EnableCSS+0x14>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	601a      	str	r2, [r3, #0]
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	4247004c 	.word	0x4247004c

080015b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	2300      	movs	r3, #0
 80015c4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ca:	4b63      	ldr	r3, [pc, #396]	; (8001758 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d007      	beq.n	80015e6 <HAL_RCC_GetSysClockFreq+0x32>
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d008      	beq.n	80015ec <HAL_RCC_GetSysClockFreq+0x38>
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f040 80b4 	bne.w	8001748 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015e0:	4b5e      	ldr	r3, [pc, #376]	; (800175c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80015e2:	60bb      	str	r3, [r7, #8]
       break;
 80015e4:	e0b3      	b.n	800174e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015e6:	4b5e      	ldr	r3, [pc, #376]	; (8001760 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80015e8:	60bb      	str	r3, [r7, #8]
      break;
 80015ea:	e0b0      	b.n	800174e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015ec:	4b5a      	ldr	r3, [pc, #360]	; (8001758 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015f4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015f6:	4b58      	ldr	r3, [pc, #352]	; (8001758 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d04a      	beq.n	8001698 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001602:	4b55      	ldr	r3, [pc, #340]	; (8001758 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	099b      	lsrs	r3, r3, #6
 8001608:	f04f 0400 	mov.w	r4, #0
 800160c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	ea03 0501 	and.w	r5, r3, r1
 8001618:	ea04 0602 	and.w	r6, r4, r2
 800161c:	4629      	mov	r1, r5
 800161e:	4632      	mov	r2, r6
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	f04f 0400 	mov.w	r4, #0
 8001628:	0154      	lsls	r4, r2, #5
 800162a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800162e:	014b      	lsls	r3, r1, #5
 8001630:	4619      	mov	r1, r3
 8001632:	4622      	mov	r2, r4
 8001634:	1b49      	subs	r1, r1, r5
 8001636:	eb62 0206 	sbc.w	r2, r2, r6
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	f04f 0400 	mov.w	r4, #0
 8001642:	0194      	lsls	r4, r2, #6
 8001644:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001648:	018b      	lsls	r3, r1, #6
 800164a:	1a5b      	subs	r3, r3, r1
 800164c:	eb64 0402 	sbc.w	r4, r4, r2
 8001650:	f04f 0100 	mov.w	r1, #0
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	00e2      	lsls	r2, r4, #3
 800165a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800165e:	00d9      	lsls	r1, r3, #3
 8001660:	460b      	mov	r3, r1
 8001662:	4614      	mov	r4, r2
 8001664:	195b      	adds	r3, r3, r5
 8001666:	eb44 0406 	adc.w	r4, r4, r6
 800166a:	f04f 0100 	mov.w	r1, #0
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	0262      	lsls	r2, r4, #9
 8001674:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001678:	0259      	lsls	r1, r3, #9
 800167a:	460b      	mov	r3, r1
 800167c:	4614      	mov	r4, r2
 800167e:	4618      	mov	r0, r3
 8001680:	4621      	mov	r1, r4
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f04f 0400 	mov.w	r4, #0
 8001688:	461a      	mov	r2, r3
 800168a:	4623      	mov	r3, r4
 800168c:	f7fe fda0 	bl	80001d0 <__aeabi_uldivmod>
 8001690:	4603      	mov	r3, r0
 8001692:	460c      	mov	r4, r1
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	e049      	b.n	800172c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001698:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	099b      	lsrs	r3, r3, #6
 800169e:	f04f 0400 	mov.w	r4, #0
 80016a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	ea03 0501 	and.w	r5, r3, r1
 80016ae:	ea04 0602 	and.w	r6, r4, r2
 80016b2:	4629      	mov	r1, r5
 80016b4:	4632      	mov	r2, r6
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	f04f 0400 	mov.w	r4, #0
 80016be:	0154      	lsls	r4, r2, #5
 80016c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016c4:	014b      	lsls	r3, r1, #5
 80016c6:	4619      	mov	r1, r3
 80016c8:	4622      	mov	r2, r4
 80016ca:	1b49      	subs	r1, r1, r5
 80016cc:	eb62 0206 	sbc.w	r2, r2, r6
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	f04f 0400 	mov.w	r4, #0
 80016d8:	0194      	lsls	r4, r2, #6
 80016da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016de:	018b      	lsls	r3, r1, #6
 80016e0:	1a5b      	subs	r3, r3, r1
 80016e2:	eb64 0402 	sbc.w	r4, r4, r2
 80016e6:	f04f 0100 	mov.w	r1, #0
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	00e2      	lsls	r2, r4, #3
 80016f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016f4:	00d9      	lsls	r1, r3, #3
 80016f6:	460b      	mov	r3, r1
 80016f8:	4614      	mov	r4, r2
 80016fa:	195b      	adds	r3, r3, r5
 80016fc:	eb44 0406 	adc.w	r4, r4, r6
 8001700:	f04f 0100 	mov.w	r1, #0
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	02a2      	lsls	r2, r4, #10
 800170a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800170e:	0299      	lsls	r1, r3, #10
 8001710:	460b      	mov	r3, r1
 8001712:	4614      	mov	r4, r2
 8001714:	4618      	mov	r0, r3
 8001716:	4621      	mov	r1, r4
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f04f 0400 	mov.w	r4, #0
 800171e:	461a      	mov	r2, r3
 8001720:	4623      	mov	r3, r4
 8001722:	f7fe fd55 	bl	80001d0 <__aeabi_uldivmod>
 8001726:	4603      	mov	r3, r0
 8001728:	460c      	mov	r4, r1
 800172a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800172c:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	0c1b      	lsrs	r3, r3, #16
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	3301      	adds	r3, #1
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	fbb2 f3f3 	udiv	r3, r2, r3
 8001744:	60bb      	str	r3, [r7, #8]
      break;
 8001746:	e002      	b.n	800174e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001748:	4b04      	ldr	r3, [pc, #16]	; (800175c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800174a:	60bb      	str	r3, [r7, #8]
      break;
 800174c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800174e:	68bb      	ldr	r3, [r7, #8]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	00f42400 	.word	0x00f42400
 8001760:	007a1200 	.word	0x007a1200

08001764 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_RCC_NMI_IRQHandler+0x20>)
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001770:	2b80      	cmp	r3, #128	; 0x80
 8001772:	d104      	bne.n	800177e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001774:	f000 f80a 	bl	800178c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <HAL_RCC_NMI_IRQHandler+0x24>)
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	701a      	strb	r2, [r3, #0]
  }
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800
 8001788:	4002380e 	.word	0x4002380e

0800178c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f103 0208 	add.w	r2, r3, #8
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f04f 32ff 	mov.w	r2, #4294967295
 80017b2:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f103 0208 	add.w	r2, r3, #8
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f103 0208 	add.w	r2, r3, #8
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	601a      	str	r2, [r3, #0]
}
 8001830:	bf00      	nop
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001852:	d103      	bne.n	800185c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	e00c      	b.n	8001876 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3308      	adds	r3, #8
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e002      	b.n	800186a <vListInsert+0x2e>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68ba      	ldr	r2, [r7, #8]
 8001872:	429a      	cmp	r2, r3
 8001874:	d2f6      	bcs.n	8001864 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	601a      	str	r2, [r3, #0]
}
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80018ae:	b480      	push	{r7}
 80018b0:	b085      	sub	sp, #20
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	6892      	ldr	r2, [r2, #8]
 80018c4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6852      	ldr	r2, [r2, #4]
 80018ce:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d103      	bne.n	80018e2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	1e5a      	subs	r2, r3, #1
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d109      	bne.n	800192c <xQueueGenericReset+0x28>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800191c:	f383 8811 	msr	BASEPRI, r3
 8001920:	f3bf 8f6f 	isb	sy
 8001924:	f3bf 8f4f 	dsb	sy
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	e7fe      	b.n	800192a <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 800192c:	f001 ff58 	bl	80037e0 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001938:	68f9      	ldr	r1, [r7, #12]
 800193a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800193c:	fb01 f303 	mul.w	r3, r1, r3
 8001940:	441a      	add	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800195c:	3b01      	subs	r3, #1
 800195e:	68f9      	ldr	r1, [r7, #12]
 8001960:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	441a      	add	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	22ff      	movs	r2, #255	; 0xff
 8001970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	22ff      	movs	r2, #255	; 0xff
 8001978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d114      	bne.n	80019ac <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d01a      	beq.n	80019c0 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	3310      	adds	r3, #16
 800198e:	4618      	mov	r0, r3
 8001990:	f001 f85c 	bl	8002a4c <xTaskRemoveFromEventList>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d012      	beq.n	80019c0 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <xQueueGenericReset+0xcc>)
 800199c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	f3bf 8f4f 	dsb	sy
 80019a6:	f3bf 8f6f 	isb	sy
 80019aa:	e009      	b.n	80019c0 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	3310      	adds	r3, #16
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fef2 	bl	800179a <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3324      	adds	r3, #36	; 0x24
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff feed 	bl	800179a <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80019c0:	f001 ff3c 	bl	800383c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80019c4:	2301      	movs	r3, #1
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000ed04 	.word	0xe000ed04

080019d4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	; 0x30
 80019d8:	af02      	add	r7, sp, #8
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	4613      	mov	r3, r2
 80019e0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d109      	bne.n	80019fc <xQueueGenericCreate+0x28>
 80019e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ec:	f383 8811 	msr	BASEPRI, r3
 80019f0:	f3bf 8f6f 	isb	sy
 80019f4:	f3bf 8f4f 	dsb	sy
 80019f8:	61bb      	str	r3, [r7, #24]
 80019fa:	e7fe      	b.n	80019fa <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <xQueueGenericCreate+0x46>
 8001a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d101      	bne.n	8001a1e <xQueueGenericCreate+0x4a>
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <xQueueGenericCreate+0x4c>
 8001a1e:	2300      	movs	r3, #0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d109      	bne.n	8001a38 <xQueueGenericCreate+0x64>
 8001a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a28:	f383 8811 	msr	BASEPRI, r3
 8001a2c:	f3bf 8f6f 	isb	sy
 8001a30:	f3bf 8f4f 	dsb	sy
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e7fe      	b.n	8001a36 <xQueueGenericCreate+0x62>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	3350      	adds	r3, #80	; 0x50
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f001 ffe9 	bl	8003a14 <pvPortMalloc>
 8001a42:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00d      	beq.n	8001a66 <xQueueGenericCreate+0x92>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001a4a:	6a3b      	ldr	r3, [r7, #32]
 8001a4c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3350      	adds	r3, #80	; 0x50
 8001a52:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001a54:	79fa      	ldrb	r2, [r7, #7]
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	68b9      	ldr	r1, [r7, #8]
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f000 f805 	bl	8001a70 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001a66:	6a3b      	ldr	r3, [r7, #32]
    }
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3728      	adds	r7, #40	; 0x28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d103      	bne.n	8001a8c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	e002      	b.n	8001a92 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	69b8      	ldr	r0, [r7, #24]
 8001aa2:	f7ff ff2f 	bl	8001904 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	78fa      	ldrb	r2, [r7, #3]
 8001aaa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08e      	sub	sp, #56	; 0x38
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d109      	bne.n	8001ae8 <xQueueGenericSend+0x30>
 8001ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad8:	f383 8811 	msr	BASEPRI, r3
 8001adc:	f3bf 8f6f 	isb	sy
 8001ae0:	f3bf 8f4f 	dsb	sy
 8001ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ae6:	e7fe      	b.n	8001ae6 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d103      	bne.n	8001af6 <xQueueGenericSend+0x3e>
 8001aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <xQueueGenericSend+0x42>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <xQueueGenericSend+0x44>
 8001afa:	2300      	movs	r3, #0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <xQueueGenericSend+0x5c>
 8001b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b04:	f383 8811 	msr	BASEPRI, r3
 8001b08:	f3bf 8f6f 	isb	sy
 8001b0c:	f3bf 8f4f 	dsb	sy
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
 8001b12:	e7fe      	b.n	8001b12 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d103      	bne.n	8001b22 <xQueueGenericSend+0x6a>
 8001b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <xQueueGenericSend+0x6e>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <xQueueGenericSend+0x70>
 8001b26:	2300      	movs	r3, #0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d109      	bne.n	8001b40 <xQueueGenericSend+0x88>
 8001b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b30:	f383 8811 	msr	BASEPRI, r3
 8001b34:	f3bf 8f6f 	isb	sy
 8001b38:	f3bf 8f4f 	dsb	sy
 8001b3c:	623b      	str	r3, [r7, #32]
 8001b3e:	e7fe      	b.n	8001b3e <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b40:	f001 f91c 	bl	8002d7c <xTaskGetSchedulerState>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d102      	bne.n	8001b50 <xQueueGenericSend+0x98>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <xQueueGenericSend+0x9c>
 8001b50:	2301      	movs	r3, #1
 8001b52:	e000      	b.n	8001b56 <xQueueGenericSend+0x9e>
 8001b54:	2300      	movs	r3, #0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d109      	bne.n	8001b6e <xQueueGenericSend+0xb6>
 8001b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5e:	f383 8811 	msr	BASEPRI, r3
 8001b62:	f3bf 8f6f 	isb	sy
 8001b66:	f3bf 8f4f 	dsb	sy
 8001b6a:	61fb      	str	r3, [r7, #28]
 8001b6c:	e7fe      	b.n	8001b6c <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001b6e:	f001 fe37 	bl	80037e0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d302      	bcc.n	8001b84 <xQueueGenericSend+0xcc>
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d129      	bne.n	8001bd8 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	68b9      	ldr	r1, [r7, #8]
 8001b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001b8a:	f000 fa11 	bl	8001fb0 <prvCopyDataToQueue>
 8001b8e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d010      	beq.n	8001bba <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9a:	3324      	adds	r3, #36	; 0x24
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f000 ff55 	bl	8002a4c <xTaskRemoveFromEventList>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d013      	beq.n	8001bd0 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001ba8:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <xQueueGenericSend+0x1f0>)
 8001baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	f3bf 8f4f 	dsb	sy
 8001bb4:	f3bf 8f6f 	isb	sy
 8001bb8:	e00a      	b.n	8001bd0 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001bc0:	4b39      	ldr	r3, [pc, #228]	; (8001ca8 <xQueueGenericSend+0x1f0>)
 8001bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	f3bf 8f4f 	dsb	sy
 8001bcc:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001bd0:	f001 fe34 	bl	800383c <vPortExitCritical>
                return pdPASS;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e063      	b.n	8001ca0 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d103      	bne.n	8001be6 <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001bde:	f001 fe2d 	bl	800383c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e05c      	b.n	8001ca0 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d106      	bne.n	8001bfa <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 ff8d 	bl	8002b10 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001bfa:	f001 fe1f 	bl	800383c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001bfe:	f000 fd0b 	bl	8002618 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001c02:	f001 fded 	bl	80037e0 <vPortEnterCritical>
 8001c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c0c:	b25b      	sxtb	r3, r3
 8001c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c12:	d103      	bne.n	8001c1c <xQueueGenericSend+0x164>
 8001c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c22:	b25b      	sxtb	r3, r3
 8001c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c28:	d103      	bne.n	8001c32 <xQueueGenericSend+0x17a>
 8001c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c32:	f001 fe03 	bl	800383c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001c36:	1d3a      	adds	r2, r7, #4
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 ff7c 	bl	8002b3c <xTaskCheckForTimeOut>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d124      	bne.n	8001c94 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001c4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c4c:	f000 faa8 	bl	80021a0 <prvIsQueueFull>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d018      	beq.n	8001c88 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c58:	3310      	adds	r3, #16
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 fea6 	bl	80029b0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c66:	f000 fa33 	bl	80020d0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001c6a:	f000 fce3 	bl	8002634 <xTaskResumeAll>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f47f af7c 	bne.w	8001b6e <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <xQueueGenericSend+0x1f0>)
 8001c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	f3bf 8f4f 	dsb	sy
 8001c82:	f3bf 8f6f 	isb	sy
 8001c86:	e772      	b.n	8001b6e <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c8a:	f000 fa21 	bl	80020d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001c8e:	f000 fcd1 	bl	8002634 <xTaskResumeAll>
 8001c92:	e76c      	b.n	8001b6e <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c96:	f000 fa1b 	bl	80020d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001c9a:	f000 fccb 	bl	8002634 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8001c9e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3738      	adds	r7, #56	; 0x38
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	e000ed04 	.word	0xe000ed04

08001cac <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b090      	sub	sp, #64	; 0x40
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8001cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d109      	bne.n	8001cd8 <xQueueGenericSendFromISR+0x2c>
 8001cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc8:	f383 8811 	msr	BASEPRI, r3
 8001ccc:	f3bf 8f6f 	isb	sy
 8001cd0:	f3bf 8f4f 	dsb	sy
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cd6:	e7fe      	b.n	8001cd6 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d103      	bne.n	8001ce6 <xQueueGenericSendFromISR+0x3a>
 8001cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <xQueueGenericSendFromISR+0x3e>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <xQueueGenericSendFromISR+0x40>
 8001cea:	2300      	movs	r3, #0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d109      	bne.n	8001d04 <xQueueGenericSendFromISR+0x58>
 8001cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf4:	f383 8811 	msr	BASEPRI, r3
 8001cf8:	f3bf 8f6f 	isb	sy
 8001cfc:	f3bf 8f4f 	dsb	sy
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
 8001d02:	e7fe      	b.n	8001d02 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d103      	bne.n	8001d12 <xQueueGenericSendFromISR+0x66>
 8001d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <xQueueGenericSendFromISR+0x6a>
 8001d12:	2301      	movs	r3, #1
 8001d14:	e000      	b.n	8001d18 <xQueueGenericSendFromISR+0x6c>
 8001d16:	2300      	movs	r3, #0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <xQueueGenericSendFromISR+0x84>
 8001d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d20:	f383 8811 	msr	BASEPRI, r3
 8001d24:	f3bf 8f6f 	isb	sy
 8001d28:	f3bf 8f4f 	dsb	sy
 8001d2c:	623b      	str	r3, [r7, #32]
 8001d2e:	e7fe      	b.n	8001d2e <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001d30:	f001 fe32 	bl	8003998 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8001d34:	f3ef 8211 	mrs	r2, BASEPRI
 8001d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d3c:	f383 8811 	msr	BASEPRI, r3
 8001d40:	f3bf 8f6f 	isb	sy
 8001d44:	f3bf 8f4f 	dsb	sy
 8001d48:	61fa      	str	r2, [r7, #28]
 8001d4a:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001d4e:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d302      	bcc.n	8001d62 <xQueueGenericSendFromISR+0xb6>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d13d      	bne.n	8001dde <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8001d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d72:	683a      	ldr	r2, [r7, #0]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001d78:	f000 f91a 	bl	8001fb0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8001d7c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d84:	d112      	bne.n	8001dac <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d024      	beq.n	8001dd8 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d90:	3324      	adds	r3, #36	; 0x24
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 fe5a 	bl	8002a4c <xTaskRemoveFromEventList>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d01c      	beq.n	8001dd8 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d019      	beq.n	8001dd8 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	e015      	b.n	8001dd8 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8001dac:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001db0:	2b7f      	cmp	r3, #127	; 0x7f
 8001db2:	d109      	bne.n	8001dc8 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 8001db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db8:	f383 8811 	msr	BASEPRI, r3
 8001dbc:	f3bf 8f6f 	isb	sy
 8001dc0:	f3bf 8f4f 	dsb	sy
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	e7fe      	b.n	8001dc6 <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001dc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001dcc:	3301      	adds	r3, #1
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	b25a      	sxtb	r2, r3
 8001dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8001ddc:	e001      	b.n	8001de2 <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3740      	adds	r7, #64	; 0x40
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08c      	sub	sp, #48	; 0x30
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d109      	bne.n	8001e26 <xQueueReceive+0x2e>
        __asm volatile
 8001e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e16:	f383 8811 	msr	BASEPRI, r3
 8001e1a:	f3bf 8f6f 	isb	sy
 8001e1e:	f3bf 8f4f 	dsb	sy
 8001e22:	623b      	str	r3, [r7, #32]
 8001e24:	e7fe      	b.n	8001e24 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d103      	bne.n	8001e34 <xQueueReceive+0x3c>
 8001e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <xQueueReceive+0x40>
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <xQueueReceive+0x42>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <xQueueReceive+0x5a>
 8001e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e42:	f383 8811 	msr	BASEPRI, r3
 8001e46:	f3bf 8f6f 	isb	sy
 8001e4a:	f3bf 8f4f 	dsb	sy
 8001e4e:	61fb      	str	r3, [r7, #28]
 8001e50:	e7fe      	b.n	8001e50 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e52:	f000 ff93 	bl	8002d7c <xTaskGetSchedulerState>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d102      	bne.n	8001e62 <xQueueReceive+0x6a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <xQueueReceive+0x6e>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e000      	b.n	8001e68 <xQueueReceive+0x70>
 8001e66:	2300      	movs	r3, #0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d109      	bne.n	8001e80 <xQueueReceive+0x88>
 8001e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e70:	f383 8811 	msr	BASEPRI, r3
 8001e74:	f3bf 8f6f 	isb	sy
 8001e78:	f3bf 8f4f 	dsb	sy
 8001e7c:	61bb      	str	r3, [r7, #24]
 8001e7e:	e7fe      	b.n	8001e7e <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001e80:	f001 fcae 	bl	80037e0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d01f      	beq.n	8001ed0 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e94:	f000 f8f6 	bl	8002084 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	1e5a      	subs	r2, r3, #1
 8001e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e9e:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00f      	beq.n	8001ec8 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eaa:	3310      	adds	r3, #16
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 fdcd 	bl	8002a4c <xTaskRemoveFromEventList>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001eb8:	4b3c      	ldr	r3, [pc, #240]	; (8001fac <xQueueReceive+0x1b4>)
 8001eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	f3bf 8f4f 	dsb	sy
 8001ec4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001ec8:	f001 fcb8 	bl	800383c <vPortExitCritical>
                return pdPASS;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e069      	b.n	8001fa4 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d103      	bne.n	8001ede <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001ed6:	f001 fcb1 	bl	800383c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e062      	b.n	8001fa4 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d106      	bne.n	8001ef2 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001ee4:	f107 0310 	add.w	r3, r7, #16
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fe11 	bl	8002b10 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001ef2:	f001 fca3 	bl	800383c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001ef6:	f000 fb8f 	bl	8002618 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001efa:	f001 fc71 	bl	80037e0 <vPortEnterCritical>
 8001efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f04:	b25b      	sxtb	r3, r3
 8001f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0a:	d103      	bne.n	8001f14 <xQueueReceive+0x11c>
 8001f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f1a:	b25b      	sxtb	r3, r3
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f20:	d103      	bne.n	8001f2a <xQueueReceive+0x132>
 8001f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f2a:	f001 fc87 	bl	800383c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f2e:	1d3a      	adds	r2, r7, #4
 8001f30:	f107 0310 	add.w	r3, r7, #16
 8001f34:	4611      	mov	r1, r2
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fe00 	bl	8002b3c <xTaskCheckForTimeOut>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d123      	bne.n	8001f8a <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f44:	f000 f916 	bl	8002174 <prvIsQueueEmpty>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d017      	beq.n	8001f7e <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f50:	3324      	adds	r3, #36	; 0x24
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4611      	mov	r1, r2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 fd2a 	bl	80029b0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f5e:	f000 f8b7 	bl	80020d0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001f62:	f000 fb67 	bl	8002634 <xTaskResumeAll>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d189      	bne.n	8001e80 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <xQueueReceive+0x1b4>)
 8001f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	f3bf 8f4f 	dsb	sy
 8001f78:	f3bf 8f6f 	isb	sy
 8001f7c:	e780      	b.n	8001e80 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f80:	f000 f8a6 	bl	80020d0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001f84:	f000 fb56 	bl	8002634 <xTaskResumeAll>
 8001f88:	e77a      	b.n	8001e80 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f8c:	f000 f8a0 	bl	80020d0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001f90:	f000 fb50 	bl	8002634 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f96:	f000 f8ed 	bl	8002174 <prvIsQueueEmpty>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f43f af6f 	beq.w	8001e80 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8001fa2:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3730      	adds	r7, #48	; 0x30
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	e000ed04 	.word	0xe000ed04

08001fb0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10d      	bne.n	8001fea <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d14d      	bne.n	8002072 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 feec 	bl	8002db8 <xTaskPriorityDisinherit>
 8001fe0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	e043      	b.n	8002072 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d119      	bne.n	8002024 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6858      	ldr	r0, [r3, #4]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	68b9      	ldr	r1, [r7, #8]
 8001ffc:	f001 ff12 	bl	8003e24 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	441a      	add	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	429a      	cmp	r2, r3
 8002018:	d32b      	bcc.n	8002072 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	e026      	b.n	8002072 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	68d8      	ldr	r0, [r3, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202c:	461a      	mov	r2, r3
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	f001 fef8 	bl	8003e24 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	425b      	negs	r3, r3
 800203e:	441a      	add	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d207      	bcs.n	8002060 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	425b      	negs	r3, r3
 800205a:	441a      	add	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d105      	bne.n	8002072 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	3b01      	subs	r3, #1
 8002070:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1c5a      	adds	r2, r3, #1
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800207a:	697b      	ldr	r3, [r7, #20]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d018      	beq.n	80020c8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	441a      	add	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d303      	bcc.n	80020b8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68d9      	ldr	r1, [r3, #12]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	461a      	mov	r2, r3
 80020c2:	6838      	ldr	r0, [r7, #0]
 80020c4:	f001 feae 	bl	8003e24 <memcpy>
    }
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80020d8:	f001 fb82 	bl	80037e0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020e2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80020e4:	e011      	b.n	800210a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d012      	beq.n	8002114 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3324      	adds	r3, #36	; 0x24
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fcaa 	bl	8002a4c <xTaskRemoveFromEventList>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80020fe:	f000 fd81 	bl	8002c04 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	3b01      	subs	r3, #1
 8002106:	b2db      	uxtb	r3, r3
 8002108:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	2b00      	cmp	r3, #0
 8002110:	dce9      	bgt.n	80020e6 <prvUnlockQueue+0x16>
 8002112:	e000      	b.n	8002116 <prvUnlockQueue+0x46>
                        break;
 8002114:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	22ff      	movs	r2, #255	; 0xff
 800211a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800211e:	f001 fb8d 	bl	800383c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002122:	f001 fb5d 	bl	80037e0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800212c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800212e:	e011      	b.n	8002154 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d012      	beq.n	800215e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3310      	adds	r3, #16
 800213c:	4618      	mov	r0, r3
 800213e:	f000 fc85 	bl	8002a4c <xTaskRemoveFromEventList>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002148:	f000 fd5c 	bl	8002c04 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800214c:	7bbb      	ldrb	r3, [r7, #14]
 800214e:	3b01      	subs	r3, #1
 8002150:	b2db      	uxtb	r3, r3
 8002152:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002154:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002158:	2b00      	cmp	r3, #0
 800215a:	dce9      	bgt.n	8002130 <prvUnlockQueue+0x60>
 800215c:	e000      	b.n	8002160 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800215e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	22ff      	movs	r2, #255	; 0xff
 8002164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002168:	f001 fb68 	bl	800383c <vPortExitCritical>
}
 800216c:	bf00      	nop
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800217c:	f001 fb30 	bl	80037e0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002188:	2301      	movs	r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	e001      	b.n	8002192 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002192:	f001 fb53 	bl	800383c <vPortExitCritical>

    return xReturn;
 8002196:	68fb      	ldr	r3, [r7, #12]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80021a8:	f001 fb1a 	bl	80037e0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d102      	bne.n	80021be <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80021b8:	2301      	movs	r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	e001      	b.n	80021c2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80021c2:	f001 fb3b 	bl	800383c <vPortExitCritical>

    return xReturn;
 80021c6:	68fb      	ldr	r3, [r7, #12]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	e014      	b.n	800220a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80021e0:	4a0e      	ldr	r2, [pc, #56]	; (800221c <vQueueAddToRegistry+0x4c>)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10b      	bne.n	8002204 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80021ec:	490b      	ldr	r1, [pc, #44]	; (800221c <vQueueAddToRegistry+0x4c>)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80021f6:	4a09      	ldr	r2, [pc, #36]	; (800221c <vQueueAddToRegistry+0x4c>)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8002202:	e005      	b.n	8002210 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3301      	adds	r3, #1
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2b07      	cmp	r3, #7
 800220e:	d9e7      	bls.n	80021e0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	20012da0 	.word	0x20012da0

08002220 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002230:	f001 fad6 	bl	80037e0 <vPortEnterCritical>
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800223a:	b25b      	sxtb	r3, r3
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002240:	d103      	bne.n	800224a <vQueueWaitForMessageRestricted+0x2a>
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002250:	b25b      	sxtb	r3, r3
 8002252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002256:	d103      	bne.n	8002260 <vQueueWaitForMessageRestricted+0x40>
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002260:	f001 faec 	bl	800383c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002268:	2b00      	cmp	r3, #0
 800226a:	d106      	bne.n	800227a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	3324      	adds	r3, #36	; 0x24
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	68b9      	ldr	r1, [r7, #8]
 8002274:	4618      	mov	r0, r3
 8002276:	f000 fbbf 	bl	80029f8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800227a:	6978      	ldr	r0, [r7, #20]
 800227c:	f7ff ff28 	bl	80020d0 <prvUnlockQueue>
    }
 8002280:	bf00      	nop
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002288:	b580      	push	{r7, lr}
 800228a:	b08c      	sub	sp, #48	; 0x30
 800228c:	af04      	add	r7, sp, #16
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	4613      	mov	r3, r2
 8002296:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4618      	mov	r0, r3
 800229e:	f001 fbb9 	bl	8003a14 <pvPortMalloc>
 80022a2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00e      	beq.n	80022c8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80022aa:	2058      	movs	r0, #88	; 0x58
 80022ac:	f001 fbb2 	bl	8003a14 <pvPortMalloc>
 80022b0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30
 80022be:	e005      	b.n	80022cc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80022c0:	6978      	ldr	r0, [r7, #20]
 80022c2:	f001 fc6f 	bl	8003ba4 <vPortFree>
 80022c6:	e001      	b.n	80022cc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d013      	beq.n	80022fa <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022d2:	88fa      	ldrh	r2, [r7, #6]
 80022d4:	2300      	movs	r3, #0
 80022d6:	9303      	str	r3, [sp, #12]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	9302      	str	r3, [sp, #8]
 80022dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68b9      	ldr	r1, [r7, #8]
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 f80e 	bl	800230a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80022ee:	69f8      	ldr	r0, [r7, #28]
 80022f0:	f000 f8a0 	bl	8002434 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80022f4:	2301      	movs	r3, #1
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	e002      	b.n	8002300 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295
 80022fe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002300:	69bb      	ldr	r3, [r7, #24]
    }
 8002302:	4618      	mov	r0, r3
 8002304:	3720      	adds	r7, #32
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b088      	sub	sp, #32
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	607a      	str	r2, [r7, #4]
 8002316:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800231a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	461a      	mov	r2, r3
 8002322:	21a5      	movs	r1, #165	; 0xa5
 8002324:	f001 fd89 	bl	8003e3a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002332:	3b01      	subs	r3, #1
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4413      	add	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f023 0307 	bic.w	r3, r3, #7
 8002340:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	2b00      	cmp	r3, #0
 800234a:	d009      	beq.n	8002360 <prvInitialiseNewTask+0x56>
 800234c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002350:	f383 8811 	msr	BASEPRI, r3
 8002354:	f3bf 8f6f 	isb	sy
 8002358:	f3bf 8f4f 	dsb	sy
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	e7fe      	b.n	800235e <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d01f      	beq.n	80023a6 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	e012      	b.n	8002392 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	4413      	add	r3, r2
 8002372:	7819      	ldrb	r1, [r3, #0]
 8002374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	4413      	add	r3, r2
 800237a:	3334      	adds	r3, #52	; 0x34
 800237c:	460a      	mov	r2, r1
 800237e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	4413      	add	r3, r2
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d006      	beq.n	800239a <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	3301      	adds	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	2b09      	cmp	r3, #9
 8002396:	d9e9      	bls.n	800236c <prvInitialiseNewTask+0x62>
 8002398:	e000      	b.n	800239c <prvInitialiseNewTask+0x92>
            {
                break;
 800239a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800239c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80023a4:	e003      	b.n	80023ae <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80023a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80023ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d901      	bls.n	80023b8 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023b4:	2304      	movs	r3, #4
 80023b6:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80023b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023bc:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023c2:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80023c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c6:	2200      	movs	r2, #0
 80023c8:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	3304      	adds	r3, #4
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fa03 	bl	80017da <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d6:	3318      	adds	r3, #24
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff f9fe 	bl	80017da <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023e2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e6:	f1c3 0205 	rsb	r2, r3, #5
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80023f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f6:	3350      	adds	r3, #80	; 0x50
 80023f8:	2204      	movs	r2, #4
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f001 fd1c 	bl	8003e3a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002404:	3354      	adds	r3, #84	; 0x54
 8002406:	2201      	movs	r2, #1
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f001 fd15 	bl	8003e3a <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	68f9      	ldr	r1, [r7, #12]
 8002414:	69b8      	ldr	r0, [r7, #24]
 8002416:	f001 f8bb 	bl	8003590 <pxPortInitialiseStack>
 800241a:	4602      	mov	r2, r0
 800241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800242a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800242c:	bf00      	nop
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800243c:	f001 f9d0 	bl	80037e0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002440:	4b2c      	ldr	r3, [pc, #176]	; (80024f4 <prvAddNewTaskToReadyList+0xc0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	3301      	adds	r3, #1
 8002446:	4a2b      	ldr	r2, [pc, #172]	; (80024f4 <prvAddNewTaskToReadyList+0xc0>)
 8002448:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800244a:	4b2b      	ldr	r3, [pc, #172]	; (80024f8 <prvAddNewTaskToReadyList+0xc4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002452:	4a29      	ldr	r2, [pc, #164]	; (80024f8 <prvAddNewTaskToReadyList+0xc4>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002458:	4b26      	ldr	r3, [pc, #152]	; (80024f4 <prvAddNewTaskToReadyList+0xc0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d110      	bne.n	8002482 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002460:	f000 fbf4 	bl	8002c4c <prvInitialiseTaskLists>
 8002464:	e00d      	b.n	8002482 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002466:	4b25      	ldr	r3, [pc, #148]	; (80024fc <prvAddNewTaskToReadyList+0xc8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800246e:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <prvAddNewTaskToReadyList+0xc4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	429a      	cmp	r2, r3
 800247a:	d802      	bhi.n	8002482 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800247c:	4a1e      	ldr	r2, [pc, #120]	; (80024f8 <prvAddNewTaskToReadyList+0xc4>)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002482:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <prvAddNewTaskToReadyList+0xcc>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3301      	adds	r3, #1
 8002488:	4a1d      	ldr	r2, [pc, #116]	; (8002500 <prvAddNewTaskToReadyList+0xcc>)
 800248a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800248c:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <prvAddNewTaskToReadyList+0xcc>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002498:	2201      	movs	r2, #1
 800249a:	409a      	lsls	r2, r3
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <prvAddNewTaskToReadyList+0xd0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	4a18      	ldr	r2, [pc, #96]	; (8002504 <prvAddNewTaskToReadyList+0xd0>)
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4a15      	ldr	r2, [pc, #84]	; (8002508 <prvAddNewTaskToReadyList+0xd4>)
 80024b4:	441a      	add	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3304      	adds	r3, #4
 80024ba:	4619      	mov	r1, r3
 80024bc:	4610      	mov	r0, r2
 80024be:	f7ff f999 	bl	80017f4 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80024c2:	f001 f9bb 	bl	800383c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <prvAddNewTaskToReadyList+0xc8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00e      	beq.n	80024ec <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024ce:	4b0a      	ldr	r3, [pc, #40]	; (80024f8 <prvAddNewTaskToReadyList+0xc4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	429a      	cmp	r2, r3
 80024da:	d207      	bcs.n	80024ec <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <prvAddNewTaskToReadyList+0xd8>)
 80024de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	2000010c 	.word	0x2000010c
 80024f8:	20000034 	.word	0x20000034
 80024fc:	20000118 	.word	0x20000118
 8002500:	20000128 	.word	0x20000128
 8002504:	20000114 	.word	0x20000114
 8002508:	20000038 	.word	0x20000038
 800250c:	e000ed04 	.word	0xe000ed04

08002510 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d016      	beq.n	8002550 <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002522:	4b13      	ldr	r3, [pc, #76]	; (8002570 <vTaskDelay+0x60>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <vTaskDelay+0x2e>
 800252a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252e:	f383 8811 	msr	BASEPRI, r3
 8002532:	f3bf 8f6f 	isb	sy
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	e7fe      	b.n	800253c <vTaskDelay+0x2c>
            vTaskSuspendAll();
 800253e:	f000 f86b 	bl	8002618 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002542:	2100      	movs	r1, #0
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fcaf 	bl	8002ea8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800254a:	f000 f873 	bl	8002634 <xTaskResumeAll>
 800254e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d107      	bne.n	8002566 <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 8002556:	4b07      	ldr	r3, [pc, #28]	; (8002574 <vTaskDelay+0x64>)
 8002558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	f3bf 8f4f 	dsb	sy
 8002562:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002566:	bf00      	nop
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000134 	.word	0x20000134
 8002574:	e000ed04 	.word	0xe000ed04

08002578 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800257e:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <vTaskStartScheduler+0x84>)
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	2300      	movs	r3, #0
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	2300      	movs	r3, #0
 8002588:	2282      	movs	r2, #130	; 0x82
 800258a:	491d      	ldr	r1, [pc, #116]	; (8002600 <vTaskStartScheduler+0x88>)
 800258c:	481d      	ldr	r0, [pc, #116]	; (8002604 <vTaskStartScheduler+0x8c>)
 800258e:	f7ff fe7b 	bl	8002288 <xTaskCreate>
 8002592:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d102      	bne.n	80025a0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800259a:	f000 fceb 	bl	8002f74 <xTimerCreateTimerTask>
 800259e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d115      	bne.n	80025d2 <vTaskStartScheduler+0x5a>
 80025a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80025b8:	4b13      	ldr	r3, [pc, #76]	; (8002608 <vTaskStartScheduler+0x90>)
 80025ba:	f04f 32ff 	mov.w	r2, #4294967295
 80025be:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80025c0:	4b12      	ldr	r3, [pc, #72]	; (800260c <vTaskStartScheduler+0x94>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <vTaskStartScheduler+0x98>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80025cc:	f001 f86a 	bl	80036a4 <xPortStartScheduler>
 80025d0:	e00d      	b.n	80025ee <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d109      	bne.n	80025ee <vTaskStartScheduler+0x76>
 80025da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025de:	f383 8811 	msr	BASEPRI, r3
 80025e2:	f3bf 8f6f 	isb	sy
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	607b      	str	r3, [r7, #4]
 80025ec:	e7fe      	b.n	80025ec <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <vTaskStartScheduler+0x9c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
}
 80025f2:	bf00      	nop
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000130 	.word	0x20000130
 8002600:	08003e7c 	.word	0x08003e7c
 8002604:	08002c1d 	.word	0x08002c1d
 8002608:	2000012c 	.word	0x2000012c
 800260c:	20000118 	.word	0x20000118
 8002610:	20000110 	.word	0x20000110
 8002614:	2000000c 	.word	0x2000000c

08002618 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800261c:	4b04      	ldr	r3, [pc, #16]	; (8002630 <vTaskSuspendAll+0x18>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3301      	adds	r3, #1
 8002622:	4a03      	ldr	r2, [pc, #12]	; (8002630 <vTaskSuspendAll+0x18>)
 8002624:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	20000134 	.word	0x20000134

08002634 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002642:	4b41      	ldr	r3, [pc, #260]	; (8002748 <xTaskResumeAll+0x114>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <xTaskResumeAll+0x2a>
 800264a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264e:	f383 8811 	msr	BASEPRI, r3
 8002652:	f3bf 8f6f 	isb	sy
 8002656:	f3bf 8f4f 	dsb	sy
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	e7fe      	b.n	800265c <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800265e:	f001 f8bf 	bl	80037e0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002662:	4b39      	ldr	r3, [pc, #228]	; (8002748 <xTaskResumeAll+0x114>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3b01      	subs	r3, #1
 8002668:	4a37      	ldr	r2, [pc, #220]	; (8002748 <xTaskResumeAll+0x114>)
 800266a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800266c:	4b36      	ldr	r3, [pc, #216]	; (8002748 <xTaskResumeAll+0x114>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d161      	bne.n	8002738 <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002674:	4b35      	ldr	r3, [pc, #212]	; (800274c <xTaskResumeAll+0x118>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d05d      	beq.n	8002738 <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800267c:	e02e      	b.n	80026dc <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800267e:	4b34      	ldr	r3, [pc, #208]	; (8002750 <xTaskResumeAll+0x11c>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	3318      	adds	r3, #24
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff f90f 	bl	80018ae <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3304      	adds	r3, #4
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff f90a 	bl	80018ae <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269e:	2201      	movs	r2, #1
 80026a0:	409a      	lsls	r2, r3
 80026a2:	4b2c      	ldr	r3, [pc, #176]	; (8002754 <xTaskResumeAll+0x120>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	4a2a      	ldr	r2, [pc, #168]	; (8002754 <xTaskResumeAll+0x120>)
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4a27      	ldr	r2, [pc, #156]	; (8002758 <xTaskResumeAll+0x124>)
 80026ba:	441a      	add	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	3304      	adds	r3, #4
 80026c0:	4619      	mov	r1, r3
 80026c2:	4610      	mov	r0, r2
 80026c4:	f7ff f896 	bl	80017f4 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026cc:	4b23      	ldr	r3, [pc, #140]	; (800275c <xTaskResumeAll+0x128>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d302      	bcc.n	80026dc <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <xTaskResumeAll+0x12c>)
 80026d8:	2201      	movs	r2, #1
 80026da:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026dc:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <xTaskResumeAll+0x11c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1cc      	bne.n	800267e <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80026ea:	f000 fb2b 	bl	8002d44 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026ee:	4b1d      	ldr	r3, [pc, #116]	; (8002764 <xTaskResumeAll+0x130>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d010      	beq.n	800271c <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80026fa:	f000 f847 	bl	800278c <xTaskIncrementTick>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 8002704:	4b16      	ldr	r3, [pc, #88]	; (8002760 <xTaskResumeAll+0x12c>)
 8002706:	2201      	movs	r2, #1
 8002708:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3b01      	subs	r3, #1
 800270e:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f1      	bne.n	80026fa <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <xTaskResumeAll+0x130>)
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800271c:	4b10      	ldr	r3, [pc, #64]	; (8002760 <xTaskResumeAll+0x12c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d009      	beq.n	8002738 <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002724:	2301      	movs	r3, #1
 8002726:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <xTaskResumeAll+0x134>)
 800272a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	f3bf 8f4f 	dsb	sy
 8002734:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002738:	f001 f880 	bl	800383c <vPortExitCritical>

    return xAlreadyYielded;
 800273c:	68bb      	ldr	r3, [r7, #8]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000134 	.word	0x20000134
 800274c:	2000010c 	.word	0x2000010c
 8002750:	200000cc 	.word	0x200000cc
 8002754:	20000114 	.word	0x20000114
 8002758:	20000038 	.word	0x20000038
 800275c:	20000034 	.word	0x20000034
 8002760:	20000120 	.word	0x20000120
 8002764:	2000011c 	.word	0x2000011c
 8002768:	e000ed04 	.word	0xe000ed04

0800276c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <xTaskGetTickCount+0x1c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002778:	687b      	ldr	r3, [r7, #4]
}
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000110 	.word	0x20000110

0800278c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002796:	4b4e      	ldr	r3, [pc, #312]	; (80028d0 <xTaskIncrementTick+0x144>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f040 808d 	bne.w	80028ba <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027a0:	4b4c      	ldr	r3, [pc, #304]	; (80028d4 <xTaskIncrementTick+0x148>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3301      	adds	r3, #1
 80027a6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80027a8:	4a4a      	ldr	r2, [pc, #296]	; (80028d4 <xTaskIncrementTick+0x148>)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d11f      	bne.n	80027f4 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80027b4:	4b48      	ldr	r3, [pc, #288]	; (80028d8 <xTaskIncrementTick+0x14c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d009      	beq.n	80027d2 <xTaskIncrementTick+0x46>
 80027be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c2:	f383 8811 	msr	BASEPRI, r3
 80027c6:	f3bf 8f6f 	isb	sy
 80027ca:	f3bf 8f4f 	dsb	sy
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	e7fe      	b.n	80027d0 <xTaskIncrementTick+0x44>
 80027d2:	4b41      	ldr	r3, [pc, #260]	; (80028d8 <xTaskIncrementTick+0x14c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	4b40      	ldr	r3, [pc, #256]	; (80028dc <xTaskIncrementTick+0x150>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a3e      	ldr	r2, [pc, #248]	; (80028d8 <xTaskIncrementTick+0x14c>)
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4a3e      	ldr	r2, [pc, #248]	; (80028dc <xTaskIncrementTick+0x150>)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	4b3e      	ldr	r3, [pc, #248]	; (80028e0 <xTaskIncrementTick+0x154>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3301      	adds	r3, #1
 80027ec:	4a3c      	ldr	r2, [pc, #240]	; (80028e0 <xTaskIncrementTick+0x154>)
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	f000 faa8 	bl	8002d44 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80027f4:	4b3b      	ldr	r3, [pc, #236]	; (80028e4 <xTaskIncrementTick+0x158>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d348      	bcc.n	8002890 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027fe:	4b36      	ldr	r3, [pc, #216]	; (80028d8 <xTaskIncrementTick+0x14c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d104      	bne.n	8002812 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002808:	4b36      	ldr	r3, [pc, #216]	; (80028e4 <xTaskIncrementTick+0x158>)
 800280a:	f04f 32ff 	mov.w	r2, #4294967295
 800280e:	601a      	str	r2, [r3, #0]
                    break;
 8002810:	e03e      	b.n	8002890 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002812:	4b31      	ldr	r3, [pc, #196]	; (80028d8 <xTaskIncrementTick+0x14c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	429a      	cmp	r2, r3
 8002828:	d203      	bcs.n	8002832 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800282a:	4a2e      	ldr	r2, [pc, #184]	; (80028e4 <xTaskIncrementTick+0x158>)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002830:	e02e      	b.n	8002890 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	3304      	adds	r3, #4
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff f839 	bl	80018ae <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002840:	2b00      	cmp	r3, #0
 8002842:	d004      	beq.n	800284e <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	3318      	adds	r3, #24
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff f830 	bl	80018ae <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	2201      	movs	r2, #1
 8002854:	409a      	lsls	r2, r3
 8002856:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <xTaskIncrementTick+0x15c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	4a22      	ldr	r2, [pc, #136]	; (80028e8 <xTaskIncrementTick+0x15c>)
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <xTaskIncrementTick+0x160>)
 800286e:	441a      	add	r2, r3
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	3304      	adds	r3, #4
 8002874:	4619      	mov	r1, r3
 8002876:	4610      	mov	r0, r2
 8002878:	f7fe ffbc 	bl	80017f4 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002880:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <xTaskIncrementTick+0x164>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	429a      	cmp	r2, r3
 8002888:	d3b9      	bcc.n	80027fe <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 800288a:	2301      	movs	r3, #1
 800288c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800288e:	e7b6      	b.n	80027fe <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002890:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <xTaskIncrementTick+0x164>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002896:	4915      	ldr	r1, [pc, #84]	; (80028ec <xTaskIncrementTick+0x160>)
 8002898:	4613      	mov	r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	440b      	add	r3, r1
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d901      	bls.n	80028ac <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 80028a8:	2301      	movs	r3, #1
 80028aa:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <xTaskIncrementTick+0x168>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 80028b4:	2301      	movs	r3, #1
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	e004      	b.n	80028c4 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80028ba:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <xTaskIncrementTick+0x16c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3301      	adds	r3, #1
 80028c0:	4a0d      	ldr	r2, [pc, #52]	; (80028f8 <xTaskIncrementTick+0x16c>)
 80028c2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80028c4:	697b      	ldr	r3, [r7, #20]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000134 	.word	0x20000134
 80028d4:	20000110 	.word	0x20000110
 80028d8:	200000c4 	.word	0x200000c4
 80028dc:	200000c8 	.word	0x200000c8
 80028e0:	20000124 	.word	0x20000124
 80028e4:	2000012c 	.word	0x2000012c
 80028e8:	20000114 	.word	0x20000114
 80028ec:	20000038 	.word	0x20000038
 80028f0:	20000034 	.word	0x20000034
 80028f4:	20000120 	.word	0x20000120
 80028f8:	2000011c 	.word	0x2000011c

080028fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002902:	4b26      	ldr	r3, [pc, #152]	; (800299c <vTaskSwitchContext+0xa0>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800290a:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <vTaskSwitchContext+0xa4>)
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002910:	e03e      	b.n	8002990 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 8002912:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <vTaskSwitchContext+0xa4>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002918:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <vTaskSwitchContext+0xa8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	fab3 f383 	clz	r3, r3
 8002924:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002926:	7afb      	ldrb	r3, [r7, #11]
 8002928:	f1c3 031f 	rsb	r3, r3, #31
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	491e      	ldr	r1, [pc, #120]	; (80029a8 <vTaskSwitchContext+0xac>)
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d109      	bne.n	8002956 <vTaskSwitchContext+0x5a>
        __asm volatile
 8002942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002946:	f383 8811 	msr	BASEPRI, r3
 800294a:	f3bf 8f6f 	isb	sy
 800294e:	f3bf 8f4f 	dsb	sy
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	e7fe      	b.n	8002954 <vTaskSwitchContext+0x58>
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4a11      	ldr	r2, [pc, #68]	; (80029a8 <vTaskSwitchContext+0xac>)
 8002962:	4413      	add	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	3308      	adds	r3, #8
 8002978:	429a      	cmp	r2, r3
 800297a:	d104      	bne.n	8002986 <vTaskSwitchContext+0x8a>
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a07      	ldr	r2, [pc, #28]	; (80029ac <vTaskSwitchContext+0xb0>)
 800298e:	6013      	str	r3, [r2, #0]
}
 8002990:	bf00      	nop
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	20000134 	.word	0x20000134
 80029a0:	20000120 	.word	0x20000120
 80029a4:	20000114 	.word	0x20000114
 80029a8:	20000038 	.word	0x20000038
 80029ac:	20000034 	.word	0x20000034

080029b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d109      	bne.n	80029d4 <vTaskPlaceOnEventList+0x24>
 80029c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c4:	f383 8811 	msr	BASEPRI, r3
 80029c8:	f3bf 8f6f 	isb	sy
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	e7fe      	b.n	80029d2 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80029d4:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <vTaskPlaceOnEventList+0x44>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3318      	adds	r3, #24
 80029da:	4619      	mov	r1, r3
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7fe ff2d 	bl	800183c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80029e2:	2101      	movs	r1, #1
 80029e4:	6838      	ldr	r0, [r7, #0]
 80029e6:	f000 fa5f 	bl	8002ea8 <prvAddCurrentTaskToDelayedList>
}
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000034 	.word	0x20000034

080029f8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <vTaskPlaceOnEventListRestricted+0x26>
 8002a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	e7fe      	b.n	8002a1c <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <vTaskPlaceOnEventListRestricted+0x50>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	3318      	adds	r3, #24
 8002a24:	4619      	mov	r1, r3
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f7fe fee4 	bl	80017f4 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d002      	beq.n	8002a38 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295
 8002a36:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	68b8      	ldr	r0, [r7, #8]
 8002a3c:	f000 fa34 	bl	8002ea8 <prvAddCurrentTaskToDelayedList>
    }
 8002a40:	bf00      	nop
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20000034 	.word	0x20000034

08002a4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <xTaskRemoveFromEventList+0x2a>
 8002a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a66:	f383 8811 	msr	BASEPRI, r3
 8002a6a:	f3bf 8f6f 	isb	sy
 8002a6e:	f3bf 8f4f 	dsb	sy
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	e7fe      	b.n	8002a74 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	3318      	adds	r3, #24
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe ff17 	bl	80018ae <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a80:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <xTaskRemoveFromEventList+0xac>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d11c      	bne.n	8002ac2 <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe ff0e 	bl	80018ae <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	2201      	movs	r2, #1
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	4b18      	ldr	r3, [pc, #96]	; (8002afc <xTaskRemoveFromEventList+0xb0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	4a16      	ldr	r2, [pc, #88]	; (8002afc <xTaskRemoveFromEventList+0xb0>)
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <xTaskRemoveFromEventList+0xb4>)
 8002ab2:	441a      	add	r2, r3
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4610      	mov	r0, r2
 8002abc:	f7fe fe9a 	bl	80017f4 <vListInsertEnd>
 8002ac0:	e005      	b.n	8002ace <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	3318      	adds	r3, #24
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	480e      	ldr	r0, [pc, #56]	; (8002b04 <xTaskRemoveFromEventList+0xb8>)
 8002aca:	f7fe fe93 	bl	80017f4 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <xTaskRemoveFromEventList+0xbc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d905      	bls.n	8002ae8 <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002adc:	2301      	movs	r3, #1
 8002ade:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <xTaskRemoveFromEventList+0xc0>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e001      	b.n	8002aec <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002aec:	697b      	ldr	r3, [r7, #20]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000134 	.word	0x20000134
 8002afc:	20000114 	.word	0x20000114
 8002b00:	20000038 	.word	0x20000038
 8002b04:	200000cc 	.word	0x200000cc
 8002b08:	20000034 	.word	0x20000034
 8002b0c:	20000120 	.word	0x20000120

08002b10 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <vTaskInternalSetTimeOutState+0x24>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <vTaskInternalSetTimeOutState+0x28>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	605a      	str	r2, [r3, #4]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	20000124 	.word	0x20000124
 8002b38:	20000110 	.word	0x20000110

08002b3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b088      	sub	sp, #32
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <xTaskCheckForTimeOut+0x24>
 8002b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	e7fe      	b.n	8002b5e <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d109      	bne.n	8002b7a <xTaskCheckForTimeOut+0x3e>
 8002b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	e7fe      	b.n	8002b78 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 8002b7a:	f000 fe31 	bl	80037e0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002b7e:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <xTaskCheckForTimeOut+0xc0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b96:	d102      	bne.n	8002b9e <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
 8002b9c:	e026      	b.n	8002bec <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <xTaskCheckForTimeOut+0xc4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d00a      	beq.n	8002bc0 <xTaskCheckForTimeOut+0x84>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d305      	bcc.n	8002bc0 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e015      	b.n	8002bec <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d20b      	bcs.n	8002be2 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	1ad2      	subs	r2, r2, r3
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7ff ff9a 	bl	8002b10 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	e004      	b.n	8002bec <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002be8:	2301      	movs	r3, #1
 8002bea:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002bec:	f000 fe26 	bl	800383c <vPortExitCritical>

    return xReturn;
 8002bf0:	69fb      	ldr	r3, [r7, #28]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3720      	adds	r7, #32
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000110 	.word	0x20000110
 8002c00:	20000124 	.word	0x20000124

08002c04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <vTaskMissedYield+0x14>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	20000120 	.word	0x20000120

08002c1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002c24:	f000 f852 	bl	8002ccc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <prvIdleTask+0x28>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d9f9      	bls.n	8002c24 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <prvIdleTask+0x2c>)
 8002c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002c40:	e7f0      	b.n	8002c24 <prvIdleTask+0x8>
 8002c42:	bf00      	nop
 8002c44:	20000038 	.word	0x20000038
 8002c48:	e000ed04 	.word	0xe000ed04

08002c4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]
 8002c56:	e00c      	b.n	8002c72 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4a12      	ldr	r2, [pc, #72]	; (8002cac <prvInitialiseTaskLists+0x60>)
 8002c64:	4413      	add	r3, r2
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fd97 	bl	800179a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d9ef      	bls.n	8002c58 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002c78:	480d      	ldr	r0, [pc, #52]	; (8002cb0 <prvInitialiseTaskLists+0x64>)
 8002c7a:	f7fe fd8e 	bl	800179a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002c7e:	480d      	ldr	r0, [pc, #52]	; (8002cb4 <prvInitialiseTaskLists+0x68>)
 8002c80:	f7fe fd8b 	bl	800179a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002c84:	480c      	ldr	r0, [pc, #48]	; (8002cb8 <prvInitialiseTaskLists+0x6c>)
 8002c86:	f7fe fd88 	bl	800179a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002c8a:	480c      	ldr	r0, [pc, #48]	; (8002cbc <prvInitialiseTaskLists+0x70>)
 8002c8c:	f7fe fd85 	bl	800179a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002c90:	480b      	ldr	r0, [pc, #44]	; (8002cc0 <prvInitialiseTaskLists+0x74>)
 8002c92:	f7fe fd82 	bl	800179a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002c96:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <prvInitialiseTaskLists+0x78>)
 8002c98:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <prvInitialiseTaskLists+0x64>)
 8002c9a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <prvInitialiseTaskLists+0x7c>)
 8002c9e:	4a05      	ldr	r2, [pc, #20]	; (8002cb4 <prvInitialiseTaskLists+0x68>)
 8002ca0:	601a      	str	r2, [r3, #0]
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000038 	.word	0x20000038
 8002cb0:	2000009c 	.word	0x2000009c
 8002cb4:	200000b0 	.word	0x200000b0
 8002cb8:	200000cc 	.word	0x200000cc
 8002cbc:	200000e0 	.word	0x200000e0
 8002cc0:	200000f8 	.word	0x200000f8
 8002cc4:	200000c4 	.word	0x200000c4
 8002cc8:	200000c8 	.word	0x200000c8

08002ccc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cd2:	e019      	b.n	8002d08 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002cd4:	f000 fd84 	bl	80037e0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <prvCheckTasksWaitingTermination+0x4c>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fe fde2 	bl	80018ae <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002cea:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <prvCheckTasksWaitingTermination+0x50>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <prvCheckTasksWaitingTermination+0x50>)
 8002cf2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002cf4:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <prvCheckTasksWaitingTermination+0x54>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	4a09      	ldr	r2, [pc, #36]	; (8002d20 <prvCheckTasksWaitingTermination+0x54>)
 8002cfc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002cfe:	f000 fd9d 	bl	800383c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f80e 	bl	8002d24 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <prvCheckTasksWaitingTermination+0x54>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1e1      	bne.n	8002cd4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002d10:	bf00      	nop
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	200000e0 	.word	0x200000e0
 8002d1c:	2000010c 	.word	0x2000010c
 8002d20:	200000f4 	.word	0x200000f4

08002d24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 ff37 	bl	8003ba4 <vPortFree>
                vPortFree( pxTCB );
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 ff34 	bl	8003ba4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002d3c:	bf00      	nop
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d48:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <prvResetNextTaskUnblockTime+0x30>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d104      	bne.n	8002d5c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <prvResetNextTaskUnblockTime+0x34>)
 8002d54:	f04f 32ff 	mov.w	r2, #4294967295
 8002d58:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002d5a:	e005      	b.n	8002d68 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <prvResetNextTaskUnblockTime+0x30>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <prvResetNextTaskUnblockTime+0x34>)
 8002d66:	6013      	str	r3, [r2, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	200000c4 	.word	0x200000c4
 8002d78:	2000012c 	.word	0x2000012c

08002d7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <xTaskGetSchedulerState+0x34>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d102      	bne.n	8002d90 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	607b      	str	r3, [r7, #4]
 8002d8e:	e008      	b.n	8002da2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d90:	4b08      	ldr	r3, [pc, #32]	; (8002db4 <xTaskGetSchedulerState+0x38>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d102      	bne.n	8002d9e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	607b      	str	r3, [r7, #4]
 8002d9c:	e001      	b.n	8002da2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002da2:	687b      	ldr	r3, [r7, #4]
    }
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	20000118 	.word	0x20000118
 8002db4:	20000134 	.word	0x20000134

08002db8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d061      	beq.n	8002e92 <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8002dce:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <xTaskPriorityDisinherit+0xe4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d009      	beq.n	8002dec <xTaskPriorityDisinherit+0x34>
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	e7fe      	b.n	8002dea <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d109      	bne.n	8002e08 <xTaskPriorityDisinherit+0x50>
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	e7fe      	b.n	8002e06 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0c:	1e5a      	subs	r2, r3, #1
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d039      	beq.n	8002e92 <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d135      	bne.n	8002e92 <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	3304      	adds	r3, #4
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe fd3f 	bl	80018ae <uxListRemove>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43da      	mvns	r2, r3
 8002e42:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <xTaskPriorityDisinherit+0xe8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4013      	ands	r3, r2
 8002e48:	4a15      	ldr	r2, [pc, #84]	; (8002ea0 <xTaskPriorityDisinherit+0xe8>)
 8002e4a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	f1c3 0205 	rsb	r2, r3, #5
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	2201      	movs	r2, #1
 8002e66:	409a      	lsls	r2, r3
 8002e68:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <xTaskPriorityDisinherit+0xe8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ea0 <xTaskPriorityDisinherit+0xe8>)
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <xTaskPriorityDisinherit+0xec>)
 8002e80:	441a      	add	r2, r3
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	3304      	adds	r3, #4
 8002e86:	4619      	mov	r1, r3
 8002e88:	4610      	mov	r0, r2
 8002e8a:	f7fe fcb3 	bl	80017f4 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002e92:	697b      	ldr	r3, [r7, #20]
    }
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000034 	.word	0x20000034
 8002ea0:	20000114 	.word	0x20000114
 8002ea4:	20000038 	.word	0x20000038

08002ea8 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002eb2:	4b29      	ldr	r3, [pc, #164]	; (8002f58 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002eb8:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe fcf5 	bl	80018ae <uxListRemove>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10b      	bne.n	8002ee2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002eca:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	4b21      	ldr	r3, [pc, #132]	; (8002f60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4013      	ands	r3, r2
 8002ede:	4a20      	ldr	r2, [pc, #128]	; (8002f60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002ee0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee8:	d10a      	bne.n	8002f00 <prvAddCurrentTaskToDelayedList+0x58>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d007      	beq.n	8002f00 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ef0:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	481a      	ldr	r0, [pc, #104]	; (8002f64 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002efa:	f7fe fc7b 	bl	80017f4 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002efe:	e026      	b.n	8002f4e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f08:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d209      	bcs.n	8002f2c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f18:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	; (8002f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3304      	adds	r3, #4
 8002f22:	4619      	mov	r1, r3
 8002f24:	4610      	mov	r0, r2
 8002f26:	f7fe fc89 	bl	800183c <vListInsert>
}
 8002f2a:	e010      	b.n	8002f4e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3304      	adds	r3, #4
 8002f36:	4619      	mov	r1, r3
 8002f38:	4610      	mov	r0, r2
 8002f3a:	f7fe fc7f 	bl	800183c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d202      	bcs.n	8002f4e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8002f48:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	6013      	str	r3, [r2, #0]
}
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000110 	.word	0x20000110
 8002f5c:	20000034 	.word	0x20000034
 8002f60:	20000114 	.word	0x20000114
 8002f64:	200000f8 	.word	0x200000f8
 8002f68:	200000c8 	.word	0x200000c8
 8002f6c:	200000c4 	.word	0x200000c4
 8002f70:	2000012c 	.word	0x2000012c

08002f74 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8002f7e:	f000 fad1 	bl	8003524 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <xTimerCreateTimerTask+0x54>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00b      	beq.n	8002fa2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <xTimerCreateTimerTask+0x58>)
 8002f8c:	9301      	str	r3, [sp, #4]
 8002f8e:	2302      	movs	r3, #2
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	2300      	movs	r3, #0
 8002f94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f98:	490d      	ldr	r1, [pc, #52]	; (8002fd0 <xTimerCreateTimerTask+0x5c>)
 8002f9a:	480e      	ldr	r0, [pc, #56]	; (8002fd4 <xTimerCreateTimerTask+0x60>)
 8002f9c:	f7ff f974 	bl	8002288 <xTaskCreate>
 8002fa0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d109      	bne.n	8002fbc <xTimerCreateTimerTask+0x48>
 8002fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	603b      	str	r3, [r7, #0]
 8002fba:	e7fe      	b.n	8002fba <xTimerCreateTimerTask+0x46>
        return xReturn;
 8002fbc:	687b      	ldr	r3, [r7, #4]
    }
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000168 	.word	0x20000168
 8002fcc:	2000016c 	.word	0x2000016c
 8002fd0:	08003e84 	.word	0x08003e84
 8002fd4:	08003109 	.word	0x08003109

08002fd8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d109      	bne.n	8003004 <xTimerGenericCommand+0x2c>
 8002ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff4:	f383 8811 	msr	BASEPRI, r3
 8002ff8:	f3bf 8f6f 	isb	sy
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	623b      	str	r3, [r7, #32]
 8003002:	e7fe      	b.n	8003002 <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <xTimerGenericCommand+0x94>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d02a      	beq.n	8003062 <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b05      	cmp	r3, #5
 800301c:	dc18      	bgt.n	8003050 <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800301e:	f7ff fead 	bl	8002d7c <xTaskGetSchedulerState>
 8003022:	4603      	mov	r3, r0
 8003024:	2b02      	cmp	r3, #2
 8003026:	d109      	bne.n	800303c <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003028:	4b10      	ldr	r3, [pc, #64]	; (800306c <xTimerGenericCommand+0x94>)
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	f107 0114 	add.w	r1, r7, #20
 8003030:	2300      	movs	r3, #0
 8003032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003034:	f7fe fd40 	bl	8001ab8 <xQueueGenericSend>
 8003038:	6278      	str	r0, [r7, #36]	; 0x24
 800303a:	e012      	b.n	8003062 <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <xTimerGenericCommand+0x94>)
 800303e:	6818      	ldr	r0, [r3, #0]
 8003040:	f107 0114 	add.w	r1, r7, #20
 8003044:	2300      	movs	r3, #0
 8003046:	2200      	movs	r2, #0
 8003048:	f7fe fd36 	bl	8001ab8 <xQueueGenericSend>
 800304c:	6278      	str	r0, [r7, #36]	; 0x24
 800304e:	e008      	b.n	8003062 <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003050:	4b06      	ldr	r3, [pc, #24]	; (800306c <xTimerGenericCommand+0x94>)
 8003052:	6818      	ldr	r0, [r3, #0]
 8003054:	f107 0114 	add.w	r1, r7, #20
 8003058:	2300      	movs	r3, #0
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	f7fe fe26 	bl	8001cac <xQueueGenericSendFromISR>
 8003060:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003064:	4618      	mov	r0, r3
 8003066:	3728      	adds	r7, #40	; 0x28
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20000168 	.word	0x20000168

08003070 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af02      	add	r7, sp, #8
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800307a:	4b22      	ldr	r3, [pc, #136]	; (8003104 <prvProcessExpiredTimer+0x94>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	3304      	adds	r3, #4
 8003088:	4618      	mov	r0, r3
 800308a:	f7fe fc10 	bl	80018ae <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d021      	beq.n	80030e0 <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	699a      	ldr	r2, [r3, #24]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	18d1      	adds	r1, r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	6978      	ldr	r0, [r7, #20]
 80030aa:	f000 f8d1 	bl	8003250 <prvInsertTimerInActiveList>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01e      	beq.n	80030f2 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80030b4:	2300      	movs	r3, #0
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	2300      	movs	r3, #0
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	2100      	movs	r1, #0
 80030be:	6978      	ldr	r0, [r7, #20]
 80030c0:	f7ff ff8a 	bl	8002fd8 <xTimerGenericCommand>
 80030c4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d112      	bne.n	80030f2 <prvProcessExpiredTimer+0x82>
 80030cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	e7fe      	b.n	80030de <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	6978      	ldr	r0, [r7, #20]
 80030f8:	4798      	blx	r3
    }
 80030fa:	bf00      	nop
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000160 	.word	0x20000160

08003108 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003110:	f107 0308 	add.w	r3, r7, #8
 8003114:	4618      	mov	r0, r3
 8003116:	f000 f857 	bl	80031c8 <prvGetNextExpireTime>
 800311a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4619      	mov	r1, r3
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f803 	bl	800312c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003126:	f000 f8d5 	bl	80032d4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800312a:	e7f1      	b.n	8003110 <prvTimerTask+0x8>

0800312c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003136:	f7ff fa6f 	bl	8002618 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800313a:	f107 0308 	add.w	r3, r7, #8
 800313e:	4618      	mov	r0, r3
 8003140:	f000 f866 	bl	8003210 <prvSampleTimeNow>
 8003144:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d130      	bne.n	80031ae <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10a      	bne.n	8003168 <prvProcessTimerOrBlockTask+0x3c>
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	429a      	cmp	r2, r3
 8003158:	d806      	bhi.n	8003168 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800315a:	f7ff fa6b 	bl	8002634 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800315e:	68f9      	ldr	r1, [r7, #12]
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff ff85 	bl	8003070 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003166:	e024      	b.n	80031b2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800316e:	4b13      	ldr	r3, [pc, #76]	; (80031bc <prvProcessTimerOrBlockTask+0x90>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <prvProcessTimerOrBlockTask+0x50>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <prvProcessTimerOrBlockTask+0x52>
 800317c:	2300      	movs	r3, #0
 800317e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003180:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <prvProcessTimerOrBlockTask+0x94>)
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	4619      	mov	r1, r3
 800318e:	f7ff f847 	bl	8002220 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003192:	f7ff fa4f 	bl	8002634 <xTaskResumeAll>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10a      	bne.n	80031b2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <prvProcessTimerOrBlockTask+0x98>)
 800319e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	f3bf 8f6f 	isb	sy
    }
 80031ac:	e001      	b.n	80031b2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80031ae:	f7ff fa41 	bl	8002634 <xTaskResumeAll>
    }
 80031b2:	bf00      	nop
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	20000164 	.word	0x20000164
 80031c0:	20000168 	.word	0x20000168
 80031c4:	e000ed04 	.word	0xe000ed04

080031c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80031d0:	4b0e      	ldr	r3, [pc, #56]	; (800320c <prvGetNextExpireTime+0x44>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <prvGetNextExpireTime+0x16>
 80031da:	2201      	movs	r2, #1
 80031dc:	e000      	b.n	80031e0 <prvGetNextExpireTime+0x18>
 80031de:	2200      	movs	r2, #0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80031ec:	4b07      	ldr	r3, [pc, #28]	; (800320c <prvGetNextExpireTime+0x44>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	e001      	b.n	80031fc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80031fc:	68fb      	ldr	r3, [r7, #12]
    }
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000160 	.word	0x20000160

08003210 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003218:	f7ff faa8 	bl	800276c <xTaskGetTickCount>
 800321c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <prvSampleTimeNow+0x3c>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	429a      	cmp	r2, r3
 8003226:	d205      	bcs.n	8003234 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003228:	f000 f918 	bl	800345c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	e002      	b.n	800323a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800323a:	4a04      	ldr	r2, [pc, #16]	; (800324c <prvSampleTimeNow+0x3c>)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003240:	68fb      	ldr	r3, [r7, #12]
    }
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000170 	.word	0x20000170

08003250 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
 800325c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	68ba      	ldr	r2, [r7, #8]
 8003266:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	429a      	cmp	r2, r3
 8003274:	d812      	bhi.n	800329c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	1ad2      	subs	r2, r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	429a      	cmp	r2, r3
 8003282:	d302      	bcc.n	800328a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003284:	2301      	movs	r3, #1
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	e01b      	b.n	80032c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800328a:	4b10      	ldr	r3, [pc, #64]	; (80032cc <prvInsertTimerInActiveList+0x7c>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	3304      	adds	r3, #4
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f7fe fad1 	bl	800183c <vListInsert>
 800329a:	e012      	b.n	80032c2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d206      	bcs.n	80032b2 <prvInsertTimerInActiveList+0x62>
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d302      	bcc.n	80032b2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80032ac:	2301      	movs	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	e007      	b.n	80032c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80032b2:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <prvInsertTimerInActiveList+0x80>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	3304      	adds	r3, #4
 80032ba:	4619      	mov	r1, r3
 80032bc:	4610      	mov	r0, r2
 80032be:	f7fe fabd 	bl	800183c <vListInsert>
            }
        }

        return xProcessTimerNow;
 80032c2:	697b      	ldr	r3, [r7, #20]
    }
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000164 	.word	0x20000164
 80032d0:	20000160 	.word	0x20000160

080032d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b08c      	sub	sp, #48	; 0x30
 80032d8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80032da:	e0ac      	b.n	8003436 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f2c0 80a8 	blt.w	8003434 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d004      	beq.n	80032fa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	3304      	adds	r3, #4
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fe fada 	bl	80018ae <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80032fa:	1d3b      	adds	r3, r7, #4
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ff87 	bl	8003210 <prvSampleTimeNow>
 8003302:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b09      	cmp	r3, #9
 8003308:	f200 8095 	bhi.w	8003436 <prvProcessReceivedCommands+0x162>
 800330c:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <prvProcessReceivedCommands+0x40>)
 800330e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003312:	bf00      	nop
 8003314:	0800333d 	.word	0x0800333d
 8003318:	0800333d 	.word	0x0800333d
 800331c:	0800333d 	.word	0x0800333d
 8003320:	080033af 	.word	0x080033af
 8003324:	080033c3 	.word	0x080033c3
 8003328:	0800340b 	.word	0x0800340b
 800332c:	0800333d 	.word	0x0800333d
 8003330:	0800333d 	.word	0x0800333d
 8003334:	080033af 	.word	0x080033af
 8003338:	080033c3 	.word	0x080033c3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	b2da      	uxtb	r2, r3
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	18d1      	adds	r1, r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6a3a      	ldr	r2, [r7, #32]
 800335a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800335c:	f7ff ff78 	bl	8003250 <prvInsertTimerInActiveList>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d067      	beq.n	8003436 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800336c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d05c      	beq.n	8003436 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	441a      	add	r2, r3
 8003384:	2300      	movs	r3, #0
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	2300      	movs	r3, #0
 800338a:	2100      	movs	r1, #0
 800338c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800338e:	f7ff fe23 	bl	8002fd8 <xTimerGenericCommand>
 8003392:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d14d      	bne.n	8003436 <prvProcessReceivedCommands+0x162>
 800339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339e:	f383 8811 	msr	BASEPRI, r3
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	61bb      	str	r3, [r7, #24]
 80033ac:	e7fe      	b.n	80033ac <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80033c0:	e039      	b.n	8003436 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d109      	bne.n	80033f6 <prvProcessReceivedCommands+0x122>
 80033e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	e7fe      	b.n	80033f4 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	18d1      	adds	r1, r2, r3
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	6a3a      	ldr	r2, [r7, #32]
 8003402:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003404:	f7ff ff24 	bl	8003250 <prvInsertTimerInActiveList>
                        break;
 8003408:	e015      	b.n	8003436 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d103      	bne.n	8003420 <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 8003418:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800341a:	f000 fbc3 	bl	8003ba4 <vPortFree>
 800341e:	e00a      	b.n	8003436 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	b2da      	uxtb	r2, r3
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003432:	e000      	b.n	8003436 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003434:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003436:	4b08      	ldr	r3, [pc, #32]	; (8003458 <prvProcessReceivedCommands+0x184>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f107 0108 	add.w	r1, r7, #8
 800343e:	2200      	movs	r2, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f7fe fcd9 	bl	8001df8 <xQueueReceive>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	f47f af47 	bne.w	80032dc <prvProcessReceivedCommands+0x8>
        }
    }
 800344e:	bf00      	nop
 8003450:	3728      	adds	r7, #40	; 0x28
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000168 	.word	0x20000168

0800345c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003462:	e047      	b.n	80034f4 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003464:	4b2d      	ldr	r3, [pc, #180]	; (800351c <prvSwitchTimerLists+0xc0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800346e:	4b2b      	ldr	r3, [pc, #172]	; (800351c <prvSwitchTimerLists+0xc0>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3304      	adds	r3, #4
 800347c:	4618      	mov	r0, r3
 800347e:	f7fe fa16 	bl	80018ae <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d02d      	beq.n	80034f4 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4413      	add	r3, r2
 80034a0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d90e      	bls.n	80034c8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80034b6:	4b19      	ldr	r3, [pc, #100]	; (800351c <prvSwitchTimerLists+0xc0>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	3304      	adds	r3, #4
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f7fe f9bb 	bl	800183c <vListInsert>
 80034c6:	e015      	b.n	80034f4 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80034c8:	2300      	movs	r3, #0
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	2300      	movs	r3, #0
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	2100      	movs	r1, #0
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f7ff fd80 	bl	8002fd8 <xTimerGenericCommand>
 80034d8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d109      	bne.n	80034f4 <prvSwitchTimerLists+0x98>
 80034e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e4:	f383 8811 	msr	BASEPRI, r3
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	603b      	str	r3, [r7, #0]
 80034f2:	e7fe      	b.n	80034f2 <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80034f4:	4b09      	ldr	r3, [pc, #36]	; (800351c <prvSwitchTimerLists+0xc0>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1b2      	bne.n	8003464 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80034fe:	4b07      	ldr	r3, [pc, #28]	; (800351c <prvSwitchTimerLists+0xc0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003504:	4b06      	ldr	r3, [pc, #24]	; (8003520 <prvSwitchTimerLists+0xc4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a04      	ldr	r2, [pc, #16]	; (800351c <prvSwitchTimerLists+0xc0>)
 800350a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800350c:	4a04      	ldr	r2, [pc, #16]	; (8003520 <prvSwitchTimerLists+0xc4>)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	6013      	str	r3, [r2, #0]
    }
 8003512:	bf00      	nop
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000160 	.word	0x20000160
 8003520:	20000164 	.word	0x20000164

08003524 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003528:	f000 f95a 	bl	80037e0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800352c:	4b12      	ldr	r3, [pc, #72]	; (8003578 <prvCheckForValidListAndQueue+0x54>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d11d      	bne.n	8003570 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003534:	4811      	ldr	r0, [pc, #68]	; (800357c <prvCheckForValidListAndQueue+0x58>)
 8003536:	f7fe f930 	bl	800179a <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800353a:	4811      	ldr	r0, [pc, #68]	; (8003580 <prvCheckForValidListAndQueue+0x5c>)
 800353c:	f7fe f92d 	bl	800179a <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003540:	4b10      	ldr	r3, [pc, #64]	; (8003584 <prvCheckForValidListAndQueue+0x60>)
 8003542:	4a0e      	ldr	r2, [pc, #56]	; (800357c <prvCheckForValidListAndQueue+0x58>)
 8003544:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003546:	4b10      	ldr	r3, [pc, #64]	; (8003588 <prvCheckForValidListAndQueue+0x64>)
 8003548:	4a0d      	ldr	r2, [pc, #52]	; (8003580 <prvCheckForValidListAndQueue+0x5c>)
 800354a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800354c:	2200      	movs	r2, #0
 800354e:	210c      	movs	r1, #12
 8003550:	200a      	movs	r0, #10
 8003552:	f7fe fa3f 	bl	80019d4 <xQueueGenericCreate>
 8003556:	4602      	mov	r2, r0
 8003558:	4b07      	ldr	r3, [pc, #28]	; (8003578 <prvCheckForValidListAndQueue+0x54>)
 800355a:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <prvCheckForValidListAndQueue+0x54>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003564:	4b04      	ldr	r3, [pc, #16]	; (8003578 <prvCheckForValidListAndQueue+0x54>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4908      	ldr	r1, [pc, #32]	; (800358c <prvCheckForValidListAndQueue+0x68>)
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe fe30 	bl	80021d0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003570:	f000 f964 	bl	800383c <vPortExitCritical>
    }
 8003574:	bf00      	nop
 8003576:	bd80      	pop	{r7, pc}
 8003578:	20000168 	.word	0x20000168
 800357c:	20000138 	.word	0x20000138
 8003580:	2000014c 	.word	0x2000014c
 8003584:	20000160 	.word	0x20000160
 8003588:	20000164 	.word	0x20000164
 800358c:	08003e8c 	.word	0x08003e8c

08003590 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	3b04      	subs	r3, #4
 80035a0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	3b04      	subs	r3, #4
 80035ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f023 0201 	bic.w	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	3b04      	subs	r3, #4
 80035be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80035c0:	4a0c      	ldr	r2, [pc, #48]	; (80035f4 <pxPortInitialiseStack+0x64>)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	3b14      	subs	r3, #20
 80035ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	3b04      	subs	r3, #4
 80035d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f06f 0202 	mvn.w	r2, #2
 80035de:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	3b20      	subs	r3, #32
 80035e4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80035e6:	68fb      	ldr	r3, [r7, #12]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	080035f9 	.word	0x080035f9

080035f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003602:	4b11      	ldr	r3, [pc, #68]	; (8003648 <prvTaskExitError+0x50>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	d009      	beq.n	8003620 <prvTaskExitError+0x28>
 800360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	e7fe      	b.n	800361e <prvTaskExitError+0x26>
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003632:	bf00      	nop
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0fc      	beq.n	8003634 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000010 	.word	0x20000010
 800364c:	00000000 	.word	0x00000000

08003650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003650:	4b07      	ldr	r3, [pc, #28]	; (8003670 <pxCurrentTCBConst2>)
 8003652:	6819      	ldr	r1, [r3, #0]
 8003654:	6808      	ldr	r0, [r1, #0]
 8003656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800365a:	f380 8809 	msr	PSP, r0
 800365e:	f3bf 8f6f 	isb	sy
 8003662:	f04f 0000 	mov.w	r0, #0
 8003666:	f380 8811 	msr	BASEPRI, r0
 800366a:	4770      	bx	lr
 800366c:	f3af 8000 	nop.w

08003670 <pxCurrentTCBConst2>:
 8003670:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003674:	bf00      	nop
 8003676:	bf00      	nop

08003678 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003678:	4808      	ldr	r0, [pc, #32]	; (800369c <prvPortStartFirstTask+0x24>)
 800367a:	6800      	ldr	r0, [r0, #0]
 800367c:	6800      	ldr	r0, [r0, #0]
 800367e:	f380 8808 	msr	MSP, r0
 8003682:	f04f 0000 	mov.w	r0, #0
 8003686:	f380 8814 	msr	CONTROL, r0
 800368a:	b662      	cpsie	i
 800368c:	b661      	cpsie	f
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	df00      	svc	0
 8003698:	bf00      	nop
 800369a:	0000      	.short	0x0000
 800369c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop

080036a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80036aa:	4b44      	ldr	r3, [pc, #272]	; (80037bc <xPortStartScheduler+0x118>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a44      	ldr	r2, [pc, #272]	; (80037c0 <xPortStartScheduler+0x11c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d109      	bne.n	80036c8 <xPortStartScheduler+0x24>
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	e7fe      	b.n	80036c6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80036c8:	4b3c      	ldr	r3, [pc, #240]	; (80037bc <xPortStartScheduler+0x118>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a3d      	ldr	r2, [pc, #244]	; (80037c4 <xPortStartScheduler+0x120>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d109      	bne.n	80036e6 <xPortStartScheduler+0x42>
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	e7fe      	b.n	80036e4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80036e6:	4b38      	ldr	r3, [pc, #224]	; (80037c8 <xPortStartScheduler+0x124>)
 80036e8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	22ff      	movs	r2, #255	; 0xff
 80036f6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	b2db      	uxtb	r3, r3
 8003704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4b30      	ldr	r3, [pc, #192]	; (80037cc <xPortStartScheduler+0x128>)
 800370c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800370e:	4b30      	ldr	r3, [pc, #192]	; (80037d0 <xPortStartScheduler+0x12c>)
 8003710:	2207      	movs	r2, #7
 8003712:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003714:	e009      	b.n	800372a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8003716:	4b2e      	ldr	r3, [pc, #184]	; (80037d0 <xPortStartScheduler+0x12c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	3b01      	subs	r3, #1
 800371c:	4a2c      	ldr	r2, [pc, #176]	; (80037d0 <xPortStartScheduler+0x12c>)
 800371e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003720:	78fb      	ldrb	r3, [r7, #3]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	b2db      	uxtb	r3, r3
 8003728:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003732:	2b80      	cmp	r3, #128	; 0x80
 8003734:	d0ef      	beq.n	8003716 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003736:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <xPortStartScheduler+0x12c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f1c3 0307 	rsb	r3, r3, #7
 800373e:	2b04      	cmp	r3, #4
 8003740:	d009      	beq.n	8003756 <xPortStartScheduler+0xb2>
 8003742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	60bb      	str	r3, [r7, #8]
 8003754:	e7fe      	b.n	8003754 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003756:	4b1e      	ldr	r3, [pc, #120]	; (80037d0 <xPortStartScheduler+0x12c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	021b      	lsls	r3, r3, #8
 800375c:	4a1c      	ldr	r2, [pc, #112]	; (80037d0 <xPortStartScheduler+0x12c>)
 800375e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003760:	4b1b      	ldr	r3, [pc, #108]	; (80037d0 <xPortStartScheduler+0x12c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003768:	4a19      	ldr	r2, [pc, #100]	; (80037d0 <xPortStartScheduler+0x12c>)
 800376a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003774:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <xPortStartScheduler+0x130>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a16      	ldr	r2, [pc, #88]	; (80037d4 <xPortStartScheduler+0x130>)
 800377a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800377e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003780:	4b14      	ldr	r3, [pc, #80]	; (80037d4 <xPortStartScheduler+0x130>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a13      	ldr	r2, [pc, #76]	; (80037d4 <xPortStartScheduler+0x130>)
 8003786:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800378a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800378c:	f000 f8d4 	bl	8003938 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003790:	4b11      	ldr	r3, [pc, #68]	; (80037d8 <xPortStartScheduler+0x134>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003796:	f000 f8f3 	bl	8003980 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800379a:	4b10      	ldr	r3, [pc, #64]	; (80037dc <xPortStartScheduler+0x138>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a0f      	ldr	r2, [pc, #60]	; (80037dc <xPortStartScheduler+0x138>)
 80037a0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80037a4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80037a6:	f7ff ff67 	bl	8003678 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80037aa:	f7ff f8a7 	bl	80028fc <vTaskSwitchContext>
    prvTaskExitError();
 80037ae:	f7ff ff23 	bl	80035f8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	e000ed00 	.word	0xe000ed00
 80037c0:	410fc271 	.word	0x410fc271
 80037c4:	410fc270 	.word	0x410fc270
 80037c8:	e000e400 	.word	0xe000e400
 80037cc:	20000174 	.word	0x20000174
 80037d0:	20000178 	.word	0x20000178
 80037d4:	e000ed20 	.word	0xe000ed20
 80037d8:	20000010 	.word	0x20000010
 80037dc:	e000ef34 	.word	0xe000ef34

080037e0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ea:	f383 8811 	msr	BASEPRI, r3
 80037ee:	f3bf 8f6f 	isb	sy
 80037f2:	f3bf 8f4f 	dsb	sy
 80037f6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80037f8:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <vPortEnterCritical+0x54>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3301      	adds	r3, #1
 80037fe:	4a0d      	ldr	r2, [pc, #52]	; (8003834 <vPortEnterCritical+0x54>)
 8003800:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003802:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <vPortEnterCritical+0x54>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d10e      	bne.n	8003828 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800380a:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <vPortEnterCritical+0x58>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d009      	beq.n	8003828 <vPortEnterCritical+0x48>
 8003814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003818:	f383 8811 	msr	BASEPRI, r3
 800381c:	f3bf 8f6f 	isb	sy
 8003820:	f3bf 8f4f 	dsb	sy
 8003824:	603b      	str	r3, [r7, #0]
 8003826:	e7fe      	b.n	8003826 <vPortEnterCritical+0x46>
    }
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	20000010 	.word	0x20000010
 8003838:	e000ed04 	.word	0xe000ed04

0800383c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003842:	4b11      	ldr	r3, [pc, #68]	; (8003888 <vPortExitCritical+0x4c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <vPortExitCritical+0x22>
 800384a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384e:	f383 8811 	msr	BASEPRI, r3
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	607b      	str	r3, [r7, #4]
 800385c:	e7fe      	b.n	800385c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 800385e:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <vPortExitCritical+0x4c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3b01      	subs	r3, #1
 8003864:	4a08      	ldr	r2, [pc, #32]	; (8003888 <vPortExitCritical+0x4c>)
 8003866:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003868:	4b07      	ldr	r3, [pc, #28]	; (8003888 <vPortExitCritical+0x4c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d104      	bne.n	800387a <vPortExitCritical+0x3e>
 8003870:	2300      	movs	r3, #0
 8003872:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	20000010 	.word	0x20000010
 800388c:	00000000 	.word	0x00000000

08003890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003890:	f3ef 8009 	mrs	r0, PSP
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	4b15      	ldr	r3, [pc, #84]	; (80038f0 <pxCurrentTCBConst>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	f01e 0f10 	tst.w	lr, #16
 80038a0:	bf08      	it	eq
 80038a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80038a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038aa:	6010      	str	r0, [r2, #0]
 80038ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80038b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80038b4:	f380 8811 	msr	BASEPRI, r0
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f7ff f81c 	bl	80028fc <vTaskSwitchContext>
 80038c4:	f04f 0000 	mov.w	r0, #0
 80038c8:	f380 8811 	msr	BASEPRI, r0
 80038cc:	bc09      	pop	{r0, r3}
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	6808      	ldr	r0, [r1, #0]
 80038d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d6:	f01e 0f10 	tst.w	lr, #16
 80038da:	bf08      	it	eq
 80038dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80038e0:	f380 8809 	msr	PSP, r0
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	f3af 8000 	nop.w

080038f0 <pxCurrentTCBConst>:
 80038f0:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80038f4:	bf00      	nop
 80038f6:	bf00      	nop

080038f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
        __asm volatile
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003910:	f7fe ff3c 	bl	800278c <xTaskIncrementTick>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <SysTick_Handler+0x3c>)
 800391c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	2300      	movs	r3, #0
 8003924:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	e000ed04 	.word	0xe000ed04

08003938 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <vPortSetupTimerInterrupt+0x34>)
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003942:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <vPortSetupTimerInterrupt+0x38>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <vPortSetupTimerInterrupt+0x3c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a0a      	ldr	r2, [pc, #40]	; (8003978 <vPortSetupTimerInterrupt+0x40>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	099b      	lsrs	r3, r3, #6
 8003954:	4a09      	ldr	r2, [pc, #36]	; (800397c <vPortSetupTimerInterrupt+0x44>)
 8003956:	3b01      	subs	r3, #1
 8003958:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800395a:	4b04      	ldr	r3, [pc, #16]	; (800396c <vPortSetupTimerInterrupt+0x34>)
 800395c:	2207      	movs	r2, #7
 800395e:	601a      	str	r2, [r3, #0]
}
 8003960:	bf00      	nop
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	e000e010 	.word	0xe000e010
 8003970:	e000e018 	.word	0xe000e018
 8003974:	20000000 	.word	0x20000000
 8003978:	10624dd3 	.word	0x10624dd3
 800397c:	e000e014 	.word	0xe000e014

08003980 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003980:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003990 <vPortEnableVFP+0x10>
 8003984:	6801      	ldr	r1, [r0, #0]
 8003986:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800398a:	6001      	str	r1, [r0, #0]
 800398c:	4770      	bx	lr
 800398e:	0000      	.short	0x0000
 8003990:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop

08003998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800399e:	f3ef 8305 	mrs	r3, IPSR
 80039a2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b0f      	cmp	r3, #15
 80039a8:	d913      	bls.n	80039d2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80039aa:	4a16      	ldr	r2, [pc, #88]	; (8003a04 <vPortValidateInterruptPriority+0x6c>)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4413      	add	r3, r2
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80039b4:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <vPortValidateInterruptPriority+0x70>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	7afa      	ldrb	r2, [r7, #11]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d209      	bcs.n	80039d2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	607b      	str	r3, [r7, #4]
 80039d0:	e7fe      	b.n	80039d0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80039d2:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <vPortValidateInterruptPriority+0x74>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039da:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <vPortValidateInterruptPriority+0x78>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d909      	bls.n	80039f6 <vPortValidateInterruptPriority+0x5e>
 80039e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	e7fe      	b.n	80039f4 <vPortValidateInterruptPriority+0x5c>
    }
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	e000e3f0 	.word	0xe000e3f0
 8003a08:	20000174 	.word	0x20000174
 8003a0c:	e000ed0c 	.word	0xe000ed0c
 8003a10:	20000178 	.word	0x20000178

08003a14 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	; 0x28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003a20:	f7fe fdfa 	bl	8002618 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003a24:	4b59      	ldr	r3, [pc, #356]	; (8003b8c <pvPortMalloc+0x178>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003a2c:	f000 f91a 	bl	8003c64 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a30:	4b57      	ldr	r3, [pc, #348]	; (8003b90 <pvPortMalloc+0x17c>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4013      	ands	r3, r2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f040 8091 	bne.w	8003b60 <pvPortMalloc+0x14c>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01c      	beq.n	8003a7e <pvPortMalloc+0x6a>
            {
                xWantedSize += xHeapStructSize;
 8003a44:	2208      	movs	r2, #8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4413      	add	r3, r2
 8003a4a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d013      	beq.n	8003a7e <pvPortMalloc+0x6a>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f023 0307 	bic.w	r3, r3, #7
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d009      	beq.n	8003a7e <pvPortMalloc+0x6a>
 8003a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	e7fe      	b.n	8003a7c <pvPortMalloc+0x68>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d06d      	beq.n	8003b60 <pvPortMalloc+0x14c>
 8003a84:	4b43      	ldr	r3, [pc, #268]	; (8003b94 <pvPortMalloc+0x180>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d868      	bhi.n	8003b60 <pvPortMalloc+0x14c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003a8e:	4b42      	ldr	r3, [pc, #264]	; (8003b98 <pvPortMalloc+0x184>)
 8003a90:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003a92:	4b41      	ldr	r3, [pc, #260]	; (8003b98 <pvPortMalloc+0x184>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a98:	e004      	b.n	8003aa4 <pvPortMalloc+0x90>
                {
                    pxPreviousBlock = pxBlock;
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d903      	bls.n	8003ab6 <pvPortMalloc+0xa2>
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f1      	bne.n	8003a9a <pvPortMalloc+0x86>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8003ab6:	4b35      	ldr	r3, [pc, #212]	; (8003b8c <pvPortMalloc+0x178>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d04f      	beq.n	8003b60 <pvPortMalloc+0x14c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2208      	movs	r2, #8
 8003ac6:	4413      	add	r3, r2
 8003ac8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	1ad2      	subs	r2, r2, r3
 8003ada:	2308      	movs	r3, #8
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d91e      	bls.n	8003b20 <pvPortMalloc+0x10c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d009      	beq.n	8003b08 <pvPortMalloc+0xf4>
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	e7fe      	b.n	8003b06 <pvPortMalloc+0xf2>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	1ad2      	subs	r2, r2, r3
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b1a:	69b8      	ldr	r0, [r7, #24]
 8003b1c:	f000 f904 	bl	8003d28 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b20:	4b1c      	ldr	r3, [pc, #112]	; (8003b94 <pvPortMalloc+0x180>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	4a1a      	ldr	r2, [pc, #104]	; (8003b94 <pvPortMalloc+0x180>)
 8003b2c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b2e:	4b19      	ldr	r3, [pc, #100]	; (8003b94 <pvPortMalloc+0x180>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <pvPortMalloc+0x188>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d203      	bcs.n	8003b42 <pvPortMalloc+0x12e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b3a:	4b16      	ldr	r3, [pc, #88]	; (8003b94 <pvPortMalloc+0x180>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <pvPortMalloc+0x188>)
 8003b40:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <pvPortMalloc+0x17c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <pvPortMalloc+0x18c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	4a10      	ldr	r2, [pc, #64]	; (8003ba0 <pvPortMalloc+0x18c>)
 8003b5e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003b60:	f7fe fd68 	bl	8002634 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <pvPortMalloc+0x16e>
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	e7fe      	b.n	8003b80 <pvPortMalloc+0x16c>
    return pvReturn;
 8003b82:	69fb      	ldr	r3, [r7, #28]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3728      	adds	r7, #40	; 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	20012d84 	.word	0x20012d84
 8003b90:	20012d98 	.word	0x20012d98
 8003b94:	20012d88 	.word	0x20012d88
 8003b98:	20012d7c 	.word	0x20012d7c
 8003b9c:	20012d8c 	.word	0x20012d8c
 8003ba0:	20012d90 	.word	0x20012d90

08003ba4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d04b      	beq.n	8003c4e <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003bb6:	2308      	movs	r3, #8
 8003bb8:	425b      	negs	r3, r3
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	4b23      	ldr	r3, [pc, #140]	; (8003c58 <vPortFree+0xb4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d109      	bne.n	8003be6 <vPortFree+0x42>
 8003bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	e7fe      	b.n	8003be4 <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <vPortFree+0x5e>
 8003bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf2:	f383 8811 	msr	BASEPRI, r3
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	e7fe      	b.n	8003c00 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <vPortFree+0xb4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01e      	beq.n	8003c4e <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d11a      	bne.n	8003c4e <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <vPortFree+0xb4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	401a      	ands	r2, r3
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003c28:	f7fe fcf6 	bl	8002618 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <vPortFree+0xb8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4413      	add	r3, r2
 8003c36:	4a09      	ldr	r2, [pc, #36]	; (8003c5c <vPortFree+0xb8>)
 8003c38:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c3a:	6938      	ldr	r0, [r7, #16]
 8003c3c:	f000 f874 	bl	8003d28 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003c40:	4b07      	ldr	r3, [pc, #28]	; (8003c60 <vPortFree+0xbc>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	4a06      	ldr	r2, [pc, #24]	; (8003c60 <vPortFree+0xbc>)
 8003c48:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003c4a:	f7fe fcf3 	bl	8002634 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003c4e:	bf00      	nop
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20012d98 	.word	0x20012d98
 8003c5c:	20012d88 	.word	0x20012d88
 8003c60:	20012d94 	.word	0x20012d94

08003c64 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c6a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003c6e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003c70:	4b27      	ldr	r3, [pc, #156]	; (8003d10 <prvHeapInit+0xac>)
 8003c72:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00c      	beq.n	8003c98 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3307      	adds	r3, #7
 8003c82:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0307 	bic.w	r3, r3, #7
 8003c8a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	4a1f      	ldr	r2, [pc, #124]	; (8003d10 <prvHeapInit+0xac>)
 8003c94:	4413      	add	r3, r2
 8003c96:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c9c:	4a1d      	ldr	r2, [pc, #116]	; (8003d14 <prvHeapInit+0xb0>)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003ca2:	4b1c      	ldr	r3, [pc, #112]	; (8003d14 <prvHeapInit+0xb0>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	4413      	add	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003cb0:	2208      	movs	r2, #8
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0307 	bic.w	r3, r3, #7
 8003cbe:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4a15      	ldr	r2, [pc, #84]	; (8003d18 <prvHeapInit+0xb4>)
 8003cc4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003cc6:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <prvHeapInit+0xb4>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003cce:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <prvHeapInit+0xb4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	1ad2      	subs	r2, r2, r3
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <prvHeapInit+0xb4>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <prvHeapInit+0xb8>)
 8003cf2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <prvHeapInit+0xbc>)
 8003cfa:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003cfc:	4b09      	ldr	r3, [pc, #36]	; (8003d24 <prvHeapInit+0xc0>)
 8003cfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d02:	601a      	str	r2, [r3, #0]
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	2000017c 	.word	0x2000017c
 8003d14:	20012d7c 	.word	0x20012d7c
 8003d18:	20012d84 	.word	0x20012d84
 8003d1c:	20012d8c 	.word	0x20012d8c
 8003d20:	20012d88 	.word	0x20012d88
 8003d24:	20012d98 	.word	0x20012d98

08003d28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d30:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <prvInsertBlockIntoFreeList+0xac>)
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	e002      	b.n	8003d3c <prvInsertBlockIntoFreeList+0x14>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d8f7      	bhi.n	8003d36 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	4413      	add	r3, r2
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d108      	bne.n	8003d6a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	441a      	add	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	441a      	add	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d118      	bne.n	8003db0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d00d      	beq.n	8003da6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	441a      	add	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	e008      	b.n	8003db8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003da6:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <prvInsertBlockIntoFreeList+0xb0>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	e003      	b.n	8003db8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d002      	beq.n	8003dc6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003dc6:	bf00      	nop
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	20012d7c 	.word	0x20012d7c
 8003dd8:	20012d84 	.word	0x20012d84

08003ddc <__libc_init_array>:
 8003ddc:	b570      	push	{r4, r5, r6, lr}
 8003dde:	4e0d      	ldr	r6, [pc, #52]	; (8003e14 <__libc_init_array+0x38>)
 8003de0:	4c0d      	ldr	r4, [pc, #52]	; (8003e18 <__libc_init_array+0x3c>)
 8003de2:	1ba4      	subs	r4, r4, r6
 8003de4:	10a4      	asrs	r4, r4, #2
 8003de6:	2500      	movs	r5, #0
 8003de8:	42a5      	cmp	r5, r4
 8003dea:	d109      	bne.n	8003e00 <__libc_init_array+0x24>
 8003dec:	4e0b      	ldr	r6, [pc, #44]	; (8003e1c <__libc_init_array+0x40>)
 8003dee:	4c0c      	ldr	r4, [pc, #48]	; (8003e20 <__libc_init_array+0x44>)
 8003df0:	f000 f82c 	bl	8003e4c <_init>
 8003df4:	1ba4      	subs	r4, r4, r6
 8003df6:	10a4      	asrs	r4, r4, #2
 8003df8:	2500      	movs	r5, #0
 8003dfa:	42a5      	cmp	r5, r4
 8003dfc:	d105      	bne.n	8003e0a <__libc_init_array+0x2e>
 8003dfe:	bd70      	pop	{r4, r5, r6, pc}
 8003e00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e04:	4798      	blx	r3
 8003e06:	3501      	adds	r5, #1
 8003e08:	e7ee      	b.n	8003de8 <__libc_init_array+0xc>
 8003e0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e0e:	4798      	blx	r3
 8003e10:	3501      	adds	r5, #1
 8003e12:	e7f2      	b.n	8003dfa <__libc_init_array+0x1e>
 8003e14:	08003eac 	.word	0x08003eac
 8003e18:	08003eac 	.word	0x08003eac
 8003e1c:	08003eac 	.word	0x08003eac
 8003e20:	08003eb0 	.word	0x08003eb0

08003e24 <memcpy>:
 8003e24:	b510      	push	{r4, lr}
 8003e26:	1e43      	subs	r3, r0, #1
 8003e28:	440a      	add	r2, r1
 8003e2a:	4291      	cmp	r1, r2
 8003e2c:	d100      	bne.n	8003e30 <memcpy+0xc>
 8003e2e:	bd10      	pop	{r4, pc}
 8003e30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e38:	e7f7      	b.n	8003e2a <memcpy+0x6>

08003e3a <memset>:
 8003e3a:	4402      	add	r2, r0
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d100      	bne.n	8003e44 <memset+0xa>
 8003e42:	4770      	bx	lr
 8003e44:	f803 1b01 	strb.w	r1, [r3], #1
 8003e48:	e7f9      	b.n	8003e3e <memset+0x4>
	...

08003e4c <_init>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	bf00      	nop
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr

08003e58 <_fini>:
 8003e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5a:	bf00      	nop
 8003e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5e:	bc08      	pop	{r3}
 8003e60:	469e      	mov	lr, r3
 8003e62:	4770      	bx	lr
